/*
Copyright (c) 2014, American Institutes for Research. All rights reserved.
GENERATED: 7/25/2014 2:03:40 PM
MACHINE: DC1KHANMOLT
*/

// FILE: content_manager.js (503b601f) 5/2/2014 12:55:57 PM

var ContentManager = {
_pages: new Util.Structs.Map(),
_currentPage: null,
_contextHandlerMap: {},
_events: new Util.EventManager(ContentManager),
_contentEvents: new Util.EventManager(ContentManager),
accessibilityEnabled: false,
enableKeyEvents: true,
enableMouseEvents: true,
enableARIA: false,
_readOnly: false,
_debug: true
};
ContentManager.Modules = {};
ContentManager.setReadOnly = function(value) {
this._readOnly = value;
};
ContentManager.isReadOnly = function() {
return this._readOnly;
};
ContentManager._baseUrl = '';
ContentManager.getBaseUrl = function () {
return this._baseUrl;
};
ContentManager.setBaseUrl = function (baseUrl) {
this._baseUrl = baseUrl;
};
ContentManager.resolveBaseUrl = function(url) {
if (Util.String.isHttpProtocol(url)) {
return url;
}
return this._baseUrl + url;
};
ContentManager.enableAccessibility = function() {
this.accessibilityEnabled = true;
this.enableKeyEvents = false;
this.enableMouseEvents = false;
this.enableARIA = true;
};
ContentManager.isAccessibilityEnabled = function() {
return this.accessibilityEnabled;
};
ContentManager.init = function (baseUrl) {
if (YAHOO.lang.isString(baseUrl)) {
ContentManager.setBaseUrl(baseUrl);
}
ContentManager.addKeyEvents(document);
if (window != parent) {
try {
ContentManager.addKeyEvents(parent.document);
ContentManager.Menu.applyDocFix(parent);
} catch (ex) {
}
}
if (this.enableKeyEvents || this.enableMouseEvents) {
ContentManager.Menu.init();
}
if (Util.Browser.isTouchDevice()) {
ContentManager.listenForFocus(document);
}
ContentManager.fireEvent('init');
};
ContentManager.getAccommodations = function() {
return Accommodations.Manager.getDefault();
};
ContentManager.getAccs = ContentManager.getAccommodations;
ContentManager.getAccommodationProperties = function() {
var accommodations = this.getAccommodations();
return new Accommodations.Properties(accommodations);
};
ContentManager.getAccProps = ContentManager.getAccommodationProperties;
ContentManager.getLanguage = function() {
var accProps = this.getAccommodationProperties();
var language = accProps.getSelectedCode('Language');
return (language) ? language : 'ENU';
};
ContentManager.getPages = function() {
return this._pages.getValues();
};
ContentManager.getPage = function(id) {
return this._pages.get(id);
};
ContentManager.setCurrentPage = function(page) {
this._currentPage = page;
};
ContentManager.getCurrentPage = function() {
return this._currentPage;
};
ContentManager.createPage = function (content) {
if (!YAHOO.lang.isObject(content) || !YAHOO.lang.isString(content.id)) {
return null;
}
var existingPage = ContentManager.getPage(content.id);
if (existingPage) {
return existingPage;
}
var page = new ContentPage(content);
ContentManager._pages.set(content.id, page);
ContentManager.firePageEvent('init', page, [content], false);
if (content.passage) {
var passage = ContentManager._createPassage(page, content.passage);
ContentManager.fireEntityEvent('init', passage, [content.passage]);
}
Util.Array.each(content.items, function(itsItem) {
var item = ContentManager._createItem(page, itsItem);
ContentManager.fireEntityEvent('init', item, [itsItem]);
});
return page;
};
ContentManager._createPassage = function (page, itsPassage) {
var passage = new ContentPassage(page, itsPassage.bankKey, itsPassage.itemKey, itsPassage.filePath);
page.setPassage(passage);
passage.stemTTS = itsPassage.stemTTS;
passage.printed = itsPassage.printed;
passage.resources = itsPassage.resources;
passage.attachments = itsPassage.attachments;
passage.specs = itsPassage.specs;
return passage;
};
ContentManager._createItem = function (page, itsItem) {
var item = new ContentItem(page, itsItem.bankKey, itsItem.itemKey, itsItem.filePath,
itsItem.format, itsItem.responseType, itsItem.grade, itsItem.subject, itsItem.position);
page.addItem(item);
item.stemTTS = itsItem.stemTTS;
item.illustrationTTS = itsItem.illustrationTTS;
item.rendererSpec = itsItem.rendererSpec || null;
item.gridAnswerSpace = itsItem.gridAnswerSpace;
item.tutorial = itsItem.tutorial;
item.resources = itsItem.resources;
item.attachments = itsItem.attachments;
if (itsItem.resources) {
item.gtr = itsItem.resources['guideToRevision'];
item.coverPage = itsItem.resources['coverPage'];
}
item.value = itsItem.value;
item.printed = itsItem.printed;
item.rubric = itsItem.rubric;
if (itsItem.qti) {
item.qti = itsItem.qti;
}
item.specs = itsItem.specs;
return item;
};
ContentManager._processPage = function (page) {
var pageDoc = page.getDoc(),
pageWin = page.getWin();
if (pageWin.__tds_processed) {
return;
}
ContentManager.Menu.applyDocFix(pageDoc);
ContentManager.addKeyEvents(pageDoc);
Util.Dom.stopDragEvents(pageDoc);
Util.Dom.stopAllEvents(pageDoc, 'contextmenu');
YUE.on(pageDoc, 'mousedown', function (ev) {
if (ev.button == 1) {
YUE.stopEvent(ev);
}
});
pageWin.__tds_processed = true;
};
ContentManager.getItem = function (position) {
var pages = this.getPages();
for (var i = 0; i < pages.length; i++) {
var page = pages[i];
var item = page.getItem(position);
if (item) {
return item;
}
}
return null;
};
ContentManager.setItemCompleted = function(item) {
if (item == null) {
return;
}
ContentManager.fireEntityEvent('completed', item);
var page = item.getPage();
var items = page.getItems();
if (items.length == 1) {
ContentManager.firePageEvent('completed', page);
}
};
ContentManager.removePage = function (page) {
if (page.isShowing()) {
page.hide();
}
ContentManager.Renderer.removePage(page);
this._pages.remove(page.id);
page.dispose();
};
ContentManager.onEvent = function(name, callback, cancellable) {
this._events.subscribe(name, callback, null, cancellable);
};
ContentManager.onPageEvent = function(name, callback, cancellable) {
this._contentEvents.subscribe('page' + name, callback, null, cancellable);
};
ContentManager.onEntityEvent = function(name, callback) {
this._contentEvents.subscribe('entity' + name, callback);
};
ContentManager.onItemEvent = function(name, callback) {
this._contentEvents.subscribe('item' + name, callback);
};
ContentManager.onPassageEvent = function(name, callback) {
this._contentEvents.subscribe('passage' + name, callback);
};
ContentManager.onComponentEvent = function(name, callback) {
this._contentEvents.subscribe('component' + name, callback);
};
ContentManager.fireEvent = function(name, args) {
var ret = this._events.notify(name, args);
return ret;
};
ContentManager.firePageEvent = function (name, page, args, fireEntityEvents) {
if (YLang.isString(page)) {
page = ContentManager.getPage(page);
}
if (!(page instanceof ContentPage)) {
return null;
}
var pageArgs = [page].concat(args || []);
var ret = this._contentEvents.notify('page' + name, pageArgs);
if (fireEntityEvents === true && ret !== false) {
var passage = page.getPassage();
if (passage) {
this.fireEntityEvent(name, passage, args);
}
var items = page.getItems();
for (var i = 0; i < items.length; i++) {
this.fireEntityEvent(name, items[i], args);
}
}
return ret;
};
ContentManager.fireEntityEvent = function (name, entity, args) {
var unsupported = (entity instanceof ContentItem && entity.isSupported() === false);
if (unsupported && name != 'unsupported') {
return;
}
var page = entity.getPage();
var entityArgs = [page, entity].concat(args || []);
this._contentEvents.notify('entity' + name, entityArgs);
if (entity instanceof ContentItem) {
this._contentEvents.notify('item' + name, entityArgs);
} else if (entity instanceof ContentPassage) {
this._contentEvents.notify('passage' + name, entityArgs);
}
};
ContentManager.fireComponentEvent = function(name, entity, component, args) {
var page = entity.getPage();
var componentArgs = [page, entity, component].concat(args || []);
this._contentEvents.notify('component' + name, componentArgs);
};
(function(CM) {
var lookup = {};
CM.registerResponseHandler = function(responseType, callbackGet, callbackSet) {
lookup[responseType.toLowerCase()] = {
getter: callbackGet,
setter: callbackSet
};
};
CM.getResponseHandler = function(responseType) {
return lookup[responseType.toLowerCase()];
};
CM.getResponseHandlers = function() {
return Util.Object.getValues(lookup);
};
CM.removeResponseHandler = function(responseType) {
return Util.Object.remove(lookup, responseType);
};
CM.removeResponseHandlers = function() {
var responseTypes = Util.Object.keys(lookup);
for (var i = 0; i < responseTypes.length; i++) {
CM.removeResponseHandler(responseTypes[i]);
}
};
})(ContentManager);
(function(CM) {
var lookup = {};
CM.registerSupportHandler = function(responseType, check) {
lookup[responseType.toLowerCase()] = check;
};
CM.getSupportHandler = function(responseType) {
return lookup[responseType.toLowerCase()];
};
CM.getSupportHandlers = function() {
return Util.Object.getValues(lookup);
};
CM.removeSupportHandler = function(responseType) {
return Util.Object.remove(lookup, responseType);
};
CM.removeSupportHandlers = function() {
var responseTypes = Util.Object.keys(lookup);
for (var i = 0; i < responseTypes.length; i++) {
CM.removeSupportHandler(responseTypes[i]);
}
};
})(ContentManager);
ContentManager.addMouseEvents = function (entity, element) {
if (!this.enableMouseEvents) {
return false;
}
if (element == null) {
return false;
}
if (element.__tds_mouseEventsEnabled === true) {
return false;
}
var page = entity.getPage();
var activeElementEvent = Util.Browser.isIOS() ? 'touchstart' : 'mousedown';
YUE.on(element, activeElementEvent, function (evt) {
entity.setActive(evt);
var target = YUE.getTarget(evt);
var clickedComponent = entity.findComponent(target);
if (clickedComponent) {
entity.setActiveComponent(clickedComponent);
}
else if (entity.getActiveComponent() == null) {
entity.resetComponent();
}
}, this, true);
var fireMouseEvent = function (evt) {
this.firePageEvent('mouseevent', page, [evt], false);
this.fireEntityEvent('mouseevent', entity, [evt]);
if (Util.Browser.isSecure() && Util.Browser.isMac()) {
if (evt.type == 'mousedown' && evt.button == 2) {
setTimeout(function() {
ContentManager.Menu.show(evt);
}, 0);
}
} else if (evt.type == 'contextmenu') {
ContentManager.Menu.show(evt);
}
};
YUE.on(element, 'mousedown', fireMouseEvent, this, true);
YUE.on(element, 'mouseup', fireMouseEvent, this, true);
YUE.on(element, 'contextmenu', fireMouseEvent, this, true);
element.__tds_mouseEventsEnabled = true;
return true;
};
ContentManager.getEventXY = function(domEvent, clickXY) {
var element = YUE.getTarget(domEvent);
if (!clickXY) {
clickXY = YUE.getXY(domEvent);
}
while (Util.Dom.getWindow(element.ownerDocument).frameElement &&
!Util.Dom.getWindow(element.ownerDocument).its) {
element = Util.Dom.getWindow(element.ownerDocument).frameElement;
var elementXY = YUD.getXY(element);
clickXY[0] = clickXY[0] + elementXY[0];
clickXY[1] = clickXY[1] + elementXY[1];
}
return clickXY;
};
ContentManager.getJavaString = function(value) {
if (value != null && typeof (value) == 'object') {
value = new String(value).toString();
}
return value;
};
ContentManager.resetActiveComponent = function() {
var page = ContentManager.getCurrentPage();
if (page) {
var entity = page.getActiveEntity();
if (entity instanceof ContentItem) {
entity.resetComponent();
}
}
};
ContentManager.enableCaretMode = function(enable) {
var enabled = Mozilla.enableCaretMode(enable);
if (enabled) {
var entity = ContentManager.getCurrentPage().getActiveEntity();
entity.resetCaretPosition();
}
};
ContentManager.focus = function(obj) {
if (ContentManager.enableARIA) {
return false;
}
return Util.Dom.focus(obj);
};
ContentManager.blur = function(obj) {
if (ContentManager.enableARIA) {
return false;
}
return Util.Dom.blur(obj);
};
ContentManager.preventFocus = function(el) {
YUE.onFocus(el, function() {
ContentManager.blur(el);
});
};
ContentManager.isLinkClickable = function(link) {
var mediaType = link.getAttribute('type');
if (mediaType == null) {
return false;
}
var supportedMediaTypes = ['application/rtf', 'application/pdf'];
return (supportedMediaTypes.indexOf(mediaType) != -1);
};
ContentManager.getAncestor = Util.Dom.getAncestor;
ContentManager.isElement = Util.Dom.isElement;
ContentManager.isVisible = Util.Dom.isVisible;
ContentManager.CSS = {
CONTEXT_AREA: 'contextArea',
CONTEXT_AREA_ALT: 'contextArea-hasalt',
CONTEXT_AREA_FOCUS: 'contextArea-focused',
CONTEXT_BODY_FOCUS: 'contextBody-focused',
CONTEXT_AREA_SELECT: 'contextArea-selected',
CONTEXT_BODY_SELECT: 'contextBody-selected',
MARK_REVIEW_OFF: 'markReview',
MARK_REVIEW_ON: 'markReviewMarked',
HIGHLIGHT: 'highlight'
};
ContentManager._labels = {};
ContentManager._labels['TTS_SPEAKTEXT'] = { classname: 'speaktext', text: 'TDSContentJS.Label.SpeakSelected' };
ContentManager._labels['TTS_SPEAKSECTION'] = { classname: 'speaksection', text: 'Speak {title}' };
ContentManager._labels['TTS_SPEAKSECTION_ALT'] = { classname: 'speaksection', text: 'Speak {title}' };
ContentManager._labels['TTS_STOP'] = { classname: 'speakstop', text: 'TDSContentJS.Label.StopSpeaking' };
ContentManager._labels['HIGHLIGHT_TEXT'] = { classname: 'highlighttext', text: 'TDSContentJS.Label.Highlight' };
ContentManager._labels['HIGHLIGHT_CLEAR'] = { classname: 'highlightclear', text: 'TDSContentJS.Label.ResetHighlight' };
ContentManager.getLabel = function(id) {
var label = ContentManager._labels[id.toUpperCase()];
if (label) {
return { classname: label.classname, text: Messages.get(label.text) };
}
return null;
};
ContentManager.getCommentCode = function() {
var accProps = Accommodations.Manager.getCurrentProperties();
return accProps.getStudentComments();
};
ContentManager.getCommentLabel = function() {
var commentCode = ContentManager.getCommentCode();
var label = 'Comments';
if (commentCode == 'TDS_SCDropDown') {
label = Messages.getAlt('TestShell.Comments.DropDown', 'Comments');
} else if (commentCode == 'TDS_SCNotepad') {
label = Messages.getAlt('TestShell.Comments.Notepad', 'Notepad');
} else if (commentCode == 'TDS_SCTextArea') {
label = Messages.getAlt('TestShell.Comments.TextArea', 'Comments');
}
return label;
};
ContentManager.isDialogShowing = function() {
return YUD.hasClass(document.body, 'showingLoading') ||
YUD.hasClass(document.body, 'showingDialog');
};
ContentManager.log = function(message) {
if (typeof Util == 'object') {
Util.log(message);
}
else if (typeof console == 'object') {
console.log(message);
}
};
ContentManager.requiresSelectionFix = function() {
return (Util.Browser.isMac() &&
Util.Browser.getSecureVersion() > 0 &&
Util.Browser.getSecureVersion() < 4.0);
};
ContentManager.fixItemFrame = function (item, win, doc) {
ContentManager.Menu.applyDocFix(win);
ContentManager.addMouseEvents(item, doc);
ContentManager.addKeyEvents(doc);
Util.Dom.stopAllEvents(doc, 'contextmenu');
if (ContentManager.requiresSelectionFix()) {
YUE.addListener(doc, 'mousedown', function(e) {
ContentManager.focus(top);
});
YUE.addListener(doc, 'mouseup', function(e) {
ContentManager.focus(win);
});
}
var page = item.getPage();
var pageAccommodations = page.getAccommodations();
pageAccommodations.applyCSS(doc.body);
var zoom = page.getZoom();
zoom.addDocument(doc);
zoom.refresh();
};
ContentManager.setReadOnlyKeyEvent = function(item, input) {
var readOnlyFunc = function(evt) {
if (item.isReadOnly()) {
YUE.stopEvent(evt);
}
};
YUE.on(input, 'keypress', readOnlyFunc);
YUE.on(input, 'mousedown', readOnlyFunc);
};
ContentManager.createRange = function(doc) {
if (typeof window.rangy == 'object') {
try {
return window.rangy.createRange(doc);
} catch (ex) {
}
}
return null;
};
ContentManager.getSelection = function(doc) {
if (typeof window.rangy == 'object') {
try {
return window.rangy.getSelection(doc);
} catch (ex) {
}
}
return null;
};
ContentManager.applyRedrawFix = function() {
setTimeout(function() {
YUD.addClass(document.body, 'forceRedraw');
setTimeout(function() {
YUD.removeClass(document.body, 'forceRedraw');
}, 0);
}, 0);
};
ContentManager.listenForFocus = function(doc) {
var focused = false;
var setFocused = function() {
YUD.addClass(document.body, 'inputFocus');
focused = true;
};
var setBlurred = function() {
YUD.removeClass(document.body, 'inputFocus');
focused = false;
};
YUE.onFocus(doc, function(ev) {
if (Util.Event.inTextInput(ev)) {
var targetEl = YUE.getTarget(ev);
if (YUD.getAttribute(targetEl, 'autocorrect') != 'off') {
YUD.setAttribute(targetEl, 'autocorrect', 'off');
YUD.setAttribute(targetEl, 'autocapitalize', 'off');
YUD.setAttribute(targetEl, 'autocomplete', 'off');
}
ContentManager.applyRedrawFix();
setFocused();
}
});
YUE.onBlur(doc, function(ev) {
setBlurred();
});
var win = Util.Dom.getWindow(doc);
YUE.on(win, 'scroll', function(ev) {
if (focused && !Util.Dom.isTextInput(document.activeElement)) {
setBlurred();
}
});
};
YUD.toggleClass = function(node, className, force) {
var add = (force !== undefined) ? force : !(YUD.hasClass(node, className));
if (add) {
YUD.addClass(node, className);
} else {
YUD.removeClass(node, className);
}
};

// FILE: content_page.js (69743fd9) 3/7/2014 11:24:06 AM

var ContentPage = function(content) {
this.id = content.id;
this.segmentID = content.segmentID;
this.layout = content.layout;
this.soundCue = content.soundCue;
this.autoPlayQueue = TDS.Audio.Player.createQueue();
this._html = content.html;
this._container = null;
this._doc = null;
this._passage = null;
this._items = [];
this._itemHash = {};
this._activeEntity = null;
this._zoom = null;
this._lastEntity = null;
this._imagesLoading = [];
this._imagesLoaded = [];
this._imagesFailed = [];
this._imagesAborted = [];
this._imagesTimer = null;
this._imagesRetry = 0;
this._resourceCollection = new ResourceLoader.Collection();
this._status = ContentPage.State.Init;
this._statusNames = {};
this._statusNames[ContentPage.State.Init] = 'init';
this._statusNames[ContentPage.State.Rendering] = 'rendering';
this._statusNames[ContentPage.State.Rendered] = 'rendered';
this._statusNames[ContentPage.State.Available] = 'available';
this._statusNames[ContentPage.State.Loaded] = 'loaded';
this._enableScroll = true;
};
ContentPage.imageTimeout = 90;
ContentPage.imageMaxRetry = 2;
ContentPage.State = {
Init: 0,
Rendering: 1,
Rendered: 2,
Available: 3,
Loaded: 4
};
ContentPage.prototype.getState = function() {
return this._status;
};
ContentPage.prototype.setState = function(newState) {
if (!YAHOO.lang.isNumber(newState) ||
newState < ContentPage.State.Init ||
newState > ContentPage.State.Loaded) {
throw 'Invalid page state';
}
var currentState = this.getState();
var currentStateName = this._statusNames[currentState];
var newStateName = this._statusNames[newState];
if (newStateName == null) {
throw 'No page state name found';
}
var statusError = 'Invalid page state transition (' + currentStateName + ' --> ' + newStateName + ')';
if (newState == ContentPage.State.Init && currentState >= ContentPage.State.Init) {
throw statusError;
} else if (newState == ContentPage.State.Rendering &&
currentState != ContentPage.State.Init) {
throw statusError;
} else if (newState == ContentPage.State.Rendered &&
currentState != ContentPage.State.Rendering) {
throw statusError;
} else if (newState == ContentPage.State.Available &&
currentState != ContentPage.State.Rendered) {
throw statusError;
} else if (newState == ContentPage.State.Loaded &&
currentState != ContentPage.State.Available) {
throw statusError;
}
this._status = newState;
this._log(newStateName);
ContentManager.firePageEvent(newStateName, this, null, true);
};
ContentPage.prototype.getHtml = function() { return this._html; };
ContentPage.prototype.setHtml = function(html) {
if (this.getState() <= ContentPage.State.Rendering) {
this._html = html;
return true;
}
return false;
};
ContentPage.prototype.getContainer = function() {
return this._container;
};
ContentPage.prototype.getDoc = function() {
return this._doc;
};
ContentPage.prototype.getActiveDoc = function() {
var activeEntity = this.getActiveEntity();
if (activeEntity != null) {
var activeComponent = activeEntity.getActiveComponent();
if (activeComponent != null && YAHOO.lang.isFunction(activeComponent.getDoc)) {
return activeComponent.getDoc();
}
}
return this.getDoc();
};
ContentPage.prototype.getBody = function() {
var doc = this.getDoc();
return doc ? doc.body : null;
};
ContentPage.prototype.getForm = function() {
var doc = this.getDoc();
return doc ? doc.forms['contentForm'] : null;
};
ContentPage.prototype.getWin = function() {
var doc = this.getDoc();
return doc ? (doc.parentWindow || doc.defaultView) : null;
};
ContentPage.prototype.getActiveWin = function() {
var activeEntity = this.getActiveEntity();
if (activeEntity != null) {
var activeComponent = activeEntity.getActiveComponent();
if (activeComponent != null && YAHOO.lang.isFunction(activeComponent.getWin)) {
return activeComponent.getWin();
}
}
return this.getWin();
};
ContentPage.prototype.getFrameElement = function() {
var win = this.getWin();
return win ? win.frameElement : null;
};
ContentPage.prototype.getElement = function() {
var doc = this.getDoc();
return doc ? doc.getElementById('Page_' + this.id) : null;
};
ContentPage.prototype.getCompoundElement = function() {
var pageDoc = this.getDoc();
var items = this.getItems();
if (pageDoc && items.length > 0) {
var firstItem = items[0];
return pageDoc.getElementById('compound_' + firstItem.position);
}
return null;
};
ContentPage.prototype.getHeader = function() {
var pageElement = this.getElement();
var headers = pageElement.getElementsByTagName('h3');
if (headers.length > 0) {
return headers[0];
}
return null;
};
ContentPage.prototype.getAccommodations = function() {
return Accommodations.Manager.get(this.segmentID);
};
ContentPage.prototype.getAccs = ContentPage.prototype.getAccommodations;
ContentPage.prototype.getAccommodationProperties = function() {
return Accommodations.Manager.getProperties(this.segmentID);
};
ContentPage.prototype.getAccProps = ContentPage.prototype.getAccommodationProperties;
ContentPage.prototype.zoomIn = function() {
return this._zoom.zoomIn();
};
ContentPage.prototype.zoomOut = function() {
return this._zoom.zoomOut();
};
ContentPage.prototype.getZoom = function() {
return this._zoom;
};
ContentPage.prototype.getZoomFactor = function() {
var zoomInfo = this.getZoom();
return (zoomInfo == null) ? 1 : zoomInfo.levels[zoomInfo.currentLevel].factor;
};
ContentPage.prototype.setPassage = function(passage) {
this._passage = passage;
};
ContentPage.prototype.getPassage = function(visible) {
if (visible && this._passage && !this._passage.isVisible()) {
return null;
}
return this._passage;
};
ContentPage.prototype.addItem = function(item) {
this._items.push(item);
this._itemHash[item.position] = item;
};
ContentPage.prototype.getItems = function(visible) {
var items = this._items.slice(0);
if (visible) {
items = Util.Array.filter(items, function(item) {
return item.isVisible();
});
}
return items;
};
ContentPage.prototype.getItem = function(position) {
return this._itemHash[position];
};
ContentPage.prototype.getEntities = function(visible) {
var entities = this.getItems(visible);
var passage = this.getPassage(visible);
if (passage) {
entities.push(passage);
}
return entities;
};
ContentPage.prototype.getEntitiesIterator = function(visible) {
var entities = this.getEntities(visible);
var iter = Util.Iterator(entities);
iter.jumpTo(this.getActiveEntity());
return iter;
};
ContentPage.prototype.getActiveEntity = function() {
return this._activeEntity;
};
ContentPage.prototype.clearEntity = function() {
var activeEntity = this.getActiveEntity();
if (activeEntity == null) {
return false;
}
activeEntity.clearActive();
return true;
};
ContentPage.prototype.prevEntity = function() {
var items = this.getItems(true);
var currentEntity = this.getActiveEntity();
if (currentEntity == null || currentEntity instanceof ContentPassage) {
currentEntity = items[items.length - 1];
} else {
for (var i = 0; i < items.length; i++) {
var item = items[i];
if (currentEntity == item) {
currentEntity = items[i - 1] || this.getPassage(true) || items[items.length - 1];
break;
}
}
}
if (currentEntity) {
currentEntity.setActive();
return currentEntity;
} else {
return null;
}
};
ContentPage.prototype.nextEntity = function() {
var items = this.getItems(true);
var currentEntity = this.getActiveEntity();
if (currentEntity == null || currentEntity instanceof ContentPassage) {
currentEntity = items[0];
} else {
for (var i = 0; i < items.length; i++) {
var item = items[i];
if (currentEntity == item) {
currentEntity = items[i + 1] || this.getPassage(true) || items[0];
break;
}
}
}
if (currentEntity) {
currentEntity.setActive();
return currentEntity;
} else {
return null;
}
};
ContentPage.prototype.isShowing = function() {
return (this == ContentManager.getCurrentPage());
};
ContentPage.prototype.collapseSelection = function() {
var pageDoc = this.getActiveDoc();
var pageSelection = ContentManager.getSelection(pageDoc);
if (pageSelection && pageSelection.rangeCount > 0) {
pageSelection.collapseToStart();
}
};
ContentPage.prototype.getImages = function() {
var frameDoc = this.getDoc();
var images = [];
for (var i = 0; i < frameDoc.images.length; i++) {
var image = frameDoc.images[i];
if (image.className == 'Image') {
images.push(image);
}
}
return images;
};
ContentPage.prototype.getScrollableElement = function() {
var pageElement = this.getElement();
if (pageElement != null) {
var entity = this.getActiveEntity();
if (this.writing) {
return Util.Dom.getElementByClassName('writeWrap', 'div', pageElement);
}
else if (entity instanceof ContentPassage) {
return entity.getElement();
}
else if (entity instanceof ContentItem) {
return Util.Dom.getElementByClassName('theQuestions', 'div', pageElement);
}
}
return null;
};
ContentPage.prototype.enableScroll = function(){
this._enableScroll = true;
};
ContentPage.prototype.disableScroll = function(){
this._enableScroll = false;
};
ContentPage.prototype.scroll = function(direction) {
var el = this.getScrollableElement();
if (el == null || !this._enableScroll) {
return;
}
switch (direction) {
case 'Up':
el.scrollTop -= 50;
break;
case 'Down':
el.scrollTop += 50;
break;
case 'Left':
el.scrollLeft -= 100;
break;
case 'Right':
el.scrollLeft += 100;
break;
}
};
ContentPage.prototype._log = function(message) {
if (!ContentManager._debug) {
return;
}
ContentManager.log('PAGE ' + this.id + ': ' + message);
};
ContentPage.prototype.toString = function() { return 'Page ' + this.id; };
ContentPage.prototype.render = function() {
if (this.getState() > ContentPage.State.Init) {
return false;
}
YAHOO.lang.later(1, this, function() {
this.setState(ContentPage.State.Rendering);
ContentManager.Renderer.writePage(this);
});
return true;
};
ContentPage.prototype.onRendered = function(pageDoc, pageContainer) {
YUD.addClass(pageDoc.body, 'yui-skin-sam');
YUD.addClass(pageDoc.body, Util.Browser.isTouchDevice() ? 'touch' : 'no-touch');
this._doc = pageDoc;
this._container = pageContainer;
var pageElement = this.getElement();
if (pageElement == null) {
throw new Error('The page element could not be found.');
}
var pageForm = this.getForm();
if (pageForm != null) {
YUE.on(pageForm, 'submit', function(ev) {
YUE.stopEvent(ev);
return false;
});
}
YUD.batch(pageElement.getElementsByTagName('img'), this.addImage, this, true);
this.setState(ContentPage.State.Rendered);
YAHOO.lang.later(1, this, this.onAvailable);
var items = this.getItems();
for (var i = 0; i < items.length; i++) {
var item = items[i];
if (!item.isSupported()) {
ContentManager.fireEntityEvent('unsupported', item);
}
}
};
ContentPage.prototype.onAvailable = function() {
ContentManager._processPage(this);
this._zoom = new ContentZoom(this.getDoc(), null, this);
var pageElement = this.getElement();
this.setState(ContentPage.State.Available);
YUD.batch(pageElement.getElementsByTagName('a'), function(link) {
if (ContentManager.enableARIA === false) {
link.setAttribute('tabindex', '-1');
YUE.on(link, 'mousedown', function(ev) { YUE.stopEvent(ev); });
YUE.on(link, 'mouseup', function(ev) { YUE.stopEvent(ev); });
}
if (!ContentManager.isLinkClickable(link)) {
YUE.on(link, 'click', function(ev) { YUE.stopEvent(ev); });
}
});
if (this._resourceCollection.hasLoaders()) {
this._resourceCollection.subscribe(ResourceLoader.Status.COMPLETE, this.checkLoaded, this);
this._resourceCollection.subscribe(ResourceLoader.Status.ERROR, this.checkLoaded, this);
this._resourceCollection.subscribe(ResourceLoader.Status.ABORT, this.checkLoaded, this);
this._resourceCollection.load();
}
YAHOO.lang.later(1, this, this.checkLoaded);
};
ContentPage.prototype.hide = function() {
if (!this.isShowing()) {
return false;
}
this._log('hide');
this.clearEntity();
var currentPage = ContentManager.getCurrentPage();
if (currentPage == this) {
ContentManager.setCurrentPage(null);
}
var pageContainer = this.getContainer();
if (pageContainer) {
ContentManager.firePageEvent('beforeHide', this, null, true);
ContentManager.Renderer.hide(pageContainer);
} else {
return false;
}
ContentManager.firePageEvent('hide', this, null, true);
return true;
};
ContentPage.prototype.show = function() {
if (this.isShowing()) {
return false;
}
this._log('show');
var currentPage = ContentManager.getCurrentPage();
if (currentPage && currentPage != this) {
currentPage.hide();
}
var pageContainer = this.getContainer();
if (pageContainer == null) {
return false;
}
var cancelShow = ContentManager.firePageEvent('beforeShow', this, null, true);
if (cancelShow === false) {
return false;
}
ContentManager.Renderer.show(pageContainer);
ContentManager.setCurrentPage(this);
var activeEntity = null;
if (this._lastEntity != null) {
activeEntity = this._lastEntity;
} else {
var items = this.getItems(true);
var passage = this.getPassage(true);
if (items.length > 0) {
activeEntity = items[0];
}
else if (passage) {
activeEntity = passage;
}
}
if (activeEntity) {
activeEntity.setActive(null, true);
}
YAHOO.lang.later(1, this, function() {
ContentManager.firePageEvent('show', this, null, true);
});
return true;
};
ContentPage.prototype.checkLoaded = function() {
if (this._imagesLoading.length > 0) {
return;
}
if (this._imagesTimer != null) {
this._imagesTimer.cancel();
this._imagesTimer = null;
}
if (this._resourceCollection.hasLoaders() &&
this._resourceCollection.getStatus() == ResourceLoader.Status.LOADING) {
return;
}
if (this.getState() == ContentPage.State.Available) {
this.setState(ContentPage.State.Loaded);
}
};
ContentPage.prototype.getResourceLoaders = function() { return this._resourceCollection; };
ContentPage.prototype.addResourceLoader = function(resource) {
this._resourceCollection.add(resource);
};
ContentPage.prototype.getImagesLoading = function() { return this._imagesLoading; };
ContentPage.prototype.getImagesLoaded = function() { return this._imagesLoaded; };
ContentPage.prototype.getImagesFailed = function() { return this._imagesFailed; };
ContentPage.prototype.getImagesAborted = function() { return this._imagesAborted; };
ContentPage.prototype.addImage = function(image) {
if (image.id == '') {
image.id = YUD.generateId();
}
this._imagesLoading.push(image);
var loadEvent = YAHOO.env.ua.ie ? 'readystatechange' : 'load';
YUE.addListener(image, loadEvent, this._onImageEvent, image, this);
YUE.addListener(image, 'abort', this._onImageEvent, image, this);
YUE.addListener(image, 'error', this._onImageEvent, image, this);
image.dateRequested = Util.Date.now();
this._startImageTimer();
};
ContentPage.prototype._startImageTimer = function() {
if (this._imagesTimer != null) {
this._imagesTimer.cancel();
}
this._imagesTimer = YAHOO.lang.later((ContentPage.imageTimeout * 1000), this, this._onImagesTimeout);
};
ContentPage.prototype._onImagesTimeout = function() {
Util.log('image timeout');
if (this._imagesRetry < ContentPage.imageMaxRetry) {
this._imagesRetry++;
Util.Array.each(this._imagesLoading, function(image) {
image.src = image.src;
image.dateRequested = Util.Date.now();
});
this._startImageTimer();
} else {
Util.Array.each(this._imagesLoading, function(image) {
var evt = { type: 'abort' };
this._onImageEvent(evt, image);
}, this);
}
};
ContentPage.prototype._onImageEvent = function(evt, image) {
if (!Util.Array.contains(this._imagesLoading, image)) {
return;
}
if (evt.type == 'readystatechange') {
if (image.readyState == 'complete') {
evt = { type: 'load' };
} else {
return;
}
}
if (typeof image.naturalWidth == 'undefined') {
if (evt.type == 'load') {
image.naturalWidth = image.width;
image.naturalHeight = image.height;
} else {
image.naturalWidth = 0;
image.naturalHeight = 0;
}
}
var loadEvent = YAHOO.env.ua.ie ? 'readystatechange' : 'load';
YUE.removeListener(image, loadEvent, this._onImageEvent);
YUE.removeListener(image, 'abort', this._onImageEvent);
YUE.removeListener(image, 'error', this._onImageEvent);
Util.Array.remove(this._imagesLoading, image);
if (evt.type == 'load') {
this._imagesLoaded.push(image);
} else if (evt.type == 'abort') {
this._imagesAborted.push(image);
} else {
this._imagesFailed.push(image);
}
image.dateCompleted = Util.Date.now();
this.checkLoaded();
};
ContentPage.prototype.fireEvent = function(name, args, fireEntityEvents) {
this._events.notify(name, args);
if (fireEntityEvents) {
if (page.passage) {
this.fireEntityEvent(name, page.passage, args);
}
var items = page.getItems();
for (var i = 0; i < items.length; i++) {
this.fireEntityEvent(name, items[i], args);
}
}
};
ContentPage.prototype.dispose = function() {
if (this._passage) {
this._passage.dispose();
delete this._passage;
}
if (this._items) {
for (var i = 0; i < this._items.length; i++) {
this._items[i].dispose();
delete this._items[i];
}
}
this._items = null;
this._itemHash = null;
this.id = null;
this.segmentID = null;
this.layout = null;
this.soundCue = null;
this._html = null;
this._container = null;
this._doc = null;
this._activeEntity = null;
this._zoom = null;
this._lastEntity = null;
this._imagesLoading = null;
this._imagesLoaded = null;
this._imagesFailed = null;
this._imagesAborted = null;
this._imagesTimer = null;
this._imagesRetry = null;
};

// FILE: content_entity.js (fb36bcd3) 3/7/2014 11:24:06 AM

var ContentEntity = function(page, bankKey, itemKey, filePath) {
this._page = page;
this.bankKey = bankKey;
this.itemKey = itemKey;
this.filePath = filePath;
this.audioLinks = [];
this.printed = false;
this._components = [];
this._activeComponent = null;
this.init();
};
ContentEntity.prototype.init = function() {};
ContentEntity.prototype.getElement = function() {
return null;
};
ContentEntity.prototype.getText = function() {
var el = this.getElement();
if (el) {
var text = Util.Dom.getTextContent(el);
text = YAHOO.lang.trim(text);
return text;
}
return '';
};
ContentEntity.prototype.isEmpty = function() {
return (this.getText().length == 0);
};
ContentEntity.prototype.getPage = function() {
return this._page;
};
ContentEntity.prototype.getResource = function(type) {
return (this.resources) ? this.resources[type] : null;
};
ContentEntity.prototype.isVisible = function() {
var element = this.getElement();
return Util.Dom.isVisible(element);
};
ContentEntity.prototype.isActive = function() {
return this == this._page._activeEntity;
};
ContentEntity.prototype.clearActive = function() {
var activeEntity = this._page.getActiveEntity();
if (activeEntity && activeEntity == this) {
this._log('blur entity');
var element = activeEntity.getElement();
ContentManager.blur(element);
this._page._activeEntity = null;
ContentManager.fireEntityEvent('blur', this);
return true;
}
return false;
};
ContentEntity.prototype.setActive = function(domEvent, force)
{
var activeEntity = this._page.getActiveEntity() || null;
if (!force && this == activeEntity) {
return false;
}
this._page.clearEntity();
this._log('focus entity');
this._page._activeEntity = this;
this._page._lastEntity = this;
this.focus();
if (typeof(domEvent) == 'undefined') {
this.scrollTo();
}
ContentManager.fireEntityEvent('focus', this              , activeEntity               );
return true;
};
ContentEntity.prototype.focus = function() {
var entityElement = this.getElement();
ContentManager.focus(entityElement);
};
ContentEntity.prototype.scrollTo = function() {
var element = this.getElement();
element.scrollIntoView(false);
};
ContentEntity.prototype.addComponent = function(element) {
if (element == null) {
return false;
}
this._components.push(element);
return true;
};
ContentEntity.prototype.getComponents = function(visible) {
var components = this._components;
if (visible) {
components = Util.Array.filter(components, function(component) {
if (YAHOO.lang.isFunction(component.isVisible)) {
return component.isVisible();
} else if (Util.Dom.isElement(component)) {
return Util.Dom.isVisible(component);
}
return true;
});
}
return components;
};
ContentEntity.prototype.findComponent = function(element) {
return ContentManager.getAncestor(element, this._components);
};
ContentEntity.prototype.getActiveComponent = function() {
return this._activeComponent;
};
ContentEntity.prototype.setActiveComponent = function(component, force) {
if (!force && this._activeComponent == component) {
return;
}
if (this._activeComponent != null) {
this._log('blur component - \'' + this._activeComponent.id + '\'');
ContentManager.blur(this._activeComponent);
ContentManager.fireComponentEvent('blur', this, this._activeComponent);
this._activeComponent = null;
}
if (component == null) {
return;
}
if (!this.isActive()) {
throw new Error('The entity must have focus before setting a component.');
}
var components = this.getComponents();
var componentFound = false;
for (var i = 0; i < components.length; i++) {
if (component == components[i]) {
componentFound = true;
break;
}
}
if (!componentFound) {
throw new Error('Component not found for this item.');
}
this._activeComponent = component;
this._log('focus component - \'' + this._activeComponent.id + '\'');
if (TDS.Audio.Java.isReady()) {
ContentManager.focus(this.getPage().getWin());
}
ContentManager.focus(this._activeComponent);
ContentManager.fireComponentEvent('focus', this, this._activeComponent);
};
ContentEntity.prototype.prevComponent = function() {
var components = this.getComponents(true);
var focusedComponent = this.getActiveComponent();
if (focusedComponent == null) {
focusedComponent = components[components.length - 1];
} else {
for (var i = 0; i < components.length; i++) {
var component = components[i];
if (component == focusedComponent) {
focusedComponent = components[i - 1] || components[components.length - 1];
break;
}
}
}
this.setActiveComponent(focusedComponent);
return focusedComponent;
};
ContentEntity.prototype.nextComponent = function() {
var components = this.getComponents(true);
var focusedComponent = this.getActiveComponent();
if (focusedComponent == null) {
focusedComponent = components[0];
} else {
for (var i = 0; i < components.length; i++) {
var component = components[i];
if (component == focusedComponent) {
focusedComponent = components[i + 1] || components[0];
break;
}
}
}
this.setActiveComponent(focusedComponent);
return focusedComponent;
};
ContentEntity.prototype.clearComponent = function() {
this.setActiveComponent(null);
};
ContentEntity.prototype.resetComponent = function() {
this.setActiveComponent(this._components[0]);
};
ContentEntity.prototype.resetCaretPosition = function() {
var page = this.getPage();
var pageWin = page.getWin();
var pageDoc = page.getDoc();
var element = this.getActiveComponent();
if (!ContentManager.isElement(element)) {
return false;
}
if (!YUD.inDocument(element, pageDoc)) {
return false;
}
ContentManager.focus(pageWin);
var xPathResult = pageDoc.evaluate(".//text()", element, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
var textNode = null;
for (var i = 0, l = xPathResult.snapshotLength; i < l; i++) {
var node = xPathResult.snapshotItem(i);
var text = node.textContent;
text = text.replace(/\s+/g, ' ');
text = text.replace(/^\s+|\s+$/g, '');
textNode = node;
if (text.length > 0) {
break;
}
}
if (!textNode) {
return false;
}
var selection = pageWin.getSelection();
selection.removeAllRanges();
var range = pageDoc.createRange();
range.setStart(textNode, 0);
range.setEnd(textNode, 0);
selection.addRange(range);
selection.collapseToStart();
return true;
};
ContentEntity.prototype.dispose = function() {
this._activeComponent = null;
if (this._components) {
for (var i = 0; i < this._components.length; i++) {
if (this._components[i].dispose) {
this._components[i].dispose();
}
delete this._components[i];
}
}
this._components = null;
this._page = null;
this.bankKey = null;
this.itemKey = null;
this.audioLinks = null;
};

// FILE: content_passage.js (8e7462cf) 3/7/2014 11:24:06 AM

var ContentPassage = function(page, bankKey, itemKey, filePath) {
ContentPassage.superclass.constructor.call(this, page, bankKey, itemKey, filePath);
};
YAHOO.lang.extend(ContentPassage, ContentEntity);
ContentPassage.prototype.getID = function() {
return 'G-' + this.bankKey + '-' + this.itemKey;
};
ContentPassage.prototype.getElement = function() {
var pageElement = this.getPage().getElement();
return Util.Dom.getElementByClassName('thePassage', 'div', pageElement);
};
ContentPassage.prototype.clearActive = function() {
var itemElement = this.getElement();
YUD.removeClass(itemElement, 'activePassage');
ContentPassage.superclass.clearActive.call(this);
};
ContentPassage.prototype.setActive = function(domEvent, force)
{
var activated = ContentPassage.superclass.setActive.call(this, domEvent, force);
if (activated) {
var element = this.getElement();
YUD.addClass(element, 'activePassage');
}
};
ContentPassage.prototype._log = function(message) {
if (ContentManager._debug) {
ContentManager.log('PASSAGE G-' + this.bankKey + '-' + this.itemKey + ': ' + message);
}
};
ContentPassage.prototype.toString = function() {
return 'Passage G-' + this.bankKey + '-' + this.itemKey;
};

// FILE: content_item.js (5f2665f5) 5/2/2014 12:55:57 PM

var ContentItem = function(page, bankKey, itemKey, filePath, format, responseType, grade, subject, position) {
this.format = format;
this.responseType = responseType;
this.grade = grade;
this.subject = subject;
this.position = position;
this.isDirty = false;
this.value = null;
this.stemTTS = null;
this.illustrationTTS = null;
this.gridAnswerSpace = null;
this.tutorial = null;
this.gtr = null;
this.saveOptions =
{
auto: false,
explicit: false,
implicit: false
};
ContentItem.superclass.constructor.call(this, page, bankKey, itemKey, filePath);
};
YAHOO.lang.extend(ContentItem, ContentEntity);
ContentItem.prototype.getParentPage = function() { return this._page; };
ContentItem.prototype.getID = function() {
return 'I-' + this.bankKey + '-' + this.itemKey;
};
ContentItem.prototype.init = function() {
var format = this.format.toLowerCase();
var type = this.responseType.toLowerCase();
if (type == 'grid' || type == 'simulator' || type == 'scratchpad') {
this.saveOptions.auto = false;
this.saveOptions.implicit = true;
this.saveOptions.explicit = true;
} else if (type == 'microphone') {
this.saveOptions.auto = false;
this.saveOptions.implicit = true;
this.saveOptions.explicit = true;
} else if (format == 'mc' || format == 'si'                    ) {
this.saveOptions.auto = false;
this.saveOptions.implicit = false;
this.saveOptions.explicit = false;
} else if (format == 'eq'                      ) {
this.saveOptions.auto = false;
this.saveOptions.implicit = true;
this.saveOptions.explicit = true;
} else if (format == 'asi'                  ) {
this.saveOptions.auto = false;
this.saveOptions.implicit = true;
this.saveOptions.explicit = false;
} else if (type == 'na') {
this.saveOptions.auto = false;
this.saveOptions.implicit = false;
this.saveOptions.explicit = false;
} else {
this.saveOptions.auto = true;
this.saveOptions.implicit = true;
this.saveOptions.explicit = true;
}
};
ContentItem.prototype.isReadOnly = function() {
return ContentManager.isReadOnly();
};
ContentItem.prototype.isResponseType = function(type) {
return type.toLowerCase() == this.responseType.toLowerCase();
};
ContentItem.prototype.getElement = function() {
var compoundEl = this._page.getCompoundElement();
if (compoundEl) {
return compoundEl;
} else {
var doc = this._page.getDoc();
if (doc) {
return doc.getElementById('Item_' + this.position);
}
}
return null;
};
ContentItem.prototype.getIllustrationElement = function() {
var doc = this._page.getDoc();
return doc ? doc.getElementById('Illustration_' + this.position) : null;
};
ContentItem.prototype.getStemElement = function() {
var doc = this._page.getDoc();
return doc ? doc.getElementById('Stem_' + this.position) : null;
};
ContentItem.prototype.getResponseArea = function() {
var doc = this._page.getDoc();
if (!doc) return null;
var pageEl = this._page.getElement();
if (this.MC) {
var options = this.MC.getOptions();
var optionElements = [];
if (options && options.length > 0) {
for (var i = 0; i < options.length; i++) {
var optionEl = options[i].getElement();
if (optionEl) {
optionElements.push(optionEl);
}
}
}
return optionElements;
}
return null;
};
ContentItem.prototype.getResponse = function() {
var responseHandler = ContentManager.getResponseHandler(this.responseType);
if (responseHandler == null || responseHandler.getter == null) {
return null;
}
var response =
{
value: null,
isSelected: false,
isValid: false,
isAvailable: false
};
responseHandler.getter(this, response);
return response;
};
ContentItem.prototype.setResponse = function(value) {
var responseHandler = ContentManager.getResponseHandler(this.responseType);
if (responseHandler == null || responseHandler.setter == null) {
return false;
}
return responseHandler.setter(this, value);
};
ContentItem.prototype.isSupported = function() {
var supportedHandler = ContentManager.getSupportHandler(this.responseType);
if (typeof supportedHandler == 'function') {
return supportedHandler(this);
}
return true;
};
ContentItem.prototype.clearActive = function() {
var itemElement = this.getElement();
YUD.removeClass(itemElement, 'activeItem');
ContentItem.superclass.clearActive.call(this);
};
ContentItem.prototype.setActive = function(domEvent, force) {
var activated = ContentItem.superclass.setActive.call(this, domEvent, force);
if (activated) {
var element = this.getElement();
YUD.addClass(element, 'activeItem');
}
};
ContentItem.prototype.showFeedback = function() {
var itemEl = this.getElement();
if (itemEl) {
YUD.addClass(itemEl, 'showFeedback');
}
};
ContentItem.prototype.hideFeedback = function() {
var itemEl = this.getElement();
if (itemEl) {
YUD.removeClass(itemEl, 'showFeedback');
}
};
ContentItem.prototype._log = function(message) {
if (ContentManager._debug) {
ContentManager.log('ITEM I-' + this.bankKey + '-' + this.itemKey + ' (' + this.position + '): ' + message);
}
};
ContentItem.prototype.toString = function() {
return 'Item I-' + this.bankKey + '-' + this.itemKey;
};

// FILE: content_item_tools.js (f6be5853) 3/7/2014 11:24:06 AM

ContentItem.prototype.getToolsContainer = function()
{
var itemEl = this.getElement();
return Util.Dom.getElementByClassName('markComment', 'span', itemEl);
};
ContentItem.prototype.hasCommentLink = function()
{
var doc = this._page.getDoc();
var commentLink = doc.getElementById('Item_CommentLink_' + this.position);
return ContentManager.isVisible(commentLink);
};
ContentItem.prototype.toggleComment = function()
{
ContentManager.fireEntityEvent('comment', this);
};
ContentItem.prototype.getMarkLink = function()
{
var doc = this._page.getDoc();
return doc.getElementById('Item_MarkLink_' + this.position);
};
ContentItem.prototype.getMarkCheckBox = function()
{
var doc = this._page.getDoc();
return doc.getElementById('Item_Mark_' + this.position);
};
ContentItem.prototype.hasMarkLink = function()
{
var markLink = this.getMarkLink();
return ContentManager.isVisible(markLink);
};
ContentItem.prototype.isMarked = function()
{
var checkMark = this.getMarkCheckBox();
return (checkMark && checkMark.checked);
};
ContentItem.prototype.toggleMark = function()
{
var markCheck = this.getMarkCheckBox();
if (markCheck == null) return;
if (this.isMarked())
{
markCheck.checked = false;
}
else
{
markCheck.checked = true;
}
this.updateMarkLink();
if (typeof (window.tdsUpdateItemMark) == 'function')
{
window.tdsUpdateItemMark(this.position, markCheck.checked);
}
};
ContentItem.prototype.updateMarkLink = function()
{
var markLink = this.getMarkLink();
if (markLink == null) return;
if (this.isMarked())
{
YUD.removeClass(markLink, 'markReview');
YUD.addClass(markLink, 'markReviewMarked');
markLink.setAttribute('aria-checked', 'true');
}
else
{
YUD.removeClass(markLink, 'markReviewMarked');
YUD.addClass(markLink, 'markReview');
markLink.setAttribute('aria-checked', 'false');
}
};
ContentItem.prototype.getPrintLink = function()
{
var doc = this._page.getDoc();
return doc.getElementById('Item_PrintLink_' + this.position);
};
ContentItem.prototype.hasPrintLink = function()
{
var printLink = this.getPrintLink();
return ContentManager.isVisible(printLink);
};
ContentItem.prototype.print = function()
{
if (typeof (window.tdsItemPrint) == 'function')
{
window.tdsItemPrint(this.position);
}
};
ContentItem.prototype.getHelpLink = function()
{
var doc = this._page.getDoc();
return doc.getElementById('Item_HelpLink_' + this.position);
};
ContentItem.prototype.hasHelpLink = function()
{
var helpLink = this.getHelpLink();
return ContentManager.isVisible(helpLink);
};
ContentItem.prototype.openHelp = function()
{
if (typeof (window.tdsItemResource) == 'function')
{
window.tdsItemResource('help', this.tutorial.bankKey, this.tutorial.itemKey);
}
};
ContentItem.prototype.getGTRLink = function()
{
var doc = this._page.getDoc();
return doc.getElementById('Item_GTRLink_' + this.position);
};
ContentItem.prototype.hasGTRLink = function()
{
var gtrLink = this.getGTRLink();
return ContentManager.isVisible(gtrLink);
};
ContentItem.prototype.openGTR = function()
{
if (typeof (window.tdsItemResource) == 'function')
{
window.tdsItemResource('gtr_' + this.position, this.gtr.bankKey, this.gtr.itemKey);
}
};
ContentItem.prototype.getRemoveResponseLink = function()
{
var itemDoc = this.getParentPage().getDoc();
return itemDoc.getElementById('Item_RemoveResponse_' + this.position);
};
ContentItem.prototype.hasRemoveResponseLink = function()
{
var removeResponseLink = this.getRemoveResponseLink();
return ContentManager.isVisible(removeResponseLink);
};
ContentItem.prototype.addRemoveResponseLink = function()
{
var removeResponseLink = this.getRemoveResponseLink();
if (removeResponseLink != null) return;
var itemDoc = this.getParentPage().getDoc();
removeResponseLink = itemDoc.createElement('a');
removeResponseLink.id = 'Item_RemoveResponse_' + this.position;
YUD.addClass(removeResponseLink, 'removeResponse');
Util.Dom.setTextContent(removeResponseLink, 'Remove Response');
YUD.setStyle(removeResponseLink, 'display', 'block');
YUE.on(removeResponseLink, 'click', function (ev) {
YUE.stopEvent(ev);
});
YUE.on(removeResponseLink, 'click', this.removeResponse, this, true);
var toolsEl = this.getToolsContainer();
if (toolsEl) toolsEl.appendChild(removeResponseLink);
};
ContentItem.prototype.removeResponse = function()
{
if (typeof (window.tdsRemoveResponse) == 'function')
{
window.tdsRemoveResponse(this.position);
}
};
ContentManager.onItemEvent('available', function(page, item)
{
var doc = page.getDoc();
var commentLink = doc.getElementById('Item_CommentLink_' + item.position);
var commentCloseLink = doc.getElementById('Item_CommentCloseLink_' + item.position);
YUE.on(commentLink, 'click', item.toggleComment, item, true);
YUE.on(commentCloseLink, 'click', item.toggleComment, item, true);
var markLink = item.getMarkLink();
YUE.on(markLink, 'click', item.toggleMark, item, true);
item.updateMarkLink();
var printLink = item.getPrintLink();
YUE.on(printLink, 'click', item.print, item, true);
var helpLink = item.getHelpLink();
YUE.on(helpLink, 'click', item.openHelp, item, true);
var gtrLink = item.getGTRLink();
YUE.on(gtrLink, 'click', item.openGTR, item, true);
var accProps = page.getAccommodationProperties();
if (TDS.isProxyLogin && accProps.hasResponseReset())
item.addRemoveResponseLink();
});

// FILE: content_menu.js (cdc08fce) 3/7/2014 11:24:06 AM

ContentManager.Menu =
{
_instance: null
};
ContentManager.Menu.getInstance = function() { return this._instance; };
ContentManager.Menu.init = function()
{
var menuId = "menu_" + Math.random().toString().split('.')[1];
var contextMenu = new YAHOO.widget.ContextMenu(menuId, {
zindex: 1000,
iframe: false,
shadow: false
});
ContentManager.Menu._instance = contextMenu;
contextMenu.showEvent.subscribe(function() {
var body = ContentManager.getCurrentPage().getDoc().body;
YUD.addClass(body, 'contextMenuShowing');
});
contextMenu.beforeHideEvent.subscribe(function() {
if (contextMenu.activeItem &&
contextMenu.activeItem._oAnchor) {
Util.Dom.blur(contextMenu.activeItem._oAnchor);
}
if (document.activeElement &&
YUD.hasClass(document.activeElement, 'yuimenuitemlabel')) {
Util.Dom.blur(document.activeElement);
}
contextMenu.clearActiveItem();
});
contextMenu.hideEvent.subscribe(function() {
var page = ContentManager.getCurrentPage();
if (page == null) return;
var body = page.getDoc().body;
if (body) YUD.removeClass(body, 'contextMenuShowing');
var entity = page.getActiveEntity();
if (entity == null) return;
var pageWin = page.getWin();
ContentManager.focus(pageWin);
try {
ContentManager.fireEntityEvent('menuhide', entity);
}
catch (ex) { }
});
ContentManager.Menu.applyTextSelectionFix(contextMenu);
};
ContentManager.Menu.isShowing = function()
{
return (ContentManager.Menu._instance &&
ContentManager.Menu._instance.cfg.getProperty('visible'));
};
ContentManager.Menu.show = function(evt, menuItems        , menuXY        )
{
if (this._instance == null) return;
if (ContentManager.Menu.hide()) return;
if (menuItems == null && ContentManager.isReadOnly()) return;
var page = ContentManager.getCurrentPage();
if (page == null) return;
var entity = page.getActiveEntity();
if (entity == null) return;
var activeComponent = entity.getActiveComponent();
if (activeComponent == null) return;
if (!menuXY) {
try {
if (YAHOO.lang.isFunction(activeComponent.getXY)) {
menuXY = activeComponent.getXY(evt);
}
else if (evt == null || evt.keyCode) {
menuXY = YUD.getXY(activeComponent);
}
else {
menuXY = ContentManager.getEventXY(evt);
}
}
catch (ex) {
Util.log('showContextMenu: error getting XY - \'' + ex + '\'');
}
}
if (!menuXY) menuXY = [0, 0];
if (menuItems == null)
{
var contentMenu = new ContentMenu();
var pageActiveDoc = page.getActiveDoc();
var pageSelection = ContentManager.getSelection(pageActiveDoc);
ContentManager.fireEntityEvent('menushow', entity, [contentMenu, evt, pageSelection]);
if (contentMenu.cancel) return;
menuItems = contentMenu.getMenuItems();
}
if (menuItems.length == 0) return;
ContentManager.Menu._instance.clearContent();
ContentManager.Menu._instance.contextEventTarget = activeComponent;
var frameXY = [0, 0];
var frameEl = page.getFrameElement();
if (frameEl) frameXY = YUD.getXY(frameEl);
var menuPosition = [menuXY[0] + frameXY[0], menuXY[1] + frameXY[1]];
ContentManager.Menu._instance.cfg.setProperty('xy', menuPosition);
ContentManager.Menu._instance.addItems(menuItems);
Util.Dom.focusWindow();
ContentManager.Menu._instance.render(document.body);
ContentManager.Menu._instance.show();
};
ContentManager.Menu.hide = function()
{
if (ContentManager.Menu._instance && ContentManager.Menu.isShowing())
{
ContentManager.Menu._instance.hide();
return true;
}
return false;
};
ContentManager.Menu.applyDocFix = function(contentDoc)
{
if (document == contentDoc) return;
new YAHOO.widget.Menu('preload');
var docListeners = YAHOO.util.Event.getListeners(document);
if (docListeners == null) return;
var focusBlurAssigned = false;
for (var i = 0; i < docListeners.length; i++)
{
var listener = docListeners[i];
if (listener.obj == YAHOO.widget.MenuManager)
{
YUE.on(contentDoc, listener.type, listener.fn, YAHOO.widget.MenuManager, true);
if (!focusBlurAssigned)
{
YUE.onFocus(contentDoc, listener.fn, YAHOO.widget.MenuManager, true);
YUE.onBlur(contentDoc, listener.fn, YAHOO.widget.MenuManager, true);
focusBlurAssigned = true;
}
}
}
};
ContentManager.Menu.applyTextSelectionFix = function(contextMenu) {
if (YAHOO.env.ua.ie) return;
var makeSelection = function (rangeData) {
var range = document.createRange();
if (range) {
range.setStart(rangeData.anchorNode, rangeData.anchorOffset);
range.setEnd(rangeData.focusNode, rangeData.focusOffset);
var selection = window.getSelection();
if (selection) {
if (selection.removeAllRanges) selection.removeAllRanges();
else if (selection.empty) selection.empty();
selection.addRange(range);
}
}
};
var onFocus = function(type, args, rangeData) {
this.unsubscribe('focus', onFocus);
setTimeout(function() {
try { makeSelection(rangeData); }
catch(ex) {}
}, 0);
};
var onBeforeShow = function() {
if (!ContentManager.Renderer.isDirect()) return;
var selection = window.getSelection(),
rangeData;
if (selection && !selection.isCollapsed) {
rangeData = {
anchorNode: selection.anchorNode,
anchorOffset: selection.anchorOffset,
focusNode: selection.focusNode,
focusOffset: selection.focusOffset
};
this.subscribe('focus', onFocus, rangeData);
}
};
contextMenu.subscribe('beforeShow', onBeforeShow);
};
var ContentMenu = function()
{
this._global = [];
this._entity = [];
this._component = [];
this.cancel = false;
};
ContentMenu.prototype.getMenuItems = function()
{
if (this._component.length > 0) return this._component;
else if (this._entity.length > 0) return this._entity;
else if (this._global.length > 0) return this._global;
return [];
};
ContentMenu.prototype.addMenuItem = function(level, label, fn, disabled, checked, insert)
{
var menuItem;
if (YAHOO.lang.isString(label))
{
menuItem = { text: label };
}
else if (YAHOO.lang.isObject(label))
{
menuItem = label;
}
else return;
if (YAHOO.lang.isFunction(fn))
{
if (YAHOO.env.ua.gecko)
{
var scheduledFunc = function()
{
YAHOO.lang.later(0, this, fn);
};
menuItem.onclick = { fn: scheduledFunc };
}
else
{
menuItem.onclick = { fn: fn };
}
}
if (YAHOO.lang.isBoolean(disabled)) menuItem.disabled = disabled;
if (YAHOO.lang.isBoolean(checked)) menuItem.checked = checked;
var collection = this['_' + level];
if (collection)
{
if (insert) collection.unshift(menuItem);
else collection.push(menuItem);
}
};
ContentMenu.prototype.insertMenuItem = function(level, label, fn, disabled, checked)
{
this.addMenuItem(level, label, fn, disabled, checked, true);
};

// FILE: content_dialog.js (72c599d1) 3/7/2014 11:24:06 AM

(function(CM) {
var currentFrame = null;
var Dialog = {
urlFrame: null,
onBeforeShow: new Util.Event.Custom(),
onShow: new Util.Event.Custom(),
onBeforeHide: new Util.Event.Custom(),
onHide: new Util.Event.Custom(),
onLoad: new Util.Event.Custom()
};
function update() {
if (currentFrame == null ||
currentFrame.loadState != 2) {
return;
}
Util.Dom.copyCSSFrame(currentFrame);
var frameWin = currentFrame.getWindow();
if (frameWin) {
setTimeout(function () { CM.focus(frameWin); }, 0);
}
}
function load(id, bankKey, itemKey) {
var frame = YUD.get(id);
if (frame != null) {
return frame;
}
if (Dialog.urlFrame == null) {
throw new Error('There is no url defined for content dialog frame.');
}
var accProps = Accommodations.Manager.getDefaultProps();
var lang = accProps ? accProps.getLanguage() : 'ENU';
var url = Dialog.urlFrame;
url += '?language=' + lang;
url += '&bankKey=' + bankKey;
url += '&itemKey=' + itemKey;
var dialogsEl = YUD.get('dialogContentFrames');
if (dialogsEl == null) {
dialogsEl = document.createElement('div');
dialogsEl.id = 'dialogContentFrames';
document.body.appendChild(dialogsEl);
}
frame = Util.Frame.create(id, dialogsEl);
frame.load(url);
frame.onLoaded.subscribe(function() {
var frameWin = frame.getWindow();
var frameDoc = frame.getDocument();
if (typeof KeyManager == 'object') {
KeyManager.attachListener(YAHOO.env.ua.gecko ? frameWin : frameDoc);
}
update();
Dialog.onLoad.fire(frame);
});
return frame;
}
Dialog.show = function(id, bankKey, itemKey) {
if (TDS.Audio.isActive()) {
if (window.TestShell) {
TestShell.UI.showWarning(ErrorCodes.get('NavigateAudioPlaying'));
}
return;
}
TTS.getInstance().stop();
CM.Menu.hide();
var frame = load(id, bankKey, itemKey);
Dialog.onBeforeShow.fire(frame);
frame.show();
YUD.addClass('dialogContent', 'enable');
YUE.addListener('dialogContentClose', 'click', Dialog.hide);
currentFrame = frame;
update();
Dialog.onShow.fire(frame);
};
Dialog.hide = function() {
if (currentFrame == null) return;
Dialog.onBeforeHide.fire(currentFrame);
currentFrame.hide();
YUD.removeClass('dialogContent', 'enable');
YUE.purgeElement('dialogContentClose');
Dialog.onHide.fire(currentFrame);
currentFrame = null;
Util.Dom.focusWindow(2);
};
Dialog.isShowing = function() {
return YUD.hasClass('dialogContent', 'enable');
};
Dialog.containsElement = function(el) {
if (!currentFrame || !el || !el.ownerDocument) {
return false;
}
var frameDoc = currentFrame.getDocument();
return (frameDoc == el.ownerDocument);
};
Dialog.onLoad.subscribe(function(frame)
{
var frameWin = frame.getWindow();
var frameDoc = frame.getDocument();
if (frame.id.indexOf('gtr', 0) != -1)
{
var container = frameDoc.getElementById('pageLayout');
YUE.delegate(container, 'click', function(ev, li, container) {
YUD.toggleClass(li, 'checked');
}, 'li');
}
});
CM.Dialog = Dialog;
window.DialogContent = Dialog;
})(ContentManager);
function tdsItemResource(name, bankKey, itemKey)
{
TDS.ToolManager.hideAll();
if (ContentManager.Dialog.isShowing()) {
ContentManager.Dialog.hide();
} else {
var id = name + '_' + bankKey + '_' + itemKey;
ContentManager.Dialog.show(id, bankKey, itemKey);
}
}

// FILE: content_events.js (282f83bf) 3/7/2014 11:24:06 AM

ContentManager.onPageEvent('beforeShow', function(page)
{
var pageAccs = page.getAccommodations();
if (pageAccs != null) {
Accommodations.Manager.updateCSS(page.getBody(), pageAccs.getId());
}
});
ContentManager.onPageEvent('available', function(page)
{
if (page.getPassage() != null) return;
var pageElement = page.getElement();
var passageElement = Util.Dom.getElementByClassName('thePassage', 'div', pageElement);
if (passageElement == null) return;
var firstItem = page.getItems()[0];
var passage = ContentManager._createPassage(page, { bankKey: firstItem.bankKey, itemKey: 0 });
page.setPassage(passage);
});
ContentManager.onPassageEvent('available', function(page, passage)
{
var passageElement = passage.getElement();
if (passageElement != null) passage.addComponent(passageElement);
});
ContentManager.onPassageEvent('available', function(page, passage)
{
var accProps = page.getAccommodationProperties();
if (!accProps || !accProps.showExpandablePassages()) return;
var css_collapsed = 'passage-collapsed';
var css_expanded = 'passage-expanded';
var expandEl = ContentManager.Renderer.isDirect() ?
page.getElement() :
page.getBody();
YUD.addClass(expandEl, css_collapsed);
var expandLink = page.getDoc().createElement('a');
YUD.setAttribute(expandLink, 'href', '#');
YUD.addClass(expandLink, 'expand-collapse-passage');
YUE.on(expandLink, 'click', function(clickEv)
{
YUE.stopEvent(clickEv);
if (YUD.hasClass(expandEl, css_expanded))
{
YUD.removeClass(expandEl, css_expanded);
YUD.addClass(expandEl, css_collapsed);
}
else if (YUD.hasClass(expandEl, css_collapsed))
{
YUD.removeClass(expandEl, css_collapsed);
YUD.addClass(expandEl, css_expanded);
}
});
var passageEl = passage.getElement();
if (passageEl == null) return;
var paddingEl = Util.Dom.getElementByClassName('padding', 'div', passageEl);
if (paddingEl)
{
var paddingChildEl = YUD.getFirstChild(paddingEl);
if (paddingChildEl) YUD.insertBefore(expandLink, paddingChildEl);
else paddingEl.appendChild(expandLink);
}
});
ContentManager.onItemEvent('available', function(page, item)
{
var layoutElements = [];
var stemElement = item.getStemElement();
layoutElements.push(stemElement);
var illustrationElement = item.getIllustrationElement();
if (illustrationElement)
{
YUD.addClass(illustrationElement, 'illustrationContainer');
var illustrationText = Util.Dom.getTextContent(illustrationElement);
illustrationText = YAHOO.lang.trim(illustrationText);
if (illustrationText.length > 0)
{
layoutElements.push(illustrationElement);
}
}
Util.Array.sort(layoutElements, Util.Dom.compareNodeOrder);
Util.Array.each(layoutElements, function(layoutElement)
{
item.addComponent(layoutElement);
});
});
ContentManager.onEntityEvent('focus', function(page, entity)
{
entity.resetComponent();
});
ContentManager.onEntityEvent('blur', function(page, entity)
{
entity.clearComponent();
page.collapseSelection();
});
ContentManager.onComponentEvent('focus', function(page, entity, component)
{
if (ContentManager.isElement(component))
{
YUD.addClass(component, 'contextAreaFocus');
}
});
ContentManager.onComponentEvent('blur', function(page, entity, component)
{
if (ContentManager.isElement(component))
{
YUD.removeClass(component, 'contextAreaFocus');
}
ContentManager.enableCaretMode(false);
});
ContentManager.onPageEvent('show', function(page)
{
var pageContainer = page.getContainer();
if (pageContainer == null || pageContainer.nodeName != 'IFRAME') return;
var pageBody = page.getBody();
if (pageBody == null) return;
YUD.addClass(pageBody, 'forceRedraw');
setTimeout(function()
{
YUD.removeClass(pageBody, 'forceRedraw');
}, 1);
});
ContentManager.onEntityEvent('available', function(page, item)
{
var element = item.getElement();
ContentManager.addMouseEvents(item, element);
});
ContentManager.onItemEvent('unsupported', function(page, item) {
var itemEl = item.getElement();
YUD.addClass(itemEl, 'unsupported');
});
ContentManager.onItemEvent('available', function (page, item) {
var itemEl = item.getElement();
if (itemEl) {
var markCommentEl = Util.Dom.getElementByClassName('markComment', 'span', itemEl);
if (markCommentEl) {
markCommentEl.setAttribute('data-tts-skip', 'true');
}
var posEl = Util.Dom.queryTag('h2', itemEl);
if (posEl && Util.Dom.getTextContent(posEl) == item.position) {
posEl.setAttribute('data-tts-skip', 'true');
}
}
var pageDoc = page.getDoc();
if (pageDoc) {
var commentBoxEl = pageDoc.getElementById('Item_CommentBox_' + item.position);
if (commentBoxEl) {
commentBoxEl.setAttribute('data-tts-skip', 'true');
}
}
});

// FILE: content_keyboard.js (6729b86f) 3/7/2014 11:24:06 AM

ContentManager.addKeyEvents = function(keyEventObj)
{
if (!this.enableKeyEvents) return false;
if (keyEventObj == null) return false;
if (keyEventObj.__tds_keyEventsEnabled === true) return false;
YUE.addListener(keyEventObj, "keydown", this.onKeyEvent, this, true);
YUE.addListener(keyEventObj, "keypress", this.onKeyEvent, this, true);
YUE.addListener(keyEventObj, "keyup", this.onKeyEvent, this, true);
keyEventObj.__tds_keyEventsEnabled = true;
return true;
};
ContentManager.onKeyEvent = function(evt)
{
if (ContentManager.isDialogShowing()) return;
if (evt.ctrlKey && evt.keyCode == 77)
{
YUE.stopEvent(evt);
if (evt.type == 'keydown') {
ContentManager.Menu.show(evt);
}
};
if (ContentManager.Menu.isShowing()) return;
if (ContentManager.isDialogShowing()) return;
if (evt.keyCode == 9) YUE.stopEvent(evt);
var currentPage = ContentManager.getCurrentPage();
if (currentPage == null) return;
var currentEntity = currentPage.getActiveEntity();
if (currentEntity == null) return;
if (!evt.key) {
switch (evt.keyCode) {
case 9:  evt.key = 'Tab'; break;
case 13: evt.key = 'Enter'; break;
case 27: evt.key = 'Esc'; break;
case 32: evt.key = 'Space'; break;
case 37: evt.key = 'Left'; break;
case 38: evt.key = 'Up'; break;
case 39: evt.key = 'Right'; break;
case 40: evt.key = 'Down'; break;
}
}
this.firePageEvent('keyevent', currentPage, [evt], false);
this.fireEntityEvent('keyevent', currentEntity, [evt], false);
};
ContentManager.onPageEvent('keyevent', function(page, evt)
{
if (evt.type != 'keydown') return;
if (evt.key == 'Tab' && !evt.ctrlKey && !evt.altKey)
{
if (evt.shiftKey) page.prevEntity();
else page.nextEntity();
}
});
ContentManager.onEntityEvent('keyevent', function(page, entity, evt)
{
var keyCode = evt.keyCode;
var arrowKeys = (keyCode >= 37 && keyCode <= 40);
if (!arrowKeys) return;
if (Util.Event.hasModifier(evt)) return;
if (Mozilla.inCaretMode()) return;
var target = YAHOO.util.Event.getTarget(evt);
if (Util.Event.inTextInput(evt)) return;
if (Util.Dom.isFormElement(target)) return;
if (target.tagName == 'svg') return;
YUE.stopEvent(evt);
if (evt.type != 'keydown') return;
page.scroll(evt.key);
});
ContentManager.onEntityEvent('keyevent', function(page, entity, evt)
{
if (evt.type != 'keydown') return;
if (Mozilla.inCaretMode())
{
if (evt.key == 'Esc')
{
ContentManager.enableCaretMode(false);
}
return;
}
if (evt.key == 'Tab' && evt.ctrlKey && !evt.altKey)
{
if (evt.shiftKey) entity.prevComponent();
else entity.nextComponent();
YUE.stopEvent(evt);
return;
}
});
(function()
{
var lastRange = null;
ContentManager.onEntityEvent('keyevent', function(page, entity, evt)
{
if (!Mozilla.inCaretMode()) return;
var caretMoveKey = (evt.key == 'Up' || evt.key == 'Down' || evt.key == 'Left' || evt.key == 'Right');
if (!caretMoveKey) return;
var pageWin = entity.getPage().getWin();
var selection = pageWin.getSelection();
var range;
try
{
range = selection.getRangeAt(0);
}
catch (ex) { return; }
if (!range) return;
var activeElement = entity.getActiveComponent();
var startElement = range.startContainer;
var endElement = range.endContainer;
var outOfBounds = (ContentManager.getAncestor(startElement, [activeElement]) == null);
if (!outOfBounds) outOfBounds = (ContentManager.getAncestor(endElement, [activeElement]) == null);
if (outOfBounds)
{
if (!lastRange) return;
try
{
selection.collapseToStart();
selection.removeAllRanges();
selection.addRange(lastRange);
}
catch (ex) { return; }
}
else
{
lastRange = range.cloneRange();
}
});
})();
(function()
{
var needsSelectionFix = (Util.Browser.isMac() && Util.Browser.isSecure() && Util.Browser.getFirefoxVersion() == 2);
if (!needsSelectionFix) return;
var applyfix = function(el)
{
YUD.addClass(el, 'selectionFix');
YUE.on(el, 'focus', function() { top.focus(); });
YUE.on(el, 'mouseover', function() { top.focus(); });
};
ContentManager.onPassageEvent('available', function(page, passage)
{
applyfix(passage.getElement());
});
ContentManager.onItemEvent('available', function(page, item)
{
applyfix(item.getStemElement());
});
})();
ContentManager.onEntityEvent('keyevent', function(page, entity, evt)
{
if (evt.type != 'keyup') return;
if (evt.key == 'Esc')
{
setTimeout(function()
{
var activeComponent = entity.getActiveComponent();
if (activeComponent)
{
entity.setActiveComponent(activeComponent, true);
}
}, 0);
}
});

// FILE: content_xml.js (7c710b4a) 3/7/2014 11:24:06 AM

(function(CM) {
var getNode = Util.Dom.queryTag;
var getNodes = Util.Dom.queryTags;
var batchNodes = Util.Dom.queryTagsBatch;
var getAttribInt = Util.Xml.getAttributeInt;
var getAttribBool = Util.Xml.getAttributeBool;
var getAttrib = Util.Xml.getAttribute;
var getText = Util.Xml.getNodeText;
var getCData = Util.Xml.getCData;
function parse(contentsNode) {
var contents = [];
batchNodes('content', contentsNode, function(contentNode) {
var content = parseContent(contentNode);
contents.push(content);
});
return contents;
};
function parseContent(contentNode) {
var content = {
id: getAttrib(contentNode, 'groupID'),
segmentID: getAttrib(contentNode, 'segmentID'),
layout: getAttrib(contentNode, 'layout'),
language: getAttrib(contentNode, 'language'),
passage: null,
items: []
};
var soundCueNode = getNode('soundCue', contentNode);
if (soundCueNode) {
content.soundCue = {
bankKey: getAttribInt(soundCueNode, 'bankKey'),
itemKey: getAttribInt(soundCueNode, 'itemKey')
};
}
var passageNode = getNode('passage', contentNode);
if (passageNode) {
content.passage = parsePassage(passageNode);
}
var itemsNode = getNode('items', contentNode);
if (itemsNode) {
batchNodes('item', itemsNode, function(itemNode) {
var item = parseItem(itemNode);
content.items.push(item);
});
}
content.html = getCData(contentNode, 'html');
return content;
};
function parseResources(contentNode)
{
var resources = {};
var resourcesNode = getNode('resources',contentNode);
if (resourcesNode) {
batchNodes('resource', resourcesNode, function (resourceNode) {
var resourceType = getAttrib(resourceNode, 'type');
var resource = {
bankKey: getAttribInt(resourceNode, 'bankKey'),
itemKey: getAttribInt(resourceNode, 'itemKey')
};
resources[resourceType] = resource;
});
}
return resources;
};
function parseAttachments(contentNode) {
var attachments = [];
var attachmentsNode = getNode('attachments', contentNode);
if (attachmentsNode) {
batchNodes('attachment', attachmentsNode, function (attachmentNode) {
var attachment = {
id: getAttrib(attachmentNode, 'id'),
type: getAttrib(attachmentNode, 'type'),
subType: getAttrib(attachmentNode, 'subType'),
target: getAttrib(attachmentNode, 'target'),
url: getAttrib(attachmentNode, 'url')
};
attachments.push(attachment);
});
}
return attachments;
};
function parseMedia(contentNode) {
var mediaResources = [];
var mediaNode = getNode('media', contentNode);
if (mediaNode) {
batchNodes('resource', mediaNode, function (resourceNode) {
var mediaResource = {
file: getAttrib(resourceNode, 'file'),
type: getAttrib(resourceNode, 'type'),
data: getText(resourceNode)
};
mediaResources.push(mediaResource);
});
}
return mediaResources;
};
function parseSpecs(node) {
var specs = [];
var constraintsNode = getNode('constraints', node);
if (constraintsNode != null) {
constraintsNode.parentNode.removeChild(constraintsNode);
specs.push(constraintsNode);
}
var searchNode = getNode('search', node);
if (searchNode != null) {
searchNode.parentNode.removeChild(searchNode);
specs.push(searchNode);
}
return specs;
}
function parsePassage(passageNode) {
var passage = {
bankKey: getAttribInt(passageNode, 'bankKey'),
itemKey: getAttribInt(passageNode, 'itemKey'),
printed: getAttribBool(passageNode, 'printed'),
filePath: getCData(passageNode, 'filePath')
};
passage.resources = parseResources(passageNode);
passage.attachments = parseAttachments(passageNode);
passage.media = parseMedia(passageNode);
passage.specs = parseSpecs(passageNode);
return passage;
}
function parseItem(itemNode)
{
var item = {
bankKey: getAttribInt(itemNode, 'bankKey'),
itemKey: getAttribInt(itemNode, 'itemKey'),
subject: getAttrib(itemNode, 'subject'),
grade: getAttrib(itemNode, 'grade'),
format: getAttrib(itemNode, 'format'),
disabled: getAttribBool(itemNode, 'disabled'),
responseType: getAttrib(itemNode, 'responseType'),
position: getAttribInt(itemNode, 'position'),
positionOnPage: getAttribInt(itemNode, 'positionOnPage'),
filePath: getCData(itemNode, 'filePath'),
printed: getAttribBool(itemNode, 'printed')
};
var tutorialNode = getNode('tutorial', itemNode);
if (tutorialNode) {
item.tutorial = {
bankKey: getAttribInt(tutorialNode, 'bankKey'),
itemKey: getAttribInt(tutorialNode, 'itemKey')
};
}
item.resources = parseResources(itemNode);
item.attachments = parseAttachments(itemNode);
item.media = parseMedia(itemNode);
item.rendererSpec = getCData(itemNode, 'rendererSpec');
item.gridAnswerSpace = getCData(itemNode, 'gridAnswerSpace');
var optionsNode = getNode('options', itemNode);
if (optionsNode) {
item.optionsConfig = {
minChoices: getAttribInt(optionsNode, 'minChoices'),
maxChoices: getAttribInt(optionsNode, 'maxChoices')
};
item.options = [];
batchNodes('option', optionsNode, function(optionNode) {
var option = parseOption(optionNode);
item.options.push(option);
});
}
item.value = getCData(itemNode, 'response');
var rubricNode = getNode('rubric', itemNode);
if (rubricNode) {
item.rubric = {
type: getAttrib(rubricNode, 'type'),
data: getText(rubricNode)
};
}
var qtiNode = getNode('qti', itemNode);
if (qtiNode) {
var qtiSpec = getAttrib(qtiNode, 'spec');
var qtiXml = getText(qtiNode);
item.qti = { spec: qtiSpec, xml: qtiXml };
}
item.specs = parseSpecs(itemNode);
return item;
};
function parseOption(optionNode)
{
var option = {
key: getAttrib(optionNode, 'key')
};
option.value = getCData(optionNode, 'value');
option.sound = getCData(optionNode, 'sound');
option.feedback = getCData(optionNode, 'feedback');
return option;
};
function create (root) {
var contentsNode = getNode('contents', root);
var contents = parse(contentsNode);
return contents;
};
CM.Xml = {};
CM.Xml.create = create;
})(ContentManager);

// FILE: content_frame.js (3e001ccb) 3/7/2014 11:24:06 AM

ContentManager.Frame =
{
_container: window.document.body,
_callbacks: new Util.Structs.Map(),
_baseUrl: '',
_overrideFrameUrl: false
};
ContentManager.Frame.setBaseUrl = function(baseUrl, overrideFrameUrl)
{
this._baseUrl = baseUrl || '';
this._overrideFrameUrl = overrideFrameUrl || false;
};
ContentManager.Frame.resolveUrl = function(url)
{
if (Util.String.isHttpProtocol(url)) return url;
if (url.indexOf(this._baseUrl) != -1) return url;
return this._baseUrl + url;
};
ContentManager.Frame.setContainer = function(element) { this._container = element; };
ContentManager.Frame.getDocType = function()
{
if (YAHOO.env.ua.webkit > 0) return Util.Frame.DOCTYPE_HTML5;
if (YAHOO.env.ua.ie >= 9) return Util.Frame.DOCTYPE_HTML5;
return Util.Frame.DOCTYPE_XHTML1_TRANSITIONAL;
};
ContentManager.Frame.getTemplate = function()
{
var html = [];
var docType = ContentManager.Frame.getDocType();
html.push(docType);
html.push('<html xmlns="http://www.w3.org/1999/xhtml">');
html.push('<head>');
html.push('<title>Content</title>');
html.push('<meta http-equiv="X-UA-Compatible" content="IE=IE7,chrome=1" />');
html.push('<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />');
var frameURI;
if (this._overrideFrameUrl && this._baseUrl.length > 0)
{
frameURI = this._baseUrl;
}
else
{
var baseURI = document.baseURI || document.URL;
frameURI = baseURI.replace(/[^/]*$/, '');
}
html.push('<base href="' + frameURI + '" />');
Util.Array.each(ContentManager.Renderer.getScripts(), function(script)
{
html.push('<script type="text/javascript" src="');
html.push(ContentManager.Frame.resolveUrl(script));
html.push('"></script>');
});
html.push('<script type="text/javascript">function createAnArray() { return []; }</script>');
Util.Array.each(ContentManager.Renderer.getStyles(), function(style)
{
html.push('<link type="text/css" rel="stylesheet" href="');
html.push(ContentManager.Frame.resolveUrl(style));
html.push('" />');
});
html.push('</head>');
html.push('<body onload="this.its = true; parent.ContentManager.Frame.onLoad(this);"><div id="main"><form id="contentForm" name="contentForm"></form></div></body>');
html.push('</html>');
return html.join('');
};
ContentManager.Frame.create = function(id, callback)
{
var frame = Util.Frame.createBlank();
frame.id = id;
frame.className = 'contentFrame';
this._container.appendChild(frame);
if (YAHOO.lang.isFunction(callback))
{
this._callbacks.set(id, callback);
}
var htmlTemplate = this.getTemplate();
Util.Frame.writeContent(frame, htmlTemplate);
return frame;
};
ContentManager.Frame.remove = function(id)
{
var frame = document.getElementById(id);
Util.Dom.removeNode(frame);
};
ContentManager.Frame.onLoad = function(frameWin)
{
var frame = frameWin.frameElement;
var callback = this._callbacks.get(frame.id);
if (callback)
{
this._callbacks.remove(frame.id);
callback(frame);
}
};

// FILE: content_qti.js (5944cf80) 3/7/2014 11:24:06 AM

ContentManager.QTI = {};
(function (QTI) {
var validHtmlTags = [
'abbr', 'acronym', 'address', 'blockquote', 'br', 'cite', 'code', 'dfn', 'div', 'em',
'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'kbd', 'p', 'pre', 'q', 'samp', 'span', 'strong', 'var',
'dl', 'dlElement', 'dt', 'dd', 'ol', 'ul', 'li',
'b', 'big', 'hr', 'i', 'small', 'sub', 'sup', 'tt',
'caption', 'col', 'colgroup', 'table', 'tableCell', ' tableCellScope', 'tbody', 'td', 'tfoot',
'th', 'thead', 'tr',
'img',
'a'
];
function adopt(oldParent, newParent) {
if (oldParent && newParent) {
var orphans = YUD.getChildren(oldParent);
if (orphans && orphans.length) {
var orphanCount = orphans.length;
for (var j = 0; j < orphanCount; j++) {
var orphan = orphans[j];
newParent.appendChild(oldParent.removeChild(orphan));
}
}
}
};
function pruneNonHtml(doc) {
var allNodes = [];
var traverseTreeRecursive = function (parentNode) {
if (parentNode) {
allNodes.push(parentNode);
var children = YUD.getChildren(parentNode);
if (children) {
for (var i = 0; i < children.length; i++) {
traverseTreeRecursive(children[i]);
}
}
}
};
var itemNode = doc.documentElement;
traverseTreeRecursive(itemNode);
var nodeCount = allNodes.length;
for (var i = 0; i < nodeCount; i++) {
var currentNode = allNodes.pop();
if ((validHtmlTags.indexOf(currentNode.nodeName) < 0) &&
(currentNode.parentNode != doc)) {
var grandParentNode = currentNode.parentNode;
adopt(currentNode, grandParentNode);
grandParentNode.removeChild(currentNode);
};
}
};
function loadStem(item) {
var stemEl = item.getStemElement();
var xmlString = item.qti.xml;
xmlString = xmlString.replace(/<prompt/g, '<p');
xmlString = xmlString.replace(/<\/prompt/g, '<\/p');
var xmlDoc = Util.Xml.parseFromString(xmlString);
pruneNonHtml(xmlDoc);
adopt(xmlDoc.documentElement, stemEl);
};
QTI.validHtmlTags = validHtmlTags;
QTI.loadStem = loadStem;
})(ContentManager.QTI);

// FILE: content_renderer.js (b3169e15) 3/7/2014 11:24:06 AM

ContentManager.Renderer =
{
_instance: null,
_client: null,
_customScripts: [],
_customStyles: [],
_customFormatter: null
};
ContentManager.Renderer.isDirect = function() {
return this._instance instanceof ContentManager.Renderer.Direct;
};
ContentManager.Renderer.getClient = function() { return this._client; };
ContentManager.Renderer.setClient = function(client) { this._client = client; };
ContentManager.Renderer.getCustomFormatter = function() { return this._customFormatter; };
ContentManager.Renderer.setCustomFormatter = function(formatterFunc) { this._customFormatter = formatterFunc; };
ContentManager.Renderer.processResources = function(resources)
{
if (YAHOO.lang.isFunction(this._customFormatter))
{
for (var i = 0; i < resources.length; i++)
{
resources[i] = this._customFormatter(resources[i]);
}
}
};
ContentManager.Renderer.clearCustomScripts = function() { this._customScripts = []; };
ContentManager.Renderer.getCustomScripts = function() { return this._customScripts; };
ContentManager.Renderer.addCustomScript = function(path) { this._customScripts.push(path); };
ContentManager.Renderer.getScripts = function()
{
var scripts =
[
'Scripts/Libraries/YUI/yahoo-dom-event/yahoo-dom-event.js',
'Scripts/Libraries/YUI/dragdrop/dragdrop-min.js',
'Scripts/Libraries/jwplayer/jwplayer.js'
];
for (var i = 0; i < this._customScripts.length; i++)
{
scripts.push(this._customScripts[i]);
}
ContentManager.Renderer.processResources(scripts);
return scripts;
};
ContentManager.Renderer.clearCustomStyles = function() { this._customStyles = []; };
ContentManager.Renderer.getCustomStyles = function() { return this._customStyles; };
ContentManager.Renderer.addCustomStyle = function(path) { this._customStyles.push(path); };
ContentManager.Renderer.getStyles = function()
{
var styles =
[
'Scripts/Libraries/YUI/menu/assets/skins/sam/menu.css',
'Scripts/Libraries/YUI/button/assets/skins/sam/button.css',
'Scripts/Libraries/YUI/container/assets/skins/sam/container.css',
'Scripts/Libraries/YUI/editor/assets/skins/sam/editor.css',
'Shared/CSS/items.css',
'Shared/CSS/elpa.css',
'Shared/CSS/accommodations.css',
'Shared/CSS/frame.css',
'Scripts/Simulator2/Renderer/CSS/simulator.css',
'Scripts/Simulator2/Renderer/CSS/slider.css'
];
if (this._client)
{
styles.push('Projects/' + this._client + '/css/items.css');
styles.push('Projects/' + this._client + '/css/elpa.css');
}
for (var i = 0; i < this._customStyles.length; i++)
{
styles.push(this._customStyles[i]);
}
if (YAHOO.env.ua.webkit)
{
styles.push('Shared/CSS/Browsers/webkit.css');
}
else if (YAHOO.env.ua.ie)
{
styles.push('Shared/CSS/Browsers/ie.css');
}
ContentManager.Renderer.processResources(styles);
return styles;
};
ContentManager.Renderer.applyStyles = function(doc, client)
{
var styles = this.getStyles(client);
var links = document.getElementsByTagName('link');
styles = Util.Array.reject(styles, function(style) {
return Util.Array.find(links, function(link) {
return (link.href.toLowerCase().indexOf(style.toLowerCase()) != -1);
});
});
for(var i = 0; i < styles.length; i++)
{
styles[i] = ContentManager.resolveBaseUrl(styles[i]);
}
Util.dir(styles);
var win = (doc.parentWindow || doc.defaultView);
YAHOO.util.Get.css(styles, { win: win });
};
ContentManager.Renderer.init = function(container, rendererClass)
{
container = YUD.get(container);
var rendererInstance = new rendererClass(container);
this._instance = rendererInstance;
this._instance.init();
};
ContentManager.Renderer.writeHtml = function(parentNode, html)
{
var parentDoc = Util.Dom.getOwnerDocument(parentNode);
var pageWrapper = parentDoc.createElement('div');
YUD.addClass(pageWrapper, 'pageWrapper');
if (html) {
if (html.documentElement) {
html = html.documentElement;
}
if (html.nodeType > 0) {
pageWrapper.appendChild(html);
} else {
pageWrapper.innerHTML = html;
}
}
pageWrapper.setAttribute('aria-hidden', 'true');
parentNode.appendChild(pageWrapper);
return pageWrapper;
};
ContentManager.Renderer.show = function(pageContainer) {
pageContainer.setAttribute('aria-hidden', 'false');
YUD.removeClass(pageContainer, 'hiding');
YUD.addClass(pageContainer, 'showing');
};
ContentManager.Renderer.hide = function(pageContainer) {
pageContainer.setAttribute('aria-hidden', 'true');
YUD.removeClass(pageContainer, 'showing');
YUD.addClass(pageContainer, 'hiding');
};
ContentManager.Renderer.writePage = function(page)
{
return this._instance.write(page);
};
ContentManager.Renderer.removePage = function(page)
{
return this._instance.remove(page);
};
ContentManager.Renderer.MultiFrame = function(rootContainer)
{
this.init = function()
{
ContentManager.Frame.setContainer(rootContainer);
};
this.write = function(page)
{
var frame = ContentManager.Frame.create(page.id, function(frame)
{
var frameDoc = Util.Dom.getFrameContentDocument(frame);
var frameForm = frameDoc.forms['contentForm'];
ContentManager.Renderer.writeHtml(frameForm, page.getHtml());
page.onRendered(frameDoc             , frame              );
});
ContentManager.Renderer.hide(frame);
};
this.remove = function(page)
{
ContentManager.Frame.remove(page.id);
};
};
ContentManager.Renderer.SingleFrame = function(rootContainer)
{
this._frame = null;
this.init = function()
{
ContentManager.Frame.setContainer(rootContainer);
ContentManager.Frame.create('contentFrame');
};
this.write = function(page)
{
var frame = document.getElementById('contentFrame');
var frameDoc = Util.Dom.getFrameContentDocument(frame);
var frameForm = frameDoc.forms['contentForm'];
var pageContainer = ContentManager.Renderer.writeHtml(frameForm, page.getHtml());
ContentManager.Renderer.hide(pageContainer);
page.onRendered(frameDoc, pageContainer);
};
this.remove = function(page)
{
var pageContainer = page.getContainer();
Util.Dom.removeNode(pageContainer);
};
};
ContentManager.Renderer.Direct = function(rootContainer)
{
this.init = function()
{
var contentForm = HTML.FORM({ id: 'contentForm', name: 'contentForm' });
rootContainer.appendChild(contentForm);
};
this.write = function(page)
{
var form = document.forms['contentForm'];
var pageContainer = ContentManager.Renderer.writeHtml(form, page.getHtml());
ContentManager.Renderer.hide(pageContainer);
page.onRendered(document, pageContainer);
};
this.remove = function(page)
{
var pageContainer = page.getContainer();
Util.Dom.removeNode(pageContainer);
};
};

// FILE: module_media.js (52d00b19) 7/23/2014 4:30:36 PM

(function() {
var getMediaResources = function(content) {
if (content.media) {
return content.media;
}
var mediaResources = [];
if (content.passage && content.passage.media) {
mediaResources = Util.Array.concat(mediaResources, content.passage.media);
}
if (content.items) {
for (var i = 0; i < content.items.length; i++) {
var item = content.items[i];
if (item.media) {
mediaResources = Util.Array.concat(mediaResources, item.media);
}
}
}
return mediaResources;
};
var findMediaResource = function(content, url) {
var mediaResources = getMediaResources(content);
for (var i = 0; i < mediaResources.length; i++) {
var mediaResource = mediaResources[i];
if (url.indexOf(mediaResource.file) != -1) {
return mediaResource;
}
}
return null;
};
var cleanXml = function(xmlStr) {
xmlStr = xmlStr.replace('<?xml version="1.0" encoding="UTF-8"?>', '');
return xmlStr;
};
var cleanMathML = function(mathMLStr) {
mathMLStr = mathMLStr.replace('<!DOCTYPE math:math PUBLIC "-//OpenOffice.org//DTD Modified W3C MathML 1.01//EN" "math.dtd">', '');
mathMLStr = mathMLStr.replace(/math:/g, '');
mathMLStr = mathMLStr.replace(/:math/g, '');
return mathMLStr;
};
var isMathMLSymbol = function(text) {
if (text) {
var code = text.charCodeAt(0);
if (code >= 0x00A0 && code <= 0x00FF) {
return true;
}
else if (code >= 0x2190 && code <= 0x21FF) {
return true;
}
else if (code >= 0x2300 && code <= 0x23FF) {
return true;
}
else if (code >= 0x2022 && code <= 0x22FF) {
return true;
}
else if (code >= 0x25A0 && code <= 0x25FF) {
return true;
}
}
return false;
};
var processMathML = function (mathMLDoc) {
Util.Dom.querySelectorBatch('mi, mo', mathMLDoc, function(el) {
var text = Util.Dom.getTextContent(el);
if (isMathMLSymbol(text)) {
YUD.addClass(el, 'symbol');
YUD.addClass(el, 'symbol_' + text.charCodeAt(0));
if (el.getAttribute('lspace')) {
el.removeAttribute('lspace');
}
if (el.getAttribute('rspace')) {
el.removeAttribute('rspace');
}
}
});
};
var supportsMathML = function() {
if (Util.Browser.isSecure() && (YAHOO.env.ua.android || YAHOO.env.ua.ios)) {
return false;
}
if (Util.Browser.getFirefoxVersion() > 0) {
return (Util.Browser.getFirefoxVersion() >= 4.0);
}
if (YAHOO.env.ua.chrome > 0) {
return false;
}
if (YAHOO.env.ua.webkit >= 534) {
return true;
}
return false;
};
var processPageImageXml = function(pageXmlDoc, imgNode, mediaResource) {
var mediaData = mediaResource.data;
if (mediaData.indexOf('<math') != -1) {
if (!supportsMathML()) return false;
mediaData = cleanMathML(mediaData);
}
mediaData = cleanXml(mediaData);
var mediaDoc = Util.Xml.parseFromString(mediaData);
if (mediaData.indexOf('<math') != -1) {
processMathML(mediaDoc);
}
var mediaNode = pageXmlDoc.importNode(mediaDoc.documentElement, true);
var imgAlt = imgNode.getAttribute('alt');
if (imgAlt) {
mediaNode.setAttribute('alt', imgAlt);
}
YUD.insertBefore(mediaNode, imgNode);
Util.Dom.removeNode(imgNode);
return true;
};
var processPageImageBase64 = function(pageXmlDoc, imgNode, mediaResource) {
imgNode.src = 'data:' + mediaResource.type + ';base64,' + mediaResource.data;
return true;
};
var serializeToHtmlString = function(node) {
var div = document.createElement('div');
div.appendChild(node);
return div.innerHTML;
};
var processXml = function (xmlDoc, content) {
var imageNodes = xmlDoc.getElementsByTagName('img');
imageNodes = Util.Array.slice(imageNodes);
for (var i = 0; i < imageNodes.length; i++) {
var imgNode = imageNodes[i];
var imgUrl = imgNode.getAttribute('src');
var mediaResource = findMediaResource(content, imgUrl);
if (mediaResource == null ||
mediaResource.data == null) continue;
if (mediaResource.type == 'application/mathml+xml') {
processPageImageXml(xmlDoc, imgNode, mediaResource);
}
else if (mediaResource.type == 'image/png') {
processPageImageBase64(xmlDoc, imgNode, mediaResource);
}
}
};
var processPageMedia = function(page, content) {
if (YAHOO.env.ua.ie) return;
if (getMediaResources(content).length == 0) return;
var pageHtml = page.getHtml();
pageHtml = YAHOO.lang.trim(pageHtml);
var pageXmlDoc = null;
try {
pageXmlDoc = Util.Xml.parseFromString(pageHtml, 'application/xml');
} catch(ex) {
console.error(ex);
return;
}
processXml(pageXmlDoc, content);
pageHtml = serializeToHtmlString(pageXmlDoc.documentElement);
page.setHtml(pageHtml);
};
var processQTI = function(qti, content) {
if (YAHOO.env.ua.ie) return;
if (getMediaResources(content).length == 0) return;
var qtiXmlDoc = null;
try {
qtiXmlDoc = Util.Xml.parseFromString(qti.xml, 'application/xml');
} catch (ex) {
console.error(ex);
return;
}
processXml(qtiXmlDoc, content);
qti.xml = Util.Xml.serializeToString(qtiXmlDoc.documentElement);
};
var processItemMedia = function(page, item, content) {
if (item.qti && item.qti.xml) {
processQTI(item.qti, content);
}
};
ContentManager.onPageEvent('init', processPageMedia);
ContentManager.onItemEvent('init', processItemMedia);
})();

// FILE: video_manager.js (de7c9fcf) 7/23/2014 4:30:37 PM

var VideoManager = {};
VideoManager.parseData = function(link)
{
if (link == null) return null;
var getAttrib = function(name) {
return YUD.getAttribute(link, 'data-' + name) ||
YUD.getAttribute(link, name);
};
var autoplay = getAttrib('autoplay');
autoplay = (autoplay) ? (autoplay.toLowerCase() == 'true') : false;
var dialog = getAttrib('dialog');
dialog = (dialog) ? (dialog.toLowerCase() == 'true') : false;
var controls = getAttrib('controls');
controls = (controls) ? (controls.toLowerCase() == 'true') : true;
return {
autoplay: autoplay,
dialog: dialog,
controls: controls,
url: YUD.getAttribute(link, 'href'),
type: YUD.getAttribute(link, 'type'),
width: (getAttrib('width') * 1),
height: (getAttrib('height') * 1)
};
};
VideoManager.canPlay = function(url)
{
if (typeof jwplayer != 'function') return false;
if (!jwplayer.utils.exists(url)) return false;
var extension = jwplayer.utils.extension(url);
if (!jwplayer.utils.exists(extension)) return false;
if (extension == 'm4a') return false;
var extPlayers = jwplayer.utils.extensionmap[extension];
if (!jwplayer.utils.exists(extPlayers)) return false;
return (Util.String.startsWith(extPlayers.html5, 'video') ||
Util.String.startsWith(extPlayers.flash, 'video'));
};
VideoManager.embed = function(pageWin, linkVideo,zoomFactor)
{
if (typeof pageWin.jwplayer != 'function') return false;
var id = YUD.generateId().replace('yui', 'video');
linkVideo.setAttribute('id', id);
var flashPath = ContentManager.resolveBaseUrl('Scripts/Libraries/jwplayer/player.swf');
var skinPath = ContentManager.resolveBaseUrl('Scripts/Libraries/jwplayer/skins/simple/simple.zip');
var videoData = VideoManager.parseData(linkVideo);
var config = {
provider: 'video',
autostart: videoData.autoplay,
fullscreen: false,
skin: skinPath
};
if (!videoData.controls) {
config['controlbar.position'] = 'none';
}
if (videoData.width > 0 && videoData.height > 0) {
config.width = videoData.width;
config.height = videoData.height;
} else {
config.width = 400;
config.height = 226;
}
var createAnArray = function() {
return (typeof pageWin.createAnArray == 'function') ? pageWin.createAnArray() : [];
};
config.levels = createAnArray();
config.levels.push({ file: videoData.url, type: videoData.type });
config.modes = createAnArray();
config.modes.push({ type: 'html5' });
config.modes.push({ type: 'flash', src: flashPath });
var player = pageWin.jwplayer(linkVideo).setup(config);
if (zoomFactor) {
var zoomWidth = config.width * zoomFactor;
var zoomHeight = config.height * zoomFactor;
player.resize(zoomWidth, zoomHeight);
}
return player;
};
VideoManager.stop = function(page)
{
VideoManager.SWF.forEach(page, function(swfAPI)
{
swfAPI.stop();
});
var pageWin = page.getWin();
if (YAHOO.lang.isFunction(pageWin.jwplayer))
{
var players = pageWin.jwplayer.getPlayers();
for (var i = 0; i < players.length; i++)
{
var player = players[i];
if (player.getState() == 'PLAYING') player.pause();
}
}
};
VideoManager.openDialog = function(ev, pageLink,zoomFactor)
{
TDS.ToolManager.hideAll();
var id = 'video-' + Util.String.hashCode(pageLink.href);
var videoDialog = TDS.ToolManager.get(id);
if (videoDialog == null)
{
var header = pageLink.title || '';
videoDialog = TDS.ToolManager.createPanel(id, 'video', header);
videoDialog.body.innerHTML = '';
var aslLink = pageLink.cloneNode(true);
videoDialog.body.appendChild(aslLink);
var videoPlayer = VideoManager.embed(window, aslLink, zoomFactor);
videoDialog.showEvent.subscribe(function()
{
videoPlayer.play();
});
videoDialog.hideEvent.subscribe(function()
{
videoPlayer.stop();
});
videoDialog.refresh = function()
{
var width = videoPlayer.getWidth();
var height = videoPlayer.getHeight();
if (width > 0 && height > 0)
{
height += videoDialog.header.offsetHeight;
height += (YUD.getStyle(videoDialog.body, 'padding-top').replace('px', '') * 1);
height += (YUD.getStyle(videoDialog.body, 'padding-bottom').replace('px', '') * 1);
width += (YUD.getStyle(videoDialog.body, 'padding-left').replace('px', '') * 1);
width += (YUD.getStyle(videoDialog.body, 'padding-right').replace('px', '') * 1);
videoDialog.cfg.setProperty('width', width + 'px');
videoDialog.cfg.setProperty('height', height + 'px');
}
};
videoPlayer.onReady(function()
{
videoDialog.refresh();
TDS.ToolManager.bottomLeft(videoDialog);
});
}
videoDialog.show();
};
VideoManager.patchJWPlayer = function(player)
{
if (player.__tds_fixedOuterHTML !== true)
{
player.utils.setOuterHTML = Util.Dom.setOuterHTML;
player.__tds_fixedOuterHTML = true;
}
if (player.__tds_fixedExt !== true)
{
player.utils.extension = function(path)
{
if (!path) { return ""; }
path = path.substring(path.lastIndexOf("/") + 1, path.length);
var pathPieces = path.split("?");
path = pathPieces[0];
if (pathPieces.length > 1)
{
var querystring = Util.QueryString.parse(pathPieces[1]);
if (querystring.file != null) path = querystring.file;
}
if (path.lastIndexOf('.') > -1) {
return path.substr(path.lastIndexOf('.') + 1, path.length).toLowerCase();
}
return null;
};
player.__tds_fixedExt = true;
}
};
(function()
{
if (typeof window.jwplayer == 'function')
{
VideoManager.patchJWPlayer(window.jwplayer);
}
})();

// FILE: video_swf.js (9c4a4bf0) 3/7/2014 11:24:14 AM

VideoManager.SWF = function(embed, data)
{
this._embed = embed;
this._data = data;
this._ready = false;
};
VideoManager.SWF.parseData = function(link)
{
if (link == null) return null;
var getAttrib = function(name) {
return YUD.getAttribute(link, 'data-' + name) ||
YUD.getAttribute(link, name);
};
var width = (getAttrib('width') * 1);
var height = (getAttrib('height') * 1);
var autoplay = getAttrib('autoplay');
autoplay = (autoplay) ? (autoplay.toLowerCase() == 'true') : false;
var html5 = getAttrib('anim-html5');
html5 = (html5) ? (html5.toLowerCase() == 'true') : false;
var flash = getAttrib('anim-flash');
flash = (flash) ? (flash.toLowerCase() == 'true') : YUD.hasClass(link, 'flashvideo');
var shell = getAttrib('anim-shell');
if (shell) {
shell = (shell.toLowerCase() == 'true');
} else {
if (html5) {
shell = false;
} else if (flash) {
shell = true;
} else {
shell = false;
}
}
return {
url: YUD.getAttribute(link, 'href'),
type: YUD.getAttribute(link, 'type'),
width: width,
height: height,
autoplay: autoplay,
shell: shell,
html5: html5,
flash: flash
};
};
VideoManager.SWF.prototype.getElement = function() { return this._embed; };
VideoManager.SWF.prototype.autoplay = function() { return this._data.autoplay; };
VideoManager.SWF.prototype.isReady = function() { return this._ready; };
VideoManager.SWF.prototype.getStatus = function()
{
if (!YAHOO.lang.isFunction(this._embed.getStatus))
{
return 'uninitialized';
}
var status = this._embed.getStatus();
if (status == 'notstarted') status = 'initialized';
return status;
};
VideoManager.SWF.prototype.isLoaded = function()
{
if (this.isReady()) return true;
return (this.getStatus() != 'uninitialized');
};
VideoManager.SWF.prototype.setReady = function() { this._ready = true; };
VideoManager.SWF.prototype.isPlaying = function()
{
return (this.getStatus() == 'playing');
};
VideoManager.SWF.prototype.play = function()
{
if (!this.isReady()) return false;
if (this.isPlaying()) return false;
if (YAHOO.lang.isFunction(this._embed.JSPlay))
{
this._embed.JSPlay();
return true;
}
return false;
};
VideoManager.SWF.prototype.stop = function()
{
if (!this.isReady()) return false;
if (!this.isPlaying()) return false;
if (YAHOO.lang.isFunction(this._embed.JSStop))
{
this._embed.JSStop();
return true;
}
return false;
};
VideoManager.SWF.collection = new Util.Structs.Map();
VideoManager.SWF.Status =
{
LOADING: 'loading',
LOADED: 'loaded',
PLAYING: 'playing',
PAUSED: 'paused',
STOPPED: 'stopped'
};
VideoManager.SWF.Events = new Util.EventManager();
VideoManager.SWF._animationStatusChange = function()
{
var data = [];
if (arguments.length == 1)
{
data.push(null);
data.push(arguments[0]);
}
else if (arguments.length == 2)
{
data.push(arguments[0]);
data.push(arguments[1]);
}
if (data.length == 0) return;
if (data[1] == 'notstarted') data[1] = 'initialized';
YAHOO.lang.later(0, VideoManager.SWF, VideoManager.SWF.processStatusChange, data);
};
VideoManager.SWF.processStatusChange = function(id, status)
{
if (status == 'initialized')
{
var apis = VideoManager.SWF.collection.getValues();
for (var i = 0; i < apis.length; i++)
{
var swfAPI = apis[i];
if (!swfAPI.isReady() && swfAPI.isLoaded())
{
swfAPI.setReady();
VideoManager.SWF.Events.fire(VideoManager.SWF.Status.LOADED, swfAPI);
}
}
}
if (status == 'playing')
{
VideoManager.SWF.Events.fire(VideoManager.SWF.Status.PLAYING, null);
}
if (status == 'stopped')
{
VideoManager.SWF.Events.fire(VideoManager.SWF.Status.STOPPED, null);
}
};
VideoManager.SWF.embed = function(win, linkVideo, overrideAutoplay, disableShell)
{
if (!YAHOO.lang.isFunction(win.animationStatusChange))
{
win.animationStatusChange = VideoManager.SWF._animationStatusChange;
win.checkAutoPlay = function() { return false; };
}
var id = 'Animation-' + YAHOO.util.Dom.generateId();
var animData = VideoManager.SWF.parseData(linkVideo);
if (YAHOO.lang.isBoolean(overrideAutoplay)) animData.autoplay = overrideAutoplay;
var linkDoc = Util.Dom.getOwnerDocument(linkVideo);
var divVideo = linkDoc.createElement('div');
YUD.addClass(divVideo, 'AnimationContainer');
YUD.setStyle(divVideo, 'width', animData.width + 'px');
YUD.setStyle(divVideo, 'height', animData.height + 'px');
divVideo.innerHTML = this.createHtml(id, animData, disableShell);
YUD.insertAfter(divVideo, linkVideo);
var parentNode = linkVideo.parentNode;
parentNode.removeChild(linkVideo);
var children = YUD.getChildren(divVideo);
var embed = (children && children.length > 0) ? children[0] : null;
VideoManager.SWF.stopRightClick(embed);
var swfAPI = new VideoManager.SWF(embed, animData);
VideoManager.SWF.collection.set(id, swfAPI);
VideoManager.SWF.Events.fire(VideoManager.SWF.Status.LOADING, swfAPI);
return swfAPI;
};
VideoManager.SWF.createHtml = function(id, animData, disableShell)
{
var wmode;
if (Util.Browser.isMac() && Util.Browser.getFirefoxVersion() == 2)
{
wmode = 'window';
}
else
{
wmode = 'opaque';
}
var embedBuilder = [];
embedBuilder.push('<embed');
embedBuilder.push('id="' + id + '"');
embedBuilder.push('type="application/x-shockwave-flash"');
if (disableShell || !animData.shell)
{
embedBuilder.push('src="' + animData.url + '"');
}
else
{
var shellPath = ContentManager.resolveBaseUrl('Scripts/Video/AnimationShell.swf');
var animPath = encodeURIComponent(animData.url);
var vars = 'animID=' + id + '&animURL=' + animPath;
embedBuilder.push('src="' + shellPath + '"');
embedBuilder.push('flashvars="' + vars + '"');
}
embedBuilder.push('width="100%"');
embedBuilder.push('height="100%"');
embedBuilder.push('play="' + animData.autoplay + '"');
embedBuilder.push('loop="false"');
embedBuilder.push('menu="false"');
embedBuilder.push('allowscriptaccess="always"');
embedBuilder.push('allowfullscreen="false"');
embedBuilder.push('quality="autohigh"');
embedBuilder.push('wmode="' + wmode + '"');
embedBuilder.push('></embed>');
return embedBuilder.join(' ');
};
VideoManager.SWF.forEach = function(page, fn)
{
var pageEl = page.getElement();
var pageEmbeds = pageEl.getElementsByTagName('embed');
for (var i = 0; i < pageEmbeds.length; i++)
{
var embed = pageEmbeds[i];
var swfAPI = VideoManager.SWF.collection.get(embed.id);
if (swfAPI != null)
{
try { fn(swfAPI); }
catch (ex) { Util.log('SWF ERROR: ' + ex); }
}
}
};
VideoManager.SWF.stopPlaying = function()
{
var page = ContentManager.getCurrentPage();
if (page == null) return;
VideoManager.SWF.forEach(page, function(api)
{
if (api.isPlaying()) api.stop();
});
};
VideoManager.SWF.stopRightClick = function(embed)
{
var flashDoc = Util.Dom.getOwnerDocument(embed);
var flashWin = (flashDoc.parentWindow || flashDoc.defaultView);
if (flashWin.addEventListener)
{
flashWin.addEventListener('mousedown', VideoManager.SWF._onGeckoMouse, true);
}
else
{
embed.onmouseup = function() { embed.releaseCapture(); };
}
};
VideoManager.SWF._onGeckoMouse = function(evt)
{
var target = YUE.getTarget(evt);
if (target && target.type == 'application/x-shockwave-flash' && evt.button != 0)
{
VideoManager.SWF._killEvents(evt);
}
};
VideoManager.SWF._killEvents = function(evt)
{
if (evt)
{
if (evt.stopPropagation) evt.stopPropagation();
if (evt.preventDefault) evt.preventDefault();
if (evt.preventCapture) evt.preventCapture();
if (evt.preventBubble) evt.preventBubble();
}
};

// FILE: animation_manager.js (bfb84190) 3/7/2014 11:24:06 AM

(function() {
var CSS_FRAME_ANIMATION = 'frame-anim-html5';
var AnimationManager = {};
AnimationManager.canPlayHTML5 = function (pageLink) {
var animData = VideoManager.SWF.parseData(pageLink);
if (animData.html5) {
if (YAHOO.env.ua.ie > 0 &&
YAHOO.env.ua.ie < 9) {
return false;
}
if (Util.Browser.getFirefoxVersion() > 0 &&
Util.Browser.getFirefoxVersion() < 4) {
return false;
}
return true;
}
return false;
};
AnimationManager.injectHTML5 = function (pageLink, scriptUrl) {
var animData = VideoManager.SWF.parseData(pageLink);
var animUrl = animData.url.replace('.swf', '.html');
if (animUrl.indexOf('?') != -1) {
var id = Util.Date.now();
if (typeof TDS == 'object') {
if (TDS.buildNumber) {
id = TDS.buildNumber;
} else if (TDS.Cache && TDS.Cache.id) {
id = TDS.Cache.id;
}
}
animUrl = animUrl.replace('?', '?cid=' + id + '&');
}
if (scriptUrl && animUrl.indexOf('?') != -1) {
scriptUrl = encodeURIComponent(scriptUrl);
animUrl = animUrl.replace('?', '?scriptUrl=' + scriptUrl + '&');
}
var animWidth = (animData.width || 400);
var animHeight = (animData.height || 400);
var animDoc = Util.Dom.getOwnerDocument(pageLink);
var animFrame = animDoc.createElement('iframe');
animFrame.className = CSS_FRAME_ANIMATION;
animFrame.setAttribute('width', animWidth + 'px');
animFrame.setAttribute('height', animHeight + 'px');
animFrame.setAttribute('src', animUrl);
pageLink.parentNode.replaceChild(animFrame, pageLink);
return animFrame;
};
AnimationManager.reloadHTML5 = function(currentFrame) {
var animUrl = YUD.getAttribute(currentFrame, 'src');
var animWidth = YUD.getAttribute(currentFrame, 'width');
var animHeight = YUD.getAttribute(currentFrame, 'height');
var animDoc = Util.Dom.getOwnerDocument(currentFrame);
var animFrame = animDoc.createElement('iframe');
animFrame.className = CSS_FRAME_ANIMATION;
animFrame.setAttribute('width', animWidth);
animFrame.setAttribute('height', animHeight);
animFrame.setAttribute('src', animUrl);
currentFrame.parentNode.replaceChild(animFrame, currentFrame);
return animFrame;
};
AnimationManager.getHTML5Frames = function(el) {
var animFrames = [],
frames = el.getElementsByTagName('iframe');
YUD.batch(frames, function(frame) {
if (YUD.hasClass(frame, CSS_FRAME_ANIMATION)) {
animFrames.push(frame);
}
});
return animFrames;
};
AnimationManager.stop = function(animFrame) {
console.log('Content Dialog: Stop HTML5 animation');
var animWin = Util.Dom.getFrameContentWindow(animFrame);
if (animWin) {
if (typeof animWin.stopAnimation == 'function') {
animWin.stopAnimation();
} else {
}
}
};
AnimationManager.resume = function(animFrame) {
console.log('Content Dialog: Resume HTML5 animation');
var animWin = Util.Dom.getFrameContentWindow(animFrame);
if (animWin) {
if (typeof animWin.playAnimation == 'function') {
setTimeout(function() {
animWin.playAnimation();
}, 30);
} else {
}
}
};
window.AnimationManager = AnimationManager;
})();

// FILE: module_animation.js (6e8fc5bd) 3/7/2014 11:24:06 AM

(function ()
{
function processLinks(parentEl) {
var processed = false;
var scriptUrl = ContentManager.resolveBaseUrl('Scripts/Libraries/');
var pageLinks = parentEl.getElementsByTagName('a');
YUD.batch(pageLinks, function (pageLink) {
if (AnimationManager.canPlayHTML5(pageLink)) {
AnimationManager.injectHTML5(pageLink, scriptUrl);
processed = true;
}
});
return processed;
}
ContentManager.onPageEvent('available', function (page) {
var pageEl = page.getElement();
processLinks(pageEl);
});
ContentManager.onPageEvent('show', function (page) {
var pageEl = page.getElement();
var animFrames = AnimationManager.getHTML5Frames(pageEl);
if (animFrames.length > 0) {
AnimationManager.reloadHTML5(animFrames[0]);
}
});
ContentManager.Dialog.onLoad.subscribe(function(frame) {
var frameDoc = frame.getDocument();
if (Util.String.contains(frame.id, 'help')) {
processLinks(frameDoc);
}
});
ContentManager.Dialog.onBeforeHide.subscribe(function(frame) {
var dialogFrame = frame.getDocument();
if (dialogFrame) {
var animFrames = AnimationManager.getHTML5Frames(dialogFrame);
if (animFrames.length > 0) {
AnimationManager.stop(animFrames[0]);
}
}
});
ContentManager.Dialog.onShow.subscribe(function(frame) {
var dialogFrame = frame.getDocument();
if (dialogFrame) {
var animFrames = AnimationManager.getHTML5Frames(dialogFrame);
if (animFrames.length > 0) {
AnimationManager.resume(animFrames[0]);
}
}
});
})();

// FILE: spellcheck.js (d63bc2fe) 3/7/2014 11:24:14 AM

var SpellCheck = function(handler, node)
{
this._handler = handler;
this._rootNode = node;
this._doc = Util.Dom.getOwnerDocument(node);
this._elementsInserted = 0;
this._wordElements = {};
this._splitRegex = new RegExp(
'([^' + SpellCheck.WORD_BOUNDARY_CHARS + ']*)' +
'([' + SpellCheck.WORD_BOUNDARY_CHARS + ']*)', 'g');
this.wordClassName = 'spellcheck-word';
this.invalidWordCssText = 'background: yellow;';
this.onCheckStart = new YAHOO.util.CustomEvent('onCheckStart', this, false, YAHOO.util.CustomEvent.FLAT);
this.onCheckCompleted = new YAHOO.util.CustomEvent('onCheckCompleted', this, false, YAHOO.util.CustomEvent.FLAT);
this.onDone = new YAHOO.util.CustomEvent('onDone', this, false, YAHOO.util.CustomEvent.FLAT);
this.onWordChange = new YAHOO.util.CustomEvent('onWordChange', this, false, YAHOO.util.CustomEvent.FLAT);
}
SpellCheck.WordStatus =
{
UNKNOWN: 0,
VALID: 1,
INVALID: 2,
IGNORED: 3,
CORRECTED: 4
};
SpellCheck.WORD_BOUNDARY_CHARS = '\t\r\n\u00A0 !\"#$%&()*+,\-.\/:;<=>?@\[\\\]^_`{|}~';
SpellCheck._KEY_PREFIX = ':';
SpellCheck.prototype.getWordElements = function()
{
var wordElements = [];
for (var wordKey in this._wordElements)
{
Util.Array.each(this._wordElements[wordKey], function(wordElement)
{
wordElements.push(wordElement);
});
}
return wordElements;
};
SpellCheck.prototype.check = function()
{
this.onCheckStart.fire();
var words = this._getWords(this._rootNode);
var sc = this;
this._handler.onDictionaryReady.subscribe(sc._onDictionaryReady, sc, true);
this._handler.lookupWords(words);
};
SpellCheck.prototype._onDictionaryReady = function()
{
this._handler.onDictionaryReady.unsubscribe(this._onDictionaryReady);
this._wordElements = {};
this._elementsInserted = 0;
this._processHtml(this._rootNode);
};
SpellCheck.prototype.done = function()
{
this._wordElements = {};
this._elementsInserted = 0;
this._restoreHtml(this._rootNode);
};
SpellCheck.prototype._getWords = function(node)
{
var words = [];
while (node)
{
var next = this._nextNode(node);
if (node.nodeType == Util.Dom.NodeType.TEXT)
{
if (node.nodeValue)
{
var parsedWords = this._parseWords(node.nodeValue);
for (var i = 0; i < parsedWords.length; i++) words.push(parsedWords[i]);
}
}
else if (node.nodeType == Util.Dom.NodeType.ELEMENT)
{
if (node.firstChild)
{
next = node.firstChild;
}
}
node = next;
}
return words;
};
SpellCheck.prototype._parseWords = function(text)
{
var words = [];
this._splitRegex.lastIndex = 0;
var result;
while (result = this._splitRegex.exec(text))
{
if (result[0].length == 0) break;
var word = result[1];
if (word)
{
words.push(word);
}
}
return words;
};
SpellCheck.prototype._processHtml = function(node)
{
while (node)
{
var next = this._nextNode(node);
if (node.nodeType == Util.Dom.NodeType.TEXT)
{
var deleteNode = true;
if (node.nodeValue)
{
var currentElements = this._elementsInserted;
this._processText(node, node.nodeValue);
if (currentElements == this._elementsInserted)
{
deleteNode = false;
}
}
if (deleteNode)
{
Util.Dom.removeNode(node);
}
}
else if (node.nodeType == Util.Dom.NodeType.ELEMENT)
{
if (node.className == this.wordClassName)
{
var runner = node.firstChild;
while (runner)
{
if (this._isTextLeaf(runner))
{
while (this._isTextLeaf(runner.nextSibling))
{
runner.nodeValue += runner.nextSibling.nodeValue;
Util.Dom.removeNode(runner.nextSibling);
}
}
runner = runner.nextSibling;
}
if (node.firstChild)
{
next = node.firstChild;
while (node.firstChild)
{
node.parentNode.insertBefore(node.firstChild, node);
}
}
Util.Dom.removeNode(node);
}
else
{
if (node.firstChild)
{
next = node.firstChild;
}
}
}
node = next;
}
};
SpellCheck.prototype._processText = function(node, text)
{
this._splitRegex.lastIndex = 0;
var stringSegmentStart = 0;
var result;
while (result = this._splitRegex.exec(text))
{
if (result[0].length == 0) break;
var word = result[1];
if (word)
{
var status = this._handler.checkWord(word);
if (status != SpellCheck.WordStatus.VALID)
{
var preceedingText = text.substr(stringSegmentStart, result.index - stringSegmentStart);
if (preceedingText)
{
this._processRange(node, preceedingText);
}
stringSegmentStart = result.index + word.length;
this._processWord(node, word, status);
}
}
}
var leftoverText = text.substr(stringSegmentStart);
if (leftoverText)
{
this._processRange(node, leftoverText);
}
return true;
};
SpellCheck.prototype._processRange = function(node, text)
{
if (node.nodeType == Util.Dom.NodeType.TEXT && node.nodeValue.length == text.length)
{
return;
}
node.parentNode.insertBefore(this._doc.createTextNode(text), node);
this._elementsInserted++;
};
SpellCheck.prototype._processWord = function(node, word, status)
{
var el = this._doc.createElement('a');
el.setAttribute('id', this.wordClassName + '-' + YUD.generateId());
el.setAttribute('href', '#');
YUD.addClass(el, this.wordClassName);
el.appendChild(this._doc.createTextNode(word));
this._registerWordElement(word, el);
node.parentNode.insertBefore(el, node);
this._elementsInserted++;
};
SpellCheck.prototype._restoreHtml = function(node)
{
while (node)
{
if (node.nodeType == Util.Dom.NodeType.ELEMENT && node.className == this.wordClassName)
{
var firstElement = node.firstChild;
var next;
for (var child = firstElement; child; child = next)
{
next = child.nextSibling;
node.parentNode.insertBefore(child, node);
}
next = firstElement || node.nextSibling;
Util.Dom.removeNode(node);
node = next;
continue;
}
var textLeaf = this._isTextLeaf(node);
if (textLeaf)
{
var textNodes = 1;
var next = node.nextSibling;
while (this._isTextLeaf(node.previousSibling))
{
node = node.previousSibling;
++textNodes;
}
while (this._isTextLeaf(next))
{
next = next.nextSibling;
++textNodes;
}
if (textNodes > 1)
{
var workBuffer = [];
workBuffer.push(node.nodeValue);
while (this._isTextLeaf(node.nextSibling))
{
workBuffer.push(node.nextSibling.nodeValue);
Util.Dom.removeNode(node.nextSibling);
}
node.nodeValue = workBuffer.join('');
}
}
if (node.firstChild)
{
this._restoreHtml(node.firstChild);
}
node = node.nextSibling;
}
};
SpellCheck.prototype.replaceWord = function(el, old, word)
{
if (old == word) return;
Util.Dom.setTextContent(el, word);
var status = SpellCheck.WordStatus.VALID;
var oldIndex = SpellCheck._toInternalKey(old);
var newIndex = SpellCheck._toInternalKey(word);
var elements = this._wordElements[oldIndex];
Util.Array.remove(elements, el);
if (status != SpellCheck.WordStatus.VALID)
{
if (this._wordElements[newIndex])
{
this._wordElements[newIndex].push(el);
}
else
{
this._wordElements[newIndex] = [el];
}
}
this.updateElement(el, word, status);
this.onWordChange.fire(
{
element: el,
word: word,
status: status
});
};
SpellCheck.prototype.updateElement = function(el, word, status)
{
if (status == SpellCheck.WordStatus.VALID)
{
this.removeMarkup(el);
}
else
{
Util.Dom.setProperties(el, this.getElementProperties(status));
}
};
SpellCheck.prototype.removeMarkup = function(el)
{
var firstChild = el.firstChild;
var text = firstChild.nodeValue;
if (el.nextSibling && el.nextSibling.nodeType == Util.Dom.NodeType.TEXT)
{
if (el.previousSibling && el.previousSibling.nodeType == Util.Dom.NodeType.TEXT)
{
el.previousSibling.nodeValue = el.previousSibling.nodeValue + text + el.nextSibling.nodeValue;
Util.Dom.removeNode(el.nextSibling);
}
else
{
el.nextSibling.nodeValue = text + el.nextSibling.nodeValue;
}
}
else if (el.previousSibling && el.previousSibling.nodeType == Util.Dom.NodeType.TEXT)
{
el.previousSibling.nodeValue += text;
}
else
{
el.parentNode.insertBefore(firstChild, el);
}
Util.Dom.removeNode(el);
};
SpellCheck.prototype._registerWordElement = function(word, el)
{
var index = SpellCheck._toInternalKey(word);
if (this._wordElements[index])
{
this._wordElements[index].push(el);
}
else
{
this._wordElements[index] = [el];
}
};
SpellCheck._toInternalKey = function(word)
{
if (word in Object.prototype)
{
return SpellCheck._KEY_PREFIX + word;
}
return word;
};
SpellCheck.prototype._nextNode = function(node)
{
while (node != this._rootNode)
{
if (node.nextSibling)
{
return node.nextSibling;
}
node = node.parentNode;
}
return null;
};
SpellCheck.prototype._isTextLeaf = function(node)
{
return node != null && node.nodeType == Util.Dom.NodeType.TEXT && !node.firstChild;
};
SpellCheck.prototype.getElementProperties = function(status)
{
return {
'class': this.wordClassName,
'style': (status == SpellCheck.WordStatus.INVALID) ? this.invalidWordCssText : ''
};
};

// FILE: spellcheck_manager.js (c281adaa) 3/7/2014 11:24:14 AM

var SpellCheckManager =
{
_language: 'ENU',
_lookupInProgress: false,
_unknownWords: [],
_cache: {},
onDictionaryReady: new YAHOO.util.CustomEvent('onDictionaryReady', SpellCheckManager, false, YAHOO.util.CustomEvent.FLAT),
_mozDictionary: null,
_cacheHolder: [],
_dictionaryHolder: []
};
SpellCheckManager.getLanguage = function()
{
return this._language;
};
SpellCheckManager.setLanguage = function(lang) {
this._language = lang;
if (this._cacheHolder[lang.toLowerCase()] == null) {
this._cacheHolder[lang.toLowerCase()] = {};
}
if (this._dictionaryHolder[lang.toLowerCase()] == null) {
this._dictionaryHolder[lang.toLowerCase()] = new MozSpellChecker(lang.toLowerCase());
}
this._mozDictionary = this._dictionaryHolder[lang.toLowerCase()];
this._cache = this._cacheHolder[lang.toLowerCase()];
};
SpellCheckManager._getCachedWord = function(word)
{
if (YAHOO.lang.hasOwnProperty(this._cache, word))
{
return this._cache[word];
}
return null;
};
SpellCheckManager.getSuggestions = function(word)
{
var cacheEntry = this._getCachedWord(word);
if (cacheEntry)
{
return cacheEntry['suggestions'];
}
return null;
};
SpellCheckManager.checkWord = function(word)
{
var cacheEntry = this._getCachedWord(word);
if (!cacheEntry)
{
this._unknownWords.push(word);
return SpellCheck.WordStatus.UNKNOWN;
}
return cacheEntry['status'];
};
SpellCheckManager.lookupWords = function(words)
{
words = Util.Array.unique(words);
for (var i = 0; i < words.length; i++)
{
var word = words[i];
var status = this.checkWord(word);
}
if (this._unknownWords.length > 0)
{
this._lookupInProgress = true;
this.processWords();
return true;
}
this.onDictionaryReady.fire();
return false;
};
SpellCheckManager.processWords = function()
{
var text = this._unknownWords.join(' ');
SpellCheck.XHR.getErrors(this._language, text, function(spellingErrors)
{
SpellCheckManager._receivedWordErrors(spellingErrors);
});
};
SpellCheckManager._receivedWords = function(misspelledWords)
{
if (misspelledWords)
{
for (var i = 0; i < this._unknownWords.length; i++)
{
var unknownWord = this._unknownWords[i];
var isMisspelled = false;
for (var j = 0; j < misspelledWords.length; j++)
{
var misspelledWord = misspelledWords[j];
if (unknownWord == misspelledWord)
{
isMisspelled = true;
break;
}
}
this._cache[unknownWord] =
{
status: isMisspelled ? SpellCheck.WordStatus.INVALID : SpellCheck.WordStatus.VALID
};
}
}
this._lookupInProgress = false;
this._unknownWords = [];
this.onDictionaryReady.fire();
};
SpellCheckManager._receivedWordErrors = function(spellingErrors)
{
if (spellingErrors)
{
for (var i = 0; i < this._unknownWords.length; i++)
{
var unknownWord = this._unknownWords[i];
var isMisspelled = false;
var spellingError = null;
for (var j = 0; j < spellingErrors.length; j++)
{
spellingError = spellingErrors[j];
if (unknownWord == spellingError.word)
{
isMisspelled = true;
break;
}
}
if (isMisspelled)
{
this._cache[unknownWord] =
{
status: SpellCheck.WordStatus.INVALID,
suggestions: spellingError.suggestions
};
}
else
{
this._cache[unknownWord] =
{
status: SpellCheck.WordStatus.VALID,
suggestions: null
};
}
}
}
this._lookupInProgress = false;
this._unknownWords = [];
this.onDictionaryReady.fire();
};

// FILE: spellcheck_server.js (b88e6fe0) 3/7/2014 11:24:14 AM

SpellCheck.XHR = { };
SpellCheck.XHR.onRequest = new YAHOO.util.CustomEvent('onRequest', SpellCheck.XHR, false, YAHOO.util.CustomEvent.FLAT),
SpellCheck.XHR.onComplete = new YAHOO.util.CustomEvent('onComplete', SpellCheck.XHR, false, YAHOO.util.CustomEvent.FLAT),
SpellCheck.XHR.onSuccess = new YAHOO.util.CustomEvent('onSuccess', SpellCheck.XHR, false, YAHOO.util.CustomEvent.FLAT),
SpellCheck.XHR.onFailure = new YAHOO.util.CustomEvent('onFailure', SpellCheck.XHR, false, YAHOO.util.CustomEvent.FLAT),
SpellCheck.XHR._encodeText = function(text)
{
return encodeURIComponent(text).replace(/%20/g, '+');
};
SpellCheck.XHR._sendRequest = function(action, language, text, success, failure)
{
var spellCheckSuccess = function(xhrObj)
{
SpellCheck.XHR.onComplete.fire();
SpellCheck.XHR.onSuccess.fire();
var contentType = xhrObj.getResponseHeader['Content-Type'];
var responseText = xhrObj.responseText;
var data = null;
if (contentType == 'text/plain')
{
data = xhrObj.responseText;
}
else if (contentType == 'application/json')
{
var jsonString = xhrObj.responseText;
data = YAHOO.lang.JSON.parse(jsonString);
}
if (typeof (success) == 'function')
{
success(action, data);
}
};
var spellCheckFailure = function(xhrObj)
{
SpellCheck.XHR.onComplete.fire();
SpellCheck.XHR.onFailure.fire();
if (typeof (failure) == 'function')
{
failure(xhrObj);
}
};
var callback =
{
success: spellCheckSuccess,
failure: spellCheckFailure,
timeout: 30000
};
var url = 'SpellEngine.axd/' + action + '?lang=' + language;
var postData = 'text=' + this._encodeText(text);
var id = YAHOO.util.Connect.asyncRequest('POST', url, callback, postData);
SpellCheck.XHR.onRequest.fire();
return id;
};
SpellCheck.XHR.checkWord = function(language, word, success, failure)
{
return SpellCheck.XHR._sendRequest('checkWord', language, word, function(action, data)
{
success(data);
});
};
SpellCheck.XHR.checkText = function(language, text, success, failure)
{
return SpellCheck.XHR._sendRequest('checkText', language, text, function(action, data)
{
success(data);
});
};
SpellCheck.XHR.getSuggestions = function(language, word, success, failure)
{
return SpellCheck.XHR._sendRequest('getSuggestions', language, word, function(action, data)
{
success(data);
});
};
SpellCheck.XHR.getErrors = function(language, text, success, failure)
{
return SpellCheck.XHR._sendRequest('getErrors', language, text, function(action, data)
{
success(data);
});
};

// FILE: spellcheck_mozilla.js (a1d3ac53) 3/7/2014 11:24:14 AM

function MozSpellChecker(language) {
this._lang = (language.length > 2) ? language.substr(0, 2) : language;
this._spellCheckEngine = null;
this._dictionaryLoaded = false;
this._init = function() {
try {
if (typeof (Components) != "object") {
this._spellCheckEngine = null;
return;
}
var spellclass = "@mozilla.org/spellchecker/engine;1";
this._spellCheckEngine = Components.classes[spellclass].createInstance(Components.interfaces.mozISpellCheckingEngine);
} catch (ex) {
this._spellCheckEngine = null;
}
}
this._findDictionary = function(lang) {
if (this._spellCheckEngine != null && lang != null) {
var dictList = new Array();
var dictListLength = new Object();
this._spellCheckEngine.getDictionaryList(dictList, dictListLength);
for (var d = 0; d < dictListLength.value; d++) {
if (dictList.value[d] == lang)
return dictList.value[d];
}
var shortLang
if (lang.indexOf("-") > -1) {
shortLang = lang.substring(0, lang.indexOf("-"));
} else {
shortLang = lang;
}
for (var d = 0; d < dictListLength.value; d++) {
var shortLangDict
if (dictList.value[d].indexOf("-") > -1) {
shortLangDict = dictList.value[d].substring(0, dictList.value[d].indexOf("-"));
} else {
shortLangDict = dictList.value[d]
}
if (shortLangDict == shortLang)
return dictList.value[d];
}
}
return null;
}
this._load = function() {
this._init()
var dict = this._findDictionary(this._lang);
if (dict != null && this._spellCheckEngine != null) {
this._spellCheckEngine.dictionary = dict;
this._dictionaryLoaded = true;
return true;
}
return false;
}
this.availableForUse = function() {
return this._dictionaryLoaded;
}
this.checkSpelling = function(wordList, provideSuggestions) {
var errors = new Array();
var numErrors = 0, wordsChecked = 0;
var status = "ERROR";
var len = (wordList != null) ? wordList.length : 0;
if (this._dictionaryLoaded) {
status = "SUCCESS";
for (var i = 0; i < len; i++) {
var word = wordList[i];
wordsChecked++;
if (!this._spellCheckEngine.check(word)) {
var suggestions = {};
if (provideSuggestions) {
this._spellCheckEngine.suggest(word, suggestions, {});
}
errors[numErrors] = { "word": word, "suggestions": suggestions.value };
numErrors++;
}
}
}
return errors;
}
this._load();
}

// FILE: ckeditor.js (be5255d8) 5/2/2014 12:55:57 PM

(function(){if(window.CKEDITOR&&window.CKEDITOR.dom)return;window.CKEDITOR||(window.CKEDITOR=function(){var a={timestamp:"E2PC",version:"4.3.4",revision:"40ccd20",rnd:Math.floor(900*Math.random())+100,_:{pending:[]},status:"unloaded",basePath:function(){var b=window.CKEDITOR_BASEPATH||"";if(!b)for(var e=document.getElementsByTagName("script"),a=0;a<e.length;a++){var d=e[a].src.match(/(^|.*[\\\/])ckeditor(?:_basic)?(?:_source)?.js(?:\?.*)?$/i);if(d){b=d[1];break}}-1==b.indexOf(":/")&&"//"!=b.slice(0,2)&&(b=0===b.indexOf("/")?location.href.match(/^.*?:\/\/[^\/]*/)[0]+
b:location.href.match(/^[^\?]*\/(?:)/)[0]+b);if(!b)throw'The CKEditor installation path could not be automatically detected. Please set the global variable "CKEDITOR_BASEPATH" before creating editor instances.';return b}(),getUrl:function(b){-1==b.indexOf(":/")&&0!==b.indexOf("/")&&(b=this.basePath+b);this.timestamp&&("/"!=b.charAt(b.length-1)&&!/[&?]t=/.test(b))&&(b+=(0<=b.indexOf("?")?"&":"?")+"t="+this.timestamp);return b},domReady:function(){function b(){try{document.addEventListener?(document.removeEventListener("DOMContentLoaded",
b,!1),e()):document.attachEvent&&"complete"===document.readyState&&(document.detachEvent("onreadystatechange",b),e())}catch(a){}}function e(){for(var e;e=a.shift();)e()}var a=[];return function(e){a.push(e);"complete"===document.readyState&&setTimeout(b,1);if(1==a.length)if(document.addEventListener)document.addEventListener("DOMContentLoaded",b,!1),window.addEventListener("load",b,!1);else if(document.attachEvent){document.attachEvent("onreadystatechange",b);window.attachEvent("onload",b);e=!1;try{e=
!window.frameElement}catch(d){}if(document.documentElement.doScroll&&e){var h=function(){try{document.documentElement.doScroll("left")}catch(e){setTimeout(h,1);return}b()};h()}}}}()},d=window.CKEDITOR_GETURL;if(d){var b=a.getUrl;a.getUrl=function(c){return d.call(a,c)||b.call(a,c)}}return a}());
CKEDITOR.event||(CKEDITOR.event=function(){},CKEDITOR.event.implementOn=function(a){var d=CKEDITOR.event.prototype,b;for(b in d)a[b]==void 0&&(a[b]=d[b])},CKEDITOR.event.prototype=function(){function a(a){var e=d(this);return e[a]||(e[a]=new b(a))}var d=function(b){b=b.getPrivate&&b.getPrivate()||b._||(b._={});return b.events||(b.events={})},b=function(b){this.name=b;this.listeners=[]};b.prototype={getListenerIndex:function(b){for(var e=0,a=this.listeners;e<a.length;e++)if(a[e].fn==b)return e;return-1}};
return{define:function(b,e){var i=a.call(this,b);CKEDITOR.tools.extend(i,e,true)},on:function(b,e,i,d,l){function h(a,f,o,s){a={name:b,sender:this,editor:a,data:f,listenerData:d,stop:o,cancel:s,removeListener:k};return e.call(i,a)===false?false:a.data}function k(){s.removeListener(b,e)}var o=a.call(this,b);if(o.getListenerIndex(e)<0){o=o.listeners;i||(i=this);isNaN(l)&&(l=10);var s=this;h.fn=e;h.priority=l;for(var q=o.length-1;q>=0;q--)if(o[q].priority<=l){o.splice(q+1,0,h);return{removeListener:k}}o.unshift(h)}return{removeListener:k}},
once:function(){var b=arguments[1];arguments[1]=function(e){e.removeListener();return b.apply(this,arguments)};return this.on.apply(this,arguments)},capture:function(){CKEDITOR.event.useCapture=1;var b=this.on.apply(this,arguments);CKEDITOR.event.useCapture=0;return b},fire:function(){var b=0,e=function(){b=1},a=0,g=function(){a=1};return function(l,h,k){var o=d(this)[l],l=b,s=a;b=a=0;if(o){var q=o.listeners;if(q.length)for(var q=q.slice(0),u,f=0;f<q.length;f++){if(o.errorProof)try{u=q[f].call(this,
k,h,e,g)}catch(p){}else u=q[f].call(this,k,h,e,g);u===false?a=1:typeof u!="undefined"&&(h=u);if(b||a)break}}h=a?false:typeof h=="undefined"?true:h;b=l;a=s;return h}}(),fireOnce:function(b,e,a){e=this.fire(b,e,a);delete d(this)[b];return e},removeListener:function(b,e){var a=d(this)[b];if(a){var g=a.getListenerIndex(e);g>=0&&a.listeners.splice(g,1)}},removeAllListeners:function(){var b=d(this),e;for(e in b)delete b[e]},hasListeners:function(b){return(b=d(this)[b])&&b.listeners.length>0}}}());
CKEDITOR.editor||(CKEDITOR.editor=function(){CKEDITOR._.pending.push([this,arguments]);CKEDITOR.event.call(this)},CKEDITOR.editor.prototype.fire=function(a,d){a in{instanceReady:1,loaded:1}&&(this[a]=true);return CKEDITOR.event.prototype.fire.call(this,a,d,this)},CKEDITOR.editor.prototype.fireOnce=function(a,d){a in{instanceReady:1,loaded:1}&&(this[a]=true);return CKEDITOR.event.prototype.fireOnce.call(this,a,d,this)},CKEDITOR.event.implementOn(CKEDITOR.editor.prototype));
CKEDITOR.env||(CKEDITOR.env=function(){var a=navigator.userAgent.toLowerCase(),d=window.opera,b={ie:a.indexOf("trident/")>-1,opera:!!d&&d.version,webkit:a.indexOf(" applewebkit/")>-1,air:a.indexOf(" adobeair/")>-1,mac:a.indexOf("macintosh")>-1,quirks:document.compatMode=="BackCompat"&&(!document.documentMode||document.documentMode<10),mobile:a.indexOf("mobile")>-1,iOS:/(ipad|iphone|ipod)/.test(a),isCustomDomain:function(){if(!this.ie)return false;var b=document.domain,e=window.location.hostname;return b!=
e&&b!="["+e+"]"},secure:location.protocol=="https:"};b.gecko=navigator.product=="Gecko"&&!b.webkit&&!b.opera&&!b.ie;if(b.webkit)a.indexOf("chrome")>-1?b.chrome=true:b.safari=true;var c=0;if(b.ie){c=b.quirks||!document.documentMode?parseFloat(a.match(/msie (\d+)/)[1]):document.documentMode;b.ie9Compat=c==9;b.ie8Compat=c==8;b.ie7Compat=c==7;b.ie6Compat=c<7||b.quirks}if(b.gecko){var e=a.match(/rv:([\d\.]+)/);if(e){e=e[1].split(".");c=e[0]*1E4+(e[1]||0)*100+(e[2]||0)*1}}b.opera&&(c=parseFloat(d.version()));
b.air&&(c=parseFloat(a.match(/ adobeair\/(\d+)/)[1]));b.webkit&&(c=parseFloat(a.match(/ applewebkit\/(\d+)/)[1]));b.version=c;b.isCompatible=b.iOS&&c>=534||!b.mobile&&(b.ie&&c>6||b.gecko&&c>=10801||b.opera&&c>=9.5||b.air&&c>=1||b.webkit&&c>=522||false);b.hidpi=window.devicePixelRatio>=2;b.needsBrFiller=b.gecko||b.webkit||b.ie&&c>10;b.needsNbspFiller=b.ie&&c<11;b.cssClass="cke_browser_"+(b.ie?"ie":b.gecko?"gecko":b.opera?"opera":b.webkit?"webkit":"unknown");if(b.quirks)b.cssClass=b.cssClass+" cke_browser_quirks";
if(b.ie){b.cssClass=b.cssClass+(" cke_browser_ie"+(b.quirks||b.version<7?"6":b.version));if(b.quirks)b.cssClass=b.cssClass+" cke_browser_iequirks"}if(b.gecko)if(c<10900)b.cssClass=b.cssClass+" cke_browser_gecko18";else if(c<=11E3)b.cssClass=b.cssClass+" cke_browser_gecko19";if(b.air)b.cssClass=b.cssClass+" cke_browser_air";if(b.iOS)b.cssClass=b.cssClass+" cke_browser_ios";if(b.hidpi)b.cssClass=b.cssClass+" cke_hidpi";return b}());
"unloaded"==CKEDITOR.status&&function(){CKEDITOR.event.implementOn(CKEDITOR);CKEDITOR.loadFullCore=function(){if(CKEDITOR.status!="basic_ready")CKEDITOR.loadFullCore._load=1;else{delete CKEDITOR.loadFullCore;var a=document.createElement("script");a.type="text/javascript";a.src=CKEDITOR.basePath+"ckeditor.js";document.getElementsByTagName("head")[0].appendChild(a)}};CKEDITOR.loadFullCoreTimeout=0;CKEDITOR.add=function(a){(this._.pending||(this._.pending=[])).push(a)};(function(){CKEDITOR.domReady(function(){var a=
CKEDITOR.loadFullCore,d=CKEDITOR.loadFullCoreTimeout;if(a){CKEDITOR.status="basic_ready";a&&a._load?a():d&&setTimeout(function(){CKEDITOR.loadFullCore&&CKEDITOR.loadFullCore()},d*1E3)}})})();CKEDITOR.status="basic_loaded"}();CKEDITOR.dom={};
(function(){var a=[],d=CKEDITOR.env.gecko?"-moz-":CKEDITOR.env.webkit?"-webkit-":CKEDITOR.env.opera?"-o-":CKEDITOR.env.ie?"-ms-":"";CKEDITOR.on("reset",function(){a=[]});CKEDITOR.tools={arrayCompare:function(b,a){if(!b&&!a)return true;if(!b||!a||b.length!=a.length)return false;for(var e=0;e<b.length;e++)if(b[e]!=a[e])return false;return true},clone:function(b){var a;if(b&&b instanceof Array){a=[];for(var e=0;e<b.length;e++)a[e]=CKEDITOR.tools.clone(b[e]);return a}if(b===null||typeof b!="object"||
b instanceof String||b instanceof Number||b instanceof Boolean||b instanceof Date||b instanceof RegExp)return b;a=new b.constructor;for(e in b)a[e]=CKEDITOR.tools.clone(b[e]);return a},capitalize:function(b,a){return b.charAt(0).toUpperCase()+(a?b.slice(1):b.slice(1).toLowerCase())},extend:function(b){var a=arguments.length,e,i;if(typeof(e=arguments[a-1])=="boolean")a--;else if(typeof(e=arguments[a-2])=="boolean"){i=arguments[a-1];a=a-2}for(var d=1;d<a;d++){var l=arguments[d],h;for(h in l)if(e===
true||b[h]==void 0)if(!i||h in i)b[h]=l[h]}return b},prototypedCopy:function(b){var a=function(){};a.prototype=b;return new a},copy:function(b){var a={},e;for(e in b)a[e]=b[e];return a},isArray:function(b){return Object.prototype.toString.call(b)=="[object Array]"},isEmpty:function(b){for(var a in b)if(b.hasOwnProperty(a))return false;return true},cssVendorPrefix:function(b,a,e){if(e)return d+b+":"+a+";"+b+":"+a;e={};e[b]=a;e[d+b]=a;return e},cssStyleToDomStyle:function(){var b=document.createElement("div").style,
a=typeof b.cssFloat!="undefined"?"cssFloat":typeof b.styleFloat!="undefined"?"styleFloat":"float";return function(b){return b=="float"?a:b.replace(/-./g,function(b){return b.substr(1).toUpperCase()})}}(),buildStyleHtml:function(b){for(var b=[].concat(b),a,e=[],i=0;i<b.length;i++)if(a=b[i])/@import|[{}]/.test(a)?e.push("<style>"+a+"</style>"):e.push('<link type="text/css" rel=stylesheet href="'+a+'">');return e.join("")},htmlEncode:function(b){return(""+b).replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,
"&lt;")},htmlEncodeAttr:function(b){return b.replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},htmlDecodeAttr:function(b){return b.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">")},getNextNumber:function(){var b=0;return function(){return++b}}(),getNextId:function(){return"cke_"+this.getNextNumber()},override:function(b,a){var e=a(b);e.prototype=b.prototype;return e},setTimeout:function(b,a,e,i,d){d||(d=window);e||(e=d);return d.setTimeout(function(){i?b.apply(e,[].concat(i)):
b.apply(e)},a||0)},trim:function(){var b=/(?:^[ \t\n\r]+)|(?:[ \t\n\r]+$)/g;return function(a){return a.replace(b,"")}}(),ltrim:function(){var b=/^[ \t\n\r]+/g;return function(a){return a.replace(b,"")}}(),rtrim:function(){var b=/[ \t\n\r]+$/g;return function(a){return a.replace(b,"")}}(),indexOf:function(b,a){if(typeof a=="function")for(var e=0,i=b.length;e<i;e++){if(a(b[e]))return e}else{if(b.indexOf)return b.indexOf(a);e=0;for(i=b.length;e<i;e++)if(b[e]===a)return e}return-1},search:function(b,
a){var e=CKEDITOR.tools.indexOf(b,a);return e>=0?b[e]:null},bind:function(b,a){return function(){return b.apply(a,arguments)}},createClass:function(b){var a=b.$,e=b.base,i=b.privates||b._,d=b.proto,b=b.statics;!a&&(a=function(){e&&this.base.apply(this,arguments)});if(i)var l=a,a=function(){var a=this._||(this._={}),b;for(b in i){var e=i[b];a[b]=typeof e=="function"?CKEDITOR.tools.bind(e,this):e}l.apply(this,arguments)};if(e){a.prototype=this.prototypedCopy(e.prototype);a.prototype.constructor=a;a.base=
e;a.baseProto=e.prototype;a.prototype.base=function(){this.base=e.prototype.base;e.apply(this,arguments);this.base=arguments.callee}}d&&this.extend(a.prototype,d,true);b&&this.extend(a,b,true);return a},addFunction:function(b,c){return a.push(function(){return b.apply(c||this,arguments)})-1},removeFunction:function(b){a[b]=null},callFunction:function(b){var c=a[b];return c&&c.apply(window,Array.prototype.slice.call(arguments,1))},cssLength:function(){var a=/^-?\d+\.?\d*px$/,c;return function(e){c=
CKEDITOR.tools.trim(e+"")+"px";return a.test(c)?c:e||""}}(),convertToPx:function(){var a;return function(c){if(!a){a=CKEDITOR.dom.element.createFromHtml('<div style="position:absolute;left:-9999px;top:-9999px;margin:0px;padding:0px;border:0px;"></div>',CKEDITOR.document);CKEDITOR.document.getBody().append(a)}if(!/%$/.test(c)){a.setStyle("width",c);return a.$.clientWidth}return c}}(),repeat:function(a,c){return Array(c+1).join(a)},tryThese:function(){for(var a,c=0,e=arguments.length;c<e;c++){var i=
arguments[c];try{a=i();break}catch(d){}}return a},genKey:function(){return Array.prototype.slice.call(arguments).join("-")},defer:function(a){return function(){var c=arguments,e=this;window.setTimeout(function(){a.apply(e,c)},0)}},normalizeCssText:function(a,c){var e=[],i,d=CKEDITOR.tools.parseCssText(a,true,c);for(i in d)e.push(i+":"+d[i]);e.sort();return e.length?e.join(";")+";":""},convertRgbToHex:function(a){return a.replace(/(?:rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\))/gi,function(a,b,i,d){a=
[b,i,d];for(b=0;b<3;b++)a[b]=("0"+parseInt(a[b],10).toString(16)).slice(-2);return"#"+a.join("")})},parseCssText:function(a,c,e){var i={};if(e){e=new CKEDITOR.dom.element("span");e.setAttribute("style",a);a=CKEDITOR.tools.convertRgbToHex(e.getAttribute("style")||"")}if(!a||a==";")return i;a.replace(/&quot;/g,'"').replace(/\s*([^:;\s]+)\s*:\s*([^;]+)\s*(?=;|$)/g,function(a,b,e){if(c){b=b.toLowerCase();b=="font-family"&&(e=e.toLowerCase().replace(/["']/g,"").replace(/\s*,\s*/g,","));e=CKEDITOR.tools.trim(e)}i[b]=
e});return i},writeCssText:function(a,c){var e,i=[];for(e in a)i.push(e+":"+a[e]);c&&i.sort();return i.join("; ")},objectCompare:function(a,c,e){var i;if(!a&&!c)return true;if(!a||!c)return false;for(i in a)if(a[i]!=c[i])return false;if(!e)for(i in c)if(a[i]!=c[i])return false;return true},objectKeys:function(a){var c=[],e;for(e in a)c.push(e);return c},convertArrayToObject:function(a,c){var e={};arguments.length==1&&(c=true);for(var i=0,d=a.length;i<d;++i)e[a[i]]=c;return e},fixDomain:function(){for(var a;;)try{a=
window.parent.document.domain;break}catch(c){a=a?a.replace(/.+?(?:\.|$)/,""):document.domain;if(!a)break;document.domain=a}return!!a},eventsBuffer:function(a,c){function e(){d=(new Date).getTime();i=false;c()}var i,d=0;return{input:function(){if(!i){var c=(new Date).getTime()-d;c<a?i=setTimeout(e,a-c):e()}},reset:function(){i&&clearTimeout(i);i=d=0}}},enableHtml5Elements:function(a,c){for(var e=["abbr","article","aside","audio","bdi","canvas","data","datalist","details","figcaption","figure","footer",
"header","hgroup","mark","meter","nav","output","progress","section","summary","time","video"],i=e.length,d;i--;){d=a.createElement(e[i]);c&&a.appendChild(d)}}}})();
CKEDITOR.dtd=function(){var a=CKEDITOR.tools.extend,d=function(a,e){for(var b=CKEDITOR.tools.clone(a),i=1;i<arguments.length;i++){var e=arguments[i],c;for(c in e)delete b[c]}return b},b={},c={},e={address:1,article:1,aside:1,blockquote:1,details:1,div:1,dl:1,fieldset:1,figure:1,footer:1,form:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,header:1,hgroup:1,hr:1,menu:1,nav:1,ol:1,p:1,pre:1,section:1,table:1,ul:1},i={command:1,link:1,meta:1,noscript:1,script:1,style:1},g={},l={"#":1},h={center:1,dir:1,noframes:1};
a(b,{a:1,abbr:1,area:1,audio:1,b:1,bdi:1,bdo:1,br:1,button:1,canvas:1,cite:1,code:1,command:1,datalist:1,del:1,dfn:1,em:1,embed:1,i:1,iframe:1,img:1,input:1,ins:1,kbd:1,keygen:1,label:1,map:1,mark:1,meter:1,noscript:1,object:1,output:1,progress:1,q:1,ruby:1,s:1,samp:1,script:1,select:1,small:1,span:1,strong:1,sub:1,sup:1,textarea:1,time:1,u:1,"var":1,video:1,wbr:1},l,{acronym:1,applet:1,basefont:1,big:1,font:1,isindex:1,strike:1,style:1,tt:1});a(c,e,b,h);d={a:d(b,{a:1,button:1}),abbr:b,address:c,
area:g,article:a({style:1},c),aside:a({style:1},c),audio:a({source:1,track:1},c),b:b,base:g,bdi:b,bdo:b,blockquote:c,body:c,br:g,button:d(b,{a:1,button:1}),canvas:b,caption:c,cite:b,code:b,col:g,colgroup:{col:1},command:g,datalist:a({option:1},b),dd:c,del:b,details:a({summary:1},c),dfn:b,div:a({style:1},c),dl:{dt:1,dd:1},dt:c,em:b,embed:g,fieldset:a({legend:1},c),figcaption:c,figure:a({figcaption:1},c),footer:c,form:c,h1:b,h2:b,h3:b,h4:b,h5:b,h6:b,head:a({title:1,base:1},i),header:c,hgroup:{h1:1,
h2:1,h3:1,h4:1,h5:1,h6:1},hr:g,html:a({head:1,body:1},c,i),i:b,iframe:l,img:g,input:g,ins:b,kbd:b,keygen:g,label:b,legend:b,li:c,link:g,map:c,mark:b,menu:a({li:1},c),meta:g,meter:d(b,{meter:1}),nav:c,noscript:a({link:1,meta:1,style:1},b),object:a({param:1},b),ol:{li:1},optgroup:{option:1},option:l,output:b,p:b,param:g,pre:b,progress:d(b,{progress:1}),q:b,rp:b,rt:b,ruby:a({rp:1,rt:1},b),s:b,samp:b,script:l,section:a({style:1},c),select:{optgroup:1,option:1},small:b,source:g,span:b,strong:b,style:l,
sub:b,summary:b,sup:b,table:{caption:1,colgroup:1,thead:1,tfoot:1,tbody:1,tr:1},tbody:{tr:1},td:c,textarea:l,tfoot:{tr:1},th:c,thead:{tr:1},time:d(b,{time:1}),title:l,tr:{th:1,td:1},track:g,u:b,ul:{li:1},"var":b,video:a({source:1,track:1},c),wbr:g,acronym:b,applet:a({param:1},c),basefont:g,big:b,center:c,dialog:g,dir:{li:1},font:b,isindex:g,noframes:c,strike:b,tt:b};a(d,{$block:a({audio:1,dd:1,dt:1,figcaption:1,li:1,video:1},e,h),$blockLimit:{article:1,aside:1,audio:1,body:1,caption:1,details:1,dir:1,
div:1,dl:1,fieldset:1,figcaption:1,figure:1,footer:1,form:1,header:1,hgroup:1,menu:1,nav:1,ol:1,section:1,table:1,td:1,th:1,tr:1,ul:1,video:1},$cdata:{script:1,style:1},$editable:{address:1,article:1,aside:1,blockquote:1,body:1,details:1,div:1,fieldset:1,figcaption:1,footer:1,form:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,header:1,hgroup:1,nav:1,p:1,pre:1,section:1},$empty:{area:1,base:1,basefont:1,br:1,col:1,command:1,dialog:1,embed:1,hr:1,img:1,input:1,isindex:1,keygen:1,link:1,meta:1,param:1,source:1,track:1,
wbr:1},$inline:b,$list:{dl:1,ol:1,ul:1},$listItem:{dd:1,dt:1,li:1},$nonBodyContent:a({body:1,head:1,html:1},d.head),$nonEditable:{applet:1,audio:1,button:1,embed:1,iframe:1,map:1,object:1,option:1,param:1,script:1,textarea:1,video:1},$object:{applet:1,audio:1,button:1,hr:1,iframe:1,img:1,input:1,object:1,select:1,table:1,textarea:1,video:1},$removeEmpty:{abbr:1,acronym:1,b:1,bdi:1,bdo:1,big:1,cite:1,code:1,del:1,dfn:1,em:1,font:1,i:1,ins:1,label:1,kbd:1,mark:1,meter:1,output:1,q:1,ruby:1,s:1,samp:1,
small:1,span:1,strike:1,strong:1,sub:1,sup:1,time:1,tt:1,u:1,"var":1},$tabIndex:{a:1,area:1,button:1,input:1,object:1,select:1,textarea:1},$tableContent:{caption:1,col:1,colgroup:1,tbody:1,td:1,tfoot:1,th:1,thead:1,tr:1},$transparent:{a:1,audio:1,canvas:1,del:1,ins:1,map:1,noscript:1,object:1,video:1},$intermediate:{caption:1,colgroup:1,dd:1,dt:1,figcaption:1,legend:1,li:1,optgroup:1,option:1,rp:1,rt:1,summary:1,tbody:1,td:1,tfoot:1,th:1,thead:1,tr:1}});return d}();
CKEDITOR.dom.event=function(a){this.$=a};
CKEDITOR.dom.event.prototype={getKey:function(){return this.$.keyCode||this.$.which},getKeystroke:function(){var a=this.getKey();if(this.$.ctrlKey||this.$.metaKey)a=a+CKEDITOR.CTRL;this.$.shiftKey&&(a=a+CKEDITOR.SHIFT);this.$.altKey&&(a=a+CKEDITOR.ALT);return a},preventDefault:function(a){var d=this.$;d.preventDefault?d.preventDefault():d.returnValue=false;a&&this.stopPropagation()},stopPropagation:function(){var a=this.$;a.stopPropagation?a.stopPropagation():a.cancelBubble=true},getTarget:function(){var a=
this.$.target||this.$.srcElement;return a?new CKEDITOR.dom.node(a):null},getPhase:function(){return this.$.eventPhase||2},getPageOffset:function(){var a=this.getTarget().getDocument().$;return{x:this.$.pageX||this.$.clientX+(a.documentElement.scrollLeft||a.body.scrollLeft),y:this.$.pageY||this.$.clientY+(a.documentElement.scrollTop||a.body.scrollTop)}}};CKEDITOR.CTRL=1114112;CKEDITOR.SHIFT=2228224;CKEDITOR.ALT=4456448;CKEDITOR.EVENT_PHASE_CAPTURING=1;CKEDITOR.EVENT_PHASE_AT_TARGET=2;
CKEDITOR.EVENT_PHASE_BUBBLING=3;CKEDITOR.dom.domObject=function(a){if(a)this.$=a};
CKEDITOR.dom.domObject.prototype=function(){var a=function(a,b){return function(c){typeof CKEDITOR!="undefined"&&a.fire(b,new CKEDITOR.dom.event(c))}};return{getPrivate:function(){var a;if(!(a=this.getCustomData("_")))this.setCustomData("_",a={});return a},on:function(d){var b=this.getCustomData("_cke_nativeListeners");if(!b){b={};this.setCustomData("_cke_nativeListeners",b)}if(!b[d]){b=b[d]=a(this,d);this.$.addEventListener?this.$.addEventListener(d,b,!!CKEDITOR.event.useCapture):this.$.attachEvent&&
this.$.attachEvent("on"+d,b)}return CKEDITOR.event.prototype.on.apply(this,arguments)},removeListener:function(a){CKEDITOR.event.prototype.removeListener.apply(this,arguments);if(!this.hasListeners(a)){var b=this.getCustomData("_cke_nativeListeners"),c=b&&b[a];if(c){this.$.removeEventListener?this.$.removeEventListener(a,c,false):this.$.detachEvent&&this.$.detachEvent("on"+a,c);delete b[a]}}},removeAllListeners:function(){var a=this.getCustomData("_cke_nativeListeners"),b;for(b in a){var c=a[b];this.$.detachEvent?
this.$.detachEvent("on"+b,c):this.$.removeEventListener&&this.$.removeEventListener(b,c,false);delete a[b]}CKEDITOR.event.prototype.removeAllListeners.call(this)}}}();
(function(a){var d={};CKEDITOR.on("reset",function(){d={}});a.equals=function(a){try{return a&&a.$===this.$}catch(c){return false}};a.setCustomData=function(a,c){var e=this.getUniqueId();(d[e]||(d[e]={}))[a]=c;return this};a.getCustomData=function(a){var c=this.$["data-cke-expando"];return(c=c&&d[c])&&a in c?c[a]:null};a.removeCustomData=function(a){var c=this.$["data-cke-expando"],c=c&&d[c],e,i;if(c){e=c[a];i=a in c;delete c[a]}return i?e:null};a.clearCustomData=function(){this.removeAllListeners();
var a=this.$["data-cke-expando"];a&&delete d[a]};a.getUniqueId=function(){return this.$["data-cke-expando"]||(this.$["data-cke-expando"]=CKEDITOR.tools.getNextNumber())};CKEDITOR.event.implementOn(a)})(CKEDITOR.dom.domObject.prototype);
CKEDITOR.dom.node=function(a){return a?new CKEDITOR.dom[a.nodeType==CKEDITOR.NODE_DOCUMENT?"document":a.nodeType==CKEDITOR.NODE_ELEMENT?"element":a.nodeType==CKEDITOR.NODE_TEXT?"text":a.nodeType==CKEDITOR.NODE_COMMENT?"comment":a.nodeType==CKEDITOR.NODE_DOCUMENT_FRAGMENT?"documentFragment":"domObject"](a):this};CKEDITOR.dom.node.prototype=new CKEDITOR.dom.domObject;CKEDITOR.NODE_ELEMENT=1;CKEDITOR.NODE_DOCUMENT=9;CKEDITOR.NODE_TEXT=3;CKEDITOR.NODE_COMMENT=8;CKEDITOR.NODE_DOCUMENT_FRAGMENT=11;
CKEDITOR.POSITION_IDENTICAL=0;CKEDITOR.POSITION_DISCONNECTED=1;CKEDITOR.POSITION_FOLLOWING=2;CKEDITOR.POSITION_PRECEDING=4;CKEDITOR.POSITION_IS_CONTAINED=8;CKEDITOR.POSITION_CONTAINS=16;
CKEDITOR.tools.extend(CKEDITOR.dom.node.prototype,{appendTo:function(a,d){a.append(this,d);return a},clone:function(a,d){var b=this.$.cloneNode(a),c=function(e){e["data-cke-expando"]&&(e["data-cke-expando"]=false);if(e.nodeType==CKEDITOR.NODE_ELEMENT){d||e.removeAttribute("id",false);if(a)for(var e=e.childNodes,b=0;b<e.length;b++)c(e[b])}};c(b);return new CKEDITOR.dom.node(b)},hasPrevious:function(){return!!this.$.previousSibling},hasNext:function(){return!!this.$.nextSibling},insertAfter:function(a){a.$.parentNode.insertBefore(this.$,
a.$.nextSibling);return a},insertBefore:function(a){a.$.parentNode.insertBefore(this.$,a.$);return a},insertBeforeMe:function(a){this.$.parentNode.insertBefore(a.$,this.$);return a},getAddress:function(a){for(var d=[],b=this.getDocument().$.documentElement,c=this.$;c&&c!=b;){var e=c.parentNode;e&&d.unshift(this.getIndex.call({$:c},a));c=e}return d},getDocument:function(){return new CKEDITOR.dom.document(this.$.ownerDocument||this.$.parentNode.ownerDocument)},getIndex:function(a){var d=this.$,b=-1,
c;if(!this.$.parentNode)return b;do if(!a||!(d!=this.$&&d.nodeType==CKEDITOR.NODE_TEXT&&(c||!d.nodeValue))){b++;c=d.nodeType==CKEDITOR.NODE_TEXT}while(d=d.previousSibling);return b},getNextSourceNode:function(a,d,b){if(b&&!b.call)var c=b,b=function(a){return!a.equals(c)};var a=!a&&this.getFirst&&this.getFirst(),e;if(!a){if(this.type==CKEDITOR.NODE_ELEMENT&&b&&b(this,true)===false)return null;a=this.getNext()}for(;!a&&(e=(e||this).getParent());){if(b&&b(e,true)===false)return null;a=e.getNext()}return!a||
b&&b(a)===false?null:d&&d!=a.type?a.getNextSourceNode(false,d,b):a},getPreviousSourceNode:function(a,d,b){if(b&&!b.call)var c=b,b=function(a){return!a.equals(c)};var a=!a&&this.getLast&&this.getLast(),e;if(!a){if(this.type==CKEDITOR.NODE_ELEMENT&&b&&b(this,true)===false)return null;a=this.getPrevious()}for(;!a&&(e=(e||this).getParent());){if(b&&b(e,true)===false)return null;a=e.getPrevious()}return!a||b&&b(a)===false?null:d&&a.type!=d?a.getPreviousSourceNode(false,d,b):a},getPrevious:function(a){var d=
this.$,b;do b=(d=d.previousSibling)&&d.nodeType!=10&&new CKEDITOR.dom.node(d);while(b&&a&&!a(b));return b},getNext:function(a){var d=this.$,b;do b=(d=d.nextSibling)&&new CKEDITOR.dom.node(d);while(b&&a&&!a(b));return b},getParent:function(a){var d=this.$.parentNode;return d&&(d.nodeType==CKEDITOR.NODE_ELEMENT||a&&d.nodeType==CKEDITOR.NODE_DOCUMENT_FRAGMENT)?new CKEDITOR.dom.node(d):null},getParents:function(a){var d=this,b=[];do b[a?"push":"unshift"](d);while(d=d.getParent());return b},getCommonAncestor:function(a){if(a.equals(this))return this;
if(a.contains&&a.contains(this))return a;var d=this.contains?this:this.getParent();do if(d.contains(a))return d;while(d=d.getParent());return null},getPosition:function(a){var d=this.$,b=a.$;if(d.compareDocumentPosition)return d.compareDocumentPosition(b);if(d==b)return CKEDITOR.POSITION_IDENTICAL;if(this.type==CKEDITOR.NODE_ELEMENT&&a.type==CKEDITOR.NODE_ELEMENT){if(d.contains){if(d.contains(b))return CKEDITOR.POSITION_CONTAINS+CKEDITOR.POSITION_PRECEDING;if(b.contains(d))return CKEDITOR.POSITION_IS_CONTAINED+
CKEDITOR.POSITION_FOLLOWING}if("sourceIndex"in d)return d.sourceIndex<0||b.sourceIndex<0?CKEDITOR.POSITION_DISCONNECTED:d.sourceIndex<b.sourceIndex?CKEDITOR.POSITION_PRECEDING:CKEDITOR.POSITION_FOLLOWING}for(var d=this.getAddress(),a=a.getAddress(),b=Math.min(d.length,a.length),c=0;c<=b-1;c++)if(d[c]!=a[c]){if(c<b)return d[c]<a[c]?CKEDITOR.POSITION_PRECEDING:CKEDITOR.POSITION_FOLLOWING;break}return d.length<a.length?CKEDITOR.POSITION_CONTAINS+CKEDITOR.POSITION_PRECEDING:CKEDITOR.POSITION_IS_CONTAINED+
CKEDITOR.POSITION_FOLLOWING},getAscendant:function(a,d){var b=this.$,c;if(!d)b=b.parentNode;for(;b;){if(b.nodeName&&(c=b.nodeName.toLowerCase(),typeof a=="string"?c==a:c in a))return new CKEDITOR.dom.node(b);try{b=b.parentNode}catch(e){b=null}}return null},hasAscendant:function(a,d){var b=this.$;if(!d)b=b.parentNode;for(;b;){if(b.nodeName&&b.nodeName.toLowerCase()==a)return true;b=b.parentNode}return false},move:function(a,d){a.append(this.remove(),d)},remove:function(a){var d=this.$,b=d.parentNode;
if(b){if(a)for(;a=d.firstChild;)b.insertBefore(d.removeChild(a),d);b.removeChild(d)}return this},replace:function(a){this.insertBefore(a);a.remove()},trim:function(){this.ltrim();this.rtrim()},ltrim:function(){for(var a;this.getFirst&&(a=this.getFirst());){if(a.type==CKEDITOR.NODE_TEXT){var d=CKEDITOR.tools.ltrim(a.getText()),b=a.getLength();if(d){if(d.length<b){a.split(b-d.length);this.$.removeChild(this.$.firstChild)}}else{a.remove();continue}}break}},rtrim:function(){for(var a;this.getLast&&(a=
this.getLast());){if(a.type==CKEDITOR.NODE_TEXT){var d=CKEDITOR.tools.rtrim(a.getText()),b=a.getLength();if(d){if(d.length<b){a.split(d.length);this.$.lastChild.parentNode.removeChild(this.$.lastChild)}}else{a.remove();continue}}break}if(CKEDITOR.env.needsBrFiller)(a=this.$.lastChild)&&(a.type==1&&a.nodeName.toLowerCase()=="br")&&a.parentNode.removeChild(a)},isReadOnly:function(){var a=this;this.type!=CKEDITOR.NODE_ELEMENT&&(a=this.getParent());if(a&&typeof a.$.isContentEditable!="undefined")return!(a.$.isContentEditable||
a.data("cke-editable"));for(;a;){if(a.data("cke-editable"))break;if(a.getAttribute("contentEditable")=="false")return true;if(a.getAttribute("contentEditable")=="true")break;a=a.getParent()}return!a}});CKEDITOR.dom.window=function(a){CKEDITOR.dom.domObject.call(this,a)};CKEDITOR.dom.window.prototype=new CKEDITOR.dom.domObject;
CKEDITOR.tools.extend(CKEDITOR.dom.window.prototype,{focus:function(){this.$.focus()},getViewPaneSize:function(){var a=this.$.document,d=a.compatMode=="CSS1Compat";return{width:(d?a.documentElement.clientWidth:a.body.clientWidth)||0,height:(d?a.documentElement.clientHeight:a.body.clientHeight)||0}},getScrollPosition:function(){var a=this.$;if("pageXOffset"in a)return{x:a.pageXOffset||0,y:a.pageYOffset||0};a=a.document;return{x:a.documentElement.scrollLeft||a.body.scrollLeft||0,y:a.documentElement.scrollTop||
a.body.scrollTop||0}},getFrame:function(){var a=this.$.frameElement;return a?new CKEDITOR.dom.element.get(a):null}});CKEDITOR.dom.document=function(a){CKEDITOR.dom.domObject.call(this,a)};CKEDITOR.dom.document.prototype=new CKEDITOR.dom.domObject;
CKEDITOR.tools.extend(CKEDITOR.dom.document.prototype,{type:CKEDITOR.NODE_DOCUMENT,appendStyleSheet:function(a){if(this.$.createStyleSheet)this.$.createStyleSheet(a);else{var d=new CKEDITOR.dom.element("link");d.setAttributes({rel:"stylesheet",type:"text/css",href:a});this.getHead().append(d)}},appendStyleText:function(a){if(this.$.createStyleSheet){var d=this.$.createStyleSheet("");d.cssText=a}else{var b=new CKEDITOR.dom.element("style",this);b.append(new CKEDITOR.dom.text(a,this));this.getHead().append(b)}return d||
b.$.sheet},createElement:function(a,d){var b=new CKEDITOR.dom.element(a,this);if(d){d.attributes&&b.setAttributes(d.attributes);d.styles&&b.setStyles(d.styles)}return b},createText:function(a){return new CKEDITOR.dom.text(a,this)},focus:function(){this.getWindow().focus()},getActive:function(){return new CKEDITOR.dom.element(this.$.activeElement)},getById:function(a){return(a=this.$.getElementById(a))?new CKEDITOR.dom.element(a):null},getByAddress:function(a,d){for(var b=this.$.documentElement,c=
0;b&&c<a.length;c++){var e=a[c];if(d)for(var i=-1,g=0;g<b.childNodes.length;g++){var l=b.childNodes[g];if(!(d===true&&l.nodeType==3&&l.previousSibling&&l.previousSibling.nodeType==3)){i++;if(i==e){b=l;break}}}else b=b.childNodes[e]}return b?new CKEDITOR.dom.node(b):null},getElementsByTag:function(a,d){if((!CKEDITOR.env.ie||document.documentMode>8)&&d)a=d+":"+a;return new CKEDITOR.dom.nodeList(this.$.getElementsByTagName(a))},getHead:function(){var a=this.$.getElementsByTagName("head")[0];return a=
a?new CKEDITOR.dom.element(a):this.getDocumentElement().append(new CKEDITOR.dom.element("head"),true)},getBody:function(){return new CKEDITOR.dom.element(this.$.body)},getDocumentElement:function(){return new CKEDITOR.dom.element(this.$.documentElement)},getWindow:function(){return new CKEDITOR.dom.window(this.$.parentWindow||this.$.defaultView)},write:function(a){this.$.open("text/html","replace");CKEDITOR.env.ie&&(a=a.replace(/(?:^\s*<!DOCTYPE[^>]*?>)|^/i,'$&\n<script data-cke-temp="1">('+CKEDITOR.tools.fixDomain+
")();<\/script>"));this.$.write(a);this.$.close()},find:function(a){return new CKEDITOR.dom.nodeList(this.$.querySelectorAll(a))},findOne:function(a){return(a=this.$.querySelector(a))?new CKEDITOR.dom.element(a):null},_getHtml5ShivFrag:function(){var a=this.getCustomData("html5ShivFrag");if(!a){a=this.$.createDocumentFragment();CKEDITOR.tools.enableHtml5Elements(a,true);this.setCustomData("html5ShivFrag",a)}return a}});CKEDITOR.dom.nodeList=function(a){this.$=a};
CKEDITOR.dom.nodeList.prototype={count:function(){return this.$.length},getItem:function(a){if(a<0||a>=this.$.length)return null;return(a=this.$[a])?new CKEDITOR.dom.node(a):null}};CKEDITOR.dom.element=function(a,d){typeof a=="string"&&(a=(d?d.$:document).createElement(a));CKEDITOR.dom.domObject.call(this,a)};CKEDITOR.dom.element.get=function(a){return(a=typeof a=="string"?document.getElementById(a)||document.getElementsByName(a)[0]:a)&&(a.$?a:new CKEDITOR.dom.element(a))};
CKEDITOR.dom.element.prototype=new CKEDITOR.dom.node;CKEDITOR.dom.element.createFromHtml=function(a,d){var b=new CKEDITOR.dom.element("div",d);b.setHtml(a);return b.getFirst().remove()};
CKEDITOR.dom.element.setMarker=function(a,d,b,c){var e=d.getCustomData("list_marker_id")||d.setCustomData("list_marker_id",CKEDITOR.tools.getNextNumber()).getCustomData("list_marker_id"),i=d.getCustomData("list_marker_names")||d.setCustomData("list_marker_names",{}).getCustomData("list_marker_names");a[e]=d;i[b]=1;return d.setCustomData(b,c)};CKEDITOR.dom.element.clearAllMarkers=function(a){for(var d in a)CKEDITOR.dom.element.clearMarkers(a,a[d],1)};
CKEDITOR.dom.element.clearMarkers=function(a,d,b){var c=d.getCustomData("list_marker_names"),e=d.getCustomData("list_marker_id"),i;for(i in c)d.removeCustomData(i);d.removeCustomData("list_marker_names");if(b){d.removeCustomData("list_marker_id");delete a[e]}};
(function(){function a(a){var b=true;if(!a.$.id){a.$.id="cke_tmp_"+CKEDITOR.tools.getNextNumber();b=false}return function(){b||a.removeAttribute("id")}}function d(a,b){return"#"+a.$.id+" "+b.split(/,\s*/).join(", #"+a.$.id+" ")}function b(a){for(var b=0,d=0,l=c[a].length;d<l;d++)b=b+(parseInt(this.getComputedStyle(c[a][d])||0,10)||0);return b}CKEDITOR.tools.extend(CKEDITOR.dom.element.prototype,{type:CKEDITOR.NODE_ELEMENT,addClass:function(a){var b=this.$.className;b&&(RegExp("(?:^|\\s)"+a+"(?:\\s|$)",
"").test(b)||(b=b+(" "+a)));this.$.className=b||a},removeClass:function(a){var b=this.getAttribute("class");if(b){a=RegExp("(?:^|\\s+)"+a+"(?=\\s|$)","i");if(a.test(b))(b=b.replace(a,"").replace(/^\s+/,""))?this.setAttribute("class",b):this.removeAttribute("class")}return this},hasClass:function(a){return RegExp("(?:^|\\s+)"+a+"(?=\\s|$)","").test(this.getAttribute("class"))},append:function(a,b){typeof a=="string"&&(a=this.getDocument().createElement(a));b?this.$.insertBefore(a.$,this.$.firstChild):
this.$.appendChild(a.$);return a},appendHtml:function(a){if(this.$.childNodes.length){var b=new CKEDITOR.dom.element("div",this.getDocument());b.setHtml(a);b.moveChildren(this)}else this.setHtml(a)},appendText:function(a){this.$.text!=void 0?this.$.text=this.$.text+a:this.append(new CKEDITOR.dom.text(a))},appendBogus:function(a){if(a||CKEDITOR.env.needsBrFiller||CKEDITOR.env.opera){for(a=this.getLast();a&&a.type==CKEDITOR.NODE_TEXT&&!CKEDITOR.tools.rtrim(a.getText());)a=a.getPrevious();if(!a||!a.is||
!a.is("br")){a=CKEDITOR.env.opera?this.getDocument().createText(""):this.getDocument().createElement("br");CKEDITOR.env.gecko&&a.setAttribute("type","_moz");this.append(a)}}},breakParent:function(a){var b=new CKEDITOR.dom.range(this.getDocument());b.setStartAfter(this);b.setEndAfter(a);a=b.extractContents();b.insertNode(this.remove());a.insertAfterNode(this)},contains:CKEDITOR.env.ie||CKEDITOR.env.webkit?function(a){var b=this.$;return a.type!=CKEDITOR.NODE_ELEMENT?b.contains(a.getParent().$):b!=
a.$&&b.contains(a.$)}:function(a){return!!(this.$.compareDocumentPosition(a.$)&16)},focus:function(){function a(){try{this.$.focus()}catch(b){}}return function(b){b?CKEDITOR.tools.setTimeout(a,100,this):a.call(this)}}(),getHtml:function(){var a=this.$.innerHTML;return CKEDITOR.env.ie?a.replace(/<\?[^>]*>/g,""):a},getOuterHtml:function(){if(this.$.outerHTML)return this.$.outerHTML.replace(/<\?[^>]*>/,"");var a=this.$.ownerDocument.createElement("div");a.appendChild(this.$.cloneNode(true));return a.innerHTML},
getClientRect:function(){var a=CKEDITOR.tools.extend({},this.$.getBoundingClientRect());!a.width&&(a.width=a.right-a.left);!a.height&&(a.height=a.bottom-a.top);return a},setHtml:CKEDITOR.env.ie&&CKEDITOR.env.version<9?function(a){try{var b=this.$;if(this.getParent())return b.innerHTML=a;var c=this.getDocument()._getHtml5ShivFrag();c.appendChild(b);b.innerHTML=a;c.removeChild(b);return a}catch(d){this.$.innerHTML="";b=new CKEDITOR.dom.element("body",this.getDocument());b.$.innerHTML=a;for(b=b.getChildren();b.count();)this.append(b.getItem(0));
return a}}:function(a){return this.$.innerHTML=a},setText:function(a){CKEDITOR.dom.element.prototype.setText=this.$.innerText!=void 0?function(a){return this.$.innerText=a}:function(a){return this.$.textContent=a};return this.setText(a)},getAttribute:function(){var a=function(a){return this.$.getAttribute(a,2)};return CKEDITOR.env.ie&&(CKEDITOR.env.ie7Compat||CKEDITOR.env.ie6Compat)?function(a){switch(a){case "class":a="className";break;case "http-equiv":a="httpEquiv";break;case "name":return this.$.name;
case "tabindex":a=this.$.getAttribute(a,2);a!==0&&this.$.tabIndex===0&&(a=null);return a;case "checked":a=this.$.attributes.getNamedItem(a);return(a.specified?a.nodeValue:this.$.checked)?"checked":null;case "hspace":case "value":return this.$[a];case "style":return this.$.style.cssText;case "contenteditable":case "contentEditable":return this.$.attributes.getNamedItem("contentEditable").specified?this.$.getAttribute("contentEditable"):null}return this.$.getAttribute(a,2)}:a}(),getChildren:function(){return new CKEDITOR.dom.nodeList(this.$.childNodes)},
getComputedStyle:CKEDITOR.env.ie?function(a){return this.$.currentStyle[CKEDITOR.tools.cssStyleToDomStyle(a)]}:function(a){var b=this.getWindow().$.getComputedStyle(this.$,null);return b?b.getPropertyValue(a):""},getDtd:function(){var a=CKEDITOR.dtd[this.getName()];this.getDtd=function(){return a};return a},getElementsByTag:CKEDITOR.dom.document.prototype.getElementsByTag,getTabIndex:CKEDITOR.env.ie?function(){var a=this.$.tabIndex;a===0&&(!CKEDITOR.dtd.$tabIndex[this.getName()]&&parseInt(this.getAttribute("tabindex"),
10)!==0)&&(a=-1);return a}:CKEDITOR.env.webkit?function(){var a=this.$.tabIndex;if(a==void 0){a=parseInt(this.getAttribute("tabindex"),10);isNaN(a)&&(a=-1)}return a}:function(){return this.$.tabIndex},getText:function(){return this.$.textContent||this.$.innerText||""},getWindow:function(){return this.getDocument().getWindow()},getId:function(){return this.$.id||null},getNameAtt:function(){return this.$.name||null},getName:function(){var a=this.$.nodeName.toLowerCase();if(CKEDITOR.env.ie&&!(document.documentMode>
8)){var b=this.$.scopeName;b!="HTML"&&(a=b.toLowerCase()+":"+a)}return(this.getName=function(){return a})()},getValue:function(){return this.$.value},getFirst:function(a){var b=this.$.firstChild;(b=b&&new CKEDITOR.dom.node(b))&&(a&&!a(b))&&(b=b.getNext(a));return b},getLast:function(a){var b=this.$.lastChild;(b=b&&new CKEDITOR.dom.node(b))&&(a&&!a(b))&&(b=b.getPrevious(a));return b},getStyle:function(a){return this.$.style[CKEDITOR.tools.cssStyleToDomStyle(a)]},is:function(){var a=this.getName();
if(typeof arguments[0]=="object")return!!arguments[0][a];for(var b=0;b<arguments.length;b++)if(arguments[b]==a)return true;return false},isEditable:function(a){var b=this.getName();if(this.isReadOnly()||this.getComputedStyle("display")=="none"||this.getComputedStyle("visibility")=="hidden"||CKEDITOR.dtd.$nonEditable[b]||CKEDITOR.dtd.$empty[b]||this.is("a")&&(this.data("cke-saved-name")||this.hasAttribute("name"))&&!this.getChildCount())return false;if(a!==false){a=CKEDITOR.dtd[b]||CKEDITOR.dtd.span;
return!(!a||!a["#"])}return true},isIdentical:function(a){var b=this.clone(0,1),a=a.clone(0,1);b.removeAttributes(["_moz_dirty","data-cke-expando","data-cke-saved-href","data-cke-saved-name"]);a.removeAttributes(["_moz_dirty","data-cke-expando","data-cke-saved-href","data-cke-saved-name"]);if(b.$.isEqualNode){b.$.style.cssText=CKEDITOR.tools.normalizeCssText(b.$.style.cssText);a.$.style.cssText=CKEDITOR.tools.normalizeCssText(a.$.style.cssText);return b.$.isEqualNode(a.$)}b=b.getOuterHtml();a=a.getOuterHtml();
if(CKEDITOR.env.ie&&CKEDITOR.env.version<9&&this.is("a")){var c=this.getParent();if(c.type==CKEDITOR.NODE_ELEMENT){c=c.clone();c.setHtml(b);b=c.getHtml();c.setHtml(a);a=c.getHtml()}}return b==a},isVisible:function(){var a=(this.$.offsetHeight||this.$.offsetWidth)&&this.getComputedStyle("visibility")!="hidden",b,c;if(a&&(CKEDITOR.env.webkit||CKEDITOR.env.opera)){b=this.getWindow();if(!b.equals(CKEDITOR.document.getWindow())&&(c=b.$.frameElement))a=(new CKEDITOR.dom.element(c)).isVisible()}return!!a},
isEmptyInlineRemoveable:function(){if(!CKEDITOR.dtd.$removeEmpty[this.getName()])return false;for(var a=this.getChildren(),b=0,c=a.count();b<c;b++){var d=a.getItem(b);if(!(d.type==CKEDITOR.NODE_ELEMENT&&d.data("cke-bookmark"))&&(d.type==CKEDITOR.NODE_ELEMENT&&!d.isEmptyInlineRemoveable()||d.type==CKEDITOR.NODE_TEXT&&CKEDITOR.tools.trim(d.getText())))return false}return true},hasAttributes:CKEDITOR.env.ie&&(CKEDITOR.env.ie7Compat||CKEDITOR.env.ie6Compat)?function(){for(var a=this.$.attributes,b=0;b<
a.length;b++){var c=a[b];switch(c.nodeName){case "class":if(this.getAttribute("class"))return true;case "data-cke-expando":continue;default:if(c.specified)return true}}return false}:function(){var a=this.$.attributes,b=a.length,c={"data-cke-expando":1,_moz_dirty:1};return b>0&&(b>2||!c[a[0].nodeName]||b==2&&!c[a[1].nodeName])},hasAttribute:function(){function a(b){b=this.$.attributes.getNamedItem(b);return!(!b||!b.specified)}return CKEDITOR.env.ie&&CKEDITOR.env.version<8?function(b){return b=="name"?
!!this.$.name:a.call(this,b)}:a}(),hide:function(){this.setStyle("display","none")},moveChildren:function(a,b){var c=this.$,a=a.$;if(c!=a){var d;if(b)for(;d=c.lastChild;)a.insertBefore(c.removeChild(d),a.firstChild);else for(;d=c.firstChild;)a.appendChild(c.removeChild(d))}},mergeSiblings:function(){function a(b,e,c){if(e&&e.type==CKEDITOR.NODE_ELEMENT){for(var d=[];e.data("cke-bookmark")||e.isEmptyInlineRemoveable();){d.push(e);e=c?e.getNext():e.getPrevious();if(!e||e.type!=CKEDITOR.NODE_ELEMENT)return}if(b.isIdentical(e)){for(var k=
c?b.getLast():b.getFirst();d.length;)d.shift().move(b,!c);e.moveChildren(b,!c);e.remove();k&&k.type==CKEDITOR.NODE_ELEMENT&&k.mergeSiblings()}}}return function(b){if(b===false||CKEDITOR.dtd.$removeEmpty[this.getName()]||this.is("a")){a(this,this.getNext(),true);a(this,this.getPrevious())}}}(),show:function(){this.setStyles({display:"",visibility:""})},setAttribute:function(){var a=function(a,b){this.$.setAttribute(a,b);return this};return CKEDITOR.env.ie&&(CKEDITOR.env.ie7Compat||CKEDITOR.env.ie6Compat)?
function(b,c){b=="class"?this.$.className=c:b=="style"?this.$.style.cssText=c:b=="tabindex"?this.$.tabIndex=c:b=="checked"?this.$.checked=c:b=="contenteditable"?a.call(this,"contentEditable",c):a.apply(this,arguments);return this}:CKEDITOR.env.ie8Compat&&CKEDITOR.env.secure?function(b,c){if(b=="src"&&c.match(/^http:\/\//))try{a.apply(this,arguments)}catch(d){}else a.apply(this,arguments);return this}:a}(),setAttributes:function(a){for(var b in a)this.setAttribute(b,a[b]);return this},setValue:function(a){this.$.value=
a;return this},removeAttribute:function(){var a=function(a){this.$.removeAttribute(a)};return CKEDITOR.env.ie&&(CKEDITOR.env.ie7Compat||CKEDITOR.env.ie6Compat)?function(a){a=="class"?a="className":a=="tabindex"?a="tabIndex":a=="contenteditable"&&(a="contentEditable");this.$.removeAttribute(a)}:a}(),removeAttributes:function(a){if(CKEDITOR.tools.isArray(a))for(var b=0;b<a.length;b++)this.removeAttribute(a[b]);else for(b in a)a.hasOwnProperty(b)&&this.removeAttribute(b)},removeStyle:function(a){var b=
this.$.style;if(!b.removeProperty&&(a=="border"||a=="margin"||a=="padding")){var c=["top","left","right","bottom"],d;a=="border"&&(d=["color","style","width"]);for(var b=[],h=0;h<c.length;h++)if(d)for(var k=0;k<d.length;k++)b.push([a,c[h],d[k]].join("-"));else b.push([a,c[h]].join("-"));for(a=0;a<b.length;a++)this.removeStyle(b[a])}else{b.removeProperty?b.removeProperty(a):b.removeAttribute(CKEDITOR.tools.cssStyleToDomStyle(a));this.$.style.cssText||this.removeAttribute("style")}},setStyle:function(a,
b){this.$.style[CKEDITOR.tools.cssStyleToDomStyle(a)]=b;return this},setStyles:function(a){for(var b in a)this.setStyle(b,a[b]);return this},setOpacity:function(a){if(CKEDITOR.env.ie&&CKEDITOR.env.version<9){a=Math.round(a*100);this.setStyle("filter",a>=100?"":"progid:DXImageTransform.Microsoft.Alpha(opacity="+a+")")}else this.setStyle("opacity",a)},unselectable:function(){this.setStyles(CKEDITOR.tools.cssVendorPrefix("user-select","none"));if(CKEDITOR.env.ie||CKEDITOR.env.opera){this.setAttribute("unselectable",
"on");for(var a,b=this.getElementsByTag("*"),c=0,d=b.count();c<d;c++){a=b.getItem(c);a.setAttribute("unselectable","on")}}},getPositionedAncestor:function(){for(var a=this;a.getName()!="html";){if(a.getComputedStyle("position")!="static")return a;a=a.getParent()}return null},getDocumentPosition:function(a){var b=0,c=0,d=this.getDocument(),h=d.getBody(),k=d.$.compatMode=="BackCompat";if(document.documentElement.getBoundingClientRect){var o=this.$.getBoundingClientRect(),s=d.$.documentElement,q=s.clientTop||
h.$.clientTop||0,u=s.clientLeft||h.$.clientLeft||0,f=true;if(CKEDITOR.env.ie){f=d.getDocumentElement().contains(this);d=d.getBody().contains(this);f=k&&d||!k&&f}if(f){b=o.left+(!k&&s.scrollLeft||h.$.scrollLeft);b=b-u;c=o.top+(!k&&s.scrollTop||h.$.scrollTop);c=c-q}}else{h=this;for(d=null;h&&!(h.getName()=="body"||h.getName()=="html");){b=b+(h.$.offsetLeft-h.$.scrollLeft);c=c+(h.$.offsetTop-h.$.scrollTop);if(!h.equals(this)){b=b+(h.$.clientLeft||0);c=c+(h.$.clientTop||0)}for(;d&&!d.equals(h);){b=b-
d.$.scrollLeft;c=c-d.$.scrollTop;d=d.getParent()}d=h;h=(o=h.$.offsetParent)?new CKEDITOR.dom.element(o):null}}if(a){h=this.getWindow();d=a.getWindow();if(!h.equals(d)&&h.$.frameElement){a=(new CKEDITOR.dom.element(h.$.frameElement)).getDocumentPosition(a);b=b+a.x;c=c+a.y}}if(!document.documentElement.getBoundingClientRect&&CKEDITOR.env.gecko&&!k){b=b+(this.$.clientLeft?1:0);c=c+(this.$.clientTop?1:0)}return{x:b,y:c}},scrollIntoView:function(a){var b=this.getParent();if(b){do{(b.$.clientWidth&&b.$.clientWidth<
b.$.scrollWidth||b.$.clientHeight&&b.$.clientHeight<b.$.scrollHeight)&&!b.is("body")&&this.scrollIntoParent(b,a,1);if(b.is("html")){var c=b.getWindow();try{var d=c.$.frameElement;d&&(b=new CKEDITOR.dom.element(d))}catch(h){}}}while(b=b.getParent())}},scrollIntoParent:function(a,b,c){var d,h,k,o;function s(b,f){if(/body|html/.test(a.getName()))a.getWindow().$.scrollBy(b,f);else{a.$.scrollLeft=a.$.scrollLeft+b;a.$.scrollTop=a.$.scrollTop+f}}function q(a,b){var c={x:0,y:0};if(!a.is(f?"body":"html")){var e=
a.$.getBoundingClientRect();c.x=e.left;c.y=e.top}e=a.getWindow();if(!e.equals(b)){e=q(CKEDITOR.dom.element.get(e.$.frameElement),b);c.x=c.x+e.x;c.y=c.y+e.y}return c}function u(a,b){return parseInt(a.getComputedStyle("margin-"+b)||0,10)||0}!a&&(a=this.getWindow());k=a.getDocument();var f=k.$.compatMode=="BackCompat";a instanceof CKEDITOR.dom.window&&(a=f?k.getBody():k.getDocumentElement());k=a.getWindow();h=q(this,k);var p=q(a,k),y=this.$.offsetHeight;d=this.$.offsetWidth;var A=a.$.clientHeight,m=
a.$.clientWidth;k=h.x-u(this,"left")-p.x||0;o=h.y-u(this,"top")-p.y||0;d=h.x+d+u(this,"right")-(p.x+m)||0;h=h.y+y+u(this,"bottom")-(p.y+A)||0;if(o<0||h>0)s(0,b===true?o:b===false?h:o<0?o:h);if(c&&(k<0||d>0))s(k<0?k:d,0)},setState:function(a,b,c){b=b||"cke";switch(a){case CKEDITOR.TRISTATE_ON:this.addClass(b+"_on");this.removeClass(b+"_off");this.removeClass(b+"_disabled");c&&this.setAttribute("aria-pressed",true);c&&this.removeAttribute("aria-disabled");break;case CKEDITOR.TRISTATE_DISABLED:this.addClass(b+
"_disabled");this.removeClass(b+"_off");this.removeClass(b+"_on");c&&this.setAttribute("aria-disabled",true);c&&this.removeAttribute("aria-pressed");break;default:this.addClass(b+"_off");this.removeClass(b+"_on");this.removeClass(b+"_disabled");c&&this.removeAttribute("aria-pressed");c&&this.removeAttribute("aria-disabled")}},getFrameDocument:function(){var a=this.$;try{a.contentWindow.document}catch(b){a.src=a.src}return a&&new CKEDITOR.dom.document(a.contentWindow.document)},copyAttributes:function(a,
b){for(var c=this.$.attributes,b=b||{},d=0;d<c.length;d++){var h=c[d],k=h.nodeName.toLowerCase(),o;if(!(k in b))if(k=="checked"&&(o=this.getAttribute(k)))a.setAttribute(k,o);else if(h.specified||CKEDITOR.env.ie&&h.nodeValue&&k=="value"){o=this.getAttribute(k);if(o===null)o=h.nodeValue;a.setAttribute(k,o)}}if(this.$.style.cssText!=="")a.$.style.cssText=this.$.style.cssText},renameNode:function(a){if(this.getName()!=a){var b=this.getDocument(),a=new CKEDITOR.dom.element(a,b);this.copyAttributes(a);
this.moveChildren(a);this.getParent()&&this.$.parentNode.replaceChild(a.$,this.$);a.$["data-cke-expando"]=this.$["data-cke-expando"];this.$=a.$;delete this.getName}},getChild:function(){function a(b,c){var e=b.childNodes;if(c>=0&&c<e.length)return e[c]}return function(b){var c=this.$;if(b.slice)for(;b.length>0&&c;)c=a(c,b.shift());else c=a(c,b);return c?new CKEDITOR.dom.node(c):null}}(),getChildCount:function(){return this.$.childNodes.length},disableContextMenu:function(){this.on("contextmenu",function(a){a.data.getTarget().hasClass("cke_enable_context_menu")||
a.data.preventDefault()})},getDirection:function(a){return a?this.getComputedStyle("direction")||this.getDirection()||this.getParent()&&this.getParent().getDirection(1)||this.getDocument().$.dir||"ltr":this.getStyle("direction")||this.getAttribute("dir")},data:function(a,b){a="data-"+a;if(b===void 0)return this.getAttribute(a);b===false?this.removeAttribute(a):this.setAttribute(a,b);return null},getEditor:function(){var a=CKEDITOR.instances,b,c;for(b in a){c=a[b];if(c.element.equals(this)&&c.elementMode!=
CKEDITOR.ELEMENT_MODE_APPENDTO)return c}return null},find:function(b){var c=a(this),b=new CKEDITOR.dom.nodeList(this.$.querySelectorAll(d(this,b)));c();return b},findOne:function(b){var c=a(this),b=this.$.querySelector(d(this,b));c();return b?new CKEDITOR.dom.element(b):null},forEach:function(a,b,c){if(!c&&(!b||this.type==b))var d=a(this);if(d!==false)for(var c=this.getChildren(),h=0;h<c.count();h++){d=c.getItem(h);d.type==CKEDITOR.NODE_ELEMENT?d.forEach(a,b):(!b||d.type==b)&&a(d)}}});var c={width:["border-left-width",
"border-right-width","padding-left","padding-right"],height:["border-top-width","border-bottom-width","padding-top","padding-bottom"]};CKEDITOR.dom.element.prototype.setSize=function(a,c,d){if(typeof c=="number"){if(d&&(!CKEDITOR.env.ie||!CKEDITOR.env.quirks))c=c-b.call(this,a);this.setStyle(a,c+"px")}};CKEDITOR.dom.element.prototype.getSize=function(a,c){var d=Math.max(this.$["offset"+CKEDITOR.tools.capitalize(a)],this.$["client"+CKEDITOR.tools.capitalize(a)])||0;c&&(d=d-b.call(this,a));return d}})();
CKEDITOR.dom.documentFragment=function(a){a=a||CKEDITOR.document;this.$=a.type==CKEDITOR.NODE_DOCUMENT?a.$.createDocumentFragment():a};
CKEDITOR.tools.extend(CKEDITOR.dom.documentFragment.prototype,CKEDITOR.dom.element.prototype,{type:CKEDITOR.NODE_DOCUMENT_FRAGMENT,insertAfterNode:function(a){a=a.$;a.parentNode.insertBefore(this.$,a.nextSibling)}},!0,{append:1,appendBogus:1,getFirst:1,getLast:1,getParent:1,getNext:1,getPrevious:1,appendTo:1,moveChildren:1,insertBefore:1,insertAfterNode:1,replace:1,trim:1,type:1,ltrim:1,rtrim:1,getDocument:1,getChildCount:1,getChild:1,getChildren:1});
(function(){function a(a,b){var c=this.range;if(this._.end)return null;if(!this._.start){this._.start=1;if(c.collapsed){this.end();return null}c.optimize()}var f,e=c.startContainer;f=c.endContainer;var o=c.startOffset,d=c.endOffset,m,j=this.guard,n=this.type,i=a?"getPreviousSourceNode":"getNextSourceNode";if(!a&&!this._.guardLTR){var h=f.type==CKEDITOR.NODE_ELEMENT?f:f.getParent(),t=f.type==CKEDITOR.NODE_ELEMENT?f.getChild(d):f.getNext();this._.guardLTR=function(a,b){return(!b||!h.equals(a))&&(!t||
!a.equals(t))&&(a.type!=CKEDITOR.NODE_ELEMENT||!b||!a.equals(c.root))}}if(a&&!this._.guardRTL){var g=e.type==CKEDITOR.NODE_ELEMENT?e:e.getParent(),k=e.type==CKEDITOR.NODE_ELEMENT?o?e.getChild(o-1):null:e.getPrevious();this._.guardRTL=function(a,b){return(!b||!g.equals(a))&&(!k||!a.equals(k))&&(a.type!=CKEDITOR.NODE_ELEMENT||!b||!a.equals(c.root))}}var l=a?this._.guardRTL:this._.guardLTR;m=j?function(a,b){return l(a,b)===false?false:j(a,b)}:l;if(this.current)f=this.current[i](false,n,m);else{if(a)f.type==
CKEDITOR.NODE_ELEMENT&&(f=d>0?f.getChild(d-1):m(f,true)===false?null:f.getPreviousSourceNode(true,n,m));else{f=e;if(f.type==CKEDITOR.NODE_ELEMENT&&!(f=f.getChild(o)))f=m(e,true)===false?null:e.getNextSourceNode(true,n,m)}f&&m(f)===false&&(f=null)}for(;f&&!this._.end;){this.current=f;if(!this.evaluator||this.evaluator(f)!==false){if(!b)return f}else if(b&&this.evaluator)return false;f=f[i](false,n,m)}this.end();return this.current=null}function d(b){for(var c,e=null;c=a.call(this,b);)e=c;return e}
function b(a){if(k(a))return false;if(a.type==CKEDITOR.NODE_TEXT)return true;if(a.type==CKEDITOR.NODE_ELEMENT){if(a.is(CKEDITOR.dtd.$inline)||a.getAttribute("contenteditable")=="false")return true;var b;if(b=!CKEDITOR.env.needsBrFiller)if(b=a.is(o))a:{b=0;for(var c=a.getChildCount();b<c;++b)if(!k(a.getChild(b))){b=false;break a}b=true}if(b)return true}return false}CKEDITOR.dom.walker=CKEDITOR.tools.createClass({$:function(a){this.range=a;this._={}},proto:{end:function(){this._.end=1},next:function(){return a.call(this)},
previous:function(){return a.call(this,1)},checkForward:function(){return a.call(this,0,1)!==false},checkBackward:function(){return a.call(this,1,1)!==false},lastForward:function(){return d.call(this)},lastBackward:function(){return d.call(this,1)},reset:function(){delete this.current;this._={}}}});var c={block:1,"list-item":1,table:1,"table-row-group":1,"table-header-group":1,"table-footer-group":1,"table-row":1,"table-column-group":1,"table-column":1,"table-cell":1,"table-caption":1},e={absolute:1,
fixed:1};CKEDITOR.dom.element.prototype.isBlockBoundary=function(a){return this.getComputedStyle("float")=="none"&&!(this.getComputedStyle("position")in e)&&c[this.getComputedStyle("display")]?true:!!(this.is(CKEDITOR.dtd.$block)||a&&this.is(a))};CKEDITOR.dom.walker.blockBoundary=function(a){return function(b){return!(b.type==CKEDITOR.NODE_ELEMENT&&b.isBlockBoundary(a))}};CKEDITOR.dom.walker.listItemBoundary=function(){return this.blockBoundary({br:1})};CKEDITOR.dom.walker.bookmark=function(a,b){function c(a){return a&&
a.getName&&a.getName()=="span"&&a.data("cke-bookmark")}return function(f){var e,o;e=f&&f.type!=CKEDITOR.NODE_ELEMENT&&(o=f.getParent())&&c(o);e=a?e:e||c(f);return!!(b^e)}};CKEDITOR.dom.walker.whitespaces=function(a){return function(b){var c;b&&b.type==CKEDITOR.NODE_TEXT&&(c=!CKEDITOR.tools.trim(b.getText())||CKEDITOR.env.webkit&&b.getText()=="​");return!!(a^c)}};CKEDITOR.dom.walker.invisible=function(a){var b=CKEDITOR.dom.walker.whitespaces();return function(c){if(b(c))c=1;else{c.type==CKEDITOR.NODE_TEXT&&
(c=c.getParent());c=!c.$.offsetHeight}return!!(a^c)}};CKEDITOR.dom.walker.nodeType=function(a,b){return function(c){return!!(b^c.type==a)}};CKEDITOR.dom.walker.bogus=function(a){function b(a){return!g(a)&&!l(a)}return function(c){var f=CKEDITOR.env.needsBrFiller?c.is&&c.is("br"):c.getText&&i.test(c.getText());if(f){f=c.getParent();c=c.getNext(b);f=f.isBlockBoundary()&&(!c||c.type==CKEDITOR.NODE_ELEMENT&&c.isBlockBoundary())}return!!(a^f)}};CKEDITOR.dom.walker.temp=function(a){return function(b){b.type!=
CKEDITOR.NODE_ELEMENT&&(b=b.getParent());b=b&&b.hasAttribute("data-cke-temp");return!!(a^b)}};var i=/^[\t\r\n ]*(?:&nbsp;|\xa0)$/,g=CKEDITOR.dom.walker.whitespaces(),l=CKEDITOR.dom.walker.bookmark(),h=CKEDITOR.dom.walker.temp();CKEDITOR.dom.walker.ignored=function(a){return function(b){b=g(b)||l(b)||h(b);return!!(a^b)}};var k=CKEDITOR.dom.walker.ignored(),o=function(a){var b={},c;for(c in a)CKEDITOR.dtd[c]["#"]&&(b[c]=1);return b}(CKEDITOR.dtd.$block);CKEDITOR.dom.walker.editable=function(a){return function(c){return!!(a^
b(c))}};CKEDITOR.dom.element.prototype.getBogus=function(){var a=this;do a=a.getPreviousSourceNode();while(l(a)||g(a)||a.type==CKEDITOR.NODE_ELEMENT&&a.is(CKEDITOR.dtd.$inline)&&!a.is(CKEDITOR.dtd.$empty));return a&&(CKEDITOR.env.needsBrFiller?a.is&&a.is("br"):a.getText&&i.test(a.getText()))?a:false}})();
CKEDITOR.dom.range=function(a){this.endOffset=this.endContainer=this.startOffset=this.startContainer=null;this.collapsed=true;var d=a instanceof CKEDITOR.dom.document;this.document=d?a:a.getDocument();this.root=d?a.getBody():a};
(function(){function a(){var a=false,b=CKEDITOR.dom.walker.whitespaces(),c=CKEDITOR.dom.walker.bookmark(true),e=CKEDITOR.dom.walker.bogus();return function(f){if(c(f)||b(f))return true;if(e(f)&&!a)return a=true;return f.type==CKEDITOR.NODE_TEXT&&(f.hasAscendant("pre")||CKEDITOR.tools.trim(f.getText()).length)||f.type==CKEDITOR.NODE_ELEMENT&&!f.is(i)?false:true}}function d(a){var b=CKEDITOR.dom.walker.whitespaces(),c=CKEDITOR.dom.walker.bookmark(1);return function(e){return c(e)||b(e)?true:!a&&g(e)||
e.type==CKEDITOR.NODE_ELEMENT&&e.is(CKEDITOR.dtd.$removeEmpty)}}function b(a){return function(){var b;return this[a?"getPreviousNode":"getNextNode"](function(a){!b&&k(a)&&(b=a);return h(a)&&!(g(a)&&a.equals(b))})}}var c=function(a){a.collapsed=a.startContainer&&a.endContainer&&a.startContainer.equals(a.endContainer)&&a.startOffset==a.endOffset},e=function(a,b,c,e){a.optimizeBookmark();var f=a.startContainer,d=a.endContainer,i=a.startOffset,h=a.endOffset,m,j;if(d.type==CKEDITOR.NODE_TEXT)d=d.split(h);
else if(d.getChildCount()>0)if(h>=d.getChildCount()){d=d.append(a.document.createText(""));j=true}else d=d.getChild(h);if(f.type==CKEDITOR.NODE_TEXT){f.split(i);f.equals(d)&&(d=f.getNext())}else if(i)if(i>=f.getChildCount()){f=f.append(a.document.createText(""));m=true}else f=f.getChild(i).getPrevious();else{f=f.append(a.document.createText(""),1);m=true}var i=f.getParents(),h=d.getParents(),n,r,g;for(n=0;n<i.length;n++){r=i[n];g=h[n];if(!r.equals(g))break}for(var t=c,k,G,l,B=n;B<i.length;B++){k=
i[B];t&&!k.equals(f)&&(G=t.append(k.clone()));for(k=k.getNext();k;){if(k.equals(h[B])||k.equals(d))break;l=k.getNext();if(b==2)t.append(k.clone(true));else{k.remove();b==1&&t.append(k)}k=l}t&&(t=G)}t=c;for(c=n;c<h.length;c++){k=h[c];b>0&&!k.equals(d)&&(G=t.append(k.clone()));if(!i[c]||k.$.parentNode!=i[c].$.parentNode)for(k=k.getPrevious();k;){if(k.equals(i[c])||k.equals(f))break;l=k.getPrevious();if(b==2)t.$.insertBefore(k.$.cloneNode(true),t.$.firstChild);else{k.remove();b==1&&t.$.insertBefore(k.$,
t.$.firstChild)}k=l}t&&(t=G)}if(b==2){r=a.startContainer;if(r.type==CKEDITOR.NODE_TEXT){r.$.data=r.$.data+r.$.nextSibling.data;r.$.parentNode.removeChild(r.$.nextSibling)}a=a.endContainer;if(a.type==CKEDITOR.NODE_TEXT&&a.$.nextSibling){a.$.data=a.$.data+a.$.nextSibling.data;a.$.parentNode.removeChild(a.$.nextSibling)}}else{if(r&&g&&(f.$.parentNode!=r.$.parentNode||d.$.parentNode!=g.$.parentNode)){b=g.getIndex();m&&g.$.parentNode==f.$.parentNode&&b--;if(e&&r.type==CKEDITOR.NODE_ELEMENT){e=CKEDITOR.dom.element.createFromHtml('<span data-cke-bookmark="1" style="display:none">&nbsp;</span>',
a.document);e.insertAfter(r);r.mergeSiblings(false);a.moveToBookmark({startNode:e})}else a.setStart(g.getParent(),b)}a.collapse(true)}m&&f.remove();j&&d.$.parentNode&&d.remove()},i={abbr:1,acronym:1,b:1,bdo:1,big:1,cite:1,code:1,del:1,dfn:1,em:1,font:1,i:1,ins:1,label:1,kbd:1,q:1,samp:1,small:1,span:1,strike:1,strong:1,sub:1,sup:1,tt:1,u:1,"var":1},g=CKEDITOR.dom.walker.bogus(),l=/^[\t\r\n ]*(?:&nbsp;|\xa0)$/,h=CKEDITOR.dom.walker.editable(),k=CKEDITOR.dom.walker.ignored(true);CKEDITOR.dom.range.prototype=
{clone:function(){var a=new CKEDITOR.dom.range(this.root);a.startContainer=this.startContainer;a.startOffset=this.startOffset;a.endContainer=this.endContainer;a.endOffset=this.endOffset;a.collapsed=this.collapsed;return a},collapse:function(a){if(a){this.endContainer=this.startContainer;this.endOffset=this.startOffset}else{this.startContainer=this.endContainer;this.startOffset=this.endOffset}this.collapsed=true},cloneContents:function(){var a=new CKEDITOR.dom.documentFragment(this.document);this.collapsed||
e(this,2,a);return a},deleteContents:function(a){this.collapsed||e(this,0,null,a)},extractContents:function(a){var b=new CKEDITOR.dom.documentFragment(this.document);this.collapsed||e(this,1,b,a);return b},createBookmark:function(a){var b,c,e,f,d=this.collapsed;b=this.document.createElement("span");b.data("cke-bookmark",1);b.setStyle("display","none");b.setHtml("&nbsp;");if(a){e="cke_bm_"+CKEDITOR.tools.getNextNumber();b.setAttribute("id",e+(d?"C":"S"))}if(!d){c=b.clone();c.setHtml("&nbsp;");a&&c.setAttribute("id",
e+"E");f=this.clone();f.collapse();f.insertNode(c)}f=this.clone();f.collapse(true);f.insertNode(b);if(c){this.setStartAfter(b);this.setEndBefore(c)}else this.moveToPosition(b,CKEDITOR.POSITION_AFTER_END);return{startNode:a?e+(d?"C":"S"):b,endNode:a?e+"E":c,serializable:a,collapsed:d}},createBookmark2:function(){function a(b){var c=b.container,e=b.offset,f;f=c;var d=e;f=f.type!=CKEDITOR.NODE_ELEMENT||d===0||d==f.getChildCount()?0:f.getChild(d-1).type==CKEDITOR.NODE_TEXT&&f.getChild(d).type==CKEDITOR.NODE_TEXT;
if(f){c=c.getChild(e-1);e=c.getLength()}c.type==CKEDITOR.NODE_ELEMENT&&e>1&&(e=c.getChild(e-1).getIndex(true)+1);if(c.type==CKEDITOR.NODE_TEXT){f=c;for(d=0;(f=f.getPrevious())&&f.type==CKEDITOR.NODE_TEXT;)d=d+f.getLength();e=e+d}b.container=c;b.offset=e}return function(b){var c=this.collapsed,e={container:this.startContainer,offset:this.startOffset},f={container:this.endContainer,offset:this.endOffset};if(b){a(e);c||a(f)}return{start:e.container.getAddress(b),end:c?null:f.container.getAddress(b),
startOffset:e.offset,endOffset:f.offset,normalized:b,collapsed:c,is2:true}}}(),moveToBookmark:function(a){if(a.is2){var b=this.document.getByAddress(a.start,a.normalized),c=a.startOffset,e=a.end&&this.document.getByAddress(a.end,a.normalized),a=a.endOffset;this.setStart(b,c);e?this.setEnd(e,a):this.collapse(true)}else{b=(c=a.serializable)?this.document.getById(a.startNode):a.startNode;a=c?this.document.getById(a.endNode):a.endNode;this.setStartBefore(b);b.remove();if(a){this.setEndBefore(a);a.remove()}else this.collapse(true)}},
getBoundaryNodes:function(){var a=this.startContainer,b=this.endContainer,c=this.startOffset,e=this.endOffset,f;if(a.type==CKEDITOR.NODE_ELEMENT){f=a.getChildCount();if(f>c)a=a.getChild(c);else if(f<1)a=a.getPreviousSourceNode();else{for(a=a.$;a.lastChild;)a=a.lastChild;a=new CKEDITOR.dom.node(a);a=a.getNextSourceNode()||a}}if(b.type==CKEDITOR.NODE_ELEMENT){f=b.getChildCount();if(f>e)b=b.getChild(e).getPreviousSourceNode(true);else if(f<1)b=b.getPreviousSourceNode();else{for(b=b.$;b.lastChild;)b=
b.lastChild;b=new CKEDITOR.dom.node(b)}}a.getPosition(b)&CKEDITOR.POSITION_FOLLOWING&&(a=b);return{startNode:a,endNode:b}},getCommonAncestor:function(a,b){var c=this.startContainer,e=this.endContainer,c=c.equals(e)?a&&c.type==CKEDITOR.NODE_ELEMENT&&this.startOffset==this.endOffset-1?c.getChild(this.startOffset):c:c.getCommonAncestor(e);return b&&!c.is?c.getParent():c},optimize:function(){var a=this.startContainer,b=this.startOffset;a.type!=CKEDITOR.NODE_ELEMENT&&(b?b>=a.getLength()&&this.setStartAfter(a):
this.setStartBefore(a));a=this.endContainer;b=this.endOffset;a.type!=CKEDITOR.NODE_ELEMENT&&(b?b>=a.getLength()&&this.setEndAfter(a):this.setEndBefore(a))},optimizeBookmark:function(){var a=this.startContainer,b=this.endContainer;a.is&&(a.is("span")&&a.data("cke-bookmark"))&&this.setStartAt(a,CKEDITOR.POSITION_BEFORE_START);b&&(b.is&&b.is("span")&&b.data("cke-bookmark"))&&this.setEndAt(b,CKEDITOR.POSITION_AFTER_END)},trim:function(a,b){var c=this.startContainer,e=this.startOffset,f=this.collapsed;
if((!a||f)&&c&&c.type==CKEDITOR.NODE_TEXT){if(e)if(e>=c.getLength()){e=c.getIndex()+1;c=c.getParent()}else{var d=c.split(e),e=c.getIndex()+1,c=c.getParent();if(this.startContainer.equals(this.endContainer))this.setEnd(d,this.endOffset-this.startOffset);else if(c.equals(this.endContainer))this.endOffset=this.endOffset+1}else{e=c.getIndex();c=c.getParent()}this.setStart(c,e);if(f){this.collapse(true);return}}c=this.endContainer;e=this.endOffset;if(!b&&!f&&c&&c.type==CKEDITOR.NODE_TEXT){if(e){e>=c.getLength()||
c.split(e);e=c.getIndex()+1}else e=c.getIndex();c=c.getParent();this.setEnd(c,e)}},enlarge:function(a,b){function c(a){return a&&a.type==CKEDITOR.NODE_ELEMENT&&a.hasAttribute("contenteditable")?null:a}var e=RegExp(/[^\s\ufeff]/);switch(a){case CKEDITOR.ENLARGE_INLINE:var f=1;case CKEDITOR.ENLARGE_ELEMENT:if(this.collapsed)break;var d=this.getCommonAncestor(),i=this.root,k,m,j,n,r,h=false,t,g;t=this.startContainer;var l=this.startOffset;if(t.type==CKEDITOR.NODE_TEXT){if(l){t=!CKEDITOR.tools.trim(t.substring(0,
l)).length&&t;h=!!t}if(t&&!(n=t.getPrevious()))j=t.getParent()}else{l&&(n=t.getChild(l-1)||t.getLast());n||(j=t)}for(j=c(j);j||n;){if(j&&!n){!r&&j.equals(d)&&(r=true);if(f?j.isBlockBoundary():!i.contains(j))break;if(!h||j.getComputedStyle("display")!="inline"){h=false;r?k=j:this.setStartBefore(j)}n=j.getPrevious()}for(;n;){t=false;if(n.type==CKEDITOR.NODE_COMMENT)n=n.getPrevious();else{if(n.type==CKEDITOR.NODE_TEXT){g=n.getText();e.test(g)&&(n=null);t=/[\s\ufeff]$/.test(g)}else if((n.$.offsetWidth>
0||b&&n.is("br"))&&!n.data("cke-bookmark"))if(h&&CKEDITOR.dtd.$removeEmpty[n.getName()]){g=n.getText();if(e.test(g))n=null;else for(var l=n.$.getElementsByTagName("*"),I=0,B;B=l[I++];)if(!CKEDITOR.dtd.$removeEmpty[B.nodeName.toLowerCase()]){n=null;break}n&&(t=!!g.length)}else n=null;t&&(h?r?k=j:j&&this.setStartBefore(j):h=true);if(n){t=n.getPrevious();if(!j&&!t){j=n;n=null;break}n=t}else j=null}}j&&(j=c(j.getParent()))}t=this.endContainer;l=this.endOffset;j=n=null;r=h=false;var N=function(a,b){var c=
new CKEDITOR.dom.range(i);c.setStart(a,b);c.setEndAt(i,CKEDITOR.POSITION_BEFORE_END);var c=new CKEDITOR.dom.walker(c),f;for(c.guard=function(a){return!(a.type==CKEDITOR.NODE_ELEMENT&&a.isBlockBoundary())};f=c.next();){if(f.type!=CKEDITOR.NODE_TEXT)return false;g=f!=a?f.getText():f.substring(b);if(e.test(g))return false}return true};if(t.type==CKEDITOR.NODE_TEXT)if(CKEDITOR.tools.trim(t.substring(l)).length)h=true;else{h=!t.getLength();if(l==t.getLength()){if(!(n=t.getNext()))j=t.getParent()}else N(t,
l)&&(j=t.getParent())}else(n=t.getChild(l))||(j=t);for(;j||n;){if(j&&!n){!r&&j.equals(d)&&(r=true);if(f?j.isBlockBoundary():!i.contains(j))break;if(!h||j.getComputedStyle("display")!="inline"){h=false;r?m=j:j&&this.setEndAfter(j)}n=j.getNext()}for(;n;){t=false;if(n.type==CKEDITOR.NODE_TEXT){g=n.getText();N(n,0)||(n=null);t=/^[\s\ufeff]/.test(g)}else if(n.type==CKEDITOR.NODE_ELEMENT){if((n.$.offsetWidth>0||b&&n.is("br"))&&!n.data("cke-bookmark"))if(h&&CKEDITOR.dtd.$removeEmpty[n.getName()]){g=n.getText();
if(e.test(g))n=null;else{l=n.$.getElementsByTagName("*");for(I=0;B=l[I++];)if(!CKEDITOR.dtd.$removeEmpty[B.nodeName.toLowerCase()]){n=null;break}}n&&(t=!!g.length)}else n=null}else t=1;t&&h&&(r?m=j:this.setEndAfter(j));if(n){t=n.getNext();if(!j&&!t){j=n;n=null;break}n=t}else j=null}j&&(j=c(j.getParent()))}if(k&&m){d=k.contains(m)?m:k;this.setStartBefore(d);this.setEndAfter(d)}break;case CKEDITOR.ENLARGE_BLOCK_CONTENTS:case CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS:j=new CKEDITOR.dom.range(this.root);i=
this.root;j.setStartAt(i,CKEDITOR.POSITION_AFTER_START);j.setEnd(this.startContainer,this.startOffset);j=new CKEDITOR.dom.walker(j);var H,v,x=CKEDITOR.dom.walker.blockBoundary(a==CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS?{br:1}:null),C=null,D=function(a){if(a.type==CKEDITOR.NODE_ELEMENT&&a.getAttribute("contenteditable")=="false")if(C){if(C.equals(a)){C=null;return}}else C=a;else if(C)return;var b=x(a);b||(H=a);return b},f=function(a){var b=D(a);!b&&(a.is&&a.is("br"))&&(v=a);return b};j.guard=D;j=j.lastBackward();
H=H||i;this.setStartAt(H,!H.is("br")&&(!j&&this.checkStartOfBlock()||j&&H.contains(j))?CKEDITOR.POSITION_AFTER_START:CKEDITOR.POSITION_AFTER_END);if(a==CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS){j=this.clone();j=new CKEDITOR.dom.walker(j);var z=CKEDITOR.dom.walker.whitespaces(),T=CKEDITOR.dom.walker.bookmark();j.evaluator=function(a){return!z(a)&&!T(a)};if((j=j.previous())&&j.type==CKEDITOR.NODE_ELEMENT&&j.is("br"))break}j=this.clone();j.collapse();j.setEndAt(i,CKEDITOR.POSITION_BEFORE_END);j=new CKEDITOR.dom.walker(j);
j.guard=a==CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS?f:D;H=null;j=j.lastForward();H=H||i;this.setEndAt(H,!j&&this.checkEndOfBlock()||j&&H.contains(j)?CKEDITOR.POSITION_BEFORE_END:CKEDITOR.POSITION_BEFORE_START);v&&this.setEndAfter(v)}},shrink:function(a,b,c){if(!this.collapsed){var a=a||CKEDITOR.SHRINK_TEXT,e=this.clone(),f=this.startContainer,d=this.endContainer,i=this.startOffset,h=this.endOffset,m=1,j=1;if(f&&f.type==CKEDITOR.NODE_TEXT)if(i)if(i>=f.getLength())e.setStartAfter(f);else{e.setStartBefore(f);
m=0}else e.setStartBefore(f);if(d&&d.type==CKEDITOR.NODE_TEXT)if(h)if(h>=d.getLength())e.setEndAfter(d);else{e.setEndAfter(d);j=0}else e.setEndBefore(d);var e=new CKEDITOR.dom.walker(e),n=CKEDITOR.dom.walker.bookmark();e.evaluator=function(b){return b.type==(a==CKEDITOR.SHRINK_ELEMENT?CKEDITOR.NODE_ELEMENT:CKEDITOR.NODE_TEXT)};var r;e.guard=function(b,f){if(n(b))return true;if(a==CKEDITOR.SHRINK_ELEMENT&&b.type==CKEDITOR.NODE_TEXT||f&&b.equals(r)||c===false&&b.type==CKEDITOR.NODE_ELEMENT&&b.isBlockBoundary()||
b.type==CKEDITOR.NODE_ELEMENT&&b.hasAttribute("contenteditable"))return false;!f&&b.type==CKEDITOR.NODE_ELEMENT&&(r=b);return true};if(m)(f=e[a==CKEDITOR.SHRINK_ELEMENT?"lastForward":"next"]())&&this.setStartAt(f,b?CKEDITOR.POSITION_AFTER_START:CKEDITOR.POSITION_BEFORE_START);if(j){e.reset();(e=e[a==CKEDITOR.SHRINK_ELEMENT?"lastBackward":"previous"]())&&this.setEndAt(e,b?CKEDITOR.POSITION_BEFORE_END:CKEDITOR.POSITION_AFTER_END)}return!(!m&&!j)}},insertNode:function(a){this.optimizeBookmark();this.trim(false,
true);var b=this.startContainer,c=b.getChild(this.startOffset);c?a.insertBefore(c):b.append(a);a.getParent()&&a.getParent().equals(this.endContainer)&&this.endOffset++;this.setStartBefore(a)},moveToPosition:function(a,b){this.setStartAt(a,b);this.collapse(true)},moveToRange:function(a){this.setStart(a.startContainer,a.startOffset);this.setEnd(a.endContainer,a.endOffset)},selectNodeContents:function(a){this.setStart(a,0);this.setEnd(a,a.type==CKEDITOR.NODE_TEXT?a.getLength():a.getChildCount())},setStart:function(a,
b){if(a.type==CKEDITOR.NODE_ELEMENT&&CKEDITOR.dtd.$empty[a.getName()]){b=a.getIndex();a=a.getParent()}this.startContainer=a;this.startOffset=b;if(!this.endContainer){this.endContainer=a;this.endOffset=b}c(this)},setEnd:function(a,b){if(a.type==CKEDITOR.NODE_ELEMENT&&CKEDITOR.dtd.$empty[a.getName()]){b=a.getIndex()+1;a=a.getParent()}this.endContainer=a;this.endOffset=b;if(!this.startContainer){this.startContainer=a;this.startOffset=b}c(this)},setStartAfter:function(a){this.setStart(a.getParent(),a.getIndex()+
1)},setStartBefore:function(a){this.setStart(a.getParent(),a.getIndex())},setEndAfter:function(a){this.setEnd(a.getParent(),a.getIndex()+1)},setEndBefore:function(a){this.setEnd(a.getParent(),a.getIndex())},setStartAt:function(a,b){switch(b){case CKEDITOR.POSITION_AFTER_START:this.setStart(a,0);break;case CKEDITOR.POSITION_BEFORE_END:a.type==CKEDITOR.NODE_TEXT?this.setStart(a,a.getLength()):this.setStart(a,a.getChildCount());break;case CKEDITOR.POSITION_BEFORE_START:this.setStartBefore(a);break;case CKEDITOR.POSITION_AFTER_END:this.setStartAfter(a)}c(this)},
setEndAt:function(a,b){switch(b){case CKEDITOR.POSITION_AFTER_START:this.setEnd(a,0);break;case CKEDITOR.POSITION_BEFORE_END:a.type==CKEDITOR.NODE_TEXT?this.setEnd(a,a.getLength()):this.setEnd(a,a.getChildCount());break;case CKEDITOR.POSITION_BEFORE_START:this.setEndBefore(a);break;case CKEDITOR.POSITION_AFTER_END:this.setEndAfter(a)}c(this)},fixBlock:function(a,b){var c=this.createBookmark(),e=this.document.createElement(b);this.collapse(a);this.enlarge(CKEDITOR.ENLARGE_BLOCK_CONTENTS);this.extractContents().appendTo(e);
e.trim();e.appendBogus();this.insertNode(e);this.moveToBookmark(c);return e},splitBlock:function(a){var b=new CKEDITOR.dom.elementPath(this.startContainer,this.root),c=new CKEDITOR.dom.elementPath(this.endContainer,this.root),e=b.block,f=c.block,d=null;if(!b.blockLimit.equals(c.blockLimit))return null;if(a!="br"){if(!e){e=this.fixBlock(true,a);f=(new CKEDITOR.dom.elementPath(this.endContainer,this.root)).block}f||(f=this.fixBlock(false,a))}a=e&&this.checkStartOfBlock();b=f&&this.checkEndOfBlock();
this.deleteContents();if(e&&e.equals(f))if(b){d=new CKEDITOR.dom.elementPath(this.startContainer,this.root);this.moveToPosition(f,CKEDITOR.POSITION_AFTER_END);f=null}else if(a){d=new CKEDITOR.dom.elementPath(this.startContainer,this.root);this.moveToPosition(e,CKEDITOR.POSITION_BEFORE_START);e=null}else{f=this.splitElement(e);e.is("ul","ol")||e.appendBogus()}return{previousBlock:e,nextBlock:f,wasStartOfBlock:a,wasEndOfBlock:b,elementPath:d}},splitElement:function(a){if(!this.collapsed)return null;
this.setEndAt(a,CKEDITOR.POSITION_BEFORE_END);var b=this.extractContents(),c=a.clone(false);b.appendTo(c);c.insertAfter(a);this.moveToPosition(a,CKEDITOR.POSITION_AFTER_END);return c},removeEmptyBlocksAtEnd:function(){function a(e){return function(a){return b(a)||(c(a)||a.type==CKEDITOR.NODE_ELEMENT&&a.isEmptyInlineRemoveable())||e.is("table")&&a.is("caption")?false:true}}var b=CKEDITOR.dom.walker.whitespaces(),c=CKEDITOR.dom.walker.bookmark(false);return function(b){for(var c=this.createBookmark(),
e=this[b?"endPath":"startPath"](),d=e.block||e.blockLimit,i;d&&!d.equals(e.root)&&!d.getFirst(a(d));){i=d.getParent();this[b?"setEndAt":"setStartAt"](d,CKEDITOR.POSITION_AFTER_END);d.remove(1);d=i}this.moveToBookmark(c)}}(),startPath:function(){return new CKEDITOR.dom.elementPath(this.startContainer,this.root)},endPath:function(){return new CKEDITOR.dom.elementPath(this.endContainer,this.root)},checkBoundaryOfElement:function(a,b){var c=b==CKEDITOR.START,e=this.clone();e.collapse(c);e[c?"setStartAt":
"setEndAt"](a,c?CKEDITOR.POSITION_AFTER_START:CKEDITOR.POSITION_BEFORE_END);e=new CKEDITOR.dom.walker(e);e.evaluator=d(c);return e[c?"checkBackward":"checkForward"]()},checkStartOfBlock:function(){var b=this.startContainer,c=this.startOffset;if(CKEDITOR.env.ie&&c&&b.type==CKEDITOR.NODE_TEXT){b=CKEDITOR.tools.ltrim(b.substring(0,c));l.test(b)&&this.trim(0,1)}this.trim();b=new CKEDITOR.dom.elementPath(this.startContainer,this.root);c=this.clone();c.collapse(true);c.setStartAt(b.block||b.blockLimit,
CKEDITOR.POSITION_AFTER_START);b=new CKEDITOR.dom.walker(c);b.evaluator=a();return b.checkBackward()},checkEndOfBlock:function(){var b=this.endContainer,c=this.endOffset;if(CKEDITOR.env.ie&&b.type==CKEDITOR.NODE_TEXT){b=CKEDITOR.tools.rtrim(b.substring(c));l.test(b)&&this.trim(1,0)}this.trim();b=new CKEDITOR.dom.elementPath(this.endContainer,this.root);c=this.clone();c.collapse(false);c.setEndAt(b.block||b.blockLimit,CKEDITOR.POSITION_BEFORE_END);b=new CKEDITOR.dom.walker(c);b.evaluator=a();return b.checkForward()},
getPreviousNode:function(a,b,c){var e=this.clone();e.collapse(1);e.setStartAt(c||this.root,CKEDITOR.POSITION_AFTER_START);c=new CKEDITOR.dom.walker(e);c.evaluator=a;c.guard=b;return c.previous()},getNextNode:function(a,b,c){var e=this.clone();e.collapse();e.setEndAt(c||this.root,CKEDITOR.POSITION_BEFORE_END);c=new CKEDITOR.dom.walker(e);c.evaluator=a;c.guard=b;return c.next()},checkReadOnly:function(){function a(b,c){for(;b;){if(b.type==CKEDITOR.NODE_ELEMENT){if(b.getAttribute("contentEditable")==
"false"&&!b.data("cke-editable"))return 0;if(b.is("html")||b.getAttribute("contentEditable")=="true"&&(b.contains(c)||b.equals(c)))break}b=b.getParent()}return 1}return function(){var b=this.startContainer,c=this.endContainer;return!(a(b,c)&&a(c,b))}}(),moveToElementEditablePosition:function(a,b){if(a.type==CKEDITOR.NODE_ELEMENT&&!a.isEditable(false)){this.moveToPosition(a,b?CKEDITOR.POSITION_AFTER_END:CKEDITOR.POSITION_BEFORE_START);return true}for(var c=0;a;){if(a.type==CKEDITOR.NODE_TEXT){b&&this.endContainer&&
this.checkEndOfBlock()&&l.test(a.getText())?this.moveToPosition(a,CKEDITOR.POSITION_BEFORE_START):this.moveToPosition(a,b?CKEDITOR.POSITION_AFTER_END:CKEDITOR.POSITION_BEFORE_START);c=1;break}if(a.type==CKEDITOR.NODE_ELEMENT)if(a.isEditable()){this.moveToPosition(a,b?CKEDITOR.POSITION_BEFORE_END:CKEDITOR.POSITION_AFTER_START);c=1}else if(b&&a.is("br")&&this.endContainer&&this.checkEndOfBlock())this.moveToPosition(a,CKEDITOR.POSITION_BEFORE_START);else if(a.getAttribute("contenteditable")=="false"&&
a.is(CKEDITOR.dtd.$block)){this.setStartBefore(a);this.setEndAfter(a);return true}var e=a,f=c,d=void 0;e.type==CKEDITOR.NODE_ELEMENT&&e.isEditable(false)&&(d=e[b?"getLast":"getFirst"](k));!f&&!d&&(d=e[b?"getPrevious":"getNext"](k));a=d}return!!c},moveToClosestEditablePosition:function(a,b){var c=new CKEDITOR.dom.range(this.root),e=0,f,d=[CKEDITOR.POSITION_AFTER_END,CKEDITOR.POSITION_BEFORE_START];c.moveToPosition(a,d[b?0:1]);if(a.is(CKEDITOR.dtd.$block)){if(f=c[b?"getNextEditableNode":"getPreviousEditableNode"]()){e=
1;if(f.type==CKEDITOR.NODE_ELEMENT&&f.is(CKEDITOR.dtd.$block)&&f.getAttribute("contenteditable")=="false"){c.setStartAt(f,CKEDITOR.POSITION_BEFORE_START);c.setEndAt(f,CKEDITOR.POSITION_AFTER_END)}else c.moveToPosition(f,d[b?1:0])}}else e=1;e&&this.moveToRange(c);return!!e},moveToElementEditStart:function(a){return this.moveToElementEditablePosition(a)},moveToElementEditEnd:function(a){return this.moveToElementEditablePosition(a,true)},getEnclosedNode:function(){var a=this.clone();a.optimize();if(a.startContainer.type!=
CKEDITOR.NODE_ELEMENT||a.endContainer.type!=CKEDITOR.NODE_ELEMENT)return null;var a=new CKEDITOR.dom.walker(a),b=CKEDITOR.dom.walker.bookmark(false,true),c=CKEDITOR.dom.walker.whitespaces(true);a.evaluator=function(a){return c(a)&&b(a)};var e=a.next();a.reset();return e&&e.equals(a.previous())?e:null},getTouchedStartNode:function(){var a=this.startContainer;return this.collapsed||a.type!=CKEDITOR.NODE_ELEMENT?a:a.getChild(this.startOffset)||a},getTouchedEndNode:function(){var a=this.endContainer;
return this.collapsed||a.type!=CKEDITOR.NODE_ELEMENT?a:a.getChild(this.endOffset-1)||a},getNextEditableNode:b(),getPreviousEditableNode:b(1),scrollIntoView:function(){var a=new CKEDITOR.dom.element.createFromHtml("<span>&nbsp;</span>",this.document),b,c,e,f=this.clone();f.optimize();if(e=f.startContainer.type==CKEDITOR.NODE_TEXT){c=f.startContainer.getText();b=f.startContainer.split(f.startOffset);a.insertAfter(f.startContainer)}else f.insertNode(a);a.scrollIntoView();if(e){f.startContainer.setText(c);
b.remove()}a.remove()}}})();CKEDITOR.POSITION_AFTER_START=1;CKEDITOR.POSITION_BEFORE_END=2;CKEDITOR.POSITION_BEFORE_START=3;CKEDITOR.POSITION_AFTER_END=4;CKEDITOR.ENLARGE_ELEMENT=1;CKEDITOR.ENLARGE_BLOCK_CONTENTS=2;CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS=3;CKEDITOR.ENLARGE_INLINE=4;CKEDITOR.START=1;CKEDITOR.END=2;CKEDITOR.SHRINK_ELEMENT=1;CKEDITOR.SHRINK_TEXT=2;"use strict";
(function(){function a(a){if(!(arguments.length<1)){this.range=a;this.forceBrBreak=0;this.enlargeBr=1;this.enforceRealBlocks=0;this._||(this._={})}}function d(a,b,c){for(a=a.getNextSourceNode(b,null,c);!i(a);)a=a.getNextSourceNode(b,null,c);return a}function b(a){var b=[];a.forEach(function(a){if(a.getAttribute("contenteditable")=="true"){b.push(a);return false}},CKEDITOR.NODE_ELEMENT,true);return b}function c(a,e,d,i){a:{i==void 0&&(i=b(d));for(var g;g=i.shift();)if(g.getDtd().p){i={element:g,remaining:i};
break a}i=null}if(!i)return 0;if((g=CKEDITOR.filter.instances[i.element.data("cke-filter")])&&!g.check(e))return c(a,e,d,i.remaining);e=new CKEDITOR.dom.range(i.element);e.selectNodeContents(i.element);e=e.createIterator();e.enlargeBr=a.enlargeBr;e.enforceRealBlocks=a.enforceRealBlocks;e.activeFilter=e.filter=g;a._.nestedEditable={element:i.element,container:d,remaining:i.remaining,iterator:e};return 1}var e=/^[\r\n\t ]+$/,i=CKEDITOR.dom.walker.bookmark(false,true),g=CKEDITOR.dom.walker.whitespaces(true),
l=function(a){return i(a)&&g(a)};a.prototype={getNextParagraph:function(a){var b,g,s,q,u,a=a||"p";if(this._.nestedEditable){if(b=this._.nestedEditable.iterator.getNextParagraph(a)){this.activeFilter=this._.nestedEditable.iterator.activeFilter;return b}this.activeFilter=this.filter;if(c(this,a,this._.nestedEditable.container,this._.nestedEditable.remaining)){this.activeFilter=this._.nestedEditable.iterator.activeFilter;return this._.nestedEditable.iterator.getNextParagraph(a)}this._.nestedEditable=
null}if(!this.range.root.getDtd()[a])return null;if(!this._.started){var f=this.range.clone();f.shrink(CKEDITOR.SHRINK_ELEMENT,true);g=f.endContainer.hasAscendant("pre",true)||f.startContainer.hasAscendant("pre",true);f.enlarge(this.forceBrBreak&&!g||!this.enlargeBr?CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS:CKEDITOR.ENLARGE_BLOCK_CONTENTS);if(!f.collapsed){g=new CKEDITOR.dom.walker(f.clone());var p=CKEDITOR.dom.walker.bookmark(true,true);g.evaluator=p;this._.nextNode=g.next();g=new CKEDITOR.dom.walker(f.clone());
g.evaluator=p;g=g.previous();this._.lastNode=g.getNextSourceNode(true);if(this._.lastNode&&this._.lastNode.type==CKEDITOR.NODE_TEXT&&!CKEDITOR.tools.trim(this._.lastNode.getText())&&this._.lastNode.getParent().isBlockBoundary()){p=this.range.clone();p.moveToPosition(this._.lastNode,CKEDITOR.POSITION_AFTER_END);if(p.checkEndOfBlock()){p=new CKEDITOR.dom.elementPath(p.endContainer,p.root);this._.lastNode=(p.block||p.blockLimit).getNextSourceNode(true)}}if(!this._.lastNode||!f.root.contains(this._.lastNode)){this._.lastNode=
this._.docEndMarker=f.document.createText("");this._.lastNode.insertAfter(g)}f=null}this._.started=1;g=f}p=this._.nextNode;f=this._.lastNode;for(this._.nextNode=null;p;){var y=0,A=p.hasAscendant("pre"),m=p.type!=CKEDITOR.NODE_ELEMENT,j=0;if(m)p.type==CKEDITOR.NODE_TEXT&&e.test(p.getText())&&(m=0);else{var n=p.getName();if(CKEDITOR.dtd.$block[n]&&p.getAttribute("contenteditable")=="false"){b=p;c(this,a,b);break}else if(p.isBlockBoundary(this.forceBrBreak&&!A&&{br:1})){if(n=="br")m=1;else if(!g&&!p.getChildCount()&&
n!="hr"){b=p;s=p.equals(f);break}if(g){g.setEndAt(p,CKEDITOR.POSITION_BEFORE_START);if(n!="br")this._.nextNode=p}y=1}else{if(p.getFirst()){if(!g){g=this.range.clone();g.setStartAt(p,CKEDITOR.POSITION_BEFORE_START)}p=p.getFirst();continue}m=1}}if(m&&!g){g=this.range.clone();g.setStartAt(p,CKEDITOR.POSITION_BEFORE_START)}s=(!y||m)&&p.equals(f);if(g&&!y)for(;!p.getNext(l)&&!s;){n=p.getParent();if(n.isBlockBoundary(this.forceBrBreak&&!A&&{br:1})){y=1;m=0;s||n.equals(f);g.setEndAt(n,CKEDITOR.POSITION_BEFORE_END);
break}p=n;m=1;s=p.equals(f);j=1}m&&g.setEndAt(p,CKEDITOR.POSITION_AFTER_END);p=d(p,j,f);if((s=!p)||y&&g)break}if(!b){if(!g){this._.docEndMarker&&this._.docEndMarker.remove();return this._.nextNode=null}b=new CKEDITOR.dom.elementPath(g.startContainer,g.root);p=b.blockLimit;y={div:1,th:1,td:1};b=b.block;if(!b&&p&&!this.enforceRealBlocks&&y[p.getName()]&&g.checkStartOfBlock()&&g.checkEndOfBlock()&&!p.equals(g.root))b=p;else if(!b||this.enforceRealBlocks&&b.getName()=="li"){b=this.range.document.createElement(a);
g.extractContents().appendTo(b);b.trim();g.insertNode(b);q=u=true}else if(b.getName()!="li"){if(!g.checkStartOfBlock()||!g.checkEndOfBlock()){b=b.clone(false);g.extractContents().appendTo(b);b.trim();u=g.splitBlock();q=!u.wasStartOfBlock;u=!u.wasEndOfBlock;g.insertNode(b)}}else if(!s)this._.nextNode=b.equals(f)?null:d(g.getBoundaryNodes().endNode,1,f)}if(q)(q=b.getPrevious())&&q.type==CKEDITOR.NODE_ELEMENT&&(q.getName()=="br"?q.remove():q.getLast()&&q.getLast().$.nodeName.toLowerCase()=="br"&&q.getLast().remove());
if(u)(q=b.getLast())&&q.type==CKEDITOR.NODE_ELEMENT&&q.getName()=="br"&&(!CKEDITOR.env.needsBrFiller||q.getPrevious(i)||q.getNext(i))&&q.remove();if(!this._.nextNode)this._.nextNode=s||b.equals(f)||!f?null:d(b,1,f);return b}};CKEDITOR.dom.range.prototype.createIterator=function(){return new a(this)}})();
CKEDITOR.command=function(a,d){this.uiItems=[];this.exec=function(b){if(this.state==CKEDITOR.TRISTATE_DISABLED||!this.checkAllowed())return false;this.editorFocus&&a.focus();return this.fire("exec")===false?true:d.exec.call(this,a,b)!==false};this.refresh=function(a,b){if(!this.readOnly&&a.readOnly)return true;if(this.context&&!b.isContextFor(this.context)){this.disable();return true}if(!this.checkAllowed(true)){this.disable();return true}this.startDisabled||this.enable();this.modes&&!this.modes[a.mode]&&
this.disable();return this.fire("refresh",{editor:a,path:b})===false?true:d.refresh&&d.refresh.apply(this,arguments)!==false};var b;this.checkAllowed=function(c){return!c&&typeof b=="boolean"?b:b=a.activeFilter.checkFeature(this)};CKEDITOR.tools.extend(this,d,{modes:{wysiwyg:1},editorFocus:1,contextSensitive:!!d.context,state:CKEDITOR.TRISTATE_DISABLED});CKEDITOR.event.call(this)};
CKEDITOR.command.prototype={enable:function(){this.state==CKEDITOR.TRISTATE_DISABLED&&this.checkAllowed()&&this.setState(!this.preserveState||typeof this.previousState=="undefined"?CKEDITOR.TRISTATE_OFF:this.previousState)},disable:function(){this.setState(CKEDITOR.TRISTATE_DISABLED)},setState:function(a){if(this.state==a||a!=CKEDITOR.TRISTATE_DISABLED&&!this.checkAllowed())return false;this.previousState=this.state;this.state=a;this.fire("state");return true},toggleState:function(){this.state==CKEDITOR.TRISTATE_OFF?
this.setState(CKEDITOR.TRISTATE_ON):this.state==CKEDITOR.TRISTATE_ON&&this.setState(CKEDITOR.TRISTATE_OFF)}};CKEDITOR.event.implementOn(CKEDITOR.command.prototype);CKEDITOR.ENTER_P=1;CKEDITOR.ENTER_BR=2;CKEDITOR.ENTER_DIV=3;
CKEDITOR.config={customConfig:"config.js",autoUpdateElement:!0,language:"",defaultLanguage:"en",contentsLangDirection:"",enterMode:CKEDITOR.ENTER_P,forceEnterMode:!1,shiftEnterMode:CKEDITOR.ENTER_BR,docType:"<!DOCTYPE html>",bodyId:"",bodyClass:"",fullPage:!1,height:200,extraPlugins:"",removePlugins:"",protectedSource:[],tabIndex:0,width:"",baseFloatZIndex:1E4,blockedKeystrokes:[CKEDITOR.CTRL+66,CKEDITOR.CTRL+73,CKEDITOR.CTRL+85,CKEDITOR.CTRL+89,CKEDITOR.CTRL+90,CKEDITOR.CTRL+CKEDITOR.SHIFT+90]};
(function(){function a(a,b,c,f,z){var j=b.name;if((f||typeof a.elements!="function"||a.elements(j))&&(!a.match||a.match(b))){if(f=!z){a:if(a.nothingRequired)f=true;else{if(z=a.requiredClasses){j=b.classes;for(f=0;f<z.length;++f)if(CKEDITOR.tools.indexOf(j,z[f])==-1){f=false;break a}}f=e(b.styles,a.requiredStyles)&&e(b.attributes,a.requiredAttributes)}f=!f}if(!f){if(!a.propertiesOnly)c.valid=true;if(!c.allAttributes)c.allAttributes=d(a.attributes,b.attributes,c.validAttributes);if(!c.allStyles)c.allStyles=
d(a.styles,b.styles,c.validStyles);if(!c.allClasses){a=a.classes;b=b.classes;f=c.validClasses;if(a)if(a===true)b=true;else{for(var z=0,j=b.length,i;z<j;++z){i=b[z];f[i]||(f[i]=a(i))}b=false}else b=false;c.allClasses=b}}}}function d(a,b,c){if(!a)return false;if(a===true)return true;for(var e in b)c[e]||(c[e]=a(e,b[e]));return false}function b(a,b){if(!a)return false;if(a===true)return a;if(typeof a=="string"){a=J(a);return a=="*"?true:CKEDITOR.tools.convertArrayToObject(a.split(b))}if(CKEDITOR.tools.isArray(a))return a.length?
CKEDITOR.tools.convertArrayToObject(a):false;var c={},e=0,f;for(f in a){c[f]=a[f];e++}return e?c:false}function c(b){if(b._.filterFunction)return b._.filterFunction;var c=/^cke:(object|embed|param)$/,e=/^(object|embed|param)$/;return b._.filterFunction=function(f,d,j,i,m,n,t){var g=f.name,r,y=false;if(m)f.name=g=g.replace(c,"$1");if(j=j&&j[g]){h(f);for(g=0;g<j.length;++g)p(b,f,j[g]);k(f)}if(d){var g=f.name,j=d.elements[g],l=d.generic,d={valid:false,validAttributes:{},validClasses:{},validStyles:{},
allAttributes:false,allClasses:false,allStyles:false};if(!j&&!l){i.push(f);return true}h(f);if(j){g=0;for(r=j.length;g<r;++g)a(j[g],f,d,true,n)}if(l){g=0;for(r=l.length;g<r;++g)a(l[g],f,d,false,n)}if(!d.valid){i.push(f);return true}n=d.validAttributes;g=d.validStyles;j=d.validClasses;r=f.attributes;var l=f.styles,J=r["class"],G=r.style,w,B,A=[],I=[],s=/^data-cke-/,q=false;delete r.style;delete r["class"];if(!d.allAttributes)for(w in r)if(!n[w])if(s.test(w)){if(w!=(B=w.replace(/^data-cke-saved-/,""))&&
!n[B]){delete r[w];q=true}}else{delete r[w];q=true}if(d.allStyles){if(G)r.style=G}else{for(w in l)g[w]?A.push(w+":"+l[w]):q=true;if(A.length)r.style=A.sort().join("; ")}if(d.allClasses)J&&(r["class"]=J);else{for(w in j)j[w]&&I.push(w);I.length&&(r["class"]=I.sort().join(" "));J&&I.length<J.split(/\s+/).length&&(q=true)}q&&(y=true);if(!t&&!o(f)){i.push(f);return true}}if(m)f.name=f.name.replace(e,"cke:$1");return y}}function e(a,b){if(!b)return true;for(var c=0;c<b.length;++c)if(!(b[c]in a))return false;
return true}function i(a){if(!a)return{};for(var a=a.split(/\s*,\s*/).sort(),b={};a.length;)b[a.shift()]=t;return b}function g(a){for(var b,c,e,f,d={},j=1,a=J(a);b=a.match(B);){if(c=b[2]){e=l(c,"styles");f=l(c,"attrs");c=l(c,"classes")}else e=f=c=null;d["$"+j++]={elements:b[1],classes:c,styles:e,attributes:f};a=a.slice(b[0].length)}return d}function l(a,b){var c=a.match(N[b]);return c?J(c[1]):null}function h(a){if(!a.styles)a.styles=CKEDITOR.tools.parseCssText(a.attributes.style||"",1);if(!a.classes)a.classes=
a.attributes["class"]?a.attributes["class"].split(/\s+/):[]}function k(a){var b=a.attributes,c;delete b.style;delete b["class"];if(c=CKEDITOR.tools.writeCssText(a.styles,true))b.style=c;a.classes.length&&(b["class"]=a.classes.sort().join(" "))}function o(a){switch(a.name){case "a":if(!a.children.length&&!a.attributes.name)return false;break;case "img":if(!a.attributes.src)return false}return true}function s(a){return!a?false:a===true?true:function(b){return b in a}}function q(){return new CKEDITOR.htmlParser.element("br")}
function u(a){return a.type==CKEDITOR.NODE_ELEMENT&&(a.name=="br"||n.$block[a.name])}function f(a,b,c){var e=a.name;if(n.$empty[e]||!a.children.length)if(e=="hr"&&b=="br")a.replaceWith(q());else{a.parent&&c.push({check:"it",el:a.parent});a.remove()}else if(n.$block[e]||e=="tr")if(b=="br"){if(a.previous&&!u(a.previous)){b=q();b.insertBefore(a)}if(a.next&&!u(a.next)){b=q();b.insertAfter(a)}a.replaceWithChildren()}else{var e=a.children,f;b:{f=n[b];for(var d=0,j=e.length,i;d<j;++d){i=e[d];if(i.type==
CKEDITOR.NODE_ELEMENT&&!f[i.name]){f=false;break b}}f=true}if(f){a.name=b;a.attributes={};c.push({check:"parent-down",el:a})}else{f=a.parent;for(var d=f.type==CKEDITOR.NODE_DOCUMENT_FRAGMENT||f.name=="body",m,j=e.length;j>0;){i=e[--j];if(d&&(i.type==CKEDITOR.NODE_TEXT||i.type==CKEDITOR.NODE_ELEMENT&&n.$inline[i.name])){if(!m){m=new CKEDITOR.htmlParser.element(b);m.insertAfter(a);c.push({check:"parent-down",el:m})}m.add(i,0)}else{m=null;i.insertAfter(a);f.type!=CKEDITOR.NODE_DOCUMENT_FRAGMENT&&(i.type==
CKEDITOR.NODE_ELEMENT&&!n[f.name][i.name])&&c.push({check:"el-up",el:i})}}a.remove()}}else if(e=="style")a.remove();else{a.parent&&c.push({check:"it",el:a.parent});a.replaceWithChildren()}}function p(a,b,c){var e,f;for(e=0;e<c.length;++e){f=c[e];if((!f.check||a.check(f.check,false))&&(!f.left||f.left(b))){f.right(b,H);break}}}function y(a,b){var c=b.getDefinition(),e=c.attributes,f=c.styles,d,j,i,m;if(a.name!=c.element)return false;for(d in e)if(d=="class"){c=e[d].split(/\s+/);for(i=a.classes.join("|");m=
c.pop();)if(i.indexOf(m)==-1)return false}else if(a.attributes[d]!=e[d])return false;for(j in f)if(a.styles[j]!=f[j])return false;return true}function A(a,b){var c,e;if(typeof a=="string")c=a;else if(a instanceof CKEDITOR.style)e=a;else{c=a[0];e=a[1]}return[{element:c,left:e,right:function(a,c){c.transform(a,b)}}]}function m(a){return function(b){return y(b,a)}}function j(a){return function(b,c){c[a](b)}}var n=CKEDITOR.dtd,r=CKEDITOR.tools.copy,J=CKEDITOR.tools.trim,t="cke-test",w=["","p","br","div"];
CKEDITOR.filter=function(a){this.allowedContent=[];this.disabled=false;this.editor=null;this.id=CKEDITOR.tools.getNextNumber();this._={rules:{},transformations:{},cachedTests:{}};CKEDITOR.filter.instances[this.id]=this;if(a instanceof CKEDITOR.editor){a=this.editor=a;this.customConfig=true;var b=a.config.allowedContent;if(b===true)this.disabled=true;else{if(!b)this.customConfig=false;this.allow(b,"config",1);this.allow(a.config.extraAllowedContent,"extra",1);this.allow(w[a.enterMode]+" "+w[a.shiftEnterMode],
"default",1)}}else{this.customConfig=false;this.allow(a,"default",1)}};CKEDITOR.filter.instances={};CKEDITOR.filter.prototype={allow:function(a,c,e){if(this.disabled||this.customConfig&&!e||!a)return false;this._.cachedChecks={};var f,d;if(typeof a=="string")a=g(a);else if(a instanceof CKEDITOR.style){d=a.getDefinition();e={};a=d.attributes;e[d.element]=d={styles:d.styles,requiredStyles:d.styles&&CKEDITOR.tools.objectKeys(d.styles)};if(a){a=r(a);d.classes=a["class"]?a["class"].split(/\s+/):null;d.requiredClasses=
d.classes;delete a["class"];d.attributes=a;d.requiredAttributes=a&&CKEDITOR.tools.objectKeys(a)}a=e}else if(CKEDITOR.tools.isArray(a)){for(f=0;f<a.length;++f)d=this.allow(a[f],c,e);return d}var j,e=[];for(j in a){d=a[j];d=typeof d=="boolean"?{}:typeof d=="function"?{match:d}:r(d);if(j.charAt(0)!="$")d.elements=j;if(c)d.featureName=c.toLowerCase();var i=d;i.elements=b(i.elements,/\s+/)||null;i.propertiesOnly=i.propertiesOnly||i.elements===true;var m=/\s*,\s*/,n=void 0;for(n in G){i[n]=b(i[n],m)||null;
var p=i,t=I[n],h=b(i[I[n]],m),k=i[n],y=[],l=true,w=void 0;h?l=false:h={};for(w in k)if(w.charAt(0)=="!"){w=w.slice(1);y.push(w);h[w]=true;l=false}for(;w=y.pop();){k[w]=k["!"+w];delete k["!"+w]}p[t]=(l?false:h)||null}i.match=i.match||null;this.allowedContent.push(d);e.push(d)}c=this._.rules;j=c.elements||{};a=c.generic||[];d=0;for(i=e.length;d<i;++d){m=r(e[d]);n=m.classes===true||m.styles===true||m.attributes===true;p=m;t=void 0;for(t in G)p[t]=s(p[t]);h=true;for(t in I){t=I[t];p[t]=CKEDITOR.tools.objectKeys(p[t]);
p[t]&&(h=false)}p.nothingRequired=h;if(m.elements===true||m.elements===null){m.elements=s(m.elements);a[n?"unshift":"push"](m)}else{p=m.elements;delete m.elements;for(f in p)if(j[f])j[f][n?"unshift":"push"](m);else j[f]=[m]}}c.elements=j;c.generic=a.length?a:null;return true},applyTo:function(a,b,e,d){if(this.disabled)return false;var j=[],i=!e&&this._.rules,m=this._.transformations,p=c(this),g=this.editor&&this.editor.config.protectedSource,t=false;a.forEach(function(a){if(a.type==CKEDITOR.NODE_ELEMENT){if(a.attributes["data-cke-filter"]==
"off")return false;if(!b||!(a.name=="span"&&~CKEDITOR.tools.objectKeys(a.attributes).join("|").indexOf("data-cke-")))p(a,i,m,j,b)&&(t=true)}else if(a.type==CKEDITOR.NODE_COMMENT&&a.value.match(/^\{cke_protected\}(?!\{C\})/)){var c;a:{var e=decodeURIComponent(a.value.replace(/^\{cke_protected\}/,""));c=[];var f,d,n;if(g)for(d=0;d<g.length;++d)if((n=e.match(g[d]))&&n[0].length==e.length){c=true;break a}e=CKEDITOR.htmlParser.fragment.fromHtml(e);e.children.length==1&&(f=e.children[0]).type==CKEDITOR.NODE_ELEMENT&&
p(f,i,m,c,b);c=!c.length}c||j.push(a)}},null,true);j.length&&(t=true);for(var r,a=[],d=w[d||(this.editor?this.editor.enterMode:CKEDITOR.ENTER_P)];e=j.pop();)e.type==CKEDITOR.NODE_ELEMENT?f(e,d,a):e.remove();for(;r=a.pop();){e=r.el;if(e.parent)switch(r.check){case "it":n.$removeEmpty[e.name]&&!e.children.length?f(e,d,a):o(e)||f(e,d,a);break;case "el-up":e.parent.type!=CKEDITOR.NODE_DOCUMENT_FRAGMENT&&!n[e.parent.name][e.name]&&f(e,d,a);break;case "parent-down":e.parent.type!=CKEDITOR.NODE_DOCUMENT_FRAGMENT&&
!n[e.parent.name][e.name]&&f(e.parent,d,a)}}return t},checkFeature:function(a){if(this.disabled||!a)return true;a.toFeature&&(a=a.toFeature(this.editor));return!a.requiredContent||this.check(a.requiredContent)},disable:function(){this.disabled=true},addContentForms:function(a){if(!this.disabled&&a){var b,c,e=[],f;for(b=0;b<a.length&&!f;++b){c=a[b];if((typeof c=="string"||c instanceof CKEDITOR.style)&&this.check(c))f=c}if(f){for(b=0;b<a.length;++b)e.push(A(a[b],f));this.addTransformations(e)}}},addFeature:function(a){if(this.disabled||
!a)return true;a.toFeature&&(a=a.toFeature(this.editor));this.allow(a.allowedContent,a.name);this.addTransformations(a.contentTransformations);this.addContentForms(a.contentForms);return this.customConfig&&a.requiredContent?this.check(a.requiredContent):true},addTransformations:function(a){var b,c;if(!this.disabled&&a){var e=this._.transformations,f;for(f=0;f<a.length;++f){b=a[f];var d=void 0,i=void 0,n=void 0,p=void 0,g=void 0,t=void 0;c=[];for(i=0;i<b.length;++i){n=b[i];if(typeof n=="string"){n=
n.split(/\s*:\s*/);p=n[0];g=null;t=n[1]}else{p=n.check;g=n.left;t=n.right}if(!d){d=n;d=d.element?d.element:p?p.match(/^([a-z0-9]+)/i)[0]:d.left.getDefinition().element}g instanceof CKEDITOR.style&&(g=m(g));c.push({check:p==d?null:p,left:g,right:typeof t=="string"?j(t):t})}b=d;e[b]||(e[b]=[]);e[b].push(c)}}},check:function(a,b,e){if(this.disabled)return true;if(CKEDITOR.tools.isArray(a)){for(var f=a.length;f--;)if(this.check(a[f],b,e))return true;return false}var d,j;if(typeof a=="string"){j=a+"<"+
(b===false?"0":"1")+(e?"1":"0")+">";if(j in this._.cachedChecks)return this._.cachedChecks[j];f=g(a).$1;d=f.styles;var m=f.classes;f.name=f.elements;f.classes=m=m?m.split(/\s*,\s*/):[];f.styles=i(d);f.attributes=i(f.attributes);f.children=[];m.length&&(f.attributes["class"]=m.join(" "));if(d)f.attributes.style=CKEDITOR.tools.writeCssText(f.styles);d=f}else{f=a.getDefinition();d=f.styles;m=f.attributes||{};if(d){d=r(d);m.style=CKEDITOR.tools.writeCssText(d,true)}else d={};d={name:f.element,attributes:m,
classes:m["class"]?m["class"].split(/\s+/):[],styles:d,children:[]}}var m=CKEDITOR.tools.clone(d),n=[],t;if(b!==false&&(t=this._.transformations[d.name])){for(f=0;f<t.length;++f)p(this,d,t[f]);k(d)}c(this)(m,this._.rules,b===false?false:this._.transformations,n,false,!e,!e);b=n.length>0?false:CKEDITOR.tools.objectCompare(d.attributes,m.attributes,true)?true:false;typeof a=="string"&&(this._.cachedChecks[j]=b);return b},getAllowedEnterMode:function(){var a=["p","div","br"],b={p:CKEDITOR.ENTER_P,div:CKEDITOR.ENTER_DIV,
br:CKEDITOR.ENTER_BR};return function(c,e){var f=a.slice(),d;if(this.check(w[c]))return c;for(e||(f=f.reverse());d=f.pop();)if(this.check(d))return b[d];return CKEDITOR.ENTER_BR}}()};var G={styles:1,attributes:1,classes:1},I={styles:"requiredStyles",attributes:"requiredAttributes",classes:"requiredClasses"},B=/^([a-z0-9*\s]+)((?:\s*\{[!\w\-,\s\*]+\}\s*|\s*\[[!\w\-,\s\*]+\]\s*|\s*\([!\w\-,\s\*]+\)\s*){0,3})(?:;\s*|$)/i,N={styles:/{([^}]+)}/,attrs:/\[([^\]]+)\]/,classes:/\(([^\)]+)\)/},H=CKEDITOR.filter.transformationsTools=
{sizeToStyle:function(a){this.lengthToStyle(a,"width");this.lengthToStyle(a,"height")},sizeToAttribute:function(a){this.lengthToAttribute(a,"width");this.lengthToAttribute(a,"height")},lengthToStyle:function(a,b,c){c=c||b;if(!(c in a.styles)){var e=a.attributes[b];if(e){/^\d+$/.test(e)&&(e=e+"px");a.styles[c]=e}}delete a.attributes[b]},lengthToAttribute:function(a,b,c){c=c||b;if(!(c in a.attributes)){var e=a.styles[b],f=e&&e.match(/^(\d+)(?:\.\d*)?px$/);f?a.attributes[c]=f[1]:e==t&&(a.attributes[c]=
t)}delete a.styles[b]},alignmentToStyle:function(a){if(!("float"in a.styles)){var b=a.attributes.align;if(b=="left"||b=="right")a.styles["float"]=b}delete a.attributes.align},alignmentToAttribute:function(a){if(!("align"in a.attributes)){var b=a.styles["float"];if(b=="left"||b=="right")a.attributes.align=b}delete a.styles["float"]},matchesStyle:y,transform:function(a,b){if(typeof b=="string")a.name=b;else{var c=b.getDefinition(),e=c.styles,f=c.attributes,d,j,i,m;a.name=c.element;for(d in f)if(d==
"class"){c=a.classes.join("|");for(i=f[d].split(/\s+/);m=i.pop();)c.indexOf(m)==-1&&a.classes.push(m)}else a.attributes[d]=f[d];for(j in e)a.styles[j]=e[j]}}}})();
(function(){CKEDITOR.focusManager=function(a){if(a.focusManager)return a.focusManager;this.hasFocus=false;this.currentActive=null;this._={editor:a};return this};CKEDITOR.focusManager._={blurDelay:200};CKEDITOR.focusManager.prototype={focus:function(a){this._.timer&&clearTimeout(this._.timer);if(a)this.currentActive=a;if(!this.hasFocus&&!this._.locked){(a=CKEDITOR.currentInstance)&&a.focusManager.blur(1);this.hasFocus=true;(a=this._.editor.container)&&a.addClass("cke_focus");this._.editor.fire("focus")}},
lock:function(){this._.locked=1},unlock:function(){delete this._.locked},blur:function(a){function d(){if(this.hasFocus){this.hasFocus=false;var a=this._.editor.container;a&&a.removeClass("cke_focus");this._.editor.fire("blur")}}if(!this._.locked){this._.timer&&clearTimeout(this._.timer);var b=CKEDITOR.focusManager._.blurDelay;a||!b?d.call(this):this._.timer=CKEDITOR.tools.setTimeout(function(){delete this._.timer;d.call(this)},b,this)}},add:function(a,d){var b=a.getCustomData("focusmanager");if(!b||
b!=this){b&&b.remove(a);var b="focus",c="blur";if(d)if(CKEDITOR.env.ie){b="focusin";c="focusout"}else CKEDITOR.event.useCapture=1;var e={blur:function(){a.equals(this.currentActive)&&this.blur()},focus:function(){this.focus(a)}};a.on(b,e.focus,this);a.on(c,e.blur,this);if(d)CKEDITOR.event.useCapture=0;a.setCustomData("focusmanager",this);a.setCustomData("focusmanager_handlers",e)}},remove:function(a){a.removeCustomData("focusmanager");var d=a.removeCustomData("focusmanager_handlers");a.removeListener("blur",
d.blur);a.removeListener("focus",d.focus)}}})();CKEDITOR.keystrokeHandler=function(a){if(a.keystrokeHandler)return a.keystrokeHandler;this.keystrokes={};this.blockedKeystrokes={};this._={editor:a};return this};
(function(){var a,d=function(b){var b=b.data,e=b.getKeystroke(),d=this.keystrokes[e],g=this._.editor;a=g.fire("key",{keyCode:e})===false;if(!a){d&&(a=g.execCommand(d,{from:"keystrokeHandler"})!==false);a||(a=!!this.blockedKeystrokes[e])}a&&b.preventDefault(true);return!a},b=function(b){if(a){a=false;b.data.preventDefault(true)}};CKEDITOR.keystrokeHandler.prototype={attach:function(a){a.on("keydown",d,this);if(CKEDITOR.env.opera||CKEDITOR.env.gecko&&CKEDITOR.env.mac)a.on("keypress",b,this)}}})();
(function(){CKEDITOR.lang={languages:{af:1,ar:1,bg:1,bn:1,bs:1,ca:1,cs:1,cy:1,da:1,de:1,el:1,"en-au":1,"en-ca":1,"en-gb":1,en:1,eo:1,es:1,et:1,eu:1,fa:1,fi:1,fo:1,"fr-ca":1,fr:1,gl:1,gu:1,he:1,hi:1,hr:1,hu:1,id:1,is:1,it:1,ja:1,ka:1,km:1,ko:1,ku:1,lt:1,lv:1,mk:1,mn:1,ms:1,nb:1,nl:1,no:1,pl:1,"pt-br":1,pt:1,ro:1,ru:1,si:1,sk:1,sl:1,sq:1,"sr-latn":1,sr:1,sv:1,th:1,tr:1,ug:1,uk:1,vi:1,"zh-cn":1,zh:1},rtl:{ar:1,fa:1,he:1,ku:1,ug:1},load:function(a,d,b){if(!a||!CKEDITOR.lang.languages[a])a=this.detect(d,
a);this[a]?b(a,this[a]):CKEDITOR.scriptLoader.load(CKEDITOR.getUrl("lang/"+a+".js"),function(){this[a].dir=this.rtl[a]?"rtl":"ltr";b(a,this[a])},this)},detect:function(a,d){var b=this.languages,d=d||navigator.userLanguage||navigator.language||a,c=d.toLowerCase().match(/([a-z]+)(?:-([a-z]+))?/),e=c[1],c=c[2];b[e+"-"+c]?e=e+"-"+c:b[e]||(e=null);CKEDITOR.lang.detect=e?function(){return e}:function(a){return a};return e||a}}})();
CKEDITOR.scriptLoader=function(){var a={},d={};return{load:function(b,c,e,i){var g=typeof b=="string";g&&(b=[b]);e||(e=CKEDITOR);var l=b.length,h=[],k=[],o=function(a){c&&(g?c.call(e,a):c.call(e,h,k))};if(l===0)o(true);else{var s=function(a,b){(b?h:k).push(a);if(--l<=0){i&&CKEDITOR.document.getDocumentElement().removeStyle("cursor");o(b)}},q=function(b,c){a[b]=1;var e=d[b];delete d[b];for(var f=0;f<e.length;f++)e[f](b,c)},u=function(b){if(a[b])s(b,true);else{var e=d[b]||(d[b]=[]);e.push(s);if(!(e.length>
1)){var f=new CKEDITOR.dom.element("script");f.setAttributes({type:"text/javascript",src:b});if(c)if(CKEDITOR.env.ie&&CKEDITOR.env.version<11)f.$.onreadystatechange=function(){if(f.$.readyState=="loaded"||f.$.readyState=="complete"){f.$.onreadystatechange=null;q(b,true)}};else{f.$.onload=function(){setTimeout(function(){q(b,true)},0)};f.$.onerror=function(){q(b,false)}}f.appendTo(CKEDITOR.document.getHead())}}};i&&CKEDITOR.document.getDocumentElement().setStyle("cursor","wait");for(var f=0;f<l;f++)u(b[f])}},
queue:function(){function a(){var b;(b=c[0])&&this.load(b.scriptUrl,b.callback,CKEDITOR,0)}var c=[];return function(e,d){var g=this;c.push({scriptUrl:e,callback:function(){d&&d.apply(this,arguments);c.shift();a.call(g)}});c.length==1&&a.call(this)}}()}}();CKEDITOR.resourceManager=function(a,d){this.basePath=a;this.fileName=d;this.registered={};this.loaded={};this.externals={};this._={waitingList:{}}};
CKEDITOR.resourceManager.prototype={add:function(a,d){if(this.registered[a])throw'[CKEDITOR.resourceManager.add] The resource name "'+a+'" is already registered.';var b=this.registered[a]=d||{};b.name=a;b.path=this.getPath(a);CKEDITOR.fire(a+CKEDITOR.tools.capitalize(this.fileName)+"Ready",b);return this.get(a)},get:function(a){return this.registered[a]||null},getPath:function(a){var d=this.externals[a];return CKEDITOR.getUrl(d&&d.dir||this.basePath+a+"/")},getFilePath:function(a){var d=this.externals[a];
return CKEDITOR.getUrl(this.getPath(a)+(d?d.file:this.fileName+".js"))},addExternal:function(a,d,b){for(var a=a.split(","),c=0;c<a.length;c++){var e=a[c];b||(d=d.replace(/[^\/]+$/,function(a){b=a;return""}));this.externals[e]={dir:d,file:b||this.fileName+".js"}}},load:function(a,d,b){CKEDITOR.tools.isArray(a)||(a=a?[a]:[]);for(var c=this.loaded,e=this.registered,i=[],g={},l={},h=0;h<a.length;h++){var k=a[h];if(k)if(!c[k]&&!e[k]){var o=this.getFilePath(k);i.push(o);o in g||(g[o]=[]);g[o].push(k)}else l[k]=
this.get(k)}CKEDITOR.scriptLoader.load(i,function(a,e){if(e.length)throw'[CKEDITOR.resourceManager.load] Resource name "'+g[e[0]].join(",")+'" was not found at "'+e[0]+'".';for(var i=0;i<a.length;i++)for(var f=g[a[i]],p=0;p<f.length;p++){var h=f[p];l[h]=this.get(h);c[h]=1}d.call(b,l)},this)}};CKEDITOR.plugins=new CKEDITOR.resourceManager("plugins/","plugin");
CKEDITOR.plugins.load=CKEDITOR.tools.override(CKEDITOR.plugins.load,function(a){var d={};return function(b,c,e){var i={},g=function(b){a.call(this,b,function(a){CKEDITOR.tools.extend(i,a);var b=[],l;for(l in a){var s=a[l],q=s&&s.requires;if(!d[l]){if(s.icons)for(var u=s.icons.split(","),f=u.length;f--;)CKEDITOR.skin.addIcon(u[f],s.path+"icons/"+(CKEDITOR.env.hidpi&&s.hidpi?"hidpi/":"")+u[f]+".png");d[l]=1}if(q){q.split&&(q=q.split(","));for(s=0;s<q.length;s++)i[q[s]]||b.push(q[s])}}if(b.length)g.call(this,
b);else{for(l in i){s=i[l];if(s.onLoad&&!s.onLoad._called){s.onLoad()===false&&delete i[l];s.onLoad._called=1}}c&&c.call(e||window,i)}},this)};g.call(this,b)}});CKEDITOR.plugins.setLang=function(a,d,b){var c=this.get(a),a=c.langEntries||(c.langEntries={}),c=c.lang||(c.lang=[]);c.split&&(c=c.split(","));CKEDITOR.tools.indexOf(c,d)==-1&&c.push(d);a[d]=b};CKEDITOR.ui=function(a){if(a.ui)return a.ui;this.items={};this.instances={};this.editor=a;this._={handlers:{}};return this};
CKEDITOR.ui.prototype={add:function(a,d,b){b.name=a.toLowerCase();var c=this.items[a]={type:d,command:b.command||null,args:Array.prototype.slice.call(arguments,2)};CKEDITOR.tools.extend(c,b)},get:function(a){return this.instances[a]},create:function(a){var d=this.items[a],b=d&&this._.handlers[d.type],c=d&&d.command&&this.editor.getCommand(d.command),b=b&&b.create.apply(this,d.args);this.instances[a]=b;c&&c.uiItems.push(b);if(b&&!b.type)b.type=d.type;return b},addHandler:function(a,d){this._.handlers[a]=
d},space:function(a){return CKEDITOR.document.getById(this.spaceId(a))},spaceId:function(a){return this.editor.id+"_"+a}};CKEDITOR.event.implementOn(CKEDITOR.ui);
(function(){function a(a,c,i){CKEDITOR.event.call(this);a=a&&CKEDITOR.tools.clone(a);if(c!==void 0){if(c instanceof CKEDITOR.dom.element){if(!i)throw Error("One of the element modes must be specified.");}else throw Error("Expect element of type CKEDITOR.dom.element.");if(CKEDITOR.env.ie&&CKEDITOR.env.quirks&&i==CKEDITOR.ELEMENT_MODE_INLINE)throw Error("Inline element mode is not supported on IE quirks.");if(!(i==CKEDITOR.ELEMENT_MODE_INLINE?c.is(CKEDITOR.dtd.$editable)||c.is("textarea"):i==CKEDITOR.ELEMENT_MODE_REPLACE?
!c.is(CKEDITOR.dtd.$nonBodyContent):1))throw Error('The specified element mode is not supported on element: "'+c.getName()+'".');this.element=c;this.elementMode=i;this.name=this.elementMode!=CKEDITOR.ELEMENT_MODE_APPENDTO&&(c.getId()||c.getNameAtt())}else this.elementMode=CKEDITOR.ELEMENT_MODE_NONE;this._={};this.commands={};this.templates={};this.name=this.name||d();this.id=CKEDITOR.tools.getNextId();this.status="unloaded";this.config=CKEDITOR.tools.prototypedCopy(CKEDITOR.config);this.ui=new CKEDITOR.ui(this);
this.focusManager=new CKEDITOR.focusManager(this);this.keystrokeHandler=new CKEDITOR.keystrokeHandler(this);this.on("readOnly",b);this.on("selectionChange",function(a){e(this,a.data.path)});this.on("activeFilterChange",function(){e(this,this.elementPath(),true)});this.on("mode",b);this.on("instanceReady",function(){this.config.startupFocus&&this.focus()});CKEDITOR.fire("instanceCreated",null,this);CKEDITOR.add(this);CKEDITOR.tools.setTimeout(function(){g(this,a)},0,this)}function d(){do var a="editor"+
++q;while(CKEDITOR.instances[a]);return a}function b(){var a=this.commands,b;for(b in a)c(this,a[b])}function c(a,b){b[b.startDisabled?"disable":a.readOnly&&!b.readOnly?"disable":b.modes[a.mode]?"enable":"disable"]()}function e(a,b,c){if(b){var e,d,j=a.commands;for(d in j){e=j[d];(c||e.contextSensitive)&&e.refresh(a,b)}}}function i(a){var b=a.config.customConfig;if(!b)return false;var b=CKEDITOR.getUrl(b),c=u[b]||(u[b]={});if(c.fn){c.fn.call(a,a.config);(CKEDITOR.getUrl(a.config.customConfig)==b||
!i(a))&&a.fireOnce("customConfigLoaded")}else CKEDITOR.scriptLoader.queue(b,function(){c.fn=CKEDITOR.editorConfig?CKEDITOR.editorConfig:function(){};i(a)});return true}function g(a,b){a.on("customConfigLoaded",function(){if(b){if(b.on)for(var c in b.on)a.on(c,b.on[c]);CKEDITOR.tools.extend(a.config,b,true);delete a.config.on}c=a.config;a.readOnly=!(!c.readOnly&&!(a.elementMode==CKEDITOR.ELEMENT_MODE_INLINE?a.element.is("textarea")?a.element.hasAttribute("disabled"):a.element.isReadOnly():a.elementMode==
CKEDITOR.ELEMENT_MODE_REPLACE&&a.element.hasAttribute("disabled")));a.blockless=a.elementMode==CKEDITOR.ELEMENT_MODE_INLINE?!(a.element.is("textarea")||CKEDITOR.dtd[a.element.getName()].p):false;a.tabIndex=c.tabIndex||a.element&&a.element.getAttribute("tabindex")||0;a.activeEnterMode=a.enterMode=a.blockless?CKEDITOR.ENTER_BR:c.enterMode;a.activeShiftEnterMode=a.shiftEnterMode=a.blockless?CKEDITOR.ENTER_BR:c.shiftEnterMode;if(c.skin)CKEDITOR.skinName=c.skin;a.fireOnce("configLoaded");a.dataProcessor=
new CKEDITOR.htmlDataProcessor(a);a.filter=a.activeFilter=new CKEDITOR.filter(a);l(a)});if(b&&b.customConfig!=void 0)a.config.customConfig=b.customConfig;i(a)||a.fireOnce("customConfigLoaded")}function l(a){CKEDITOR.skin.loadPart("editor",function(){h(a)})}function h(a){CKEDITOR.lang.load(a.config.language,a.config.defaultLanguage,function(b,c){var e=a.config.title;a.langCode=b;a.lang=CKEDITOR.tools.prototypedCopy(c);a.title=typeof e=="string"||e===false?e:[a.lang.editor,a.name].join(", ");if(CKEDITOR.env.gecko&&
CKEDITOR.env.version<10900&&a.lang.dir=="rtl")a.lang.dir="ltr";if(!a.config.contentsLangDirection)a.config.contentsLangDirection=a.elementMode==CKEDITOR.ELEMENT_MODE_INLINE?a.element.getDirection(1):a.lang.dir;a.fire("langLoaded");k(a)})}function k(a){a.getStylesSet(function(b){a.once("loaded",function(){a.fire("stylesSet",{styles:b})},null,null,1);o(a)})}function o(a){var b=a.config,c=b.plugins,e=b.extraPlugins,d=b.removePlugins;if(e)var j=RegExp("(?:^|,)(?:"+e.replace(/\s*,\s*/g,"|")+")(?=,|$)",
"g"),c=c.replace(j,""),c=c+(","+e);if(d)var i=RegExp("(?:^|,)(?:"+d.replace(/\s*,\s*/g,"|")+")(?=,|$)","g"),c=c.replace(i,"");CKEDITOR.env.air&&(c=c+",adobeair");CKEDITOR.plugins.load(c.split(","),function(c){var e=[],d=[],j=[];a.plugins=c;for(var m in c){var g=c[m],h=g.lang,k=null,l=g.requires,v;CKEDITOR.tools.isArray(l)&&(l=l.join(","));if(l&&(v=l.match(i)))for(;l=v.pop();)CKEDITOR.tools.setTimeout(function(a,b){throw Error('Plugin "'+a.replace(",","")+'" cannot be removed from the plugins list, because it\'s required by "'+
b+'" plugin.');},0,null,[l,m]);if(h&&!a.lang[m]){h.split&&(h=h.split(","));if(CKEDITOR.tools.indexOf(h,a.langCode)>=0)k=a.langCode;else{k=a.langCode.replace(/-.*/,"");k=k!=a.langCode&&CKEDITOR.tools.indexOf(h,k)>=0?k:CKEDITOR.tools.indexOf(h,"en")>=0?"en":h[0]}if(!g.langEntries||!g.langEntries[k])j.push(CKEDITOR.getUrl(g.path+"lang/"+k+".js"));else{a.lang[m]=g.langEntries[k];k=null}}d.push(k);e.push(g)}CKEDITOR.scriptLoader.load(j,function(){for(var c=["beforeInit","init","afterInit"],j=0;j<c.length;j++)for(var i=
0;i<e.length;i++){var m=e[i];j===0&&(d[i]&&m.lang&&m.langEntries)&&(a.lang[m.name]=m.langEntries[d[i]]);if(m[c[j]])m[c[j]](a)}a.fireOnce("pluginsLoaded");b.keystrokes&&a.setKeystroke(a.config.keystrokes);for(i=0;i<a.config.blockedKeystrokes.length;i++)a.keystrokeHandler.blockedKeystrokes[a.config.blockedKeystrokes[i]]=1;a.status="loaded";a.fireOnce("loaded");CKEDITOR.fire("instanceLoaded",null,a)})})}function s(){var a=this.element;if(a&&this.elementMode!=CKEDITOR.ELEMENT_MODE_APPENDTO){var b=this.getData();
this.config.htmlEncodeOutput&&(b=CKEDITOR.tools.htmlEncode(b));a.is("textarea")?a.setValue(b):a.setHtml(b);return true}return false}a.prototype=CKEDITOR.editor.prototype;CKEDITOR.editor=a;var q=0,u={};CKEDITOR.tools.extend(CKEDITOR.editor.prototype,{addCommand:function(a,b){b.name=a.toLowerCase();var e=new CKEDITOR.command(this,b);this.mode&&c(this,e);return this.commands[a]=e},_attachToForm:function(){var a=this,b=a.element,c=new CKEDITOR.dom.element(b.$.form);if(b.is("textarea")&&c){var e=function(c){a.updateElement();
a._.required&&(!b.getValue()&&a.fire("required")===false)&&c.data.preventDefault()};c.on("submit",e);if(c.$.submit&&c.$.submit.call&&c.$.submit.apply)c.$.submit=CKEDITOR.tools.override(c.$.submit,function(a){return function(){e();a.apply?a.apply(this):a()}});a.on("destroy",function(){c.removeListener("submit",e)})}},destroy:function(a){this.fire("beforeDestroy");!a&&s.call(this);this.editable(null);this.status="destroyed";this.fire("destroy");this.removeAllListeners();CKEDITOR.remove(this);CKEDITOR.fire("instanceDestroyed",
null,this)},elementPath:function(a){if(!a){a=this.getSelection();if(!a)return null;a=a.getStartElement()}return a?new CKEDITOR.dom.elementPath(a,this.editable()):null},createRange:function(){var a=this.editable();return a?new CKEDITOR.dom.range(a):null},execCommand:function(a,b){var c=this.getCommand(a),e={name:a,commandData:b,command:c};if(c&&c.state!=CKEDITOR.TRISTATE_DISABLED&&this.fire("beforeCommandExec",e)!==false){e.returnValue=c.exec(e.commandData);if(!c.async&&this.fire("afterCommandExec",
e)!==false)return e.returnValue}return false},getCommand:function(a){return this.commands[a]},getData:function(a){!a&&this.fire("beforeGetData");var b=this._.data;if(typeof b!="string")b=(b=this.element)&&this.elementMode==CKEDITOR.ELEMENT_MODE_REPLACE?b.is("textarea")?b.getValue():b.getHtml():"";b={dataValue:b};!a&&this.fire("getData",b);return b.dataValue},getSnapshot:function(){var a=this.fire("getSnapshot");if(typeof a!="string"){var b=this.element;b&&this.elementMode==CKEDITOR.ELEMENT_MODE_REPLACE&&
(a=b.is("textarea")?b.getValue():b.getHtml())}return a},loadSnapshot:function(a){this.fire("loadSnapshot",a)},setData:function(a,b,c){if(b)this.on("dataReady",function(a){a.removeListener();b.call(a.editor)});a={dataValue:a};!c&&this.fire("setData",a);this._.data=a.dataValue;!c&&this.fire("afterSetData",a)},setReadOnly:function(a){a=a==void 0||a;if(this.readOnly!=a){this.readOnly=a;this.keystrokeHandler.blockedKeystrokes[8]=+a;this.editable().setReadOnly(a);this.fire("readOnly")}},insertHtml:function(a,
b){this.fire("insertHtml",{dataValue:a,mode:b})},insertText:function(a){this.fire("insertText",a)},insertElement:function(a){this.fire("insertElement",a)},focus:function(){this.fire("beforeFocus")},checkDirty:function(){return this.status=="ready"&&this._.previousValue!==this.getSnapshot()},resetDirty:function(){this._.previousValue=this.getSnapshot()},updateElement:function(){return s.call(this)},setKeystroke:function(){for(var a=this.keystrokeHandler.keystrokes,b=CKEDITOR.tools.isArray(arguments[0])?
arguments[0]:[[].slice.call(arguments,0)],c,e,d=b.length;d--;){c=b[d];e=0;if(CKEDITOR.tools.isArray(c)){e=c[1];c=c[0]}e?a[c]=e:delete a[c]}},addFeature:function(a){return this.filter.addFeature(a)},setActiveFilter:function(a){if(!a)a=this.filter;if(this.activeFilter!==a){this.activeFilter=a;this.fire("activeFilterChange");a===this.filter?this.setActiveEnterMode(null,null):this.setActiveEnterMode(a.getAllowedEnterMode(this.enterMode),a.getAllowedEnterMode(this.shiftEnterMode,true))}},setActiveEnterMode:function(a,
b){a=a?this.blockless?CKEDITOR.ENTER_BR:a:this.enterMode;b=b?this.blockless?CKEDITOR.ENTER_BR:b:this.shiftEnterMode;if(this.activeEnterMode!=a||this.activeShiftEnterMode!=b){this.activeEnterMode=a;this.activeShiftEnterMode=b;this.fire("activeEnterModeChange")}}})})();CKEDITOR.ELEMENT_MODE_NONE=0;CKEDITOR.ELEMENT_MODE_REPLACE=1;CKEDITOR.ELEMENT_MODE_APPENDTO=2;CKEDITOR.ELEMENT_MODE_INLINE=3;
CKEDITOR.htmlParser=function(){this._={htmlPartsRegex:RegExp("<(?:(?:\\/([^>]+)>)|(?:!--([\\S|\\s]*?)--\>)|(?:([^\\s>]+)\\s*((?:(?:\"[^\"]*\")|(?:'[^']*')|[^\"'>])*)\\/?>))","g")}};
(function(){var a=/([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g,d={checked:1,compact:1,declare:1,defer:1,disabled:1,ismap:1,multiple:1,nohref:1,noresize:1,noshade:1,nowrap:1,readonly:1,selected:1};CKEDITOR.htmlParser.prototype={onTagOpen:function(){},onTagClose:function(){},onText:function(){},onCDATA:function(){},onComment:function(){},parse:function(b){for(var c,e,i=0,g;c=this._.htmlPartsRegex.exec(b);){e=c.index;if(e>i){i=b.substring(i,e);if(g)g.push(i);else this.onText(i)}i=
this._.htmlPartsRegex.lastIndex;if(e=c[1]){e=e.toLowerCase();if(g&&CKEDITOR.dtd.$cdata[e]){this.onCDATA(g.join(""));g=null}if(!g){this.onTagClose(e);continue}}if(g)g.push(c[0]);else if(e=c[3]){e=e.toLowerCase();if(!/="/.test(e)){var l={},h;c=c[4];var k=!!(c&&c.charAt(c.length-1)=="/");if(c)for(;h=a.exec(c);){var o=h[1].toLowerCase();h=h[2]||h[3]||h[4]||"";l[o]=!h&&d[o]?o:CKEDITOR.tools.htmlDecodeAttr(h)}this.onTagOpen(e,l,k);!g&&CKEDITOR.dtd.$cdata[e]&&(g=[])}}else if(e=c[2])this.onComment(e)}if(b.length>
i)this.onText(b.substring(i,b.length))}}})();
CKEDITOR.htmlParser.basicWriter=CKEDITOR.tools.createClass({$:function(){this._={output:[]}},proto:{openTag:function(a){this._.output.push("<",a)},openTagClose:function(a,d){d?this._.output.push(" />"):this._.output.push(">")},attribute:function(a,d){typeof d=="string"&&(d=CKEDITOR.tools.htmlEncodeAttr(d));this._.output.push(" ",a,'="',d,'"')},closeTag:function(a){this._.output.push("</",a,">")},text:function(a){this._.output.push(a)},comment:function(a){this._.output.push("<\!--",a,"--\>")},write:function(a){this._.output.push(a)},
reset:function(){this._.output=[];this._.indent=false},getHtml:function(a){var d=this._.output.join("");a&&this.reset();return d}}});"use strict";
(function(){CKEDITOR.htmlParser.node=function(){};CKEDITOR.htmlParser.node.prototype={remove:function(){var a=this.parent.children,d=CKEDITOR.tools.indexOf(a,this),b=this.previous,c=this.next;b&&(b.next=c);c&&(c.previous=b);a.splice(d,1);this.parent=null},replaceWith:function(a){var d=this.parent.children,b=CKEDITOR.tools.indexOf(d,this),c=a.previous=this.previous,e=a.next=this.next;c&&(c.next=a);e&&(e.previous=a);d[b]=a;a.parent=this.parent;this.parent=null},insertAfter:function(a){var d=a.parent.children,
b=CKEDITOR.tools.indexOf(d,a),c=a.next;d.splice(b+1,0,this);this.next=a.next;this.previous=a;a.next=this;c&&(c.previous=this);this.parent=a.parent},insertBefore:function(a){var d=a.parent.children,b=CKEDITOR.tools.indexOf(d,a);d.splice(b,0,this);this.next=a;(this.previous=a.previous)&&(a.previous.next=this);a.previous=this;this.parent=a.parent},getAscendant:function(a){var d=typeof a=="function"?a:typeof a=="string"?function(b){return b.name==a}:function(b){return b.name in a},b=this.parent;for(;b&&
b.type==CKEDITOR.NODE_ELEMENT;){if(d(b))return b;b=b.parent}return null},wrapWith:function(a){this.replaceWith(a);a.add(this);return a},getIndex:function(){return CKEDITOR.tools.indexOf(this.parent.children,this)},getFilterContext:function(a){return a||{}}}})();"use strict";CKEDITOR.htmlParser.comment=function(a){this.value=a;this._={isBlockLike:false}};
CKEDITOR.htmlParser.comment.prototype=CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node,{type:CKEDITOR.NODE_COMMENT,filter:function(a,d){var b=this.value;if(!(b=a.onComment(d,b,this))){this.remove();return false}if(typeof b!="string"){this.replaceWith(b);return false}this.value=b;return true},writeHtml:function(a,d){d&&this.filter(d);a.comment(this.value)}});"use strict";
(function(){CKEDITOR.htmlParser.text=function(a){this.value=a;this._={isBlockLike:false}};CKEDITOR.htmlParser.text.prototype=CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node,{type:CKEDITOR.NODE_TEXT,filter:function(a,d){if(!(this.value=a.onText(d,this.value,this))){this.remove();return false}},writeHtml:function(a,d){d&&this.filter(d);a.text(this.value)}})})();"use strict";
(function(){CKEDITOR.htmlParser.cdata=function(a){this.value=a};CKEDITOR.htmlParser.cdata.prototype=CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node,{type:CKEDITOR.NODE_TEXT,filter:function(){},writeHtml:function(a){a.write(this.value)}})})();"use strict";CKEDITOR.htmlParser.fragment=function(){this.children=[];this.parent=null;this._={isBlockLike:true,hasInlineStarted:false}};
(function(){function a(a){return a.attributes["data-cke-survive"]?false:a.name=="a"&&a.attributes.href||CKEDITOR.dtd.$removeEmpty[a.name]}var d=CKEDITOR.tools.extend({table:1,ul:1,ol:1,dl:1},CKEDITOR.dtd.table,CKEDITOR.dtd.ul,CKEDITOR.dtd.ol,CKEDITOR.dtd.dl),b={ol:1,ul:1},c=CKEDITOR.tools.extend({},{html:1},CKEDITOR.dtd.html,CKEDITOR.dtd.body,CKEDITOR.dtd.head,{style:1,script:1}),e={ul:"li",ol:"li",dl:"dd",table:"tbody",tbody:"tr",thead:"tr",tfoot:"tr",tr:"td"};CKEDITOR.htmlParser.fragment.fromHtml=
function(i,g,l){function h(a){var b;if(y.length>0)for(var c=0;c<y.length;c++){var e=y[c],d=e.name,f=CKEDITOR.dtd[d],j=m.name&&CKEDITOR.dtd[m.name];if((!j||j[d])&&(!a||!f||f[a]||!CKEDITOR.dtd[a])){if(!b){k();b=1}e=e.clone();e.parent=m;m=e;y.splice(c,1);c--}else if(d==m.name){s(m,m.parent,1);c--}}}function k(){for(;A.length;)s(A.shift(),m)}function o(a){if(a._.isBlockLike&&a.name!="pre"&&a.name!="textarea"){var b=a.children.length,c=a.children[b-1],e;if(c&&c.type==CKEDITOR.NODE_TEXT)(e=CKEDITOR.tools.rtrim(c.value))?
c.value=e:a.children.length=b-1}}function s(b,c,e){var c=c||m||p,d=m;if(b.previous===void 0){if(q(c,b)){m=c;f.onTagOpen(l,{});b.returnPoint=c=m}o(b);(!a(b)||b.children.length)&&c.add(b);b.name=="pre"&&(n=false);b.name=="textarea"&&(j=false)}if(b.returnPoint){m=b.returnPoint;delete b.returnPoint}else m=e?c:d}function q(a,b){if((a==p||a.name=="body")&&l&&(!a.name||CKEDITOR.dtd[a.name][l])){var c,e;return(c=b.attributes&&(e=b.attributes["data-cke-real-element-type"])?e:b.name)&&c in CKEDITOR.dtd.$inline&&
!(c in CKEDITOR.dtd.head)&&!b.isOrphan||b.type==CKEDITOR.NODE_TEXT}}function u(a,b){return a in CKEDITOR.dtd.$listItem||a in CKEDITOR.dtd.$tableContent?a==b||a=="dt"&&b=="dd"||a=="dd"&&b=="dt":false}var f=new CKEDITOR.htmlParser,p=g instanceof CKEDITOR.htmlParser.element?g:typeof g=="string"?new CKEDITOR.htmlParser.element(g):new CKEDITOR.htmlParser.fragment,y=[],A=[],m=p,j=p.name=="textarea",n=p.name=="pre";f.onTagOpen=function(e,i,g,p){i=new CKEDITOR.htmlParser.element(e,i);if(i.isUnknown&&g)i.isEmpty=
true;i.isOptionalClose=p;if(a(i))y.push(i);else{if(e=="pre")n=true;else{if(e=="br"&&n){m.add(new CKEDITOR.htmlParser.text("\n"));return}e=="textarea"&&(j=true)}if(e=="br")A.push(i);else{for(;;){p=(g=m.name)?CKEDITOR.dtd[g]||(m._.isBlockLike?CKEDITOR.dtd.div:CKEDITOR.dtd.span):c;if(!i.isUnknown&&!m.isUnknown&&!p[e])if(m.isOptionalClose)f.onTagClose(g);else if(e in b&&g in b){g=m.children;(g=g[g.length-1])&&g.name=="li"||s(g=new CKEDITOR.htmlParser.element("li"),m);!i.returnPoint&&(i.returnPoint=m);
m=g}else if(e in CKEDITOR.dtd.$listItem&&!u(e,g))f.onTagOpen(e=="li"?"ul":"dl",{},0,1);else if(g in d&&!u(e,g)){!i.returnPoint&&(i.returnPoint=m);m=m.parent}else{g in CKEDITOR.dtd.$inline&&y.unshift(m);if(m.parent)s(m,m.parent,1);else{i.isOrphan=1;break}}else break}h(e);k();i.parent=m;i.isEmpty?s(i):m=i}}};f.onTagClose=function(a){for(var b=y.length-1;b>=0;b--)if(a==y[b].name){y.splice(b,1);return}for(var c=[],e=[],d=m;d!=p&&d.name!=a;){d._.isBlockLike||e.unshift(d);c.push(d);d=d.returnPoint||d.parent}if(d!=
p){for(b=0;b<c.length;b++){var f=c[b];s(f,f.parent)}m=d;d._.isBlockLike&&k();s(d,d.parent);if(d==m)m=m.parent;y=y.concat(e)}a=="body"&&(l=false)};f.onText=function(a){if((!m._.hasInlineStarted||A.length)&&!n&&!j){a=CKEDITOR.tools.ltrim(a);if(a.length===0)return}var b=m.name,i=b?CKEDITOR.dtd[b]||(m._.isBlockLike?CKEDITOR.dtd.div:CKEDITOR.dtd.span):c;if(!j&&!i["#"]&&b in d){f.onTagOpen(e[b]||"");f.onText(a)}else{k();h();!n&&!j&&(a=a.replace(/[\t\r\n ]{2,}|[\t\r\n]/g," "));a=new CKEDITOR.htmlParser.text(a);
if(q(m,a))this.onTagOpen(l,{},0,1);m.add(a)}};f.onCDATA=function(a){m.add(new CKEDITOR.htmlParser.cdata(a))};f.onComment=function(a){k();h();m.add(new CKEDITOR.htmlParser.comment(a))};f.parse(i);for(k();m!=p;)s(m,m.parent,1);o(p);return p};CKEDITOR.htmlParser.fragment.prototype={type:CKEDITOR.NODE_DOCUMENT_FRAGMENT,add:function(a,b){isNaN(b)&&(b=this.children.length);var c=b>0?this.children[b-1]:null;if(c){if(a._.isBlockLike&&c.type==CKEDITOR.NODE_TEXT){c.value=CKEDITOR.tools.rtrim(c.value);if(c.value.length===
0){this.children.pop();this.add(a);return}}c.next=a}a.previous=c;a.parent=this;this.children.splice(b,0,a);if(!this._.hasInlineStarted)this._.hasInlineStarted=a.type==CKEDITOR.NODE_TEXT||a.type==CKEDITOR.NODE_ELEMENT&&!a._.isBlockLike},filter:function(a,b){b=this.getFilterContext(b);a.onRoot(b,this);this.filterChildren(a,false,b)},filterChildren:function(a,b,c){if(this.childrenFilteredBy!=a.id){c=this.getFilterContext(c);if(b&&!this.parent)a.onRoot(c,this);this.childrenFilteredBy=a.id;for(b=0;b<this.children.length;b++)this.children[b].filter(a,
c)===false&&b--}},writeHtml:function(a,b){b&&this.filter(b);this.writeChildrenHtml(a)},writeChildrenHtml:function(a,b,c){var e=this.getFilterContext();if(c&&!this.parent&&b)b.onRoot(e,this);b&&this.filterChildren(b,false,e);b=0;c=this.children;for(e=c.length;b<e;b++)c[b].writeHtml(a)},forEach:function(a,b,c){if(!c&&(!b||this.type==b))var e=a(this);if(e!==false)for(var c=this.children,d=0;d<c.length;d++){e=c[d];e.type==CKEDITOR.NODE_ELEMENT?e.forEach(a,b):(!b||e.type==b)&&a(e)}},getFilterContext:function(a){return a||
{}}}})();"use strict";
(function(){function a(){this.rules=[]}function d(b,c,e,d){var g,l;for(g in c){(l=b[g])||(l=b[g]=new a);l.add(c[g],e,d)}}CKEDITOR.htmlParser.filter=CKEDITOR.tools.createClass({$:function(b){this.id=CKEDITOR.tools.getNextNumber();this.elementNameRules=new a;this.attributeNameRules=new a;this.elementsRules={};this.attributesRules={};this.textRules=new a;this.commentRules=new a;this.rootRules=new a;b&&this.addRules(b,10)},proto:{addRules:function(a,c){var e;if(typeof c=="number")e=c;else if(c&&"priority"in
c)e=c.priority;typeof e!="number"&&(e=10);typeof c!="object"&&(c={});a.elementNames&&this.elementNameRules.addMany(a.elementNames,e,c);a.attributeNames&&this.attributeNameRules.addMany(a.attributeNames,e,c);a.elements&&d(this.elementsRules,a.elements,e,c);a.attributes&&d(this.attributesRules,a.attributes,e,c);a.text&&this.textRules.add(a.text,e,c);a.comment&&this.commentRules.add(a.comment,e,c);a.root&&this.rootRules.add(a.root,e,c)},applyTo:function(a){a.filter(this)},onElementName:function(a,c){return this.elementNameRules.execOnName(a,
c)},onAttributeName:function(a,c){return this.attributeNameRules.execOnName(a,c)},onText:function(a,c,e){return this.textRules.exec(a,c,e)},onComment:function(a,c,e){return this.commentRules.exec(a,c,e)},onRoot:function(a,c){return this.rootRules.exec(a,c)},onElement:function(a,c){for(var e=[this.elementsRules["^"],this.elementsRules[c.name],this.elementsRules.$],d,g=0;g<3;g++)if(d=e[g]){d=d.exec(a,c,this);if(d===false)return null;if(d&&d!=c)return this.onNode(a,d);if(c.parent&&!c.name)break}return c},
onNode:function(a,c){var e=c.type;return e==CKEDITOR.NODE_ELEMENT?this.onElement(a,c):e==CKEDITOR.NODE_TEXT?new CKEDITOR.htmlParser.text(this.onText(a,c.value)):e==CKEDITOR.NODE_COMMENT?new CKEDITOR.htmlParser.comment(this.onComment(a,c.value)):null},onAttribute:function(a,c,e,d){return(e=this.attributesRules[e])?e.exec(a,d,c,this):d}}});CKEDITOR.htmlParser.filterRulesGroup=a;a.prototype={add:function(a,c,e){this.rules.splice(this.findIndex(c),0,{value:a,priority:c,options:e})},addMany:function(a,
c,e){for(var d=[this.findIndex(c),0],g=0,l=a.length;g<l;g++)d.push({value:a[g],priority:c,options:e});this.rules.splice.apply(this.rules,d)},findIndex:function(a){for(var c=this.rules,e=c.length-1;e>=0&&a<c[e].priority;)e--;return e+1},exec:function(a,c){var e=c instanceof CKEDITOR.htmlParser.node||c instanceof CKEDITOR.htmlParser.fragment,d=Array.prototype.slice.call(arguments,1),g=this.rules,l=g.length,h,k,o,s;for(s=0;s<l;s++){if(e){h=c.type;k=c.name}o=g[s];if(!(a.nonEditable&&!o.options.applyToAll||
a.nestedEditable&&o.options.excludeNestedEditable)){o=o.value.apply(null,d);if(o===false||e&&o&&(o.name!=k||o.type!=h))return o;o!=void 0&&(d[0]=c=o)}}return c},execOnName:function(a,c){for(var e=0,d=this.rules,g=d.length,l;c&&e<g;e++){l=d[e];!(a.nonEditable&&!l.options.applyToAll||a.nestedEditable&&l.options.excludeNestedEditable)&&(c=c.replace(l.value[0],l.value[1]))}return c}}})();
(function(){function a(a,d){function f(a){return a||CKEDITOR.env.needsNbspFiller?new CKEDITOR.htmlParser.text(" "):new CKEDITOR.htmlParser.element("br",{"data-cke-bogus":1})}function j(a,e){return function(d){if(d.type!=CKEDITOR.NODE_DOCUMENT_FRAGMENT){var j=[],m=b(d),n,g;if(m)for(t(m,1)&&j.push(m);m;){if(i(m)&&(n=c(m))&&t(n))if((g=c(n))&&!i(g))j.push(n);else{f(h).insertAfter(n);n.remove()}m=m.previous}for(m=0;m<j.length;m++)j[m].remove();if(j=CKEDITOR.env.opera&&!a||(typeof e=="function"?e(d)!==
false:e))if(!h&&!CKEDITOR.env.needsBrFiller&&d.type==CKEDITOR.NODE_DOCUMENT_FRAGMENT)j=false;else if(!h&&!CKEDITOR.env.needsBrFiller&&(document.documentMode>7||d.name in CKEDITOR.dtd.tr||d.name in CKEDITOR.dtd.$listItem))j=false;else{j=b(d);j=!j||d.name=="form"&&j.name=="input"}j&&d.add(f(a))}}}function t(a,b){if((!h||CKEDITOR.env.needsBrFiller)&&a.type==CKEDITOR.NODE_ELEMENT&&a.name=="br"&&!a.attributes["data-cke-eol"])return true;var c;if(a.type==CKEDITOR.NODE_TEXT&&(c=a.value.match(y))){if(c.index){(new CKEDITOR.htmlParser.text(a.value.substring(0,
c.index))).insertBefore(a);a.value=c[0]}if(!CKEDITOR.env.needsBrFiller&&h&&(!b||a.parent.name in p))return true;if(!h)if((c=a.previous)&&c.name=="br"||!c||i(c))return true}return false}var v={elements:{}},h=d=="html",p=CKEDITOR.tools.extend({},n),r;for(r in p)"#"in m[r]||delete p[r];for(r in p)v.elements[r]=j(h,a.config.fillEmptyBlocks!==false);v.root=j(h);v.elements.br=function(a){return function(b){if(b.parent.type!=CKEDITOR.NODE_DOCUMENT_FRAGMENT){var d=b.attributes;if("data-cke-bogus"in d||"data-cke-eol"in
d)delete d["data-cke-bogus"];else{for(d=b.next;d&&e(d);)d=d.next;var j=c(b);!d&&i(b.parent)?g(b.parent,f(a)):i(d)&&(j&&!i(j))&&f(a).insertBefore(d)}}}}(h);return v}function d(a,b){return a!=CKEDITOR.ENTER_BR&&b!==false?a==CKEDITOR.ENTER_DIV?"div":"p":false}function b(a){for(a=a.children[a.children.length-1];a&&e(a);)a=a.previous;return a}function c(a){for(a=a.previous;a&&e(a);)a=a.previous;return a}function e(a){return a.type==CKEDITOR.NODE_TEXT&&!CKEDITOR.tools.trim(a.value)||a.type==CKEDITOR.NODE_ELEMENT&&
a.attributes["data-cke-bookmark"]}function i(a){return a&&(a.type==CKEDITOR.NODE_ELEMENT&&a.name in n||a.type==CKEDITOR.NODE_DOCUMENT_FRAGMENT)}function g(a,b){var c=a.children[a.children.length-1];a.children.push(b);b.parent=a;if(c){c.next=b;b.previous=c}}function l(a){a=a.attributes;a.contenteditable!="false"&&(a["data-cke-editable"]=a.contenteditable?"true":1);a.contenteditable="false"}function h(a){a=a.attributes;switch(a["data-cke-editable"]){case "true":a.contenteditable="true";break;case "1":delete a.contenteditable}}
function k(a){return a.replace(G,function(a,b,c){return"<"+b+c.replace(I,function(a,b){return B.test(b)&&c.indexOf("data-cke-saved-"+b)==-1?" data-cke-saved-"+a+" data-cke-"+CKEDITOR.rnd+"-"+a:a})+">"})}function o(a,b){return a.replace(b,function(a,b,c){a.indexOf("<textarea")===0&&(a=b+u(c).replace(/</g,"&lt;").replace(/>/g,"&gt;")+"</textarea>");return"<cke:encoded>"+encodeURIComponent(a)+"</cke:encoded>"})}function s(a){return a.replace(v,function(a,b){return decodeURIComponent(b)})}function q(a){return a.replace(/<\!--(?!{cke_protected})[\s\S]+?--\>/g,
function(a){return"<\!--"+A+"{C}"+encodeURIComponent(a).replace(/--/g,"%2D%2D")+"--\>"})}function u(a){return a.replace(/<\!--\{cke_protected\}\{C\}([\s\S]+?)--\>/g,function(a,b){return decodeURIComponent(b)})}function f(a,b){var c=b._.dataStore;return a.replace(/<\!--\{cke_protected\}([\s\S]+?)--\>/g,function(a,b){return decodeURIComponent(b)}).replace(/\{cke_protected_(\d+)\}/g,function(a,b){return c&&c[b]||""})}function p(a,b){for(var c=[],e=b.config.protectedSource,d=b._.dataStore||(b._.dataStore=
{id:1}),f=/<\!--\{cke_temp(comment)?\}(\d*?)--\>/g,e=[/<script[\s\S]*?<\/script>/gi,/<noscript[\s\S]*?<\/noscript>/gi].concat(e),a=a.replace(/<\!--[\s\S]*?--\>/g,function(a){return"<\!--{cke_tempcomment}"+(c.push(a)-1)+"--\>"}),j=0;j<e.length;j++)a=a.replace(e[j],function(a){a=a.replace(f,function(a,b,e){return c[e]});return/cke_temp(comment)?/.test(a)?a:"<\!--{cke_temp}"+(c.push(a)-1)+"--\>"});a=a.replace(f,function(a,b,e){return"<\!--"+A+(b?"{C}":"")+encodeURIComponent(c[e]).replace(/--/g,"%2D%2D")+
"--\>"});return a.replace(/<\w([^'">]+|'[^']*'|"[^"]*")+>/g,function(a){return a.replace(/<\!--\{cke_protected\}([^>]*)--\>/g,function(a,b){d[d.id]=decodeURIComponent(b);return"{cke_protected_"+d.id++ +"}"})})}CKEDITOR.htmlDataProcessor=function(b){var c,e,j=this;this.editor=b;this.dataFilter=c=new CKEDITOR.htmlParser.filter;this.htmlFilter=e=new CKEDITOR.htmlParser.filter;this.writer=new CKEDITOR.htmlParser.basicWriter;c.addRules(r);c.addRules(J,{applyToAll:true});c.addRules(a(b,"data"),{applyToAll:true});
e.addRules(t);e.addRules(w,{applyToAll:true});e.addRules(a(b,"html"),{applyToAll:true});b.on("toHtml",function(a){var a=a.data,c=a.dataValue,c=p(c,b),c=o(c,H),c=k(c),c=o(c,N),c=c.replace(x,"$1cke:$2"),c=c.replace(D,"<cke:$1$2></cke:$1>"),c=CKEDITOR.env.opera?c:c.replace(/(<pre\b[^>]*>)(\r\n|\n)/g,"$1$2$2"),c=c.replace(/([^a-z0-9<\-])(on\w{3,})(?!>)/gi,"$1data-cke-"+CKEDITOR.rnd+"-$2"),e=a.context||b.editable().getName(),f;if(CKEDITOR.env.ie&&CKEDITOR.env.version<9&&e=="pre"){e="div";c="<pre>"+c+"</pre>";
f=1}e=b.document.createElement(e);e.setHtml("a"+c);c=e.getHtml().substr(1);c=c.replace(RegExp("data-cke-"+CKEDITOR.rnd+"-","ig"),"");f&&(c=c.replace(/^<pre>|<\/pre>$/gi,""));c=c.replace(C,"$1$2");c=s(c);c=u(c);a.dataValue=CKEDITOR.htmlParser.fragment.fromHtml(c,a.context,a.fixForBody===false?false:d(a.enterMode,b.config.autoParagraph))},null,null,5);b.on("toHtml",function(a){a.data.filter.applyTo(a.data.dataValue,true,a.data.dontFilter,a.data.enterMode)&&b.fire("dataFiltered")},null,null,6);b.on("toHtml",
function(a){a.data.dataValue.filterChildren(j.dataFilter,true)},null,null,10);b.on("toHtml",function(a){var a=a.data,b=a.dataValue,c=new CKEDITOR.htmlParser.basicWriter;b.writeChildrenHtml(c);b=c.getHtml(true);a.dataValue=q(b)},null,null,15);b.on("toDataFormat",function(a){var c=a.data.dataValue;a.data.enterMode!=CKEDITOR.ENTER_BR&&(c=c.replace(/^<br *\/?>/i,""));a.data.dataValue=CKEDITOR.htmlParser.fragment.fromHtml(c,a.data.context,d(a.data.enterMode,b.config.autoParagraph))},null,null,5);b.on("toDataFormat",
function(a){a.data.dataValue.filterChildren(j.htmlFilter,true)},null,null,10);b.on("toDataFormat",function(a){a.data.filter.applyTo(a.data.dataValue,false,true)},null,null,11);b.on("toDataFormat",function(a){var c=a.data.dataValue,e=j.writer;e.reset();c.writeChildrenHtml(e);c=e.getHtml(true);c=u(c);c=f(c,b);a.data.dataValue=c},null,null,15)};CKEDITOR.htmlDataProcessor.prototype={toHtml:function(a,b,c,e){var d=this.editor,f,j,m;if(b&&typeof b=="object"){f=b.context;c=b.fixForBody;e=b.dontFilter;j=
b.filter;m=b.enterMode}else f=b;!f&&f!==null&&(f=d.editable().getName());return d.fire("toHtml",{dataValue:a,context:f,fixForBody:c,dontFilter:e,filter:j||d.filter,enterMode:m||d.enterMode}).dataValue},toDataFormat:function(a,b){var c,e,d;if(b){c=b.context;e=b.filter;d=b.enterMode}!c&&c!==null&&(c=this.editor.editable().getName());return this.editor.fire("toDataFormat",{dataValue:a,filter:e||this.editor.filter,context:c,enterMode:d||this.editor.enterMode}).dataValue}};var y=/(?:&nbsp;|\xa0)$/,A="{cke_protected}",
m=CKEDITOR.dtd,j=["caption","colgroup","col","thead","tfoot","tbody"],n=CKEDITOR.tools.extend({},m.$blockLimit,m.$block),r={elements:{input:l,textarea:l}},J={attributeNames:[[/^on/,"data-cke-pa-on"],[/^data-cke-expando$/,""]]},t={elements:{embed:function(a){var b=a.parent;if(b&&b.name=="object"){var c=b.attributes.width,b=b.attributes.height;if(c)a.attributes.width=c;if(b)a.attributes.height=b}},a:function(a){if(!a.children.length&&!a.attributes.name&&!a.attributes["data-cke-saved-name"])return false}}},
w={elementNames:[[/^cke:/,""],[/^\?xml:namespace$/,""]],attributeNames:[[/^data-cke-(saved|pa)-/,""],[/^data-cke-.*/,""],["hidefocus",""]],elements:{$:function(a){var b=a.attributes;if(b){if(b["data-cke-temp"])return false;for(var c=["name","href","src"],e,d=0;d<c.length;d++){e="data-cke-saved-"+c[d];e in b&&delete b[c[d]]}}return a},table:function(a){a.children.slice(0).sort(function(a,b){var c,e;if(a.type==CKEDITOR.NODE_ELEMENT&&b.type==a.type){c=CKEDITOR.tools.indexOf(j,a.name);e=CKEDITOR.tools.indexOf(j,
b.name)}if(!(c>-1&&e>-1&&c!=e)){c=a.parent?a.getIndex():-1;e=b.parent?b.getIndex():-1}return c>e?1:-1})},param:function(a){a.children=[];a.isEmpty=true;return a},span:function(a){a.attributes["class"]=="Apple-style-span"&&delete a.name},html:function(a){delete a.attributes.contenteditable;delete a.attributes["class"]},body:function(a){delete a.attributes.spellcheck;delete a.attributes.contenteditable},style:function(a){var b=a.children[0];if(b&&b.value)b.value=CKEDITOR.tools.trim(b.value);if(!a.attributes.type)a.attributes.type=
"text/css"},title:function(a){var b=a.children[0];!b&&g(a,b=new CKEDITOR.htmlParser.text);b.value=a.attributes["data-cke-title"]||""},input:h,textarea:h},attributes:{"class":function(a){return CKEDITOR.tools.ltrim(a.replace(/(?:^|\s+)cke_[^\s]*/g,""))||false}}};if(CKEDITOR.env.ie)w.attributes.style=function(a){return a.replace(/(^|;)([^\:]+)/g,function(a){return a.toLowerCase()})};var G=/<(a|area|img|input|source)\b([^>]*)>/gi,I=/([\w-]+)\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|(?:[^ "'>]+))/gi,B=/^(href|src|name)$/i,
N=/(?:<style(?=[ >])[^>]*>[\s\S]*?<\/style>)|(?:<(:?link|meta|base)[^>]*>)/gi,H=/(<textarea(?=[ >])[^>]*>)([\s\S]*?)(?:<\/textarea>)/gi,v=/<cke:encoded>([^<]*)<\/cke:encoded>/gi,x=/(<\/?)((?:object|embed|param|html|body|head|title)[^>]*>)/gi,C=/(<\/?)cke:((?:html|body|head|title)[^>]*>)/gi,D=/<cke:(param|embed)([^>]*?)\/?>(?!\s*<\/cke:\1)/gi})();"use strict";
CKEDITOR.htmlParser.element=function(a,d){this.name=a;this.attributes=d||{};this.children=[];var b=a||"",c=b.match(/^cke:(.*)/);c&&(b=c[1]);b=!(!CKEDITOR.dtd.$nonBodyContent[b]&&!CKEDITOR.dtd.$block[b]&&!CKEDITOR.dtd.$listItem[b]&&!CKEDITOR.dtd.$tableContent[b]&&!(CKEDITOR.dtd.$nonEditable[b]||b=="br"));this.isEmpty=!!CKEDITOR.dtd.$empty[a];this.isUnknown=!CKEDITOR.dtd[a];this._={isBlockLike:b,hasInlineStarted:this.isEmpty||!b}};
CKEDITOR.htmlParser.cssStyle=function(a){var d={};((a instanceof CKEDITOR.htmlParser.element?a.attributes.style:a)||"").replace(/&quot;/g,'"').replace(/\s*([^ :;]+)\s*:\s*([^;]+)\s*(?=;|$)/g,function(a,c,e){c=="font-family"&&(e=e.replace(/["']/g,""));d[c.toLowerCase()]=e});return{rules:d,populate:function(a){var c=this.toString();if(c)a instanceof CKEDITOR.dom.element?a.setAttribute("style",c):a instanceof CKEDITOR.htmlParser.element?a.attributes.style=c:a.style=c},toString:function(){var a=[],c;
for(c in d)d[c]&&a.push(c,":",d[c],";");return a.join("")}}};
(function(){function a(a){return function(b){return b.type==CKEDITOR.NODE_ELEMENT&&(typeof a=="string"?b.name==a:b.name in a)}}var d=function(a,b){a=a[0];b=b[0];return a<b?-1:a>b?1:0},b=CKEDITOR.htmlParser.fragment.prototype;CKEDITOR.htmlParser.element.prototype=CKEDITOR.tools.extend(new CKEDITOR.htmlParser.node,{type:CKEDITOR.NODE_ELEMENT,add:b.add,clone:function(){return new CKEDITOR.htmlParser.element(this.name,this.attributes)},filter:function(a,b){var d=this,g,l,b=d.getFilterContext(b);if(b.off)return true;
if(!d.parent)a.onRoot(b,d);for(;;){g=d.name;if(!(l=a.onElementName(b,g))){this.remove();return false}d.name=l;if(!(d=a.onElement(b,d))){this.remove();return false}if(d!==this){this.replaceWith(d);return false}if(d.name==g)break;if(d.type!=CKEDITOR.NODE_ELEMENT){this.replaceWith(d);return false}if(!d.name){this.replaceWithChildren();return false}}g=d.attributes;var h,k;for(h in g){k=h;for(l=g[h];;)if(k=a.onAttributeName(b,h))if(k!=h){delete g[h];h=k}else break;else{delete g[h];break}k&&((l=a.onAttribute(b,
d,k,l))===false?delete g[k]:g[k]=l)}d.isEmpty||this.filterChildren(a,false,b);return true},filterChildren:b.filterChildren,writeHtml:function(a,b){b&&this.filter(b);var i=this.name,g=[],l=this.attributes,h,k;a.openTag(i,l);for(h in l)g.push([h,l[h]]);a.sortAttributes&&g.sort(d);h=0;for(k=g.length;h<k;h++){l=g[h];a.attribute(l[0],l[1])}a.openTagClose(i,this.isEmpty);this.writeChildrenHtml(a);this.isEmpty||a.closeTag(i)},writeChildrenHtml:b.writeChildrenHtml,replaceWithChildren:function(){for(var a=
this.children,b=a.length;b;)a[--b].insertAfter(this);this.remove()},forEach:b.forEach,getFirst:function(b){if(!b)return this.children.length?this.children[0]:null;typeof b!="function"&&(b=a(b));for(var e=0,d=this.children.length;e<d;++e)if(b(this.children[e]))return this.children[e];return null},getHtml:function(){var a=new CKEDITOR.htmlParser.basicWriter;this.writeChildrenHtml(a);return a.getHtml()},setHtml:function(a){for(var a=this.children=CKEDITOR.htmlParser.fragment.fromHtml(a).children,b=0,
d=a.length;b<d;++b)a[b].parent=this},getOuterHtml:function(){var a=new CKEDITOR.htmlParser.basicWriter;this.writeHtml(a);return a.getHtml()},split:function(a){for(var b=this.children.splice(a,this.children.length-a),d=this.clone(),g=0;g<b.length;++g)b[g].parent=d;d.children=b;if(b[0])b[0].previous=null;if(a>0)this.children[a-1].next=null;this.parent.add(d,this.getIndex()+1);return d},removeClass:function(a){var b=this.attributes["class"];if(b)(b=CKEDITOR.tools.trim(b.replace(RegExp("(?:\\s+|^)"+a+
"(?:\\s+|$)")," ")))?this.attributes["class"]=b:delete this.attributes["class"]},hasClass:function(a){var b=this.attributes["class"];return!b?false:RegExp("(?:^|\\s)"+a+"(?=\\s|$)").test(b)},getFilterContext:function(a){var b=[];a||(a={off:false,nonEditable:false,nestedEditable:false});!a.off&&this.attributes["data-cke-processor"]=="off"&&b.push("off",true);!a.nonEditable&&this.attributes.contenteditable=="false"?b.push("nonEditable",true):this.name!="body"&&(!a.nestedEditable&&this.attributes.contenteditable==
"true")&&b.push("nestedEditable",true);if(b.length)for(var a=CKEDITOR.tools.copy(a),d=0;d<b.length;d=d+2)a[b[d]]=b[d+1];return a}},true)})();(function(){var a={},d=/{([^}]+)}/g,b=/([\\'])/g,c=/\n/g,e=/\r/g;CKEDITOR.template=function(i){if(a[i])this.output=a[i];else{var g=i.replace(b,"\\$1").replace(c,"\\n").replace(e,"\\r").replace(d,function(a,b){return"',data['"+b+"']==undefined?'{"+b+"}':data['"+b+"'],'"});this.output=a[i]=Function("data","buffer","return buffer?buffer.push('"+g+"'):['"+g+"'].join('');")}}})();
delete CKEDITOR.loadFullCore;CKEDITOR.instances={};CKEDITOR.document=new CKEDITOR.dom.document(document);CKEDITOR.add=function(a){CKEDITOR.instances[a.name]=a;a.on("focus",function(){if(CKEDITOR.currentInstance!=a){CKEDITOR.currentInstance=a;CKEDITOR.fire("currentInstance")}});a.on("blur",function(){if(CKEDITOR.currentInstance==a){CKEDITOR.currentInstance=null;CKEDITOR.fire("currentInstance")}});CKEDITOR.fire("instance",null,a)};CKEDITOR.remove=function(a){delete CKEDITOR.instances[a.name]};
(function(){var a={};CKEDITOR.addTemplate=function(d,b){var c=a[d];if(c)return c;c={name:d,source:b};CKEDITOR.fire("template",c);return a[d]=new CKEDITOR.template(c.source)};CKEDITOR.getTemplate=function(d){return a[d]}})();(function(){var a=[];CKEDITOR.addCss=function(d){a.push(d)};CKEDITOR.getCss=function(){return a.join("\n")}})();CKEDITOR.on("instanceDestroyed",function(){CKEDITOR.tools.isEmpty(this.instances)&&CKEDITOR.fire("reset")});CKEDITOR.TRISTATE_ON=1;CKEDITOR.TRISTATE_OFF=2;
CKEDITOR.TRISTATE_DISABLED=0;
(function(){CKEDITOR.inline=function(a,d){if(!CKEDITOR.env.isCompatible)return null;a=CKEDITOR.dom.element.get(a);if(a.getEditor())throw'The editor instance "'+a.getEditor().name+'" is already attached to the provided element.';var b=new CKEDITOR.editor(d,a,CKEDITOR.ELEMENT_MODE_INLINE),c=a.is("textarea")?a:null;if(c){b.setData(c.getValue(),null,true);a=CKEDITOR.dom.element.createFromHtml('<div contenteditable="'+!!b.readOnly+'" class="cke_textarea_inline">'+c.getValue()+"</div>",CKEDITOR.document);
a.insertAfter(c);c.hide();c.$.form&&b._attachToForm()}else b.setData(a.getHtml(),null,true);b.on("loaded",function(){b.fire("uiReady");b.editable(a);b.container=a;b.setData(b.getData(1));b.resetDirty();b.fire("contentDom");b.mode="wysiwyg";b.fire("mode");b.status="ready";b.fireOnce("instanceReady");CKEDITOR.fire("instanceReady",null,b)},null,null,1E4);b.on("destroy",function(){if(c){b.container.clearCustomData();b.container.remove();c.show()}b.element.clearCustomData();delete b.element});return b};
CKEDITOR.inlineAll=function(){var a,d,b;for(b in CKEDITOR.dtd.$editable)for(var c=CKEDITOR.document.getElementsByTag(b),e=0,i=c.count();e<i;e++){a=c.getItem(e);if(a.getAttribute("contenteditable")=="true"){d={element:a,config:{}};CKEDITOR.fire("inline",d)!==false&&CKEDITOR.inline(a,d.config)}}};CKEDITOR.domReady(function(){!CKEDITOR.disableAutoInline&&CKEDITOR.inlineAll()})})();CKEDITOR.replaceClass="ckeditor";
(function(){function a(a,c,g,l){if(!CKEDITOR.env.isCompatible)return null;a=CKEDITOR.dom.element.get(a);if(a.getEditor())throw'The editor instance "'+a.getEditor().name+'" is already attached to the provided element.';var h=new CKEDITOR.editor(c,a,l);if(l==CKEDITOR.ELEMENT_MODE_REPLACE){a.setStyle("visibility","hidden");h._.required=a.hasAttribute("required");a.removeAttribute("required")}g&&h.setData(g,null,true);h.on("loaded",function(){b(h);l==CKEDITOR.ELEMENT_MODE_REPLACE&&(h.config.autoUpdateElement&&
a.$.form)&&h._attachToForm();h.setMode(h.config.startupMode,function(){h.resetDirty();h.status="ready";h.fireOnce("instanceReady");CKEDITOR.fire("instanceReady",null,h)})});h.on("destroy",d);return h}function d(){var a=this.container,b=this.element;if(a){a.clearCustomData();a.remove()}if(b){b.clearCustomData();if(this.elementMode==CKEDITOR.ELEMENT_MODE_REPLACE){b.show();this._.required&&b.setAttribute("required","required")}delete this.element}}function b(a){var b=a.name,d=a.element,l=a.elementMode,
h=a.fire("uiSpace",{space:"top",html:""}).html,k=a.fire("uiSpace",{space:"bottom",html:""}).html;c||(c=CKEDITOR.addTemplate("maincontainer",'<{outerEl} id="cke_{name}" class="{id} cke cke_reset cke_chrome cke_editor_{name} cke_{langDir} '+CKEDITOR.env.cssClass+'"  dir="{langDir}" lang="{langCode}" role="application" aria-labelledby="cke_{name}_arialbl"><span id="cke_{name}_arialbl" class="cke_voice_label">{voiceLabel}</span><{outerEl} class="cke_inner cke_reset" role="presentation">{topHtml}<{outerEl} id="{contentId}" class="cke_contents cke_reset" role="presentation"></{outerEl}>{bottomHtml}</{outerEl}></{outerEl}>'));
b=CKEDITOR.dom.element.createFromHtml(c.output({id:a.id,name:b,langDir:a.lang.dir,langCode:a.langCode,voiceLabel:[a.lang.editor,a.name].join(", "),topHtml:h?'<span id="'+a.ui.spaceId("top")+'" class="cke_top cke_reset_all" role="presentation" style="height:auto">'+h+"</span>":"",contentId:a.ui.spaceId("contents"),bottomHtml:k?'<span id="'+a.ui.spaceId("bottom")+'" class="cke_bottom cke_reset_all" role="presentation">'+k+"</span>":"",outerEl:CKEDITOR.env.ie?"span":"div"}));if(l==CKEDITOR.ELEMENT_MODE_REPLACE){d.hide();
b.insertAfter(d)}else d.append(b);a.container=b;h&&a.ui.space("top").unselectable();k&&a.ui.space("bottom").unselectable();d=a.config.width;l=a.config.height;d&&b.setStyle("width",CKEDITOR.tools.cssLength(d));l&&a.ui.space("contents").setStyle("height",CKEDITOR.tools.cssLength(l));b.disableContextMenu();CKEDITOR.env.webkit&&b.on("focus",function(){a.focus()});a.fireOnce("uiReady")}CKEDITOR.replace=function(b,c){return a(b,c,null,CKEDITOR.ELEMENT_MODE_REPLACE)};CKEDITOR.appendTo=function(b,c,d){return a(b,
c,d,CKEDITOR.ELEMENT_MODE_APPENDTO)};CKEDITOR.replaceAll=function(){for(var a=document.getElementsByTagName("textarea"),b=0;b<a.length;b++){var c=null,d=a[b];if(d.name||d.id){if(typeof arguments[0]=="string"){if(!RegExp("(?:^|\\s)"+arguments[0]+"(?:$|\\s)").test(d.className))continue}else if(typeof arguments[0]=="function"){c={};if(arguments[0](d,c)===false)continue}this.replace(d,c)}}};CKEDITOR.editor.prototype.addMode=function(a,b){(this._.modes||(this._.modes={}))[a]=b};CKEDITOR.editor.prototype.setMode=
function(a,b){var c=this,d=this._.modes;if(!(a==c.mode||!d||!d[a])){c.fire("beforeSetMode",a);if(c.mode){var h=c.checkDirty();c._.previousMode=c.mode;c.fire("beforeModeUnload");c.editable(0);c.ui.space("contents").setHtml("");c.mode=""}this._.modes[a](function(){c.mode=a;h!==void 0&&!h&&c.resetDirty();setTimeout(function(){c.fire("mode");b&&b.call(c)},0)})}};CKEDITOR.editor.prototype.resize=function(a,b,c,d){var h=this.container,k=this.ui.space("contents"),o=CKEDITOR.env.webkit&&this.document&&this.document.getWindow().$.frameElement,
d=d?h.getChild(1):h;d.setSize("width",a,true);o&&(o.style.width="1%");k.setStyle("height",Math.max(b-(c?0:(d.$.offsetHeight||0)-(k.$.clientHeight||0)),0)+"px");o&&(o.style.width="100%");this.fire("resize")};CKEDITOR.editor.prototype.getResizable=function(a){return a?this.ui.space("contents"):this.container};var c;CKEDITOR.domReady(function(){CKEDITOR.replaceClass&&CKEDITOR.replaceAll(CKEDITOR.replaceClass)})})();CKEDITOR.config.startupMode="wysiwyg";
(function(){function a(a){var b=a.editor,e=a.data.path,i=e.blockLimit,m=a.data.selection,j=m.getRanges()[0],n;if(CKEDITOR.env.gecko||CKEDITOR.env.ie&&CKEDITOR.env.needsBrFiller)if(m=d(m,e)){m.appendBogus();n=CKEDITOR.env.ie}if(b.config.autoParagraph!==false&&b.activeEnterMode!=CKEDITOR.ENTER_BR&&b.editable().equals(i)&&!e.block&&j.collapsed&&!j.getCommonAncestor().isReadOnly()){e=j.clone();e.enlarge(CKEDITOR.ENLARGE_BLOCK_CONTENTS);i=new CKEDITOR.dom.walker(e);i.guard=function(a){return!c(a)||a.type==
CKEDITOR.NODE_COMMENT||a.isReadOnly()};if(!i.checkForward()||e.checkStartOfBlock()&&e.checkEndOfBlock()){b=j.fixBlock(true,b.activeEnterMode==CKEDITOR.ENTER_DIV?"div":"p");if(!CKEDITOR.env.needsBrFiller)(b=b.getFirst(c))&&(b.type==CKEDITOR.NODE_TEXT&&CKEDITOR.tools.trim(b.getText()).match(/^(?:&nbsp;|\xa0)$/))&&b.remove();n=1;a.cancel()}}n&&j.select()}function d(a,b){if(a.isFake)return 0;var d=b.block||b.blockLimit,e=d&&d.getLast(c);if(d&&d.isBlockBoundary()&&(!e||!(e.type==CKEDITOR.NODE_ELEMENT&&
e.isBlockBoundary()))&&!d.is("pre")&&!d.getBogus())return d}function b(a){var b=a.data.getTarget();if(b.is("input")){b=b.getAttribute("type");(b=="submit"||b=="reset")&&a.data.preventDefault()}}function c(a){return o(a)&&s(a)}function e(a,b){return function(c){var d=CKEDITOR.dom.element.get(c.data.$.toElement||c.data.$.fromElement||c.data.$.relatedTarget);(!d||!b.equals(d)&&!b.contains(d))&&a.call(this,c)}}function i(a){var b,d=a.getRanges()[0],e=a.root,m={table:1,ul:1,ol:1,dl:1};if(d.startPath().contains(m)){var a=
function(a){return function(d,e){e&&(d.type==CKEDITOR.NODE_ELEMENT&&d.is(m))&&(b=d);if(!e&&c(d)&&(!a||!h(d)))return false}},j=d.clone();j.collapse(1);j.setStartAt(e,CKEDITOR.POSITION_AFTER_START);e=new CKEDITOR.dom.walker(j);e.guard=a();e.checkBackward();if(b){j=d.clone();j.collapse();j.setEndAt(b,CKEDITOR.POSITION_AFTER_END);e=new CKEDITOR.dom.walker(j);e.guard=a(true);b=false;e.checkForward();return b}}return null}function g(a){a.editor.focus();a.editor.fire("saveSnapshot")}function l(a,b){var c=
a.editor;!b&&c.getSelection().scrollIntoView();setTimeout(function(){c.fire("saveSnapshot")},0)}CKEDITOR.editable=CKEDITOR.tools.createClass({base:CKEDITOR.dom.element,$:function(a,b){this.base(b.$||b);this.editor=a;this.hasFocus=false;this.setup()},proto:{focus:function(){var a;if(CKEDITOR.env.webkit&&!this.hasFocus){a=this.editor._.previousActive||this.getDocument().getActive();if(this.contains(a)){a.focus();return}}try{this.$[CKEDITOR.env.ie&&this.getDocument().equals(CKEDITOR.document)?"setActive":
"focus"]()}catch(b){if(!CKEDITOR.env.ie)throw b;}if(CKEDITOR.env.safari&&!this.isInline()){a=CKEDITOR.document.getActive();a.equals(this.getWindow().getFrame())||this.getWindow().focus()}},on:function(a,b){var c=Array.prototype.slice.call(arguments,0);if(CKEDITOR.env.ie&&/^focus|blur$/.exec(a)){a=a=="focus"?"focusin":"focusout";b=e(b,this);c[0]=a;c[1]=b}return CKEDITOR.dom.element.prototype.on.apply(this,c)},attachListener:function(a,b,c,d,e,j){!this._.listeners&&(this._.listeners=[]);var n=Array.prototype.slice.call(arguments,
1),n=a.on.apply(a,n);this._.listeners.push(n);return n},clearListeners:function(){var a=this._.listeners;try{for(;a.length;)a.pop().removeListener()}catch(b){}},restoreAttrs:function(){var a=this._.attrChanges,b,c;for(c in a)if(a.hasOwnProperty(c)){b=a[c];b!==null?this.setAttribute(c,b):this.removeAttribute(c)}},attachClass:function(a){var b=this.getCustomData("classes");if(!this.hasClass(a)){!b&&(b=[]);b.push(a);this.setCustomData("classes",b);this.addClass(a)}},changeAttr:function(a,b){var c=this.getAttribute(a);
if(b!==c){!this._.attrChanges&&(this._.attrChanges={});a in this._.attrChanges||(this._.attrChanges[a]=c);this.setAttribute(a,b)}},insertHtml:function(a,b){g(this);q(this,b||"html",a)},insertText:function(a){g(this);var b=this.editor,c=b.getSelection().getStartElement().hasAscendant("pre",true)?CKEDITOR.ENTER_BR:b.activeEnterMode,b=c==CKEDITOR.ENTER_BR,d=CKEDITOR.tools,a=d.htmlEncode(a.replace(/\r\n/g,"\n")),a=a.replace(/\t/g,"&nbsp;&nbsp; &nbsp;"),c=c==CKEDITOR.ENTER_P?"p":"div";if(!b){var e=/\n{2}/g;
if(e.test(a))var j="<"+c+">",n="</"+c+">",a=j+a.replace(e,function(){return n+j})+n}a=a.replace(/\n/g,"<br>");b||(a=a.replace(RegExp("<br>(?=</"+c+">)"),function(a){return d.repeat(a,2)}));a=a.replace(/^ | $/g,"&nbsp;");a=a.replace(/(>|\s) /g,function(a,b){return b+"&nbsp;"}).replace(/ (?=<)/g,"&nbsp;");q(this,"text",a)},insertElement:function(a,b){b?this.insertElementIntoRange(a,b):this.insertElementIntoSelection(a)},insertElementIntoRange:function(a,b){var c=this.editor,d=c.config.enterMode,e=a.getName(),
j=CKEDITOR.dtd.$block[e];if(b.checkReadOnly())return false;b.deleteContents(1);b.startContainer.type==CKEDITOR.NODE_ELEMENT&&b.startContainer.is({tr:1,table:1,tbody:1,thead:1,tfoot:1})&&u(b);var n,i;if(j)for(;(n=b.getCommonAncestor(0,1))&&(i=CKEDITOR.dtd[n.getName()])&&(!i||!i[e]);)if(n.getName()in CKEDITOR.dtd.span)b.splitElement(n);else if(b.checkStartOfBlock()&&b.checkEndOfBlock()){b.setStartBefore(n);b.collapse(true);n.remove()}else b.splitBlock(d==CKEDITOR.ENTER_DIV?"div":"p",c.editable());b.insertNode(a);
return true},insertElementIntoSelection:function(a){var b=this.editor,d=b.activeEnterMode,b=b.getSelection(),e=b.getRanges()[0],m=a.getName(),m=CKEDITOR.dtd.$block[m];g(this);if(this.insertElementIntoRange(a,e)){e.moveToPosition(a,CKEDITOR.POSITION_AFTER_END);if(m)if((m=a.getNext(function(a){return c(a)&&!h(a)}))&&m.type==CKEDITOR.NODE_ELEMENT&&m.is(CKEDITOR.dtd.$block))m.getDtd()["#"]?e.moveToElementEditStart(m):e.moveToElementEditEnd(a);else if(!m&&d!=CKEDITOR.ENTER_BR){m=e.fixBlock(true,d==CKEDITOR.ENTER_DIV?
"div":"p");e.moveToElementEditStart(m)}}b.selectRanges([e]);l(this,CKEDITOR.env.opera)},setData:function(a,b){b||(a=this.editor.dataProcessor.toHtml(a));this.setHtml(a);this.editor.fire("dataReady")},getData:function(a){var b=this.getHtml();a||(b=this.editor.dataProcessor.toDataFormat(b));return b},setReadOnly:function(a){this.setAttribute("contenteditable",!a)},detach:function(){this.removeClass("cke_editable");var a=this.editor;this._.detach();delete a.document;delete a.window},isInline:function(){return this.getDocument().equals(CKEDITOR.document)},
setup:function(){var a=this.editor;this.attachListener(a,"beforeGetData",function(){var b=this.getData();this.is("textarea")||a.config.ignoreEmptyParagraph!==false&&(b=b.replace(k,function(a,b){return b}));a.setData(b,null,1)},this);this.attachListener(a,"getSnapshot",function(a){a.data=this.getData(1)},this);this.attachListener(a,"afterSetData",function(){this.setData(a.getData(1))},this);this.attachListener(a,"loadSnapshot",function(a){this.setData(a.data,1)},this);this.attachListener(a,"beforeFocus",
function(){var b=a.getSelection();(b=b&&b.getNative())&&b.type=="Control"||this.focus()},this);this.attachListener(a,"insertHtml",function(a){this.insertHtml(a.data.dataValue,a.data.mode)},this);this.attachListener(a,"insertElement",function(a){this.insertElement(a.data)},this);this.attachListener(a,"insertText",function(a){this.insertText(a.data)},this);this.setReadOnly(a.readOnly);this.attachClass("cke_editable");this.attachClass(a.elementMode==CKEDITOR.ELEMENT_MODE_INLINE?"cke_editable_inline":
a.elementMode==CKEDITOR.ELEMENT_MODE_REPLACE||a.elementMode==CKEDITOR.ELEMENT_MODE_APPENDTO?"cke_editable_themed":"");this.attachClass("cke_contents_"+a.config.contentsLangDirection);a.keystrokeHandler.blockedKeystrokes[8]=+a.readOnly;a.keystrokeHandler.attach(this);this.on("blur",function(a){CKEDITOR.env.opera&&CKEDITOR.document.getActive().equals(this.isInline()?this:this.getWindow().getFrame())?a.cancel():this.hasFocus=false},null,null,-1);this.on("focus",function(){this.hasFocus=true},null,null,
-1);a.focusManager.add(this);if(this.equals(CKEDITOR.document.getActive())){this.hasFocus=true;a.once("contentDom",function(){a.focusManager.focus()})}this.isInline()&&this.changeAttr("tabindex",a.tabIndex);if(!this.is("textarea")){a.document=this.getDocument();a.window=this.getWindow();var d=a.document;this.changeAttr("spellcheck",!a.config.disableNativeSpellChecker);var e=a.config.contentsLangDirection;this.getDirection(1)!=e&&this.changeAttr("dir",e);var g=CKEDITOR.getCss();if(g){e=d.getHead();
if(!e.getCustomData("stylesheet")){g=d.appendStyleText(g);g=new CKEDITOR.dom.element(g.ownerNode||g.owningElement);e.setCustomData("stylesheet",g);g.data("cke-temp",1)}}e=d.getCustomData("stylesheet_ref")||0;d.setCustomData("stylesheet_ref",e+1);this.setCustomData("cke_includeReadonly",!a.config.disableReadonlyStyling);this.attachListener(this,"click",function(a){var a=a.data,b=(new CKEDITOR.dom.elementPath(a.getTarget(),this)).contains("a");b&&(a.$.button!=2&&b.isReadOnly())&&a.preventDefault()});
var m={8:1,46:1};this.attachListener(a,"key",function(b){if(a.readOnly)return true;var c=b.data.keyCode,d;if(c in m){var b=a.getSelection(),e,g=b.getRanges()[0],h=g.startPath(),k,l,p,c=c==8;if(CKEDITOR.env.ie&&CKEDITOR.env.version<11&&(e=b.getSelectedElement())||(e=i(b))){a.fire("saveSnapshot");g.moveToPosition(e,CKEDITOR.POSITION_BEFORE_START);e.remove();g.select();a.fire("saveSnapshot");d=1}else if(g.collapsed)if((k=h.block)&&(p=k[c?"getPrevious":"getNext"](o))&&p.type==CKEDITOR.NODE_ELEMENT&&p.is("table")&&
g[c?"checkStartOfBlock":"checkEndOfBlock"]()){a.fire("saveSnapshot");g[c?"checkEndOfBlock":"checkStartOfBlock"]()&&k.remove();g["moveToElementEdit"+(c?"End":"Start")](p);g.select();a.fire("saveSnapshot");d=1}else if(h.blockLimit&&h.blockLimit.is("td")&&(l=h.blockLimit.getAscendant("table"))&&g.checkBoundaryOfElement(l,c?CKEDITOR.START:CKEDITOR.END)&&(p=l[c?"getPrevious":"getNext"](o))){a.fire("saveSnapshot");g["moveToElementEdit"+(c?"End":"Start")](p);g.checkStartOfBlock()&&g.checkEndOfBlock()?p.remove():
g.select();a.fire("saveSnapshot");d=1}else if((l=h.contains(["td","th","caption"]))&&g.checkBoundaryOfElement(l,c?CKEDITOR.START:CKEDITOR.END))d=1}return!d});a.blockless&&(CKEDITOR.env.ie&&CKEDITOR.env.needsBrFiller)&&this.attachListener(this,"keyup",function(b){if(b.data.getKeystroke()in m&&!this.getFirst(c)){this.appendBogus();b=a.createRange();b.moveToPosition(this,CKEDITOR.POSITION_AFTER_START);b.select()}});this.attachListener(this,"dblclick",function(b){if(a.readOnly)return false;b={element:b.data.getTarget()};
a.fire("doubleclick",b)});CKEDITOR.env.ie&&this.attachListener(this,"click",b);!CKEDITOR.env.ie&&!CKEDITOR.env.opera&&this.attachListener(this,"mousedown",function(b){var c=b.data.getTarget();if(c.is("img","hr","input","textarea","select")){a.getSelection().selectElement(c);c.is("input","textarea","select")&&b.data.preventDefault()}});CKEDITOR.env.gecko&&this.attachListener(this,"mouseup",function(b){if(b.data.$.button==2){b=b.data.getTarget();if(!b.getOuterHtml().replace(k,"")){var c=a.createRange();
c.moveToElementEditStart(b);c.select(true)}}});if(CKEDITOR.env.webkit){this.attachListener(this,"click",function(a){a.data.getTarget().is("input","select")&&a.data.preventDefault()});this.attachListener(this,"mouseup",function(a){a.data.getTarget().is("input","textarea")&&a.data.preventDefault()})}}}},_:{detach:function(){this.editor.setData(this.editor.getData(),0,1);this.clearListeners();this.restoreAttrs();var a;if(a=this.removeCustomData("classes"))for(;a.length;)this.removeClass(a.pop());if(!this.is("textarea")){a=
this.getDocument();var b=a.getHead();if(b.getCustomData("stylesheet")){var c=a.getCustomData("stylesheet_ref");if(--c)a.setCustomData("stylesheet_ref",c);else{a.removeCustomData("stylesheet_ref");b.removeCustomData("stylesheet").remove()}}}this.editor.fire("contentDomUnload");delete this.editor}}});CKEDITOR.editor.prototype.editable=function(a){var b=this._.editable;if(b&&a)return 0;if(arguments.length)b=this._.editable=a?a instanceof CKEDITOR.editable?a:new CKEDITOR.editable(this,a):(b&&b.detach(),
null);return b};var h=CKEDITOR.dom.walker.bogus(),k=/(^|<body\b[^>]*>)\s*<(p|div|address|h\d|center|pre)[^>]*>\s*(?:<br[^>]*>|&nbsp;|\u00A0|&#160;)?\s*(:?<\/\2>)?\s*(?=$|<\/body>)/gi,o=CKEDITOR.dom.walker.whitespaces(true),s=CKEDITOR.dom.walker.bookmark(false,true);CKEDITOR.on("instanceLoaded",function(b){var c=b.editor;c.on("insertElement",function(a){a=a.data;if(a.type==CKEDITOR.NODE_ELEMENT&&(a.is("input")||a.is("textarea"))){a.getAttribute("contentEditable")!="false"&&a.data("cke-editable",a.hasAttribute("contenteditable")?
"true":"1");a.setAttribute("contentEditable",false)}});c.on("selectionChange",function(b){if(!c.readOnly){var d=c.getSelection();if(d&&!d.isLocked){d=c.checkDirty();c.fire("lockSnapshot");a(b);c.fire("unlockSnapshot");!d&&c.resetDirty()}}})});CKEDITOR.on("instanceCreated",function(a){var b=a.editor;b.on("mode",function(){var a=b.editable();if(a&&a.isInline()){var c=b.title;a.changeAttr("role","textbox");a.changeAttr("aria-label",c);c&&a.changeAttr("title",c);if(c=this.ui.space(this.elementMode==CKEDITOR.ELEMENT_MODE_INLINE?
"top":"contents")){var d=CKEDITOR.tools.getNextId(),e=CKEDITOR.dom.element.createFromHtml('<span id="'+d+'" class="cke_voice_label">'+this.lang.common.editorHelp+"</span>");c.append(e);a.changeAttr("aria-describedby",d)}}})});CKEDITOR.addCss(".cke_editable{cursor:text}.cke_editable img,.cke_editable input,.cke_editable textarea{cursor:default}");var q=function(){function a(b){return b.type==CKEDITOR.NODE_ELEMENT}function b(c,d){var e,j,m,i,g=[],t=d.range.startContainer;e=d.range.startPath();for(var t=
n[t.getName()],h=0,k=c.getChildren(),r=k.count(),l=-1,o=-1,q=0,s=e.contains(n.$list);h<r;++h){e=k.getItem(h);if(a(e)){m=e.getName();if(s&&m in CKEDITOR.dtd.$list)g=g.concat(b(e,d));else{i=!!t[m];if(m=="br"&&e.data("cke-eol")&&(!h||h==r-1)){q=(j=h?g[h-1].node:k.getItem(h+1))&&(!a(j)||!j.is("br"));j=j&&a(j)&&n.$block[j.getName()]}l==-1&&!i&&(l=h);i||(o=h);g.push({isElement:1,isLineBreak:q,isBlock:e.isBlockBoundary(),hasBlockSibling:j,node:e,name:m,allowed:i});j=q=0}}else g.push({isElement:0,node:e,
allowed:1})}if(l>-1)g[l].firstNotAllowed=1;if(o>-1)g[o].lastNotAllowed=1;return g}function d(b,c){var e=[],j=b.getChildren(),m=j.count(),i,g=0,t=n[c],h=!b.is(n.$inline)||b.is("br");for(h&&e.push(" ");g<m;g++){i=j.getItem(g);a(i)&&!i.is(t)?e=e.concat(d(i,c)):e.push(i)}h&&e.push(" ");return e}function e(b){return b&&a(b)&&(b.is(n.$removeEmpty)||b.is("a")&&!b.isBlockBoundary())}function m(b,c,d,e){var j=b.clone(),g,n;j.setEndAt(c,CKEDITOR.POSITION_BEFORE_END);if((g=(new CKEDITOR.dom.walker(j)).next())&&
a(g)&&i[g.getName()]&&(n=g.getPrevious())&&a(n)&&!n.getParent().equals(b.startContainer)&&d.contains(n)&&e.contains(g)&&g.isIdentical(n)){g.moveChildren(n);g.remove();m(b,c,d,e)}}function j(b,c){function d(b,c){if(c.isBlock&&c.isElement&&!c.node.is("br")&&a(b)&&b.is("br")){b.remove();return 1}}var e=c.endContainer.getChild(c.endOffset),j=c.endContainer.getChild(c.endOffset-1);e&&d(e,b[b.length-1]);if(j&&d(j,b[0])){c.setEnd(c.endContainer,c.endOffset-1);c.collapse()}}var n=CKEDITOR.dtd,i={p:1,div:1,
h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,ul:1,ol:1,li:1,pre:1,dl:1,blockquote:1},g={p:1,div:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1},t=CKEDITOR.tools.extend({},n.$inline);delete t.br;return function(i,h,k){var r=i.editor;i.getDocument();var o=r.getSelection().getRanges()[0],q=false;if(h=="unfiltered_html"){h="html";q=true}if(!o.checkReadOnly()){var v=(new CKEDITOR.dom.elementPath(o.startContainer,o.root)).blockLimit||o.root,h={type:h,dontFilter:q,editable:i,editor:r,range:o,blockLimit:v,mergeCandidates:[],zombies:[]},
r=h.range,q=h.mergeCandidates,x,C,D,z;if(h.type=="text"&&r.shrink(CKEDITOR.SHRINK_ELEMENT,true,false)){x=CKEDITOR.dom.element.createFromHtml("<span>&nbsp;</span>",r.document);r.insertNode(x);r.setStartAfter(x)}C=new CKEDITOR.dom.elementPath(r.startContainer);h.endPath=D=new CKEDITOR.dom.elementPath(r.endContainer);if(!r.collapsed){var v=D.block||D.blockLimit,T=r.getCommonAncestor();v&&(!v.equals(T)&&!v.contains(T)&&r.checkEndOfBlock())&&h.zombies.push(v);r.deleteContents()}for(;(z=a(r.startContainer)&&
r.startContainer.getChild(r.startOffset-1))&&a(z)&&z.isBlockBoundary()&&C.contains(z);)r.moveToPosition(z,CKEDITOR.POSITION_BEFORE_END);m(r,h.blockLimit,C,D);if(x){r.setEndBefore(x);r.collapse();x.remove()}x=r.startPath();if(v=x.contains(e,false,1)){r.splitElement(v);h.inlineStylesRoot=v;h.inlineStylesPeak=x.lastElement}x=r.createBookmark();(v=x.startNode.getPrevious(c))&&a(v)&&e(v)&&q.push(v);(v=x.startNode.getNext(c))&&a(v)&&e(v)&&q.push(v);for(v=x.startNode;(v=v.getParent())&&e(v);)q.push(v);r.moveToBookmark(x);
if(x=k){x=h.range;if(h.type=="text"&&h.inlineStylesRoot){z=h.inlineStylesPeak;r=z.getDocument().createText("{cke-peak}");for(q=h.inlineStylesRoot.getParent();!z.equals(q);){r=r.appendTo(z.clone());z=z.getParent()}k=r.getOuterHtml().split("{cke-peak}").join(k)}z=h.blockLimit.getName();if(/^\s+|\s+$/.test(k)&&"span"in CKEDITOR.dtd[z])var s='<span data-cke-marker="1">&nbsp;</span>',k=s+k+s;k=h.editor.dataProcessor.toHtml(k,{context:null,fixForBody:false,dontFilter:h.dontFilter,filter:h.editor.activeFilter,
enterMode:h.editor.activeEnterMode});z=x.document.createElement("body");z.setHtml(k);if(s){z.getFirst().remove();z.getLast().remove()}if((s=x.startPath().block)&&!(s.getChildCount()==1&&s.getBogus()))a:{var E;if(z.getChildCount()==1&&a(E=z.getFirst())&&E.is(g)){s=E.getElementsByTag("*");x=0;for(q=s.count();x<q;x++){r=s.getItem(x);if(!r.is(t))break a}E.moveChildren(E.getParent(1));E.remove()}}h.dataWrapper=z;x=k}if(x){E=h.range;var s=E.document,u,k=h.blockLimit;x=0;var K;z=[];var F,O,q=r=0,L,Q;C=E.startContainer;
var v=h.endPath.elements[0],R;D=v.getPosition(C);T=!!v.getCommonAncestor(C)&&D!=CKEDITOR.POSITION_IDENTICAL&&!(D&CKEDITOR.POSITION_CONTAINS+CKEDITOR.POSITION_IS_CONTAINED);C=b(h.dataWrapper,h);for(j(C,E);x<C.length;x++){D=C[x];if(u=D.isLineBreak){u=E;L=k;var M=void 0,U=void 0;if(D.hasBlockSibling)u=1;else{M=u.startContainer.getAscendant(n.$block,1);if(!M||!M.is({div:1,p:1}))u=0;else{U=M.getPosition(L);if(U==CKEDITOR.POSITION_IDENTICAL||U==CKEDITOR.POSITION_CONTAINS)u=0;else{L=u.splitElement(M);u.moveToPosition(L,
CKEDITOR.POSITION_AFTER_START);u=1}}}}if(u)q=x>0;else{u=E.startPath();if(!D.isBlock&&h.editor.config.autoParagraph!==false&&(h.editor.activeEnterMode!=CKEDITOR.ENTER_BR&&h.editor.editable().equals(u.blockLimit)&&!u.block)&&(O=h.editor.activeEnterMode!=CKEDITOR.ENTER_BR&&h.editor.config.autoParagraph!==false?h.editor.activeEnterMode==CKEDITOR.ENTER_DIV?"div":"p":false)){O=s.createElement(O);O.appendBogus();E.insertNode(O);CKEDITOR.env.needsBrFiller&&(K=O.getBogus())&&K.remove();E.moveToPosition(O,
CKEDITOR.POSITION_BEFORE_END)}if((u=E.startPath().block)&&!u.equals(F)){if(K=u.getBogus()){K.remove();z.push(u)}F=u}D.firstNotAllowed&&(r=1);if(r&&D.isElement){u=E.startContainer;for(L=null;u&&!n[u.getName()][D.name];){if(u.equals(k)){u=null;break}L=u;u=u.getParent()}if(u){if(L){Q=E.splitElement(L);h.zombies.push(Q);h.zombies.push(L)}}else{L=k.getName();R=!x;u=x==C.length-1;L=d(D.node,L);for(var M=[],U=L.length,X=0,Z=void 0,$=0,aa=-1;X<U;X++){Z=L[X];if(Z==" "){if(!$&&(!R||X)){M.push(new CKEDITOR.dom.text(" "));
aa=M.length}$=1}else{M.push(Z);$=0}}u&&aa==M.length&&M.pop();R=M}}if(R){for(;u=R.pop();)E.insertNode(u);R=0}else E.insertNode(D.node);if(D.lastNotAllowed&&x<C.length-1){(Q=T?v:Q)&&E.setEndAt(Q,CKEDITOR.POSITION_AFTER_START);r=0}E.collapse()}}h.dontMoveCaret=q;h.bogusNeededBlocks=z}K=h.range;var V;Q=h.bogusNeededBlocks;for(R=K.createBookmark();F=h.zombies.pop();)if(F.getParent()){O=K.clone();O.moveToElementEditStart(F);O.removeEmptyBlocksAtEnd()}if(Q)for(;F=Q.pop();)CKEDITOR.env.needsBrFiller?F.appendBogus():
F.append(K.document.createText(" "));for(;F=h.mergeCandidates.pop();)F.mergeSiblings();K.moveToBookmark(R);if(!h.dontMoveCaret){for(F=a(K.startContainer)&&K.startContainer.getChild(K.startOffset-1);F&&a(F)&&!F.is(n.$empty);){if(F.isBlockBoundary())K.moveToPosition(F,CKEDITOR.POSITION_BEFORE_END);else{if(e(F)&&F.getHtml().match(/(\s|&nbsp;)$/g)){V=null;break}V=K.clone();V.moveToPosition(F,CKEDITOR.POSITION_BEFORE_END)}F=F.getLast(c)}V&&K.moveToRange(V)}o.select();l(i)}}}(),u=function(){function a(b){b=
new CKEDITOR.dom.walker(b);b.guard=function(a,b){if(b)return false;if(a.type==CKEDITOR.NODE_ELEMENT)return a.is(CKEDITOR.dtd.$tableContent)};b.evaluator=function(a){return a.type==CKEDITOR.NODE_ELEMENT};return b}function b(a,c,d){c=a.getDocument().createElement(c);a.append(c,d);return c}function c(a){var b=a.count(),d;for(b;b-- >0;){d=a.getItem(b);if(!CKEDITOR.tools.trim(d.getHtml())){d.appendBogus();CKEDITOR.env.ie&&(CKEDITOR.env.version<9&&d.getChildCount())&&d.getFirst().remove()}}}return function(d){var e=
d.startContainer,j=e.getAscendant("table",1),i=false;c(j.getElementsByTag("td"));c(j.getElementsByTag("th"));j=d.clone();j.setStart(e,0);j=a(j).lastBackward();if(!j){j=d.clone();j.setEndAt(e,CKEDITOR.POSITION_BEFORE_END);j=a(j).lastForward();i=true}j||(j=e);if(j.is("table")){d.setStartAt(j,CKEDITOR.POSITION_BEFORE_START);d.collapse(true);j.remove()}else{j.is({tbody:1,thead:1,tfoot:1})&&(j=b(j,"tr",i));j.is("tr")&&(j=b(j,j.getParent().is("thead")?"th":"td",i));(e=j.getBogus())&&e.remove();d.moveToPosition(j,
i?CKEDITOR.POSITION_AFTER_START:CKEDITOR.POSITION_BEFORE_END)}}}()})();
(function(){function a(){var a=this._.fakeSelection,b;if(a){b=this.getSelection(1);if(!b||!b.isHidden()){a.reset();a=0}}if(!a){a=b||this.getSelection(1);if(!a||a.getType()==CKEDITOR.SELECTION_NONE)return}this.fire("selectionCheck",a);b=this.elementPath();if(!b.compare(this._.selectionPreviousPath)){if(CKEDITOR.env.webkit)this._.previousActive=this.document.getActive();this._.selectionPreviousPath=b;this.fire("selectionChange",{selection:a,path:b})}}function d(){q=true;if(!s){b.call(this);s=CKEDITOR.tools.setTimeout(b,
200,this)}}function b(){s=null;if(q){CKEDITOR.tools.setTimeout(a,0,this);q=false}}function c(a){function b(c,d){return!c||c.type==CKEDITOR.NODE_TEXT?false:a.clone()["moveToElementEdit"+(d?"End":"Start")](c)}if(!(a.root instanceof CKEDITOR.editable))return false;var c=a.startContainer,d=a.getPreviousNode(u,null,c),e=a.getNextNode(u,null,c);return b(d)||b(e,1)||!d&&!e&&!(c.type==CKEDITOR.NODE_ELEMENT&&c.isBlockBoundary()&&c.getBogus())?true:false}function e(a){return a.getCustomData("cke-fillingChar")}
function i(a,b){var c=a&&a.removeCustomData("cke-fillingChar");if(c){if(b!==false){var d,e=a.getDocument().getSelection().getNative(),f=e&&e.type!="None"&&e.getRangeAt(0);if(c.getLength()>1&&f&&f.intersectsNode(c.$)){d=[e.anchorOffset,e.focusOffset];f=e.focusNode==c.$&&e.focusOffset>0;e.anchorNode==c.$&&e.anchorOffset>0&&d[0]--;f&&d[1]--;var i;f=e;if(!f.isCollapsed){i=f.getRangeAt(0);i.setStart(f.anchorNode,f.anchorOffset);i.setEnd(f.focusNode,f.focusOffset);i=i.collapsed}i&&d.unshift(d.pop())}}c.setText(g(c.getText()));
if(d){c=e.getRangeAt(0);c.setStart(c.startContainer,d[0]);c.setEnd(c.startContainer,d[1]);e.removeAllRanges();e.addRange(c)}}}function g(a){return a.replace(/\u200B( )?/g,function(a){return a[1]?" ":""})}function l(a,b,c){var d=a.on("focus",function(a){a.cancel()},null,null,-100);if(CKEDITOR.env.ie)var e=a.getDocument().on("selectionchange",function(a){a.cancel()},null,null,-100);else{var f=new CKEDITOR.dom.range(a);f.moveToElementEditStart(a);var i=a.getDocument().$.createRange();i.setStart(f.startContainer.$,
f.startOffset);i.collapse(1);b.removeAllRanges();b.addRange(i)}c&&a.focus();d.removeListener();e&&e.removeListener()}function h(a){var b=CKEDITOR.dom.element.createFromHtml('<div data-cke-hidden-sel="1" data-cke-temp="1" style="'+(CKEDITOR.env.ie?"display:none":"position:fixed;top:0;left:-1000px")+'">&nbsp;</div>',a.document);a.fire("lockSnapshot");a.editable().append(b);var c=a.getSelection(1),d=a.createRange(),e=c.root.on("selectionchange",function(a){a.cancel()},null,null,0);d.setStartAt(b,CKEDITOR.POSITION_AFTER_START);
d.setEndAt(b,CKEDITOR.POSITION_BEFORE_END);c.selectRanges([d]);e.removeListener();a.fire("unlockSnapshot");a._.hiddenSelectionContainer=b}function k(a){var b={37:1,39:1,8:1,46:1};return function(c){var d=c.data.getKeystroke();if(b[d]){var e=a.getSelection().getRanges(),f=e[0];if(e.length==1&&f.collapsed)if((d=f[d<38?"getPreviousEditableNode":"getNextEditableNode"]())&&d.type==CKEDITOR.NODE_ELEMENT&&d.getAttribute("contenteditable")=="false"){a.getSelection().fake(d);c.data.preventDefault();c.cancel()}}}}
function o(a){for(var b=0;b<a.length;b++){var c=a[b];c.getCommonAncestor().isReadOnly()&&a.splice(b,1);if(!c.collapsed){if(c.startContainer.isReadOnly())for(var d=c.startContainer,e;d;){if((e=d.type==CKEDITOR.NODE_ELEMENT)&&d.is("body")||!d.isReadOnly())break;e&&d.getAttribute("contentEditable")=="false"&&c.setStartAfter(d);d=d.getParent()}d=c.startContainer;e=c.endContainer;var f=c.startOffset,i=c.endOffset,g=c.clone();d&&d.type==CKEDITOR.NODE_TEXT&&(f>=d.getLength()?g.setStartAfter(d):g.setStartBefore(d));
e&&e.type==CKEDITOR.NODE_TEXT&&(i?g.setEndAfter(e):g.setEndBefore(e));d=new CKEDITOR.dom.walker(g);d.evaluator=function(d){if(d.type==CKEDITOR.NODE_ELEMENT&&d.isReadOnly()){var e=c.clone();c.setEndBefore(d);c.collapsed&&a.splice(b--,1);if(!(d.getPosition(g.endContainer)&CKEDITOR.POSITION_CONTAINS)){e.setStartAfter(d);e.collapsed||a.splice(b+1,0,e)}return true}return false};d.next()}}return a}var s,q,u=CKEDITOR.dom.walker.invisible(1),f=function(){function a(b){return function(a){var c=a.editor.createRange();
c.moveToClosestEditablePosition(a.selected,b)&&a.editor.getSelection().selectRanges([c]);return false}}function b(a){return function(b){var c=b.editor,d=c.createRange(),e;if(!(e=d.moveToClosestEditablePosition(b.selected,a)))e=d.moveToClosestEditablePosition(b.selected,!a);e&&c.getSelection().selectRanges([d]);c.fire("saveSnapshot");b.selected.remove();if(!e){d.moveToElementEditablePosition(c.editable());c.getSelection().selectRanges([d])}c.fire("saveSnapshot");return false}}var c=a(),d=a(1);return{37:c,
38:c,39:d,40:d,8:b(),46:b(1)}}();CKEDITOR.on("instanceCreated",function(b){function c(){var a=e.getSelection();a&&a.removeAllRanges()}var e=b.editor;e.on("contentDom",function(){var b=e.document,c=CKEDITOR.document,f=e.editable(),j=b.getBody(),g=b.getDocumentElement(),m=f.isInline(),h,l;CKEDITOR.env.gecko&&f.attachListener(f,"focus",function(a){a.removeListener();if(h!==0)if((a=e.getSelection().getNative())&&a.isCollapsed&&a.anchorNode==f.$){a=e.createRange();a.moveToElementEditStart(f);a.select()}},
null,null,-2);f.attachListener(f,CKEDITOR.env.webkit?"DOMFocusIn":"focus",function(){h&&CKEDITOR.env.webkit&&(h=e._.previousActive&&e._.previousActive.equals(b.getActive()));e.unlockSelection(h);h=0},null,null,-1);f.attachListener(f,"mousedown",function(){h=0});if(CKEDITOR.env.ie||CKEDITOR.env.opera||m){var o=function(){l=new CKEDITOR.dom.selection(e.getSelection());l.lock()};p?f.attachListener(f,"beforedeactivate",o,null,null,-1):f.attachListener(e,"selectionCheck",o,null,null,-1);f.attachListener(f,
CKEDITOR.env.webkit?"DOMFocusOut":"blur",function(){e.lockSelection(l);h=1},null,null,-1);f.attachListener(f,"mousedown",function(){h=0})}if(CKEDITOR.env.ie&&!m){var v;f.attachListener(f,"mousedown",function(a){if(a.data.$.button==2){a=e.document.getSelection();if(!a||a.getType()==CKEDITOR.SELECTION_NONE)v=e.window.getScrollPosition()}});f.attachListener(f,"mouseup",function(a){if(a.data.$.button==2&&v){e.document.$.documentElement.scrollLeft=v.x;e.document.$.documentElement.scrollTop=v.y}v=null});
if(b.$.compatMode!="BackCompat"){if(CKEDITOR.env.ie7Compat||CKEDITOR.env.ie6Compat)g.on("mousedown",function(a){function b(a){a=a.data.$;if(e){var c=j.$.createTextRange();try{c.moveToPoint(a.x,a.y)}catch(d){}e.setEndPoint(i.compareEndPoints("StartToStart",c)<0?"EndToEnd":"StartToStart",c);e.select()}}function d(){g.removeListener("mousemove",b);c.removeListener("mouseup",d);g.removeListener("mouseup",d);e.select()}a=a.data;if(a.getTarget().is("html")&&a.$.y<g.$.clientHeight&&a.$.x<g.$.clientWidth){var e=
j.$.createTextRange();try{e.moveToPoint(a.$.x,a.$.y)}catch(f){}var i=e.duplicate();g.on("mousemove",b);c.on("mouseup",d);g.on("mouseup",d)}});if(CKEDITOR.env.version>7&&CKEDITOR.env.version<11){g.on("mousedown",function(a){if(a.data.getTarget().is("html")){c.on("mouseup",x);g.on("mouseup",x)}});var x=function(){c.removeListener("mouseup",x);g.removeListener("mouseup",x);var a=CKEDITOR.document.$.selection,d=a.createRange();a.type!="None"&&d.parentElement().ownerDocument==b.$&&d.select()}}}}f.attachListener(f,
"selectionchange",a,e);f.attachListener(f,"keyup",d,e);f.attachListener(f,CKEDITOR.env.webkit?"DOMFocusIn":"focus",function(){e.forceNextSelectionCheck();e.selectionChange(1)});if(m?CKEDITOR.env.webkit||CKEDITOR.env.gecko:CKEDITOR.env.opera){var C;f.attachListener(f,"mousedown",function(){C=1});f.attachListener(b.getDocumentElement(),"mouseup",function(){C&&d.call(e);C=0})}else f.attachListener(CKEDITOR.env.ie?f:b.getDocumentElement(),"mouseup",d,e);CKEDITOR.env.webkit&&f.attachListener(b,"keydown",
function(a){switch(a.data.getKey()){case 13:case 33:case 34:case 35:case 36:case 37:case 39:case 8:case 45:case 46:i(f)}},null,null,-1);f.attachListener(f,"keydown",k(e),null,null,-1)});e.on("contentDomUnload",e.forceNextSelectionCheck,e);e.on("dataReady",function(){delete e._.fakeSelection;delete e._.hiddenSelectionContainer;e.selectionChange(1)});e.on("loadSnapshot",function(){var a=e.editable().getLast(function(a){return a.type==CKEDITOR.NODE_ELEMENT});a&&a.hasAttribute("data-cke-hidden-sel")&&
a.remove()},null,null,100);CKEDITOR.env.ie9Compat&&e.on("beforeDestroy",c,null,null,9);CKEDITOR.env.webkit&&e.on("setData",c);e.on("contentDomUnload",function(){e.unlockSelection()});e.on("key",function(a){if(e.mode=="wysiwyg"){var b=e.getSelection();if(b.isFake){var c=f[a.data.keyCode];if(c)return c({editor:e,selected:b.getSelectedElement(),selection:b,keyEvent:a})}}})});CKEDITOR.on("instanceReady",function(a){var b=a.editor;if(CKEDITOR.env.webkit){b.on("selectionChange",function(){var a=b.editable(),
c=e(a);c&&(c.getCustomData("ready")?i(a):c.setCustomData("ready",1))},null,null,-1);b.on("beforeSetMode",function(){i(b.editable())},null,null,-1);var c,d,a=function(){var a=b.editable();if(a)if(a=e(a)){var f=b.document.$.defaultView.getSelection();f.type=="Caret"&&f.anchorNode==a.$&&(d=1);c=a.getText();a.setText(g(c))}},f=function(){var a=b.editable();if(a)if(a=e(a)){a.setText(c);if(d){b.document.$.defaultView.getSelection().setPosition(a.$,a.getLength());d=0}}};b.on("beforeUndoImage",a);b.on("afterUndoImage",
f);b.on("beforeGetData",a,null,null,0);b.on("getData",f)}});CKEDITOR.editor.prototype.selectionChange=function(b){(b?a:d).call(this)};CKEDITOR.editor.prototype.getSelection=function(a){if((this._.savedSelection||this._.fakeSelection)&&!a)return this._.savedSelection||this._.fakeSelection;return(a=this.editable())&&this.mode=="wysiwyg"?new CKEDITOR.dom.selection(a):null};CKEDITOR.editor.prototype.lockSelection=function(a){a=a||this.getSelection(1);if(a.getType()!=CKEDITOR.SELECTION_NONE){!a.isLocked&&
a.lock();this._.savedSelection=a;return true}return false};CKEDITOR.editor.prototype.unlockSelection=function(a){var b=this._.savedSelection;if(b){b.unlock(a);delete this._.savedSelection;return true}return false};CKEDITOR.editor.prototype.forceNextSelectionCheck=function(){delete this._.selectionPreviousPath};CKEDITOR.dom.document.prototype.getSelection=function(){return new CKEDITOR.dom.selection(this)};CKEDITOR.dom.range.prototype.select=function(){var a=this.root instanceof CKEDITOR.editable?
this.root.editor.getSelection():new CKEDITOR.dom.selection(this.root);a.selectRanges([this]);return a};CKEDITOR.SELECTION_NONE=1;CKEDITOR.SELECTION_TEXT=2;CKEDITOR.SELECTION_ELEMENT=3;var p=typeof window.getSelection!="function",y=1;CKEDITOR.dom.selection=function(a){if(a instanceof CKEDITOR.dom.selection)var b=a,a=a.root;var c=a instanceof CKEDITOR.dom.element;this.rev=b?b.rev:y++;this.document=a instanceof CKEDITOR.dom.document?a:a.getDocument();this.root=a=c?a:this.document.getBody();this.isLocked=
0;this._={cache:{}};if(b){CKEDITOR.tools.extend(this._.cache,b._.cache);this.isFake=b.isFake;this.isLocked=b.isLocked;return this}b=p?this.document.$.selection:this.document.getWindow().$.getSelection();if(CKEDITOR.env.webkit)(b.type=="None"&&this.document.getActive().equals(a)||b.type=="Caret"&&b.anchorNode.nodeType==CKEDITOR.NODE_DOCUMENT)&&l(a,b);else if(CKEDITOR.env.gecko)b&&(this.document.getActive().equals(a)&&b.anchorNode&&b.anchorNode.nodeType==CKEDITOR.NODE_DOCUMENT)&&l(a,b,true);else if(CKEDITOR.env.ie){var d;
try{d=this.document.getActive()}catch(e){}if(p)b.type=="None"&&(d&&d.equals(this.document.getDocumentElement()))&&l(a,null,true);else{(b=b&&b.anchorNode)&&(b=new CKEDITOR.dom.node(b));d&&(d.equals(this.document.getDocumentElement())&&b&&(a.equals(b)||a.contains(b)))&&l(a,null,true)}}d=this.getNative();var f,i;if(d)if(d.getRangeAt)f=(i=d.rangeCount&&d.getRangeAt(0))&&new CKEDITOR.dom.node(i.commonAncestorContainer);else{try{i=d.createRange()}catch(g){}f=i&&CKEDITOR.dom.element.get(i.item&&i.item(0)||
i.parentElement())}if(!f||!(f.type==CKEDITOR.NODE_ELEMENT||f.type==CKEDITOR.NODE_TEXT)||!this.root.equals(f)&&!this.root.contains(f)){this._.cache.type=CKEDITOR.SELECTION_NONE;this._.cache.startElement=null;this._.cache.selectedElement=null;this._.cache.selectedText="";this._.cache.ranges=new CKEDITOR.dom.rangeList}return this};var A={img:1,hr:1,li:1,table:1,tr:1,td:1,th:1,embed:1,object:1,ol:1,ul:1,a:1,input:1,form:1,select:1,textarea:1,button:1,fieldset:1,thead:1,tfoot:1};CKEDITOR.dom.selection.prototype=
{getNative:function(){return this._.cache.nativeSel!==void 0?this._.cache.nativeSel:this._.cache.nativeSel=p?this.document.$.selection:this.document.getWindow().$.getSelection()},getType:p?function(){var a=this._.cache;if(a.type)return a.type;var b=CKEDITOR.SELECTION_NONE;try{var c=this.getNative(),d=c.type;if(d=="Text")b=CKEDITOR.SELECTION_TEXT;if(d=="Control")b=CKEDITOR.SELECTION_ELEMENT;if(c.createRange().parentElement())b=CKEDITOR.SELECTION_TEXT}catch(e){}return a.type=b}:function(){var a=this._.cache;
if(a.type)return a.type;var b=CKEDITOR.SELECTION_TEXT,c=this.getNative();if(!c||!c.rangeCount)b=CKEDITOR.SELECTION_NONE;else if(c.rangeCount==1){var c=c.getRangeAt(0),d=c.startContainer;if(d==c.endContainer&&d.nodeType==1&&c.endOffset-c.startOffset==1&&A[d.childNodes[c.startOffset].nodeName.toLowerCase()])b=CKEDITOR.SELECTION_ELEMENT}return a.type=b},getRanges:function(){var a=p?function(){function a(b){return(new CKEDITOR.dom.node(b)).getIndex()}var b=function(b,c){b=b.duplicate();b.collapse(c);
var d=b.parentElement();if(!d.hasChildNodes())return{container:d,offset:0};for(var e=d.children,f,i,g=b.duplicate(),h=0,m=e.length-1,v=-1,k,n;h<=m;){v=Math.floor((h+m)/2);f=e[v];g.moveToElementText(f);k=g.compareEndPoints("StartToStart",b);if(k>0)m=v-1;else if(k<0)h=v+1;else return{container:d,offset:a(f)}}if(v==-1||v==e.length-1&&k<0){g.moveToElementText(d);g.setEndPoint("StartToStart",b);g=g.text.replace(/(\r\n|\r)/g,"\n").length;e=d.childNodes;if(!g){f=e[e.length-1];return f.nodeType!=CKEDITOR.NODE_TEXT?
{container:d,offset:e.length}:{container:f,offset:f.nodeValue.length}}for(d=e.length;g>0&&d>0;){i=e[--d];if(i.nodeType==CKEDITOR.NODE_TEXT){n=i;g=g-i.nodeValue.length}}return{container:n,offset:-g}}g.collapse(k>0?true:false);g.setEndPoint(k>0?"StartToStart":"EndToStart",b);g=g.text.replace(/(\r\n|\r)/g,"\n").length;if(!g)return{container:d,offset:a(f)+(k>0?0:1)};for(;g>0;)try{i=f[k>0?"previousSibling":"nextSibling"];if(i.nodeType==CKEDITOR.NODE_TEXT){g=g-i.nodeValue.length;n=i}f=i}catch(l){return{container:d,
offset:a(f)}}return{container:n,offset:k>0?-g:n.nodeValue.length+g}};return function(){var a=this.getNative(),c=a&&a.createRange(),d=this.getType();if(!a)return[];if(d==CKEDITOR.SELECTION_TEXT){a=new CKEDITOR.dom.range(this.root);d=b(c,true);a.setStart(new CKEDITOR.dom.node(d.container),d.offset);d=b(c);a.setEnd(new CKEDITOR.dom.node(d.container),d.offset);a.endContainer.getPosition(a.startContainer)&CKEDITOR.POSITION_PRECEDING&&a.endOffset<=a.startContainer.getIndex()&&a.collapse();return[a]}if(d==
CKEDITOR.SELECTION_ELEMENT){for(var d=[],e=0;e<c.length;e++){for(var f=c.item(e),g=f.parentNode,i=0,a=new CKEDITOR.dom.range(this.root);i<g.childNodes.length&&g.childNodes[i]!=f;i++);a.setStart(new CKEDITOR.dom.node(g),i);a.setEnd(new CKEDITOR.dom.node(g),i+1);d.push(a)}return d}return[]}}():function(){var a=[],b,c=this.getNative();if(!c)return a;for(var d=0;d<c.rangeCount;d++){var e=c.getRangeAt(d);b=new CKEDITOR.dom.range(this.root);b.setStart(new CKEDITOR.dom.node(e.startContainer),e.startOffset);
b.setEnd(new CKEDITOR.dom.node(e.endContainer),e.endOffset);a.push(b)}return a};return function(b){var c=this._.cache,d=c.ranges;if(!d)c.ranges=d=new CKEDITOR.dom.rangeList(a.call(this));return!b?d:o(new CKEDITOR.dom.rangeList(d.slice()))}}(),getStartElement:function(){var a=this._.cache;if(a.startElement!==void 0)return a.startElement;var b;switch(this.getType()){case CKEDITOR.SELECTION_ELEMENT:return this.getSelectedElement();case CKEDITOR.SELECTION_TEXT:var c=this.getRanges()[0];if(c){if(c.collapsed){b=
c.startContainer;b.type!=CKEDITOR.NODE_ELEMENT&&(b=b.getParent())}else{for(c.optimize();;){b=c.startContainer;if(c.startOffset==(b.getChildCount?b.getChildCount():b.getLength())&&!b.isBlockBoundary())c.setStartAfter(b);else break}b=c.startContainer;if(b.type!=CKEDITOR.NODE_ELEMENT)return b.getParent();b=b.getChild(c.startOffset);if(!b||b.type!=CKEDITOR.NODE_ELEMENT)b=c.startContainer;else for(c=b.getFirst();c&&c.type==CKEDITOR.NODE_ELEMENT;){b=c;c=c.getFirst()}}b=b.$}}return a.startElement=b?new CKEDITOR.dom.element(b):
null},getSelectedElement:function(){var a=this._.cache;if(a.selectedElement!==void 0)return a.selectedElement;var b=this,c=CKEDITOR.tools.tryThese(function(){return b.getNative().createRange().item(0)},function(){for(var a=b.getRanges()[0].clone(),c,d,e=2;e&&(!(c=a.getEnclosedNode())||!(c.type==CKEDITOR.NODE_ELEMENT&&A[c.getName()]&&(d=c)));e--)a.shrink(CKEDITOR.SHRINK_ELEMENT);return d&&d.$});return a.selectedElement=c?new CKEDITOR.dom.element(c):null},getSelectedText:function(){var a=this._.cache;
if(a.selectedText!==void 0)return a.selectedText;var b=this.getNative(),b=p?b.type=="Control"?"":b.createRange().text:b.toString();return a.selectedText=b},lock:function(){this.getRanges();this.getStartElement();this.getSelectedElement();this.getSelectedText();this._.cache.nativeSel=null;this.isLocked=1},unlock:function(a){if(this.isLocked){if(a)var b=this.getSelectedElement(),c=!b&&this.getRanges(),d=this.isFake;this.isLocked=0;this.reset();if(a)(a=b||c[0]&&c[0].getCommonAncestor())&&a.getAscendant("body",
1)&&(d?this.fake(b):b?this.selectElement(b):this.selectRanges(c))}},reset:function(){this._.cache={};this.isFake=0;var a=this.root.editor;if(a&&a._.fakeSelection&&this.rev==a._.fakeSelection.rev){delete a._.fakeSelection;var b=a._.hiddenSelectionContainer;if(b){a.fire("lockSnapshot");b.remove();a.fire("unlockSnapshot")}delete a._.hiddenSelectionContainer}this.rev=y++},selectElement:function(a){var b=new CKEDITOR.dom.range(this.root);b.setStartBefore(a);b.setEndAfter(a);this.selectRanges([b])},selectRanges:function(a){var b=
this.root.editor,b=b&&b._.hiddenSelectionContainer;this.reset();if(b)for(var b=this.root,d,e=0;e<a.length;++e){d=a[e];if(d.endContainer.equals(b))d.endOffset=Math.min(d.endOffset,b.getChildCount())}if(a.length)if(this.isLocked){var f=CKEDITOR.document.getActive();this.unlock();this.selectRanges(a);this.lock();!f.equals(this.root)&&f.focus()}else{var g;a:{var h,k;if(a.length==1&&!(k=a[0]).collapsed&&(g=k.getEnclosedNode())&&g.type==CKEDITOR.NODE_ELEMENT){k=k.clone();k.shrink(CKEDITOR.SHRINK_ELEMENT,
true);if((h=k.getEnclosedNode())&&h.type==CKEDITOR.NODE_ELEMENT)g=h;if(g.getAttribute("contenteditable")=="false")break a}g=void 0}if(g)this.fake(g);else{if(p){k=CKEDITOR.dom.walker.whitespaces(true);h=/\ufeff|\u00a0/;b={table:1,tbody:1,tr:1};if(a.length>1){g=a[a.length-1];a[0].setEnd(g.endContainer,g.endOffset)}g=a[0];var a=g.collapsed,l,o,q;if((d=g.getEnclosedNode())&&d.type==CKEDITOR.NODE_ELEMENT&&d.getName()in A&&(!d.is("a")||!d.getText()))try{q=d.$.createControlRange();q.addElement(d.$);q.select();
return}catch(s){}(g.startContainer.type==CKEDITOR.NODE_ELEMENT&&g.startContainer.getName()in b||g.endContainer.type==CKEDITOR.NODE_ELEMENT&&g.endContainer.getName()in b)&&g.shrink(CKEDITOR.NODE_ELEMENT,true);q=g.createBookmark();b=q.startNode;if(!a)f=q.endNode;q=g.document.$.body.createTextRange();q.moveToElementText(b.$);q.moveStart("character",1);if(f){h=g.document.$.body.createTextRange();h.moveToElementText(f.$);q.setEndPoint("EndToEnd",h);q.moveEnd("character",-1)}else{l=b.getNext(k);o=b.hasAscendant("pre");
l=!(l&&l.getText&&l.getText().match(h))&&(o||!b.hasPrevious()||b.getPrevious().is&&b.getPrevious().is("br"));o=g.document.createElement("span");o.setHtml("&#65279;");o.insertBefore(b);l&&g.document.createText("﻿").insertBefore(b)}g.setStartBefore(b);b.remove();if(a){if(l){q.moveStart("character",-1);q.select();g.document.$.selection.clear()}else q.select();g.moveToPosition(o,CKEDITOR.POSITION_BEFORE_START);o.remove()}else{g.setEndBefore(f);f.remove();q.select()}}else{f=this.getNative();if(!f)return;
if(CKEDITOR.env.opera){q=this.document.$.createRange();q.selectNodeContents(this.root.$);f.addRange(q)}this.removeAllRanges();for(q=0;q<a.length;q++){if(q<a.length-1){g=a[q];l=a[q+1];h=g.clone();h.setStart(g.endContainer,g.endOffset);h.setEnd(l.startContainer,l.startOffset);if(!h.collapsed){h.shrink(CKEDITOR.NODE_ELEMENT,true);o=h.getCommonAncestor();h=h.getEnclosedNode();if(o.isReadOnly()||h&&h.isReadOnly()){l.setStart(g.startContainer,g.startOffset);a.splice(q--,1);continue}}}g=a[q];o=this.document.$.createRange();
l=g.startContainer;if(CKEDITOR.env.opera&&g.collapsed&&l.type==CKEDITOR.NODE_ELEMENT){h=l.getChild(g.startOffset-1);k=l.getChild(g.startOffset);if(!h&&!k&&l.is(CKEDITOR.dtd.$removeEmpty)||h&&h.type==CKEDITOR.NODE_ELEMENT||k&&k.type==CKEDITOR.NODE_ELEMENT){g.insertNode(this.document.createText(""));g.collapse(1)}}if(g.collapsed&&CKEDITOR.env.webkit&&c(g)){l=this.root;i(l,false);h=l.getDocument().createText("​");l.setCustomData("cke-fillingChar",h);g.insertNode(h);if((l=h.getNext())&&!h.getPrevious()&&
l.type==CKEDITOR.NODE_ELEMENT&&l.getName()=="br"){i(this.root);g.moveToPosition(l,CKEDITOR.POSITION_BEFORE_START)}else g.moveToPosition(h,CKEDITOR.POSITION_AFTER_END)}o.setStart(g.startContainer.$,g.startOffset);try{o.setEnd(g.endContainer.$,g.endOffset)}catch(v){if(v.toString().indexOf("NS_ERROR_ILLEGAL_VALUE")>=0){g.collapse(1);o.setEnd(g.endContainer.$,g.endOffset)}else throw v;}f.addRange(o)}}this.reset();this.root.fire("selectionchange")}}},fake:function(a){var b=this.root.editor;this.reset();
h(b);var c=this._.cache,d=new CKEDITOR.dom.range(this.root);d.setStartBefore(a);d.setEndAfter(a);c.ranges=new CKEDITOR.dom.rangeList(d);c.selectedElement=c.startElement=a;c.type=CKEDITOR.SELECTION_ELEMENT;c.selectedText=c.nativeSel=null;this.isFake=1;this.rev=y++;b._.fakeSelection=this;this.root.fire("selectionchange")},isHidden:function(){var a=this.getCommonAncestor();a&&a.type==CKEDITOR.NODE_TEXT&&(a=a.getParent());return!(!a||!a.data("cke-hidden-sel"))},createBookmarks:function(a){a=this.getRanges().createBookmarks(a);
this.isFake&&(a.isFake=1);return a},createBookmarks2:function(a){a=this.getRanges().createBookmarks2(a);this.isFake&&(a.isFake=1);return a},selectBookmarks:function(a){for(var b=[],c=0;c<a.length;c++){var d=new CKEDITOR.dom.range(this.root);d.moveToBookmark(a[c]);b.push(d)}a.isFake?this.fake(b[0].getEnclosedNode()):this.selectRanges(b);return this},getCommonAncestor:function(){var a=this.getRanges();return!a.length?null:a[0].startContainer.getCommonAncestor(a[a.length-1].endContainer)},scrollIntoView:function(){this.type!=
CKEDITOR.SELECTION_NONE&&this.getRanges()[0].scrollIntoView()},removeAllRanges:function(){if(this.getType()!=CKEDITOR.SELECTION_NONE){var a=this.getNative();try{a&&a[p?"empty":"removeAllRanges"]()}catch(b){}this.reset()}}}})();"use strict";
CKEDITOR.editor.prototype.attachStyleStateChange=function(a,d){var b=this._.styleStateChangeCallbacks;if(!b){b=this._.styleStateChangeCallbacks=[];this.on("selectionChange",function(a){for(var d=0;d<b.length;d++){var i=b[d],g=i.style.checkActive(a.data.path)?CKEDITOR.TRISTATE_ON:CKEDITOR.TRISTATE_OFF;i.fn.call(this,g)}})}b.push({style:a,fn:d})};CKEDITOR.STYLE_BLOCK=1;CKEDITOR.STYLE_INLINE=2;CKEDITOR.STYLE_OBJECT=3;
(function(){function a(a,b){for(var c,d;a=a.getParent();){if(a.equals(b))break;if(a.getAttribute("data-nostyle"))c=a;else if(!d){var e=a.getAttribute("contentEditable");e=="false"?c=a:e=="true"&&(d=1)}}return c}function d(b){var e=b.document;if(b.collapsed){e=y(this,e);b.insertNode(e);b.moveToPosition(e,CKEDITOR.POSITION_BEFORE_END)}else{var f=this.element,g=this._.definition,i,h=g.ignoreReadonly,j=h||g.includeReadonly;j==void 0&&(j=b.root.getCustomData("cke_includeReadonly"));var k=CKEDITOR.dtd[f];
if(!k){i=true;k=CKEDITOR.dtd.span}b.enlarge(CKEDITOR.ENLARGE_INLINE,1);b.trim();var l=b.createBookmark(),m=l.startNode,n=l.endNode,o=m,q;if(!h){var p=b.getCommonAncestor(),h=a(m,p),p=a(n,p);h&&(o=h.getNextSourceNode(true));p&&(n=p)}for(o.getPosition(n)==CKEDITOR.POSITION_FOLLOWING&&(o=0);o;){h=false;if(o.equals(n)){o=null;h=true}else{var s=o.type==CKEDITOR.NODE_ELEMENT?o.getName():null,p=s&&o.getAttribute("contentEditable")=="false",r=s&&o.getAttribute("data-nostyle");if(s&&o.data("cke-bookmark")){o=
o.getNextSourceNode(true);continue}if(p&&j&&CKEDITOR.dtd.$block[s])for(var t=o,w=c(t),A=void 0,B=w.length,G=0,t=B&&new CKEDITOR.dom.range(t.getDocument());G<B;++G){var A=w[G],J=CKEDITOR.filter.instances[A.data("cke-filter")];if(J?J.check(this):1){t.selectNodeContents(A);d.call(this,t)}}w=s?!k[s]||r?0:p&&!j?0:(o.getPosition(n)|N)==N&&(!g.childRule||g.childRule(o)):1;if(w)if((w=o.getParent())&&((w.getDtd()||CKEDITOR.dtd.span)[f]||i)&&(!g.parentRule||g.parentRule(w))){if(!q&&(!s||!CKEDITOR.dtd.$removeEmpty[s]||
(o.getPosition(n)|N)==N)){q=b.clone();q.setStartBefore(o)}s=o.type;if(s==CKEDITOR.NODE_TEXT||p||s==CKEDITOR.NODE_ELEMENT&&!o.getChildCount()){for(var s=o,W;(h=!s.getNext(I))&&(W=s.getParent(),k[W.getName()])&&(W.getPosition(m)|H)==H&&(!g.childRule||g.childRule(W));)s=W;q.setEndAfter(s)}}else h=true;else h=true;o=o.getNextSourceNode(r||p)}if(h&&q&&!q.collapsed){for(var h=y(this,e),p=h.hasAttributes(),r=q.getCommonAncestor(),s={},w={},A={},B={},S,P,Y;h&&r;){if(r.getName()==f){for(S in g.attributes)if(!B[S]&&
(Y=r.getAttribute(P)))h.getAttribute(S)==Y?w[S]=1:B[S]=1;for(P in g.styles)if(!A[P]&&(Y=r.getStyle(P)))h.getStyle(P)==Y?s[P]=1:A[P]=1}r=r.getParent()}for(S in w)h.removeAttribute(S);for(P in s)h.removeStyle(P);p&&!h.hasAttributes()&&(h=null);if(h){q.extractContents().appendTo(h);q.insertNode(h);u.call(this,h);h.mergeSiblings();CKEDITOR.env.ie||h.$.normalize()}else{h=new CKEDITOR.dom.element("span");q.extractContents().appendTo(h);q.insertNode(h);u.call(this,h);h.remove(true)}q=null}}b.moveToBookmark(l);
b.shrink(CKEDITOR.SHRINK_TEXT);b.shrink(CKEDITOR.NODE_ELEMENT,true)}}function b(a){function b(){for(var a=new CKEDITOR.dom.elementPath(d.getParent()),c=new CKEDITOR.dom.elementPath(l.getParent()),e=null,f=null,g=0;g<a.elements.length;g++){var h=a.elements[g];if(h==a.block||h==a.blockLimit)break;m.checkElementRemovable(h)&&(e=h)}for(g=0;g<c.elements.length;g++){h=c.elements[g];if(h==c.block||h==c.blockLimit)break;m.checkElementRemovable(h)&&(f=h)}f&&l.breakParent(f);e&&d.breakParent(e)}a.enlarge(CKEDITOR.ENLARGE_INLINE,
1);var c=a.createBookmark(),d=c.startNode;if(a.collapsed){for(var e=new CKEDITOR.dom.elementPath(d.getParent(),a.root),g,i=0,h;i<e.elements.length&&(h=e.elements[i]);i++){if(h==e.block||h==e.blockLimit)break;if(this.checkElementRemovable(h)){var k;if(a.collapsed&&(a.checkBoundaryOfElement(h,CKEDITOR.END)||(k=a.checkBoundaryOfElement(h,CKEDITOR.START)))){g=h;g.match=k?"start":"end"}else{h.mergeSiblings();h.is(this.element)?q.call(this,h):f(h,j(this)[h.getName()])}}}if(g){h=d;for(i=0;;i++){k=e.elements[i];
if(k.equals(g))break;else if(k.match)continue;else k=k.clone();k.append(h);h=k}h[g.match=="start"?"insertBefore":"insertAfter"](g)}}else{var l=c.endNode,m=this;b();for(e=d;!e.equals(l);){g=e.getNextSourceNode();if(e.type==CKEDITOR.NODE_ELEMENT&&this.checkElementRemovable(e)){e.getName()==this.element?q.call(this,e):f(e,j(this)[e.getName()]);if(g.type==CKEDITOR.NODE_ELEMENT&&g.contains(d)){b();g=d.getNext()}}e=g}}a.moveToBookmark(c);a.shrink(CKEDITOR.NODE_ELEMENT,true)}function c(a){var b=[];a.forEach(function(a){if(a.getAttribute("contenteditable")==
"true"){b.push(a);return false}},CKEDITOR.NODE_ELEMENT,true);return b}function e(a){var b=a.getEnclosedNode()||a.getCommonAncestor(false,true);(a=(new CKEDITOR.dom.elementPath(b,a.root)).contains(this.element,1))&&!a.isReadOnly()&&A(a,this)}function i(a){var b=a.getCommonAncestor(true,true);if(a=(new CKEDITOR.dom.elementPath(b,a.root)).contains(this.element,1)){var b=this._.definition,c=b.attributes;if(c)for(var d in c)a.removeAttribute(d,c[d]);if(b.styles)for(var e in b.styles)b.styles.hasOwnProperty(e)&&
a.removeStyle(e)}}function g(a){var b=a.createBookmark(true),c=a.createIterator();c.enforceRealBlocks=true;if(this._.enterMode)c.enlargeBr=this._.enterMode!=CKEDITOR.ENTER_BR;for(var d,e=a.document,f;d=c.getNextParagraph();)if(!d.isReadOnly()&&(c.activeFilter?c.activeFilter.check(this):1)){f=y(this,e,d);h(d,f)}a.moveToBookmark(b)}function l(a){var b=a.createBookmark(1),c=a.createIterator();c.enforceRealBlocks=true;c.enlargeBr=this._.enterMode!=CKEDITOR.ENTER_BR;for(var d,e;d=c.getNextParagraph();)if(this.checkElementRemovable(d))if(d.is("pre")){(e=
this._.enterMode==CKEDITOR.ENTER_BR?null:a.document.createElement(this._.enterMode==CKEDITOR.ENTER_P?"p":"div"))&&d.copyAttributes(e);h(d,e)}else q.call(this,d);a.moveToBookmark(b)}function h(a,b){var c=!b;if(c){b=a.getDocument().createElement("div");a.copyAttributes(b)}var d=b&&b.is("pre"),e=a.is("pre"),f=!d&&e;if(d&&!e){e=b;(f=a.getBogus())&&f.remove();f=a.getHtml();f=o(f,/(?:^[ \t\n\r]+)|(?:[ \t\n\r]+$)/g,"");f=f.replace(/[ \t\r\n]*(<br[^>]*>)[ \t\r\n]*/gi,"$1");f=f.replace(/([ \t\n\r]+|&nbsp;)/g,
" ");f=f.replace(/<br\b[^>]*>/gi,"\n");if(CKEDITOR.env.ie){var g=a.getDocument().createElement("div");g.append(e);e.$.outerHTML="<pre>"+f+"</pre>";e.copyAttributes(g.getFirst());e=g.getFirst().remove()}else e.setHtml(f);b=e}else f?b=s(c?[a.getHtml()]:k(a),b):a.moveChildren(b);b.replace(a);if(d){var c=b,h;if((h=c.getPrevious(B))&&h.type==CKEDITOR.NODE_ELEMENT&&h.is("pre")){d=o(h.getHtml(),/\n$/,"")+"\n\n"+o(c.getHtml(),/^\n/,"");CKEDITOR.env.ie?c.$.outerHTML="<pre>"+d+"</pre>":c.setHtml(d);h.remove()}}else c&&
p(b)}function k(a){a.getName();var b=[];o(a.getOuterHtml(),/(\S\s*)\n(?:\s|(<span[^>]+data-cke-bookmark.*?\/span>))*\n(?!$)/gi,function(a,b,c){return b+"</pre>"+c+"<pre>"}).replace(/<pre\b.*?>([\s\S]*?)<\/pre>/gi,function(a,c){b.push(c)});return b}function o(a,b,c){var d="",e="",a=a.replace(/(^<span[^>]+data-cke-bookmark.*?\/span>)|(<span[^>]+data-cke-bookmark.*?\/span>$)/gi,function(a,b,c){b&&(d=b);c&&(e=c);return""});return d+a.replace(b,c)+e}function s(a,b){var c;a.length>1&&(c=new CKEDITOR.dom.documentFragment(b.getDocument()));
for(var d=0;d<a.length;d++){var e=a[d],e=e.replace(/(\r\n|\r)/g,"\n"),e=o(e,/^[ \t]*\n/,""),e=o(e,/\n$/,""),e=o(e,/^[ \t]+|[ \t]+$/g,function(a,b){return a.length==1?"&nbsp;":b?" "+CKEDITOR.tools.repeat("&nbsp;",a.length-1):CKEDITOR.tools.repeat("&nbsp;",a.length-1)+" "}),e=e.replace(/\n/g,"<br>"),e=e.replace(/[ \t]{2,}/g,function(a){return CKEDITOR.tools.repeat("&nbsp;",a.length-1)+" "});if(c){var f=b.clone();f.setHtml(e);c.append(f)}else b.setHtml(e)}return c||b}function q(a,b){var c=this._.definition,
d=c.attributes,c=c.styles,e=j(this)[a.getName()],g=CKEDITOR.tools.isEmpty(d)&&CKEDITOR.tools.isEmpty(c),h;for(h in d)if(!((h=="class"||this._.definition.fullMatch)&&a.getAttribute(h)!=n(h,d[h]))&&!(b&&h.slice(0,5)=="data-")){g=a.hasAttribute(h);a.removeAttribute(h)}for(var i in c)if(!(this._.definition.fullMatch&&a.getStyle(i)!=n(i,c[i],true))){g=g||!!a.getStyle(i);a.removeStyle(i)}f(a,e,J[a.getName()]);g&&(this._.definition.alwaysRemoveElement?p(a,1):!CKEDITOR.dtd.$block[a.getName()]||this._.enterMode==
CKEDITOR.ENTER_BR&&!a.hasAttributes()?p(a):a.renameNode(this._.enterMode==CKEDITOR.ENTER_P?"p":"div"))}function u(a){for(var b=j(this),c=a.getElementsByTag(this.element),d,e=c.count();--e>=0;){d=c.getItem(e);d.isReadOnly()||q.call(this,d,true)}for(var g in b)if(g!=this.element){c=a.getElementsByTag(g);for(e=c.count()-1;e>=0;e--){d=c.getItem(e);d.isReadOnly()||f(d,b[g])}}}function f(a,b,c){if(b=b&&b.attributes)for(var d=0;d<b.length;d++){var e=b[d][0],f;if(f=a.getAttribute(e)){var g=b[d][1];(g===null||
g.test&&g.test(f)||typeof g=="string"&&f==g)&&a.removeAttribute(e)}}c||p(a)}function p(a,b){if(!a.hasAttributes()||b)if(CKEDITOR.dtd.$block[a.getName()]){var c=a.getPrevious(B),d=a.getNext(B);c&&(c.type==CKEDITOR.NODE_TEXT||!c.isBlockBoundary({br:1}))&&a.append("br",1);d&&(d.type==CKEDITOR.NODE_TEXT||!d.isBlockBoundary({br:1}))&&a.append("br");a.remove(true)}else{c=a.getFirst();d=a.getLast();a.remove(true);if(c){c.type==CKEDITOR.NODE_ELEMENT&&c.mergeSiblings();d&&(!c.equals(d)&&d.type==CKEDITOR.NODE_ELEMENT)&&
d.mergeSiblings()}}}function y(a,b,c){var d;d=a.element;d=="*"&&(d="span");d=new CKEDITOR.dom.element(d,b);c&&c.copyAttributes(d);d=A(d,a);b.getCustomData("doc_processing_style")&&d.hasAttribute("id")?d.removeAttribute("id"):b.setCustomData("doc_processing_style",1);return d}function A(a,b){var c=b._.definition,d=c.attributes,c=CKEDITOR.style.getStyleText(c);if(d)for(var e in d)a.setAttribute(e,d[e]);c&&a.setAttribute("style",c);return a}function m(a,b){for(var c in a)a[c]=a[c].replace(G,function(a,
c){return b[c]})}function j(a){if(a._.overrides)return a._.overrides;var b=a._.overrides={},c=a._.definition.overrides;if(c){CKEDITOR.tools.isArray(c)||(c=[c]);for(var d=0;d<c.length;d++){var e=c[d],f,g;if(typeof e=="string")f=e.toLowerCase();else{f=e.element?e.element.toLowerCase():a.element;g=e.attributes}e=b[f]||(b[f]={});if(g){var e=e.attributes=e.attributes||[],h;for(h in g)e.push([h.toLowerCase(),g[h]])}}}return b}function n(a,b,c){var d=new CKEDITOR.dom.element("span");d[c?"setStyle":"setAttribute"](a,
b);return d[c?"getStyle":"getAttribute"](a)}function r(a,b){for(var c=a.document,d=a.getRanges(),e=b?this.removeFromRange:this.applyToRange,f,g=d.createIterator();f=g.getNextRange();)e.call(this,f);a.selectRanges(d);c.removeCustomData("doc_processing_style")}var J={address:1,div:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,p:1,pre:1,section:1,header:1,footer:1,nav:1,article:1,aside:1,figure:1,dialog:1,hgroup:1,time:1,meter:1,menu:1,command:1,keygen:1,output:1,progress:1,details:1,datagrid:1,datalist:1},t={a:1,
embed:1,hr:1,img:1,li:1,object:1,ol:1,table:1,td:1,tr:1,th:1,ul:1,dl:1,dt:1,dd:1,form:1,audio:1,video:1},w=/\s*(?:;\s*|$)/,G=/#\((.+?)\)/g,I=CKEDITOR.dom.walker.bookmark(0,1),B=CKEDITOR.dom.walker.whitespaces(1);CKEDITOR.style=function(a,b){var c=a.attributes;if(c&&c.style){a.styles=CKEDITOR.tools.extend({},a.styles,CKEDITOR.tools.parseCssText(c.style));delete c.style}if(b){a=CKEDITOR.tools.clone(a);m(a.attributes,b);m(a.styles,b)}c=this.element=a.element?typeof a.element=="string"?a.element.toLowerCase():
a.element:"*";this.type=a.type||(J[c]?CKEDITOR.STYLE_BLOCK:t[c]?CKEDITOR.STYLE_OBJECT:CKEDITOR.STYLE_INLINE);if(typeof this.element=="object")this.type=CKEDITOR.STYLE_OBJECT;this._={definition:a}};CKEDITOR.editor.prototype.applyStyle=function(a){a.checkApplicable(this.elementPath())&&r.call(a,this.getSelection())};CKEDITOR.editor.prototype.removeStyle=function(a){a.checkApplicable(this.elementPath())&&r.call(a,this.getSelection(),1)};CKEDITOR.style.prototype={apply:function(a){r.call(this,a.getSelection())},
remove:function(a){r.call(this,a.getSelection(),1)},applyToRange:function(a){return(this.applyToRange=this.type==CKEDITOR.STYLE_INLINE?d:this.type==CKEDITOR.STYLE_BLOCK?g:this.type==CKEDITOR.STYLE_OBJECT?e:null).call(this,a)},removeFromRange:function(a){return(this.removeFromRange=this.type==CKEDITOR.STYLE_INLINE?b:this.type==CKEDITOR.STYLE_BLOCK?l:this.type==CKEDITOR.STYLE_OBJECT?i:null).call(this,a)},applyToObject:function(a){A(a,this)},checkActive:function(a){switch(this.type){case CKEDITOR.STYLE_BLOCK:return this.checkElementRemovable(a.block||
a.blockLimit,true);case CKEDITOR.STYLE_OBJECT:case CKEDITOR.STYLE_INLINE:for(var b=a.elements,c=0,d;c<b.length;c++){d=b[c];if(!(this.type==CKEDITOR.STYLE_INLINE&&(d==a.block||d==a.blockLimit))){if(this.type==CKEDITOR.STYLE_OBJECT){var e=d.getName();if(!(typeof this.element=="string"?e==this.element:e in this.element))continue}if(this.checkElementRemovable(d,true))return true}}}return false},checkApplicable:function(a,b){if(b&&!b.check(this))return false;switch(this.type){case CKEDITOR.STYLE_OBJECT:return!!a.contains(this.element);
case CKEDITOR.STYLE_BLOCK:return!!a.blockLimit.getDtd()[this.element]}return true},checkElementMatch:function(a,b){var c=this._.definition;if(!a||!c.ignoreReadonly&&a.isReadOnly())return false;var d=a.getName();if(typeof this.element=="string"?d==this.element:d in this.element){if(!b&&!a.hasAttributes())return true;if(d=c._AC)c=d;else{var d={},e=0,f=c.attributes;if(f)for(var g in f){e++;d[g]=f[g]}if(g=CKEDITOR.style.getStyleText(c)){d.style||e++;d.style=g}d._length=e;c=c._AC=d}if(c._length){for(var h in c)if(h!=
"_length"){e=a.getAttribute(h)||"";if(h=="style")a:{d=c[h];typeof d=="string"&&(d=CKEDITOR.tools.parseCssText(d));typeof e=="string"&&(e=CKEDITOR.tools.parseCssText(e,true));g=void 0;for(g in d)if(!(g in e&&(e[g]==d[g]||d[g]=="inherit"||e[g]=="inherit"))){d=false;break a}d=true}else d=c[h]==e;if(d){if(!b)return true}else if(b)return false}if(b)return true}else return true}return false},checkElementRemovable:function(a,b){if(this.checkElementMatch(a,b))return true;var c=j(this)[a.getName()];if(c){var d;
if(!(c=c.attributes))return true;for(var e=0;e<c.length;e++){d=c[e][0];if(d=a.getAttribute(d)){var f=c[e][1];if(f===null||typeof f=="string"&&d==f||f.test(d))return true}}}return false},buildPreview:function(a){var b=this._.definition,c=[],d=b.element;d=="bdo"&&(d="span");var c=["<",d],e=b.attributes;if(e)for(var f in e)c.push(" ",f,'="',e[f],'"');(e=CKEDITOR.style.getStyleText(b))&&c.push(' style="',e,'"');c.push(">",a||b.name,"</",d,">");return c.join("")},getDefinition:function(){return this._.definition}};
CKEDITOR.style.getStyleText=function(a){var b=a._ST;if(b)return b;var b=a.styles,c=a.attributes&&a.attributes.style||"",d="";c.length&&(c=c.replace(w,";"));for(var e in b){var f=b[e],g=(e+":"+f).replace(w,";");f=="inherit"?d=d+g:c=c+g}c.length&&(c=CKEDITOR.tools.normalizeCssText(c,true));return a._ST=c+d};var N=CKEDITOR.POSITION_PRECEDING|CKEDITOR.POSITION_IDENTICAL|CKEDITOR.POSITION_IS_CONTAINED,H=CKEDITOR.POSITION_FOLLOWING|CKEDITOR.POSITION_IDENTICAL|CKEDITOR.POSITION_IS_CONTAINED})();
CKEDITOR.styleCommand=function(a,d){this.requiredContent=this.allowedContent=this.style=a;CKEDITOR.tools.extend(this,d,true)};CKEDITOR.styleCommand.prototype.exec=function(a){a.focus();this.state==CKEDITOR.TRISTATE_OFF?a.applyStyle(this.style):this.state==CKEDITOR.TRISTATE_ON&&a.removeStyle(this.style)};CKEDITOR.stylesSet=new CKEDITOR.resourceManager("","stylesSet");CKEDITOR.addStylesSet=CKEDITOR.tools.bind(CKEDITOR.stylesSet.add,CKEDITOR.stylesSet);
CKEDITOR.loadStylesSet=function(a,d,b){CKEDITOR.stylesSet.addExternal(a,d,"");CKEDITOR.stylesSet.load(a,b)};
CKEDITOR.editor.prototype.getStylesSet=function(a){if(this._.stylesDefinitions)a(this._.stylesDefinitions);else{var d=this,b=d.config.stylesCombo_stylesSet||d.config.stylesSet;if(b===false)a(null);else if(b instanceof Array){d._.stylesDefinitions=b;a(b)}else{b||(b="default");var b=b.split(":"),c=b[0];CKEDITOR.stylesSet.addExternal(c,b[1]?b.slice(1).join(":"):CKEDITOR.getUrl("styles.js"),"");CKEDITOR.stylesSet.load(c,function(b){d._.stylesDefinitions=b[c];a(d._.stylesDefinitions)})}}};
CKEDITOR.dom.comment=function(a,d){typeof a=="string"&&(a=(d?d.$:document).createComment(a));CKEDITOR.dom.domObject.call(this,a)};CKEDITOR.dom.comment.prototype=new CKEDITOR.dom.node;CKEDITOR.tools.extend(CKEDITOR.dom.comment.prototype,{type:CKEDITOR.NODE_COMMENT,getOuterHtml:function(){return"<\!--"+this.$.nodeValue+"--\>"}});"use strict";
(function(){var a={},d={},b;for(b in CKEDITOR.dtd.$blockLimit)b in CKEDITOR.dtd.$list||(a[b]=1);for(b in CKEDITOR.dtd.$block)b in CKEDITOR.dtd.$blockLimit||b in CKEDITOR.dtd.$empty||(d[b]=1);CKEDITOR.dom.elementPath=function(b,e){var i=null,g=null,l=[],h=b,k,e=e||b.getDocument().getBody();do if(h.type==CKEDITOR.NODE_ELEMENT){l.push(h);if(!this.lastElement){this.lastElement=h;if(h.is(CKEDITOR.dtd.$object)||h.getAttribute("contenteditable")=="false")continue}if(h.equals(e))break;if(!g){k=h.getName();
h.getAttribute("contenteditable")=="true"?g=h:!i&&d[k]&&(i=h);if(a[k]){var o;if(o=!i){if(k=k=="div"){a:{k=h.getChildren();o=0;for(var s=k.count();o<s;o++){var q=k.getItem(o);if(q.type==CKEDITOR.NODE_ELEMENT&&CKEDITOR.dtd.$block[q.getName()]){k=true;break a}}k=false}k=!k}o=k}o?i=h:g=h}}}while(h=h.getParent());g||(g=e);this.block=i;this.blockLimit=g;this.root=e;this.elements=l}})();
CKEDITOR.dom.elementPath.prototype={compare:function(a){var d=this.elements,a=a&&a.elements;if(!a||d.length!=a.length)return false;for(var b=0;b<d.length;b++)if(!d[b].equals(a[b]))return false;return true},contains:function(a,d,b){var c;typeof a=="string"&&(c=function(b){return b.getName()==a});a instanceof CKEDITOR.dom.element?c=function(b){return b.equals(a)}:CKEDITOR.tools.isArray(a)?c=function(b){return CKEDITOR.tools.indexOf(a,b.getName())>-1}:typeof a=="function"?c=a:typeof a=="object"&&(c=
function(b){return b.getName()in a});var e=this.elements,i=e.length;d&&i--;if(b){e=Array.prototype.slice.call(e,0);e.reverse()}for(d=0;d<i;d++)if(c(e[d]))return e[d];return null},isContextFor:function(a){var d;if(a in CKEDITOR.dtd.$block){d=this.contains(CKEDITOR.dtd.$intermediate)||this.root.equals(this.block)&&this.block||this.blockLimit;return!!d.getDtd()[a]}return true},direction:function(){return(this.block||this.blockLimit||this.root).getDirection(1)}};
CKEDITOR.dom.text=function(a,d){typeof a=="string"&&(a=(d?d.$:document).createTextNode(a));this.$=a};CKEDITOR.dom.text.prototype=new CKEDITOR.dom.node;
CKEDITOR.tools.extend(CKEDITOR.dom.text.prototype,{type:CKEDITOR.NODE_TEXT,getLength:function(){return this.$.nodeValue.length},getText:function(){return this.$.nodeValue},setText:function(a){this.$.nodeValue=a},split:function(a){var d=this.$.parentNode,b=d.childNodes.length,c=this.getLength(),e=this.getDocument(),i=new CKEDITOR.dom.text(this.$.splitText(a),e);if(d.childNodes.length==b)if(a>=c){i=e.createText("");i.insertAfter(this)}else{a=e.createText("");a.insertAfter(i);a.remove()}return i},substring:function(a,
d){return typeof d!="number"?this.$.nodeValue.substr(a):this.$.nodeValue.substring(a,d)}});
(function(){function a(a,c,d){var i=a.serializable,g=c[d?"endContainer":"startContainer"],l=d?"endOffset":"startOffset",h=i?c.document.getById(a.startNode):a.startNode,a=i?c.document.getById(a.endNode):a.endNode;if(g.equals(h.getPrevious())){c.startOffset=c.startOffset-g.getLength()-a.getPrevious().getLength();g=a.getNext()}else if(g.equals(a.getPrevious())){c.startOffset=c.startOffset-g.getLength();g=a.getNext()}g.equals(h.getParent())&&c[l]++;g.equals(a.getParent())&&c[l]++;c[d?"endContainer":"startContainer"]=
g;return c}CKEDITOR.dom.rangeList=function(a){if(a instanceof CKEDITOR.dom.rangeList)return a;a?a instanceof CKEDITOR.dom.range&&(a=[a]):a=[];return CKEDITOR.tools.extend(a,d)};var d={createIterator:function(){var a=this,c=CKEDITOR.dom.walker.bookmark(),d=[],i;return{getNextRange:function(g){i=i==void 0?0:i+1;var l=a[i];if(l&&a.length>1){if(!i)for(var h=a.length-1;h>=0;h--)d.unshift(a[h].createBookmark(true));if(g)for(var k=0;a[i+k+1];){for(var o=l.document,g=0,h=o.getById(d[k].endNode),o=o.getById(d[k+
1].startNode);;){h=h.getNextSourceNode(false);if(o.equals(h))g=1;else if(c(h)||h.type==CKEDITOR.NODE_ELEMENT&&h.isBlockBoundary())continue;break}if(!g)break;k++}for(l.moveToBookmark(d.shift());k--;){h=a[++i];h.moveToBookmark(d.shift());l.setEnd(h.endContainer,h.endOffset)}}return l}}},createBookmarks:function(b){for(var c=[],d,i=0;i<this.length;i++){c.push(d=this[i].createBookmark(b,true));for(var g=i+1;g<this.length;g++){this[g]=a(d,this[g]);this[g]=a(d,this[g],true)}}return c},createBookmarks2:function(a){for(var c=
[],d=0;d<this.length;d++)c.push(this[d].createBookmark2(a));return c},moveToBookmarks:function(a){for(var c=0;c<this.length;c++)this[c].moveToBookmark(a[c])}}})();
(function(){function a(){return CKEDITOR.getUrl(CKEDITOR.skinName.split(",")[1]||"skins/"+CKEDITOR.skinName.split(",")[0]+"/")}function d(b){var c=CKEDITOR.skin["ua_"+b],d=CKEDITOR.env;if(c)for(var c=c.split(",").sort(function(a,b){return a>b?-1:1}),e=0,g;e<c.length;e++){g=c[e];if(d.ie&&(g.replace(/^ie/,"")==d.version||d.quirks&&g=="iequirks"))g="ie";if(d[g]){b=b+("_"+c[e]);break}}return CKEDITOR.getUrl(a()+b+".css")}function b(a,b){if(!i[a]){CKEDITOR.document.appendStyleSheet(d(a));i[a]=1}b&&b()}
function c(a){var b=a.getById(g);if(!b){b=a.getHead().append("style");b.setAttribute("id",g);b.setAttribute("type","text/css")}return b}function e(a,b,c){var d,e,f;if(CKEDITOR.env.webkit){b=b.split("}").slice(0,-1);for(e=0;e<b.length;e++)b[e]=b[e].split("{")}for(var g=0;g<a.length;g++)if(CKEDITOR.env.webkit)for(e=0;e<b.length;e++){f=b[e][1];for(d=0;d<c.length;d++)f=f.replace(c[d][0],c[d][1]);a[g].$.sheet.addRule(b[e][0],f)}else{f=b;for(d=0;d<c.length;d++)f=f.replace(c[d][0],c[d][1]);CKEDITOR.env.ie&&
CKEDITOR.env.version<11?a[g].$.styleSheet.cssText=a[g].$.styleSheet.cssText+f:a[g].$.innerHTML=a[g].$.innerHTML+f}}var i={};CKEDITOR.skin={path:a,loadPart:function(c,d){CKEDITOR.skin.name!=CKEDITOR.skinName.split(",")[0]?CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(a()+"skin.js"),function(){b(c,d)}):b(c,d)},getPath:function(a){return CKEDITOR.getUrl(d(a))},icons:{},addIcon:function(a,b,c,d){a=a.toLowerCase();this.icons[a]||(this.icons[a]={path:b,offset:c||0,bgsize:d||"16px"})},getIconStyle:function(a,
b,c,d,e){var f;if(a){a=a.toLowerCase();b&&(f=this.icons[a+"-rtl"]);f||(f=this.icons[a])}a=c||f&&f.path||"";d=d||f&&f.offset;e=e||f&&f.bgsize||"16px";return a&&"background-image:url("+CKEDITOR.getUrl(a)+");background-position:0 "+d+"px;background-size:"+e+";"}};CKEDITOR.tools.extend(CKEDITOR.editor.prototype,{getUiColor:function(){return this.uiColor},setUiColor:function(a){var b=c(CKEDITOR.document);return(this.setUiColor=function(a){var c=CKEDITOR.skin.chameleon,d=[[h,a]];this.uiColor=a;e([b],c(this,
"editor"),d);e(l,c(this,"panel"),d)}).call(this,a)}});var g="cke_ui_color",l=[],h=/\$color/g;CKEDITOR.on("instanceLoaded",function(a){if(!CKEDITOR.env.ie||!CKEDITOR.env.quirks){var b=a.editor,a=function(a){a=(a.data[0]||a.data).element.getElementsByTag("iframe").getItem(0).getFrameDocument();if(!a.getById("cke_ui_color")){a=c(a);l.push(a);var d=b.getUiColor();d&&e([a],CKEDITOR.skin.chameleon(b,"panel"),[[h,d]])}};b.on("panelShow",a);b.on("menuShow",a);b.config.uiColor&&b.setUiColor(b.config.uiColor)}})})();
(function(){if(CKEDITOR.env.webkit)CKEDITOR.env.hc=false;else{var a=CKEDITOR.dom.element.createFromHtml('<div style="width:0;height:0;position:absolute;left:-10000px;border:1px solid;border-color:red blue"></div>',CKEDITOR.document);a.appendTo(CKEDITOR.document.getHead());try{var d=a.getComputedStyle("border-top-color"),b=a.getComputedStyle("border-right-color");CKEDITOR.env.hc=!!(d&&d==b)}catch(c){CKEDITOR.env.hc=false}a.remove()}if(CKEDITOR.env.hc)CKEDITOR.env.cssClass=CKEDITOR.env.cssClass+" cke_hc";
CKEDITOR.document.appendStyleText(".cke{visibility:hidden;}");CKEDITOR.status="loaded";CKEDITOR.fireOnce("loaded");if(a=CKEDITOR._.pending){delete CKEDITOR._.pending;for(d=0;d<a.length;d++){CKEDITOR.editor.prototype.constructor.apply(a[d][0],a[d][1]);CKEDITOR.add(a[d][0])}}})();
CKEDITOR.skin.name="moono";CKEDITOR.skin.ua_editor="ie,iequirks,ie7,ie8,gecko";CKEDITOR.skin.ua_dialog="ie,iequirks,ie7,ie8,opera";
CKEDITOR.skin.chameleon=function(){var b=function(){return function(b,e){for(var a=b.match(/[^#]./g),c=0;3>c;c++){var f=a,h=c,d;d=parseInt(a[c],16);d=("0"+(0>e?0|d*(1+e):0|d+(255-d)*e).toString(16)).slice(-2);f[h]=d}return"#"+a.join("")}}(),c=function(){var b=new CKEDITOR.template("background:#{to};background-image:-webkit-gradient(linear,lefttop,leftbottom,from({from}),to({to}));background-image:-moz-linear-gradient(top,{from},{to});background-image:-webkit-linear-gradient(top,{from},{to});background-image:-o-linear-gradient(top,{from},{to});background-image:-ms-linear-gradient(top,{from},{to});background-image:linear-gradient(top,{from},{to});filter:progid:DXImageTransform.Microsoft.gradient(gradientType=0,startColorstr='{from}',endColorstr='{to}');");return function(c,
a){return b.output({from:c,to:a})}}(),f={editor:new CKEDITOR.template("{id}.cke_chrome [border-color:{defaultBorder};] {id} .cke_top [ {defaultGradient}border-bottom-color:{defaultBorder};] {id} .cke_bottom [{defaultGradient}border-top-color:{defaultBorder};] {id} .cke_resizer [border-right-color:{ckeResizer}] {id} .cke_dialog_title [{defaultGradient}border-bottom-color:{defaultBorder};] {id} .cke_dialog_footer [{defaultGradient}outline-color:{defaultBorder};border-top-color:{defaultBorder};] {id} .cke_dialog_tab [{lightGradient}border-color:{defaultBorder};] {id} .cke_dialog_tab:hover [{mediumGradient}] {id} .cke_dialog_contents [border-top-color:{defaultBorder};] {id} .cke_dialog_tab_selected, {id} .cke_dialog_tab_selected:hover [background:{dialogTabSelected};border-bottom-color:{dialogTabSelectedBorder};] {id} .cke_dialog_body [background:{dialogBody};border-color:{defaultBorder};] {id} .cke_toolgroup [{lightGradient}border-color:{defaultBorder};] {id} a.cke_button_off:hover, {id} a.cke_button_off:focus, {id} a.cke_button_off:active [{mediumGradient}] {id} .cke_button_on [{ckeButtonOn}] {id} .cke_toolbar_separator [background-color: {ckeToolbarSeparator};] {id} .cke_combo_button [border-color:{defaultBorder};{lightGradient}] {id} a.cke_combo_button:hover, {id} a.cke_combo_button:focus, {id} .cke_combo_on a.cke_combo_button [border-color:{defaultBorder};{mediumGradient}] {id} .cke_path_item [color:{elementsPathColor};] {id} a.cke_path_item:hover, {id} a.cke_path_item:focus, {id} a.cke_path_item:active [background-color:{elementsPathBg};] {id}.cke_panel [border-color:{defaultBorder};] "),
panel:new CKEDITOR.template(".cke_panel_grouptitle [{lightGradient}border-color:{defaultBorder};] .cke_menubutton_icon [background-color:{menubuttonIcon};] .cke_menubutton:hover .cke_menubutton_icon, .cke_menubutton:focus .cke_menubutton_icon, .cke_menubutton:active .cke_menubutton_icon [background-color:{menubuttonIconHover};] .cke_menuseparator [background-color:{menubuttonIcon};] a:hover.cke_colorbox, a:focus.cke_colorbox, a:active.cke_colorbox [border-color:{defaultBorder};] a:hover.cke_colorauto, a:hover.cke_colormore, a:focus.cke_colorauto, a:focus.cke_colormore, a:active.cke_colorauto, a:active.cke_colormore [background-color:{ckeColorauto};border-color:{defaultBorder};] ")};
return function(g,e){var a=g.uiColor,a={id:"."+g.id,defaultBorder:b(a,-0.1),defaultGradient:c(b(a,0.9),a),lightGradient:c(b(a,1),b(a,0.7)),mediumGradient:c(b(a,0.8),b(a,0.5)),ckeButtonOn:c(b(a,0.6),b(a,0.7)),ckeResizer:b(a,-0.4),ckeToolbarSeparator:b(a,0.5),ckeColorauto:b(a,0.8),dialogBody:b(a,0.7),dialogTabSelected:c("#FFFFFF","#FFFFFF"),dialogTabSelectedBorder:"#FFF",elementsPathColor:b(a,-0.6),elementsPathBg:a,menubuttonIcon:b(a,0.5),menubuttonIconHover:b(a,0.3)};return f[e].output(a).replace(/\[/g,
"{").replace(/\]/g,"}")}}();CKEDITOR.plugins.add("dialogui",{onLoad:function(){var i=function(b){this._||(this._={});this._["default"]=this._.initValue=b["default"]||"";this._.required=b.required||!1;for(var a=[this._],d=1;d<arguments.length;d++)a.push(arguments[d]);a.push(!0);CKEDITOR.tools.extend.apply(CKEDITOR.tools,a);return this._},r={build:function(b,a,d){return new CKEDITOR.ui.dialog.textInput(b,a,d)}},l={build:function(b,a,d){return new CKEDITOR.ui.dialog[a.type](b,a,d)}},n={isChanged:function(){return this.getValue()!=
this.getInitValue()},reset:function(b){this.setValue(this.getInitValue(),b)},setInitValue:function(){this._.initValue=this.getValue()},resetInitValue:function(){this._.initValue=this._["default"]},getInitValue:function(){return this._.initValue}},o=CKEDITOR.tools.extend({},CKEDITOR.ui.dialog.uiElement.prototype.eventProcessors,{onChange:function(b,a){this._.domOnChangeRegistered||(b.on("load",function(){this.getInputElement().on("change",function(){b.parts.dialog.isVisible()&&this.fire("change",{value:this.getValue()})},
this)},this),this._.domOnChangeRegistered=!0);this.on("change",a)}},!0),s=/^on([A-Z]\w+)/,p=function(b){for(var a in b)(s.test(a)||"title"==a||"type"==a)&&delete b[a];return b};CKEDITOR.tools.extend(CKEDITOR.ui.dialog,{labeledElement:function(b,a,d,e){if(!(4>arguments.length)){var c=i.call(this,a);c.labelId=CKEDITOR.tools.getNextId()+"_label";this._.children=[];CKEDITOR.ui.dialog.uiElement.call(this,b,a,d,"div",null,{role:"presentation"},function(){var f=[],d=a.required?" cke_required":"";"horizontal"!=
a.labelLayout?f.push('<label class="cke_dialog_ui_labeled_label'+d+'" ',' id="'+c.labelId+'"',c.inputId?' for="'+c.inputId+'"':"",(a.labelStyle?' style="'+a.labelStyle+'"':"")+">",a.label,"</label>",'<div class="cke_dialog_ui_labeled_content"',a.controlStyle?' style="'+a.controlStyle+'"':"",' role="radiogroup" aria-labelledby="'+c.labelId+'">',e.call(this,b,a),"</div>"):(d={type:"hbox",widths:a.widths,padding:0,children:[{type:"html",html:'<label class="cke_dialog_ui_labeled_label'+d+'" id="'+c.labelId+
'" for="'+c.inputId+'"'+(a.labelStyle?' style="'+a.labelStyle+'"':"")+">"+CKEDITOR.tools.htmlEncode(a.label)+"</span>"},{type:"html",html:'<span class="cke_dialog_ui_labeled_content"'+(a.controlStyle?' style="'+a.controlStyle+'"':"")+">"+e.call(this,b,a)+"</span>"}]},CKEDITOR.dialog._.uiElementBuilders.hbox.build(b,d,f));return f.join("")})}},textInput:function(b,a,d){if(!(3>arguments.length)){i.call(this,a);var e=this._.inputId=CKEDITOR.tools.getNextId()+"_textInput",c={"class":"cke_dialog_ui_input_"+
a.type,id:e,type:a.type};a.validate&&(this.validate=a.validate);a.maxLength&&(c.maxlength=a.maxLength);a.size&&(c.size=a.size);a.inputStyle&&(c.style=a.inputStyle);var f=this,h=!1;b.on("load",function(){f.getInputElement().on("keydown",function(a){a.data.getKeystroke()==13&&(h=true)});f.getInputElement().on("keyup",function(a){if(a.data.getKeystroke()==13&&h){b.getButton("ok")&&setTimeout(function(){b.getButton("ok").click()},0);h=false}},null,null,1E3)});CKEDITOR.ui.dialog.labeledElement.call(this,
b,a,d,function(){var b=['<div class="cke_dialog_ui_input_',a.type,'" role="presentation"'];a.width&&b.push('style="width:'+a.width+'" ');b.push("><input ");c["aria-labelledby"]=this._.labelId;this._.required&&(c["aria-required"]=this._.required);for(var d in c)b.push(d+'="'+c[d]+'" ');b.push(" /></div>");return b.join("")})}},textarea:function(b,a,d){if(!(3>arguments.length)){i.call(this,a);var e=this,c=this._.inputId=CKEDITOR.tools.getNextId()+"_textarea",f={};a.validate&&(this.validate=a.validate);
f.rows=a.rows||5;f.cols=a.cols||20;f["class"]="cke_dialog_ui_input_textarea "+(a["class"]||"");"undefined"!=typeof a.inputStyle&&(f.style=a.inputStyle);a.dir&&(f.dir=a.dir);CKEDITOR.ui.dialog.labeledElement.call(this,b,a,d,function(){f["aria-labelledby"]=this._.labelId;this._.required&&(f["aria-required"]=this._.required);var a=['<div class="cke_dialog_ui_input_textarea" role="presentation"><textarea id="',c,'" '],b;for(b in f)a.push(b+'="'+CKEDITOR.tools.htmlEncode(f[b])+'" ');a.push(">",CKEDITOR.tools.htmlEncode(e._["default"]),
"</textarea></div>");return a.join("")})}},checkbox:function(b,a,d){if(!(3>arguments.length)){var e=i.call(this,a,{"default":!!a["default"]});a.validate&&(this.validate=a.validate);CKEDITOR.ui.dialog.uiElement.call(this,b,a,d,"span",null,null,function(){var c=CKEDITOR.tools.extend({},a,{id:a.id?a.id+"_checkbox":CKEDITOR.tools.getNextId()+"_checkbox"},true),d=[],h=CKEDITOR.tools.getNextId()+"_label",g={"class":"cke_dialog_ui_checkbox_input",type:"checkbox","aria-labelledby":h};p(c);if(a["default"])g.checked=
"checked";if(typeof c.inputStyle!="undefined")c.style=c.inputStyle;e.checkbox=new CKEDITOR.ui.dialog.uiElement(b,c,d,"input",null,g);d.push(' <label id="',h,'" for="',g.id,'"'+(a.labelStyle?' style="'+a.labelStyle+'"':"")+">",CKEDITOR.tools.htmlEncode(a.label),"</label>");return d.join("")})}},radio:function(b,a,d){if(!(3>arguments.length)){i.call(this,a);this._["default"]||(this._["default"]=this._.initValue=a.items[0][1]);a.validate&&(this.validate=a.valdiate);var e=[],c=this;CKEDITOR.ui.dialog.labeledElement.call(this,
b,a,d,function(){for(var d=[],h=[],g=(a.id?a.id:CKEDITOR.tools.getNextId())+"_radio",k=0;k<a.items.length;k++){var j=a.items[k],i=j[2]!==void 0?j[2]:j[0],l=j[1]!==void 0?j[1]:j[0],m=CKEDITOR.tools.getNextId()+"_radio_input",n=m+"_label",m=CKEDITOR.tools.extend({},a,{id:m,title:null,type:null},true),i=CKEDITOR.tools.extend({},m,{title:i},true),o={type:"radio","class":"cke_dialog_ui_radio_input",name:g,value:l,"aria-labelledby":n},q=[];if(c._["default"]==l)o.checked="checked";p(m);p(i);if(typeof m.inputStyle!=
"undefined")m.style=m.inputStyle;m.keyboardFocusable=true;e.push(new CKEDITOR.ui.dialog.uiElement(b,m,q,"input",null,o));q.push(" ");new CKEDITOR.ui.dialog.uiElement(b,i,q,"label",null,{id:n,"for":o.id},j[0]);d.push(q.join(""))}new CKEDITOR.ui.dialog.hbox(b,e,d,h);return h.join("")});this._.children=e}},button:function(b,a,d){if(arguments.length){"function"==typeof a&&(a=a(b.getParentEditor()));i.call(this,a,{disabled:a.disabled||!1});CKEDITOR.event.implementOn(this);var e=this;b.on("load",function(){var a=
this.getElement();(function(){a.on("click",function(a){e.click();a.data.preventDefault()});a.on("keydown",function(a){a.data.getKeystroke()in{32:1}&&(e.click(),a.data.preventDefault())})})();a.unselectable()},this);var c=CKEDITOR.tools.extend({},a);delete c.style;var f=CKEDITOR.tools.getNextId()+"_label";CKEDITOR.ui.dialog.uiElement.call(this,b,c,d,"a",null,{style:a.style,href:"javascript:void(0)",title:a.label,hidefocus:"true","class":a["class"],role:"button","aria-labelledby":f},'<span id="'+f+
'" class="cke_dialog_ui_button">'+CKEDITOR.tools.htmlEncode(a.label)+"</span>")}},select:function(b,a,d){if(!(3>arguments.length)){var e=i.call(this,a);a.validate&&(this.validate=a.validate);e.inputId=CKEDITOR.tools.getNextId()+"_select";CKEDITOR.ui.dialog.labeledElement.call(this,b,a,d,function(){var c=CKEDITOR.tools.extend({},a,{id:a.id?a.id+"_select":CKEDITOR.tools.getNextId()+"_select"},true),d=[],h=[],g={id:e.inputId,"class":"cke_dialog_ui_input_select","aria-labelledby":this._.labelId};d.push('<div class="cke_dialog_ui_input_',
a.type,'" role="presentation"');a.width&&d.push('style="width:'+a.width+'" ');d.push(">");if(a.size!=void 0)g.size=a.size;if(a.multiple!=void 0)g.multiple=a.multiple;p(c);for(var k=0,j;k<a.items.length&&(j=a.items[k]);k++)h.push('<option value="',CKEDITOR.tools.htmlEncode(j[1]!==void 0?j[1]:j[0]).replace(/"/g,"&quot;"),'" /> ',CKEDITOR.tools.htmlEncode(j[0]));if(typeof c.inputStyle!="undefined")c.style=c.inputStyle;e.select=new CKEDITOR.ui.dialog.uiElement(b,c,d,"select",null,g,h.join(""));d.push("</div>");
return d.join("")})}},file:function(b,a,d){if(!(3>arguments.length)){void 0===a["default"]&&(a["default"]="");var e=CKEDITOR.tools.extend(i.call(this,a),{definition:a,buttons:[]});a.validate&&(this.validate=a.validate);b.on("load",function(){CKEDITOR.document.getById(e.frameId).getParent().addClass("cke_dialog_ui_input_file")});CKEDITOR.ui.dialog.labeledElement.call(this,b,a,d,function(){e.frameId=CKEDITOR.tools.getNextId()+"_fileInput";var b=['<iframe frameborder="0" allowtransparency="0" class="cke_dialog_ui_input_file" role="presentation" id="',
e.frameId,'" title="',a.label,'" src="javascript:void('];b.push(CKEDITOR.env.ie?"(function(){"+encodeURIComponent("document.open();("+CKEDITOR.tools.fixDomain+")();document.close();")+"})()":"0");b.push(')"></iframe>');return b.join("")})}},fileButton:function(b,a,d){if(!(3>arguments.length)){i.call(this,a);var e=this;a.validate&&(this.validate=a.validate);var c=CKEDITOR.tools.extend({},a),f=c.onClick;c.className=(c.className?c.className+" ":"")+"cke_dialog_ui_button";c.onClick=function(c){var d=
a["for"];if(!f||f.call(this,c)!==false){b.getContentElement(d[0],d[1]).submit();this.disable()}};b.on("load",function(){b.getContentElement(a["for"][0],a["for"][1])._.buttons.push(e)});CKEDITOR.ui.dialog.button.call(this,b,c,d)}},html:function(){var b=/^\s*<[\w:]+\s+([^>]*)?>/,a=/^(\s*<[\w:]+(?:\s+[^>]*)?)((?:.|\r|\n)+)$/,d=/\/$/;return function(e,c,f){if(!(3>arguments.length)){var h=[],g=c.html;"<"!=g.charAt(0)&&(g="<span>"+g+"</span>");var k=c.focus;if(k){var j=this.focus;this.focus=function(){("function"==
typeof k?k:j).call(this);this.fire("focus")};c.isFocusable&&(this.isFocusable=this.isFocusable);this.keyboardFocusable=!0}CKEDITOR.ui.dialog.uiElement.call(this,e,c,h,"span",null,null,"");h=h.join("").match(b);g=g.match(a)||["","",""];d.test(g[1])&&(g[1]=g[1].slice(0,-1),g[2]="/"+g[2]);f.push([g[1]," ",h[1]||"",g[2]].join(""))}}}(),fieldset:function(b,a,d,e,c){var f=c.label;this._={children:a};CKEDITOR.ui.dialog.uiElement.call(this,b,c,e,"fieldset",null,null,function(){var a=[];f&&a.push("<legend"+
(c.labelStyle?' style="'+c.labelStyle+'"':"")+">"+f+"</legend>");for(var b=0;b<d.length;b++)a.push(d[b]);return a.join("")})}},!0);CKEDITOR.ui.dialog.html.prototype=new CKEDITOR.ui.dialog.uiElement;CKEDITOR.ui.dialog.labeledElement.prototype=CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement,{setLabel:function(b){var a=CKEDITOR.document.getById(this._.labelId);1>a.getChildCount()?(new CKEDITOR.dom.text(b,CKEDITOR.document)).appendTo(a):a.getChild(0).$.nodeValue=b;return this},getLabel:function(){var b=
CKEDITOR.document.getById(this._.labelId);return!b||1>b.getChildCount()?"":b.getChild(0).getText()},eventProcessors:o},!0);CKEDITOR.ui.dialog.button.prototype=CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement,{click:function(){return!this._.disabled?this.fire("click",{dialog:this._.dialog}):!1},enable:function(){this._.disabled=!1;var b=this.getElement();b&&b.removeClass("cke_disabled")},disable:function(){this._.disabled=!0;this.getElement().addClass("cke_disabled")},isVisible:function(){return this.getElement().getFirst().isVisible()},
isEnabled:function(){return!this._.disabled},eventProcessors:CKEDITOR.tools.extend({},CKEDITOR.ui.dialog.uiElement.prototype.eventProcessors,{onClick:function(b,a){this.on("click",function(){a.apply(this,arguments)})}},!0),accessKeyUp:function(){this.click()},accessKeyDown:function(){this.focus()},keyboardFocusable:!0},!0);CKEDITOR.ui.dialog.textInput.prototype=CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.labeledElement,{getInputElement:function(){return CKEDITOR.document.getById(this._.inputId)},
focus:function(){var b=this.selectParentTab();setTimeout(function(){var a=b.getInputElement();a&&a.$.focus()},0)},select:function(){var b=this.selectParentTab();setTimeout(function(){var a=b.getInputElement();a&&(a.$.focus(),a.$.select())},0)},accessKeyUp:function(){this.select()},setValue:function(b){!b&&(b="");return CKEDITOR.ui.dialog.uiElement.prototype.setValue.apply(this,arguments)},keyboardFocusable:!0},n,!0);CKEDITOR.ui.dialog.textarea.prototype=new CKEDITOR.ui.dialog.textInput;CKEDITOR.ui.dialog.select.prototype=
CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.labeledElement,{getInputElement:function(){return this._.select.getElement()},add:function(b,a,d){var e=new CKEDITOR.dom.element("option",this.getDialog().getParentEditor().document),c=this.getInputElement().$;e.$.text=b;e.$.value=void 0===a||null===a?b:a;void 0===d||null===d?CKEDITOR.env.ie?c.add(e.$):c.add(e.$,null):c.add(e.$,d);return this},remove:function(b){this.getInputElement().$.remove(b);return this},clear:function(){for(var b=this.getInputElement().$;0<
b.length;)b.remove(0);return this},keyboardFocusable:!0},n,!0);CKEDITOR.ui.dialog.checkbox.prototype=CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement,{getInputElement:function(){return this._.checkbox.getElement()},setValue:function(b,a){this.getInputElement().$.checked=b;!a&&this.fire("change",{value:b})},getValue:function(){return this.getInputElement().$.checked},accessKeyUp:function(){this.setValue(!this.getValue())},eventProcessors:{onChange:function(b,a){if(!CKEDITOR.env.ie||8<CKEDITOR.env.version)return o.onChange.apply(this,
arguments);b.on("load",function(){var a=this._.checkbox.getElement();a.on("propertychange",function(b){b=b.data.$;"checked"==b.propertyName&&this.fire("change",{value:a.$.checked})},this)},this);this.on("change",a);return null}},keyboardFocusable:!0},n,!0);CKEDITOR.ui.dialog.radio.prototype=CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement,{setValue:function(b,a){for(var d=this._.children,e,c=0;c<d.length&&(e=d[c]);c++)e.getElement().$.checked=e.getValue()==b;!a&&this.fire("change",{value:b})},
getValue:function(){for(var b=this._.children,a=0;a<b.length;a++)if(b[a].getElement().$.checked)return b[a].getValue();return null},accessKeyUp:function(){var b=this._.children,a;for(a=0;a<b.length;a++)if(b[a].getElement().$.checked){b[a].getElement().focus();return}b[0].getElement().focus()},eventProcessors:{onChange:function(b,a){if(CKEDITOR.env.ie)b.on("load",function(){for(var a=this._.children,b=this,c=0;c<a.length;c++)a[c].getElement().on("propertychange",function(a){a=a.data.$;"checked"==a.propertyName&&
this.$.checked&&b.fire("change",{value:this.getAttribute("value")})})},this),this.on("change",a);else return o.onChange.apply(this,arguments);return null}}},n,!0);CKEDITOR.ui.dialog.file.prototype=CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.labeledElement,n,{getInputElement:function(){var b=CKEDITOR.document.getById(this._.frameId).getFrameDocument();return 0<b.$.forms.length?new CKEDITOR.dom.element(b.$.forms[0].elements[0]):this.getElement()},submit:function(){this.getInputElement().getParent().$.submit();
return this},getAction:function(){return this.getInputElement().getParent().$.action},registerEvents:function(b){var a=/^on([A-Z]\w+)/,d,e=function(a,b,c,d){a.on("formLoaded",function(){a.getInputElement().on(c,d,a)})},c;for(c in b)if(d=c.match(a))this.eventProcessors[c]?this.eventProcessors[c].call(this,this._.dialog,b[c]):e(this,this._.dialog,d[1].toLowerCase(),b[c]);return this},reset:function(){function b(){d.$.open();var b="";e.size&&(b=e.size-(CKEDITOR.env.ie?7:0));var i=a.frameId+"_input";
d.$.write(['<html dir="'+g+'" lang="'+k+'"><head><title></title></head><body style="margin: 0; overflow: hidden; background: transparent;">','<form enctype="multipart/form-data" method="POST" dir="'+g+'" lang="'+k+'" action="',CKEDITOR.tools.htmlEncode(e.action),'"><label id="',a.labelId,'" for="',i,'" style="display:none">',CKEDITOR.tools.htmlEncode(e.label),'</label><input style="width:100%" id="',i,'" aria-labelledby="',a.labelId,'" type="file" name="',CKEDITOR.tools.htmlEncode(e.id||"cke_upload"),
'" size="',CKEDITOR.tools.htmlEncode(0<b?b:""),'" /></form></body></html><script>',CKEDITOR.env.ie?"("+CKEDITOR.tools.fixDomain+")();":"","window.parent.CKEDITOR.tools.callFunction("+f+");","window.onbeforeunload = function() {window.parent.CKEDITOR.tools.callFunction("+h+")}","<\/script>"].join(""));d.$.close();for(b=0;b<c.length;b++)c[b].enable()}var a=this._,d=CKEDITOR.document.getById(a.frameId).getFrameDocument(),e=a.definition,c=a.buttons,f=this.formLoadedNumber,h=this.formUnloadNumber,g=a.dialog._.editor.lang.dir,
k=a.dialog._.editor.langCode;f||(f=this.formLoadedNumber=CKEDITOR.tools.addFunction(function(){this.fire("formLoaded")},this),h=this.formUnloadNumber=CKEDITOR.tools.addFunction(function(){this.getInputElement().clearCustomData()},this),this.getDialog()._.editor.on("destroy",function(){CKEDITOR.tools.removeFunction(f);CKEDITOR.tools.removeFunction(h)}));CKEDITOR.env.gecko?setTimeout(b,500):b()},getValue:function(){return this.getInputElement().$.value||""},setInitValue:function(){this._.initValue=
""},eventProcessors:{onChange:function(b,a){this._.domOnChangeRegistered||(this.on("formLoaded",function(){this.getInputElement().on("change",function(){this.fire("change",{value:this.getValue()})},this)},this),this._.domOnChangeRegistered=!0);this.on("change",a)}},keyboardFocusable:!0},!0);CKEDITOR.ui.dialog.fileButton.prototype=new CKEDITOR.ui.dialog.button;CKEDITOR.ui.dialog.fieldset.prototype=CKEDITOR.tools.clone(CKEDITOR.ui.dialog.hbox.prototype);CKEDITOR.dialog.addUIElement("text",r);CKEDITOR.dialog.addUIElement("password",
r);CKEDITOR.dialog.addUIElement("textarea",l);CKEDITOR.dialog.addUIElement("checkbox",l);CKEDITOR.dialog.addUIElement("radio",l);CKEDITOR.dialog.addUIElement("button",l);CKEDITOR.dialog.addUIElement("select",l);CKEDITOR.dialog.addUIElement("file",l);CKEDITOR.dialog.addUIElement("fileButton",l);CKEDITOR.dialog.addUIElement("html",l);CKEDITOR.dialog.addUIElement("fieldset",{build:function(b,a,d){for(var e=a.children,c,f=[],h=[],g=0;g<e.length&&(c=e[g]);g++){var i=[];f.push(i);h.push(CKEDITOR.dialog._.uiElementBuilders[c.type].build(b,
c,i))}return new CKEDITOR.ui.dialog[a.type](b,h,f,d,a)}})}});CKEDITOR.DIALOG_RESIZE_NONE=0;CKEDITOR.DIALOG_RESIZE_WIDTH=1;CKEDITOR.DIALOG_RESIZE_HEIGHT=2;CKEDITOR.DIALOG_RESIZE_BOTH=3;
(function(){function t(){for(var a=this._.tabIdList.length,b=CKEDITOR.tools.indexOf(this._.tabIdList,this._.currentTabId)+a,c=b-1;c>b-a;c--)if(this._.tabs[this._.tabIdList[c%a]][0].$.offsetHeight)return this._.tabIdList[c%a];return null}function u(){for(var a=this._.tabIdList.length,b=CKEDITOR.tools.indexOf(this._.tabIdList,this._.currentTabId),c=b+1;c<b+a;c++)if(this._.tabs[this._.tabIdList[c%a]][0].$.offsetHeight)return this._.tabIdList[c%a];return null}function G(a,b){for(var c=a.$.getElementsByTagName("input"),
e=0,d=c.length;e<d;e++){var g=new CKEDITOR.dom.element(c[e]);"text"==g.getAttribute("type").toLowerCase()&&(b?(g.setAttribute("value",g.getCustomData("fake_value")||""),g.removeCustomData("fake_value")):(g.setCustomData("fake_value",g.getAttribute("value")),g.setAttribute("value","")))}}function P(a,b){var c=this.getInputElement();c&&(a?c.removeAttribute("aria-invalid"):c.setAttribute("aria-invalid",!0));a||(this.select?this.select():this.focus());b&&alert(b);this.fire("validated",{valid:a,msg:b})}
function Q(){var a=this.getInputElement();a&&a.removeAttribute("aria-invalid")}function R(a){var a=CKEDITOR.dom.element.createFromHtml(CKEDITOR.addTemplate("dialog",S).output({id:CKEDITOR.tools.getNextNumber(),editorId:a.id,langDir:a.lang.dir,langCode:a.langCode,editorDialogClass:"cke_editor_"+a.name.replace(/\./g,"\\.")+"_dialog",closeTitle:a.lang.common.close,hidpi:CKEDITOR.env.hidpi?"cke_hidpi":""})),b=a.getChild([0,0,0,0,0]),c=b.getChild(0),e=b.getChild(1);if(CKEDITOR.env.ie&&!CKEDITOR.env.ie6Compat){var d=
"javascript:void(function(){"+encodeURIComponent("document.open();("+CKEDITOR.tools.fixDomain+")();document.close();")+"}())";CKEDITOR.dom.element.createFromHtml('<iframe frameBorder="0" class="cke_iframe_shim" src="'+d+'" tabIndex="-1"></iframe>').appendTo(b.getParent())}c.unselectable();e.unselectable();return{element:a,parts:{dialog:a.getChild(0),title:c,close:e,tabs:b.getChild(2),contents:b.getChild([3,0,0,0]),footer:b.getChild([3,0,1,0])}}}function H(a,b,c){this.element=b;this.focusIndex=c;this.tabIndex=
0;this.isFocusable=function(){return!b.getAttribute("disabled")&&b.isVisible()};this.focus=function(){a._.currentFocusIndex=this.focusIndex;this.element.focus()};b.on("keydown",function(a){a.data.getKeystroke()in{32:1,13:1}&&this.fire("click")});b.on("focus",function(){this.fire("mouseover")});b.on("blur",function(){this.fire("mouseout")})}function T(a){function b(){a.layout()}var c=CKEDITOR.document.getWindow();c.on("resize",b);a.on("hide",function(){c.removeListener("resize",b)})}function I(a,b){this._=
{dialog:a};CKEDITOR.tools.extend(this,b)}function U(a){function b(b){var c=a.getSize(),h=CKEDITOR.document.getWindow().getViewPaneSize(),o=b.data.$.screenX,j=b.data.$.screenY,n=o-e.x,m=j-e.y;e={x:o,y:j};d.x+=n;d.y+=m;a.move(d.x+i[3]<f?-i[3]:d.x-i[1]>h.width-c.width-f?h.width-c.width+("rtl"==g.lang.dir?0:i[1]):d.x,d.y+i[0]<f?-i[0]:d.y-i[2]>h.height-c.height-f?h.height-c.height+i[2]:d.y,1);b.data.preventDefault()}function c(){CKEDITOR.document.removeListener("mousemove",b);CKEDITOR.document.removeListener("mouseup",
c);if(CKEDITOR.env.ie6Compat){var a=q.getChild(0).getFrameDocument();a.removeListener("mousemove",b);a.removeListener("mouseup",c)}}var e=null,d=null;a.getElement().getFirst();var g=a.getParentEditor(),f=g.config.dialog_magnetDistance,i=CKEDITOR.skin.margins||[0,0,0,0];"undefined"==typeof f&&(f=20);a.parts.title.on("mousedown",function(f){e={x:f.data.$.screenX,y:f.data.$.screenY};CKEDITOR.document.on("mousemove",b);CKEDITOR.document.on("mouseup",c);d=a.getPosition();if(CKEDITOR.env.ie6Compat){var k=
q.getChild(0).getFrameDocument();k.on("mousemove",b);k.on("mouseup",c)}f.data.preventDefault()},a)}function V(a){var b,c;function e(d){var e="rtl"==i.lang.dir,j=o.width,C=o.height,D=j+(d.data.$.screenX-b)*(e?-1:1)*(a._.moved?1:2),n=C+(d.data.$.screenY-c)*(a._.moved?1:2),x=a._.element.getFirst(),x=e&&x.getComputedStyle("right"),y=a.getPosition();y.y+n>h.height&&(n=h.height-y.y);if((e?x:y.x)+D>h.width)D=h.width-(e?x:y.x);if(f==CKEDITOR.DIALOG_RESIZE_WIDTH||f==CKEDITOR.DIALOG_RESIZE_BOTH)j=Math.max(g.minWidth||
0,D-l);if(f==CKEDITOR.DIALOG_RESIZE_HEIGHT||f==CKEDITOR.DIALOG_RESIZE_BOTH)C=Math.max(g.minHeight||0,n-k);a.resize(j,C);a._.moved||a.layout();d.data.preventDefault()}function d(){CKEDITOR.document.removeListener("mouseup",d);CKEDITOR.document.removeListener("mousemove",e);j&&(j.remove(),j=null);if(CKEDITOR.env.ie6Compat){var a=q.getChild(0).getFrameDocument();a.removeListener("mouseup",d);a.removeListener("mousemove",e)}}var g=a.definition,f=g.resizable;if(f!=CKEDITOR.DIALOG_RESIZE_NONE){var i=a.getParentEditor(),
l,k,h,o,j,n=CKEDITOR.tools.addFunction(function(f){o=a.getSize();var g=a.parts.contents;g.$.getElementsByTagName("iframe").length&&(j=CKEDITOR.dom.element.createFromHtml('<div class="cke_dialog_resize_cover" style="height: 100%; position: absolute; width: 100%;"></div>'),g.append(j));k=o.height-a.parts.contents.getSize("height",!(CKEDITOR.env.gecko||CKEDITOR.env.opera||CKEDITOR.env.ie&&CKEDITOR.env.quirks));l=o.width-a.parts.contents.getSize("width",1);b=f.screenX;c=f.screenY;h=CKEDITOR.document.getWindow().getViewPaneSize();
CKEDITOR.document.on("mousemove",e);CKEDITOR.document.on("mouseup",d);CKEDITOR.env.ie6Compat&&(g=q.getChild(0).getFrameDocument(),g.on("mousemove",e),g.on("mouseup",d));f.preventDefault&&f.preventDefault()});a.on("load",function(){var b="";f==CKEDITOR.DIALOG_RESIZE_WIDTH?b=" cke_resizer_horizontal":f==CKEDITOR.DIALOG_RESIZE_HEIGHT&&(b=" cke_resizer_vertical");b=CKEDITOR.dom.element.createFromHtml('<div class="cke_resizer'+b+" cke_resizer_"+i.lang.dir+'" title="'+CKEDITOR.tools.htmlEncode(i.lang.common.resize)+
'" onmousedown="CKEDITOR.tools.callFunction('+n+', event )">'+("ltr"==i.lang.dir?"◢":"◣")+"</div>");a.parts.footer.append(b,1)});i.on("destroy",function(){CKEDITOR.tools.removeFunction(n)})}}function E(a){a.data.preventDefault(1)}function J(a){var b=CKEDITOR.document.getWindow(),c=a.config,e=c.dialog_backgroundCoverColor||"white",d=c.dialog_backgroundCoverOpacity,g=c.baseFloatZIndex,c=CKEDITOR.tools.genKey(e,d,g),f=w[c];f?f.show():(g=['<div tabIndex="-1" style="position: ',CKEDITOR.env.ie6Compat?
"absolute":"fixed","; z-index: ",g,"; top: 0px; left: 0px; ",!CKEDITOR.env.ie6Compat?"background-color: "+e:"",'" class="cke_dialog_background_cover">'],CKEDITOR.env.ie6Compat&&(e="<html><body style=\\'background-color:"+e+";\\'></body></html>",g.push('<iframe hidefocus="true" frameborder="0" id="cke_dialog_background_iframe" src="javascript:'),g.push("void((function(){"+encodeURIComponent("document.open();("+CKEDITOR.tools.fixDomain+")();document.write( '"+e+"' );document.close();")+"})())"),g.push('" style="position:absolute;left:0;top:0;width:100%;height: 100%;filter: progid:DXImageTransform.Microsoft.Alpha(opacity=0)"></iframe>')),
g.push("</div>"),f=CKEDITOR.dom.element.createFromHtml(g.join("")),f.setOpacity(void 0!=d?d:0.5),f.on("keydown",E),f.on("keypress",E),f.on("keyup",E),f.appendTo(CKEDITOR.document.getBody()),w[c]=f);a.focusManager.add(f);q=f;var a=function(){var a=b.getViewPaneSize();f.setStyles({width:a.width+"px",height:a.height+"px"})},i=function(){var a=b.getScrollPosition(),c=CKEDITOR.dialog._.currentTop;f.setStyles({left:a.x+"px",top:a.y+"px"});if(c){do{a=c.getPosition();c.move(a.x,a.y)}while(c=c._.parentDialog)
}};F=a;b.on("resize",a);a();(!CKEDITOR.env.mac||!CKEDITOR.env.webkit)&&f.focus();if(CKEDITOR.env.ie6Compat){var l=function(){i();arguments.callee.prevScrollHandler.apply(this,arguments)};b.$.setTimeout(function(){l.prevScrollHandler=window.onscroll||function(){};window.onscroll=l},0);i()}}function K(a){q&&(a.focusManager.remove(q),a=CKEDITOR.document.getWindow(),q.hide(),a.removeListener("resize",F),CKEDITOR.env.ie6Compat&&a.$.setTimeout(function(){window.onscroll=window.onscroll&&window.onscroll.prevScrollHandler||
null},0),F=null)}var r=CKEDITOR.tools.cssLength,S='<div class="cke_reset_all {editorId} {editorDialogClass} {hidpi}" dir="{langDir}" lang="{langCode}" role="dialog" aria-labelledby="cke_dialog_title_{id}"><table class="cke_dialog '+CKEDITOR.env.cssClass+' cke_{langDir}" style="position:absolute" role="presentation"><tr><td role="presentation"><div class="cke_dialog_body" role="presentation"><div id="cke_dialog_title_{id}" class="cke_dialog_title" role="presentation"></div><a id="cke_dialog_close_button_{id}" class="cke_dialog_close_button" href="javascript:void(0)" title="{closeTitle}" role="button"><span class="cke_label">X</span></a><div id="cke_dialog_tabs_{id}" class="cke_dialog_tabs" role="tablist"></div><table class="cke_dialog_contents" role="presentation"><tr><td id="cke_dialog_contents_{id}" class="cke_dialog_contents_body" role="presentation"></td></tr><tr><td id="cke_dialog_footer_{id}" class="cke_dialog_footer" role="presentation"></td></tr></table></div></td></tr></table></div>';
CKEDITOR.dialog=function(a,b){function c(){var a=m._.focusList;a.sort(function(a,b){return a.tabIndex!=b.tabIndex?b.tabIndex-a.tabIndex:a.focusIndex-b.focusIndex});for(var b=a.length,c=0;c<b;c++)a[c].focusIndex=c}function e(a){var b=m._.focusList,a=a||0;if(!(1>b.length)){var c=m._.currentFocusIndex;try{b[c].getInputElement().$.blur()}catch(f){}for(var d=c=(c+a+b.length)%b.length;a&&!b[d].isFocusable()&&!(d=(d+a+b.length)%b.length,d==c););b[d].focus();"text"==b[d].type&&b[d].select()}}function d(b){if(m==
CKEDITOR.dialog._.currentTop){var c=b.data.getKeystroke(),d="rtl"==a.lang.dir;o=j=0;if(9==c||c==CKEDITOR.SHIFT+9)c=c==CKEDITOR.SHIFT+9,m._.tabBarMode?(c=c?t.call(m):u.call(m),m.selectPage(c),m._.tabs[c][0].focus()):e(c?-1:1),o=1;else if(c==CKEDITOR.ALT+121&&!m._.tabBarMode&&1<m.getPageCount())m._.tabBarMode=!0,m._.tabs[m._.currentTabId][0].focus(),o=1;else if((37==c||39==c)&&m._.tabBarMode)c=c==(d?39:37)?t.call(m):u.call(m),m.selectPage(c),m._.tabs[c][0].focus(),o=1;else if((13==c||32==c)&&m._.tabBarMode)this.selectPage(this._.currentTabId),
this._.tabBarMode=!1,this._.currentFocusIndex=-1,e(1),o=1;else if(13==c){c=b.data.getTarget();if(!c.is("a","button","select","textarea")&&(!c.is("input")||"button"!=c.$.type))(c=this.getButton("ok"))&&CKEDITOR.tools.setTimeout(c.click,0,c),o=1;j=1}else if(27==c)(c=this.getButton("cancel"))?CKEDITOR.tools.setTimeout(c.click,0,c):!1!==this.fire("cancel",{hide:!0}).hide&&this.hide(),j=1;else return;g(b)}}function g(a){o?a.data.preventDefault(1):j&&a.data.stopPropagation()}var f=CKEDITOR.dialog._.dialogDefinitions[b],
i=CKEDITOR.tools.clone(W),l=a.config.dialog_buttonsOrder||"OS",k=a.lang.dir,h={},o,j;("OS"==l&&CKEDITOR.env.mac||"rtl"==l&&"ltr"==k||"ltr"==l&&"rtl"==k)&&i.buttons.reverse();f=CKEDITOR.tools.extend(f(a),i);f=CKEDITOR.tools.clone(f);f=new L(this,f);i=R(a);this._={editor:a,element:i.element,name:b,contentSize:{width:0,height:0},size:{width:0,height:0},contents:{},buttons:{},accessKeyMap:{},tabs:{},tabIdList:[],currentTabId:null,currentTabIndex:null,pageCount:0,lastTab:null,tabBarMode:!1,focusList:[],
currentFocusIndex:0,hasFocus:!1};this.parts=i.parts;CKEDITOR.tools.setTimeout(function(){a.fire("ariaWidget",this.parts.contents)},0,this);i={position:CKEDITOR.env.ie6Compat?"absolute":"fixed",top:0,visibility:"hidden"};i["rtl"==k?"right":"left"]=0;this.parts.dialog.setStyles(i);CKEDITOR.event.call(this);this.definition=f=CKEDITOR.fire("dialogDefinition",{name:b,definition:f},a).definition;if(!("removeDialogTabs"in a._)&&a.config.removeDialogTabs){i=a.config.removeDialogTabs.split(";");for(k=0;k<
i.length;k++)if(l=i[k].split(":"),2==l.length){var n=l[0];h[n]||(h[n]=[]);h[n].push(l[1])}a._.removeDialogTabs=h}if(a._.removeDialogTabs&&(h=a._.removeDialogTabs[b]))for(k=0;k<h.length;k++)f.removeContents(h[k]);if(f.onLoad)this.on("load",f.onLoad);if(f.onShow)this.on("show",f.onShow);if(f.onHide)this.on("hide",f.onHide);if(f.onOk)this.on("ok",function(b){a.fire("saveSnapshot");setTimeout(function(){a.fire("saveSnapshot")},0);!1===f.onOk.call(this,b)&&(b.data.hide=!1)});if(f.onCancel)this.on("cancel",
function(a){!1===f.onCancel.call(this,a)&&(a.data.hide=!1)});var m=this,p=function(a){var b=m._.contents,c=!1,d;for(d in b)for(var f in b[d])if(c=a.call(this,b[d][f]))return};this.on("ok",function(a){p(function(b){if(b.validate){var c=b.validate(this),d="string"==typeof c||!1===c;d&&(a.data.hide=!1,a.stop());P.call(b,!d,"string"==typeof c?c:void 0);return d}})},this,null,0);this.on("cancel",function(b){p(function(c){if(c.isChanged())return!a.config.dialog_noConfirmCancel&&!confirm(a.lang.common.confirmCancel)&&
(b.data.hide=!1),!0})},this,null,0);this.parts.close.on("click",function(a){!1!==this.fire("cancel",{hide:!0}).hide&&this.hide();a.data.preventDefault()},this);this.changeFocus=e;var v=this._.element;a.focusManager.add(v,1);this.on("show",function(){v.on("keydown",d,this);if(CKEDITOR.env.opera||CKEDITOR.env.gecko)v.on("keypress",g,this)});this.on("hide",function(){v.removeListener("keydown",d);(CKEDITOR.env.opera||CKEDITOR.env.gecko)&&v.removeListener("keypress",g);p(function(a){Q.apply(a)})});this.on("iframeAdded",
function(a){(new CKEDITOR.dom.document(a.data.iframe.$.contentWindow.document)).on("keydown",d,this,null,0)});this.on("show",function(){c();if(a.config.dialog_startupFocusTab&&1<m._.pageCount)m._.tabBarMode=!0,m._.tabs[m._.currentTabId][0].focus();else if(!this._.hasFocus)if(this._.currentFocusIndex=-1,f.onFocus){var b=f.onFocus.call(this);b&&b.focus()}else e(1)},this,null,4294967295);if(CKEDITOR.env.ie6Compat)this.on("load",function(){var a=this.getElement(),b=a.getFirst();b.remove();b.appendTo(a)},
this);U(this);V(this);(new CKEDITOR.dom.text(f.title,CKEDITOR.document)).appendTo(this.parts.title);for(k=0;k<f.contents.length;k++)(h=f.contents[k])&&this.addPage(h);this.parts.tabs.on("click",function(a){var b=a.data.getTarget();b.hasClass("cke_dialog_tab")&&(b=b.$.id,this.selectPage(b.substring(4,b.lastIndexOf("_"))),this._.tabBarMode&&(this._.tabBarMode=!1,this._.currentFocusIndex=-1,e(1)),a.data.preventDefault())},this);k=[];h=CKEDITOR.dialog._.uiElementBuilders.hbox.build(this,{type:"hbox",
className:"cke_dialog_footer_buttons",widths:[],children:f.buttons},k).getChild();this.parts.footer.setHtml(k.join(""));for(k=0;k<h.length;k++)this._.buttons[h[k].id]=h[k]};CKEDITOR.dialog.prototype={destroy:function(){this.hide();this._.element.remove()},resize:function(){return function(a,b){if(!this._.contentSize||!(this._.contentSize.width==a&&this._.contentSize.height==b))CKEDITOR.dialog.fire("resize",{dialog:this,width:a,height:b},this._.editor),this.fire("resize",{width:a,height:b},this._.editor),
this.parts.contents.setStyles({width:a+"px",height:b+"px"}),"rtl"==this._.editor.lang.dir&&this._.position&&(this._.position.x=CKEDITOR.document.getWindow().getViewPaneSize().width-this._.contentSize.width-parseInt(this._.element.getFirst().getStyle("right"),10)),this._.contentSize={width:a,height:b}}}(),getSize:function(){var a=this._.element.getFirst();return{width:a.$.offsetWidth||0,height:a.$.offsetHeight||0}},move:function(a,b,c){var e=this._.element.getFirst(),d="rtl"==this._.editor.lang.dir,
g="fixed"==e.getComputedStyle("position");CKEDITOR.env.ie&&e.setStyle("zoom","100%");if(!g||!this._.position||!(this._.position.x==a&&this._.position.y==b))this._.position={x:a,y:b},g||(g=CKEDITOR.document.getWindow().getScrollPosition(),a+=g.x,b+=g.y),d&&(g=this.getSize(),a=CKEDITOR.document.getWindow().getViewPaneSize().width-g.width-a),b={top:(0<b?b:0)+"px"},b[d?"right":"left"]=(0<a?a:0)+"px",e.setStyles(b),c&&(this._.moved=1)},getPosition:function(){return CKEDITOR.tools.extend({},this._.position)},
show:function(){var a=this._.element,b=this.definition;!a.getParent()||!a.getParent().equals(CKEDITOR.document.getBody())?a.appendTo(CKEDITOR.document.getBody()):a.setStyle("display","block");if(CKEDITOR.env.gecko&&10900>CKEDITOR.env.version){var c=this.parts.dialog;c.setStyle("position","absolute");setTimeout(function(){c.setStyle("position","fixed")},0)}this.resize(this._.contentSize&&this._.contentSize.width||b.width||b.minWidth,this._.contentSize&&this._.contentSize.height||b.height||b.minHeight);
this.reset();this.selectPage(this.definition.contents[0].id);null===CKEDITOR.dialog._.currentZIndex&&(CKEDITOR.dialog._.currentZIndex=this._.editor.config.baseFloatZIndex);this._.element.getFirst().setStyle("z-index",CKEDITOR.dialog._.currentZIndex+=10);null===CKEDITOR.dialog._.currentTop?(CKEDITOR.dialog._.currentTop=this,this._.parentDialog=null,J(this._.editor)):(this._.parentDialog=CKEDITOR.dialog._.currentTop,this._.parentDialog.getElement().getFirst().$.style.zIndex-=Math.floor(this._.editor.config.baseFloatZIndex/
2),CKEDITOR.dialog._.currentTop=this);a.on("keydown",M);a.on(CKEDITOR.env.opera?"keypress":"keyup",N);this._.hasFocus=!1;for(var e in b.contents)if(b.contents[e]){var a=b.contents[e],d=this._.tabs[a.id],g=a.requiredContent,f=0;if(d){for(var i in this._.contents[a.id]){var l=this._.contents[a.id][i];"hbox"==l.type||("vbox"==l.type||!l.getInputElement())||(l.requiredContent&&!this._.editor.activeFilter.check(l.requiredContent)?l.disable():(l.enable(),f++))}!f||g&&!this._.editor.activeFilter.check(g)?
d[0].addClass("cke_dialog_tab_disabled"):d[0].removeClass("cke_dialog_tab_disabled")}}CKEDITOR.tools.setTimeout(function(){this.layout();T(this);this.parts.dialog.setStyle("visibility","");this.fireOnce("load",{});CKEDITOR.ui.fire("ready",this);this.fire("show",{});this._.editor.fire("dialogShow",this);this._.parentDialog||this._.editor.focusManager.lock();this.foreach(function(a){a.setInitValue&&a.setInitValue()})},100,this)},layout:function(){var a=this.parts.dialog,b=this.getSize(),c=CKEDITOR.document.getWindow().getViewPaneSize(),
e=(c.width-b.width)/2,d=(c.height-b.height)/2;CKEDITOR.env.ie6Compat||(b.height+(0<d?d:0)>c.height||b.width+(0<e?e:0)>c.width?a.setStyle("position","absolute"):a.setStyle("position","fixed"));this.move(this._.moved?this._.position.x:e,this._.moved?this._.position.y:d)},foreach:function(a){for(var b in this._.contents)for(var c in this._.contents[b])a.call(this,this._.contents[b][c]);return this},reset:function(){var a=function(a){a.reset&&a.reset(1)};return function(){this.foreach(a);return this}}(),
setupContent:function(){var a=arguments;this.foreach(function(b){b.setup&&b.setup.apply(b,a)})},commitContent:function(){var a=arguments;this.foreach(function(b){CKEDITOR.env.ie&&this._.currentFocusIndex==b.focusIndex&&b.getInputElement().$.blur();b.commit&&b.commit.apply(b,a)})},hide:function(){if(this.parts.dialog.isVisible()){this.fire("hide",{});this._.editor.fire("dialogHide",this);this.selectPage(this._.tabIdList[0]);var a=this._.element;a.setStyle("display","none");this.parts.dialog.setStyle("visibility",
"hidden");for(X(this);CKEDITOR.dialog._.currentTop!=this;)CKEDITOR.dialog._.currentTop.hide();if(this._.parentDialog){var b=this._.parentDialog.getElement().getFirst();b.setStyle("z-index",parseInt(b.$.style.zIndex,10)+Math.floor(this._.editor.config.baseFloatZIndex/2))}else K(this._.editor);if(CKEDITOR.dialog._.currentTop=this._.parentDialog)CKEDITOR.dialog._.currentZIndex-=10;else{CKEDITOR.dialog._.currentZIndex=null;a.removeListener("keydown",M);a.removeListener(CKEDITOR.env.opera?"keypress":"keyup",
N);var c=this._.editor;c.focus();setTimeout(function(){c.focusManager.unlock()},0)}delete this._.parentDialog;this.foreach(function(a){a.resetInitValue&&a.resetInitValue()})}},addPage:function(a){if(!a.requiredContent||this._.editor.filter.check(a.requiredContent)){for(var b=[],c=a.label?' title="'+CKEDITOR.tools.htmlEncode(a.label)+'"':"",e=CKEDITOR.dialog._.uiElementBuilders.vbox.build(this,{type:"vbox",className:"cke_dialog_page_contents",children:a.elements,expand:!!a.expand,padding:a.padding,
style:a.style||"width: 100%;"},b),d=this._.contents[a.id]={},g=e.getChild(),f=0;e=g.shift();)!e.notAllowed&&("hbox"!=e.type&&"vbox"!=e.type)&&f++,d[e.id]=e,"function"==typeof e.getChild&&g.push.apply(g,e.getChild());f||(a.hidden=!0);b=CKEDITOR.dom.element.createFromHtml(b.join(""));b.setAttribute("role","tabpanel");e=CKEDITOR.env;d="cke_"+a.id+"_"+CKEDITOR.tools.getNextNumber();c=CKEDITOR.dom.element.createFromHtml(['<a class="cke_dialog_tab"',0<this._.pageCount?" cke_last":"cke_first",c,a.hidden?
' style="display:none"':"",' id="',d,'"',e.gecko&&10900<=e.version&&!e.hc?"":' href="javascript:void(0)"',' tabIndex="-1" hidefocus="true" role="tab">',a.label,"</a>"].join(""));b.setAttribute("aria-labelledby",d);this._.tabs[a.id]=[c,b];this._.tabIdList.push(a.id);!a.hidden&&this._.pageCount++;this._.lastTab=c;this.updateStyle();b.setAttribute("name",a.id);b.appendTo(this.parts.contents);c.unselectable();this.parts.tabs.append(c);a.accessKey&&(O(this,this,"CTRL+"+a.accessKey,Y,Z),this._.accessKeyMap["CTRL+"+
a.accessKey]=a.id)}},selectPage:function(a){if(this._.currentTabId!=a&&!this._.tabs[a][0].hasClass("cke_dialog_tab_disabled")&&!1!==this.fire("selectPage",{page:a,currentPage:this._.currentTabId})){for(var b in this._.tabs){var c=this._.tabs[b][0],e=this._.tabs[b][1];b!=a&&(c.removeClass("cke_dialog_tab_selected"),e.hide());e.setAttribute("aria-hidden",b!=a)}var d=this._.tabs[a];d[0].addClass("cke_dialog_tab_selected");CKEDITOR.env.ie6Compat||CKEDITOR.env.ie7Compat?(G(d[1]),d[1].show(),setTimeout(function(){G(d[1],
1)},0)):d[1].show();this._.currentTabId=a;this._.currentTabIndex=CKEDITOR.tools.indexOf(this._.tabIdList,a)}},updateStyle:function(){this.parts.dialog[(1===this._.pageCount?"add":"remove")+"Class"]("cke_single_page")},hidePage:function(a){var b=this._.tabs[a]&&this._.tabs[a][0];b&&(1!=this._.pageCount&&b.isVisible())&&(a==this._.currentTabId&&this.selectPage(t.call(this)),b.hide(),this._.pageCount--,this.updateStyle())},showPage:function(a){if(a=this._.tabs[a]&&this._.tabs[a][0])a.show(),this._.pageCount++,
this.updateStyle()},getElement:function(){return this._.element},getName:function(){return this._.name},getContentElement:function(a,b){var c=this._.contents[a];return c&&c[b]},getValueOf:function(a,b){return this.getContentElement(a,b).getValue()},setValueOf:function(a,b,c){return this.getContentElement(a,b).setValue(c)},getButton:function(a){return this._.buttons[a]},click:function(a){return this._.buttons[a].click()},disableButton:function(a){return this._.buttons[a].disable()},enableButton:function(a){return this._.buttons[a].enable()},
getPageCount:function(){return this._.pageCount},getParentEditor:function(){return this._.editor},getSelectedElement:function(){return this.getParentEditor().getSelection().getSelectedElement()},addFocusable:function(a,b){if("undefined"==typeof b)b=this._.focusList.length,this._.focusList.push(new H(this,a,b));else{this._.focusList.splice(b,0,new H(this,a,b));for(var c=b+1;c<this._.focusList.length;c++)this._.focusList[c].focusIndex++}}};CKEDITOR.tools.extend(CKEDITOR.dialog,{add:function(a,b){if(!this._.dialogDefinitions[a]||
"function"==typeof b)this._.dialogDefinitions[a]=b},exists:function(a){return!!this._.dialogDefinitions[a]},getCurrent:function(){return CKEDITOR.dialog._.currentTop},isTabEnabled:function(a,b,c){a=a.config.removeDialogTabs;return!(a&&a.match(RegExp("(?:^|;)"+b+":"+c+"(?:$|;)","i")))},okButton:function(){var a=function(a,c){c=c||{};return CKEDITOR.tools.extend({id:"ok",type:"button",label:a.lang.common.ok,"class":"cke_dialog_ui_button_ok",onClick:function(a){a=a.data.dialog;!1!==a.fire("ok",{hide:!0}).hide&&
a.hide()}},c,!0)};a.type="button";a.override=function(b){return CKEDITOR.tools.extend(function(c){return a(c,b)},{type:"button"},!0)};return a}(),cancelButton:function(){var a=function(a,c){c=c||{};return CKEDITOR.tools.extend({id:"cancel",type:"button",label:a.lang.common.cancel,"class":"cke_dialog_ui_button_cancel",onClick:function(a){a=a.data.dialog;!1!==a.fire("cancel",{hide:!0}).hide&&a.hide()}},c,!0)};a.type="button";a.override=function(b){return CKEDITOR.tools.extend(function(c){return a(c,
b)},{type:"button"},!0)};return a}(),addUIElement:function(a,b){this._.uiElementBuilders[a]=b}});CKEDITOR.dialog._={uiElementBuilders:{},dialogDefinitions:{},currentTop:null,currentZIndex:null};CKEDITOR.event.implementOn(CKEDITOR.dialog);CKEDITOR.event.implementOn(CKEDITOR.dialog.prototype);var W={resizable:CKEDITOR.DIALOG_RESIZE_BOTH,minWidth:600,minHeight:400,buttons:[CKEDITOR.dialog.okButton,CKEDITOR.dialog.cancelButton]},z=function(a,b,c){for(var e=0,d;d=a[e];e++)if(d.id==b||c&&d[c]&&(d=z(d[c],
b,c)))return d;return null},A=function(a,b,c,e,d){if(c){for(var g=0,f;f=a[g];g++){if(f.id==c)return a.splice(g,0,b),b;if(e&&f[e]&&(f=A(f[e],b,c,e,!0)))return f}if(d)return null}a.push(b);return b},B=function(a,b,c){for(var e=0,d;d=a[e];e++){if(d.id==b)return a.splice(e,1);if(c&&d[c]&&(d=B(d[c],b,c)))return d}return null},L=function(a,b){this.dialog=a;for(var c=b.contents,e=0,d;d=c[e];e++)c[e]=d&&new I(a,d);CKEDITOR.tools.extend(this,b)};L.prototype={getContents:function(a){return z(this.contents,
a)},getButton:function(a){return z(this.buttons,a)},addContents:function(a,b){return A(this.contents,a,b)},addButton:function(a,b){return A(this.buttons,a,b)},removeContents:function(a){B(this.contents,a)},removeButton:function(a){B(this.buttons,a)}};I.prototype={get:function(a){return z(this.elements,a,"children")},add:function(a,b){return A(this.elements,a,b,"children")},remove:function(a){B(this.elements,a,"children")}};var F,w={},q,s={},M=function(a){var b=a.data.$.ctrlKey||a.data.$.metaKey,c=
a.data.$.altKey,e=a.data.$.shiftKey,d=String.fromCharCode(a.data.$.keyCode);if((b=s[(b?"CTRL+":"")+(c?"ALT+":"")+(e?"SHIFT+":"")+d])&&b.length)b=b[b.length-1],b.keydown&&b.keydown.call(b.uiElement,b.dialog,b.key),a.data.preventDefault()},N=function(a){var b=a.data.$.ctrlKey||a.data.$.metaKey,c=a.data.$.altKey,e=a.data.$.shiftKey,d=String.fromCharCode(a.data.$.keyCode);if((b=s[(b?"CTRL+":"")+(c?"ALT+":"")+(e?"SHIFT+":"")+d])&&b.length)b=b[b.length-1],b.keyup&&(b.keyup.call(b.uiElement,b.dialog,b.key),
a.data.preventDefault())},O=function(a,b,c,e,d){(s[c]||(s[c]=[])).push({uiElement:a,dialog:b,key:c,keyup:d||a.accessKeyUp,keydown:e||a.accessKeyDown})},X=function(a){for(var b in s){for(var c=s[b],e=c.length-1;0<=e;e--)(c[e].dialog==a||c[e].uiElement==a)&&c.splice(e,1);0===c.length&&delete s[b]}},Z=function(a,b){a._.accessKeyMap[b]&&a.selectPage(a._.accessKeyMap[b])},Y=function(){};(function(){CKEDITOR.ui.dialog={uiElement:function(a,b,c,e,d,g,f){if(!(4>arguments.length)){var i=(e.call?e(b):e)||"div",
l=["<",i," "],k=(d&&d.call?d(b):d)||{},h=(g&&g.call?g(b):g)||{},o=(f&&f.call?f.call(this,a,b):f)||"",j=this.domId=h.id||CKEDITOR.tools.getNextId()+"_uiElement";this.id=b.id;b.requiredContent&&!a.getParentEditor().filter.check(b.requiredContent)&&(k.display="none",this.notAllowed=!0);h.id=j;var n={};b.type&&(n["cke_dialog_ui_"+b.type]=1);b.className&&(n[b.className]=1);b.disabled&&(n.cke_disabled=1);for(var m=h["class"]&&h["class"].split?h["class"].split(" "):[],j=0;j<m.length;j++)m[j]&&(n[m[j]]=1);
m=[];for(j in n)m.push(j);h["class"]=m.join(" ");b.title&&(h.title=b.title);n=(b.style||"").split(";");b.align&&(m=b.align,k["margin-left"]="left"==m?0:"auto",k["margin-right"]="right"==m?0:"auto");for(j in k)n.push(j+":"+k[j]);b.hidden&&n.push("display:none");for(j=n.length-1;0<=j;j--)""===n[j]&&n.splice(j,1);0<n.length&&(h.style=(h.style?h.style+"; ":"")+n.join("; "));for(j in h)l.push(j+'="'+CKEDITOR.tools.htmlEncode(h[j])+'" ');l.push(">",o,"</",i,">");c.push(l.join(""));(this._||(this._={})).dialog=
a;"boolean"==typeof b.isChanged&&(this.isChanged=function(){return b.isChanged});"function"==typeof b.isChanged&&(this.isChanged=b.isChanged);"function"==typeof b.setValue&&(this.setValue=CKEDITOR.tools.override(this.setValue,function(a){return function(c){a.call(this,b.setValue.call(this,c))}}));"function"==typeof b.getValue&&(this.getValue=CKEDITOR.tools.override(this.getValue,function(a){return function(){return b.getValue.call(this,a.call(this))}}));CKEDITOR.event.implementOn(this);this.registerEvents(b);
this.accessKeyUp&&(this.accessKeyDown&&b.accessKey)&&O(this,a,"CTRL+"+b.accessKey);var p=this;a.on("load",function(){var b=p.getInputElement();if(b){var c=p.type in{checkbox:1,ratio:1}&&CKEDITOR.env.ie&&CKEDITOR.env.version<8?"cke_dialog_ui_focused":"";b.on("focus",function(){a._.tabBarMode=false;a._.hasFocus=true;p.fire("focus");c&&this.addClass(c)});b.on("blur",function(){p.fire("blur");c&&this.removeClass(c)})}});CKEDITOR.tools.extend(this,b);this.keyboardFocusable&&(this.tabIndex=b.tabIndex||
0,this.focusIndex=a._.focusList.push(this)-1,this.on("focus",function(){a._.currentFocusIndex=p.focusIndex}))}},hbox:function(a,b,c,e,d){if(!(4>arguments.length)){this._||(this._={});var g=this._.children=b,f=d&&d.widths||null,i=d&&d.height||null,l,k={role:"presentation"};d&&d.align&&(k.align=d.align);CKEDITOR.ui.dialog.uiElement.call(this,a,d||{type:"hbox"},e,"table",{},k,function(){var a=['<tbody><tr class="cke_dialog_ui_hbox">'];for(l=0;l<c.length;l++){var b="cke_dialog_ui_hbox_child",e=[];0===
l&&(b="cke_dialog_ui_hbox_first");l==c.length-1&&(b="cke_dialog_ui_hbox_last");a.push('<td class="',b,'" role="presentation" ');f?f[l]&&e.push("width:"+r(f[l])):e.push("width:"+Math.floor(100/c.length)+"%");i&&e.push("height:"+r(i));d&&void 0!=d.padding&&e.push("padding:"+r(d.padding));CKEDITOR.env.ie&&(CKEDITOR.env.quirks&&g[l].align)&&e.push("text-align:"+g[l].align);0<e.length&&a.push('style="'+e.join("; ")+'" ');a.push(">",c[l],"</td>")}a.push("</tr></tbody>");return a.join("")})}},vbox:function(a,
b,c,e,d){if(!(3>arguments.length)){this._||(this._={});var g=this._.children=b,f=d&&d.width||null,i=d&&d.heights||null;CKEDITOR.ui.dialog.uiElement.call(this,a,d||{type:"vbox"},e,"div",null,{role:"presentation"},function(){var b=['<table role="presentation" cellspacing="0" border="0" '];b.push('style="');d&&d.expand&&b.push("height:100%;");b.push("width:"+r(f||"100%"),";");CKEDITOR.env.webkit&&b.push("float:none;");b.push('"');b.push('align="',CKEDITOR.tools.htmlEncode(d&&d.align||("ltr"==a.getParentEditor().lang.dir?
"left":"right")),'" ');b.push("><tbody>");for(var e=0;e<c.length;e++){var h=[];b.push('<tr><td role="presentation" ');f&&h.push("width:"+r(f||"100%"));i?h.push("height:"+r(i[e])):d&&d.expand&&h.push("height:"+Math.floor(100/c.length)+"%");d&&void 0!=d.padding&&h.push("padding:"+r(d.padding));CKEDITOR.env.ie&&(CKEDITOR.env.quirks&&g[e].align)&&h.push("text-align:"+g[e].align);0<h.length&&b.push('style="',h.join("; "),'" ');b.push(' class="cke_dialog_ui_vbox_child">',c[e],"</td></tr>")}b.push("</tbody></table>");
return b.join("")})}}}})();CKEDITOR.ui.dialog.uiElement.prototype={getElement:function(){return CKEDITOR.document.getById(this.domId)},getInputElement:function(){return this.getElement()},getDialog:function(){return this._.dialog},setValue:function(a,b){this.getInputElement().setValue(a);!b&&this.fire("change",{value:a});return this},getValue:function(){return this.getInputElement().getValue()},isChanged:function(){return!1},selectParentTab:function(){for(var a=this.getInputElement();(a=a.getParent())&&
-1==a.$.className.search("cke_dialog_page_contents"););if(!a)return this;a=a.getAttribute("name");this._.dialog._.currentTabId!=a&&this._.dialog.selectPage(a);return this},focus:function(){this.selectParentTab().getInputElement().focus();return this},registerEvents:function(a){var b=/^on([A-Z]\w+)/,c,e=function(a,b,c,d){b.on("load",function(){a.getInputElement().on(c,d,a)})},d;for(d in a)if(c=d.match(b))this.eventProcessors[d]?this.eventProcessors[d].call(this,this._.dialog,a[d]):e(this,this._.dialog,
c[1].toLowerCase(),a[d]);return this},eventProcessors:{onLoad:function(a,b){a.on("load",b,this)},onShow:function(a,b){a.on("show",b,this)},onHide:function(a,b){a.on("hide",b,this)}},accessKeyDown:function(){this.focus()},accessKeyUp:function(){},disable:function(){var a=this.getElement();this.getInputElement().setAttribute("disabled","true");a.addClass("cke_disabled")},enable:function(){var a=this.getElement();this.getInputElement().removeAttribute("disabled");a.removeClass("cke_disabled")},isEnabled:function(){return!this.getElement().hasClass("cke_disabled")},
isVisible:function(){return this.getInputElement().isVisible()},isFocusable:function(){return!this.isEnabled()||!this.isVisible()?!1:!0}};CKEDITOR.ui.dialog.hbox.prototype=CKEDITOR.tools.extend(new CKEDITOR.ui.dialog.uiElement,{getChild:function(a){if(1>arguments.length)return this._.children.concat();a.splice||(a=[a]);return 2>a.length?this._.children[a[0]]:this._.children[a[0]]&&this._.children[a[0]].getChild?this._.children[a[0]].getChild(a.slice(1,a.length)):null}},!0);CKEDITOR.ui.dialog.vbox.prototype=
new CKEDITOR.ui.dialog.hbox;(function(){var a={build:function(a,c,e){for(var d=c.children,g,f=[],i=[],l=0;l<d.length&&(g=d[l]);l++){var k=[];f.push(k);i.push(CKEDITOR.dialog._.uiElementBuilders[g.type].build(a,g,k))}return new CKEDITOR.ui.dialog[c.type](a,i,f,e,c)}};CKEDITOR.dialog.addUIElement("hbox",a);CKEDITOR.dialog.addUIElement("vbox",a)})();CKEDITOR.dialogCommand=function(a,b){this.dialogName=a;CKEDITOR.tools.extend(this,b,!0)};CKEDITOR.dialogCommand.prototype={exec:function(a){CKEDITOR.env.opera?
CKEDITOR.tools.setTimeout(function(){a.openDialog(this.dialogName)},0,this):a.openDialog(this.dialogName)},canUndo:!1,editorFocus:1};(function(){var a=/^([a]|[^a])+$/,b=/^\d*$/,c=/^\d*(?:\.\d+)?$/,e=/^(((\d*(\.\d+))|(\d*))(px|\%)?)?$/,d=/^(((\d*(\.\d+))|(\d*))(px|em|ex|in|cm|mm|pt|pc|\%)?)?$/i,g=/^(\s*[\w-]+\s*:\s*[^:;]+(?:;|$))*$/;CKEDITOR.VALIDATE_OR=1;CKEDITOR.VALIDATE_AND=2;CKEDITOR.dialog.validate={functions:function(){var a=arguments;return function(){var b=this&&this.getValue?this.getValue():
a[0],c=void 0,d=CKEDITOR.VALIDATE_AND,e=[],g;for(g=0;g<a.length;g++)if("function"==typeof a[g])e.push(a[g]);else break;g<a.length&&"string"==typeof a[g]&&(c=a[g],g++);g<a.length&&"number"==typeof a[g]&&(d=a[g]);var j=d==CKEDITOR.VALIDATE_AND?!0:!1;for(g=0;g<e.length;g++)j=d==CKEDITOR.VALIDATE_AND?j&&e[g](b):j||e[g](b);return!j?c:!0}},regex:function(a,b){return function(c){c=this&&this.getValue?this.getValue():c;return!a.test(c)?b:!0}},notEmpty:function(b){return this.regex(a,b)},integer:function(a){return this.regex(b,
a)},number:function(a){return this.regex(c,a)},cssLength:function(a){return this.functions(function(a){return d.test(CKEDITOR.tools.trim(a))},a)},htmlLength:function(a){return this.functions(function(a){return e.test(CKEDITOR.tools.trim(a))},a)},inlineStyle:function(a){return this.functions(function(a){return g.test(CKEDITOR.tools.trim(a))},a)},equals:function(a,b){return this.functions(function(b){return b==a},b)},notEqual:function(a,b){return this.functions(function(b){return b!=a},b)}};CKEDITOR.on("instanceDestroyed",
function(a){if(CKEDITOR.tools.isEmpty(CKEDITOR.instances)){for(var b;b=CKEDITOR.dialog._.currentTop;)b.hide();for(var c in w)w[c].remove();w={}}var a=a.editor._.storedDialogs,d;for(d in a)a[d].destroy()})})();CKEDITOR.tools.extend(CKEDITOR.editor.prototype,{openDialog:function(a,b){var c=null,e=CKEDITOR.dialog._.dialogDefinitions[a];null===CKEDITOR.dialog._.currentTop&&J(this);if("function"==typeof e)c=this._.storedDialogs||(this._.storedDialogs={}),c=c[a]||(c[a]=new CKEDITOR.dialog(this,a)),b&&b.call(c,
c),c.show();else{if("failed"==e)throw K(this),Error('[CKEDITOR.dialog.openDialog] Dialog "'+a+'" failed when loading definition.');"string"==typeof e&&CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(e),function(){"function"!=typeof CKEDITOR.dialog._.dialogDefinitions[a]&&(CKEDITOR.dialog._.dialogDefinitions[a]="failed");this.openDialog(a,b)},this,0,1)}CKEDITOR.skin.loadPart("dialog");return c}})})();
CKEDITOR.plugins.add("dialog",{requires:"dialogui",init:function(t){t.on("doubleclick",function(u){u.data.dialog&&t.openDialog(u.data.dialog)},null,null,999)}});(function(){CKEDITOR.plugins.add("a11yhelp",{requires:"dialog",availableLangs:{ar:1,bg:1,ca:1,cs:1,cy:1,da:1,de:1,el:1,en:1,eo:1,es:1,et:1,fa:1,fi:1,fr:1,"fr-ca":1,gl:1,gu:1,he:1,hi:1,hr:1,hu:1,id:1,it:1,ja:1,km:1,ko:1,ku:1,lt:1,lv:1,mk:1,mn:1,nb:1,nl:1,no:1,pl:1,pt:1,"pt-br":1,ro:1,ru:1,si:1,sk:1,sl:1,sq:1,sr:1,"sr-latn":1,sv:1,th:1,tr:1,ug:1,uk:1,vi:1,zh:1,"zh-cn":1},init:function(b){var c=this;b.addCommand("a11yHelp",{exec:function(){var a=b.langCode,a=c.availableLangs[a]?a:c.availableLangs[a.replace(/-.*/,
"")]?a.replace(/-.*/,""):"en";CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(c.path+"dialogs/lang/"+a+".js"),function(){b.lang.a11yhelp=c.langEntries[a];b.openDialog("a11yHelp")})},modes:{wysiwyg:1,source:1},readOnly:1,canUndo:!1});b.setKeystroke(CKEDITOR.ALT+48,"a11yHelp");CKEDITOR.dialog.add("a11yHelp",this.path+"dialogs/a11yhelp.js")}})})();CKEDITOR.plugins.add("basicstyles",{init:function(c){var e=0,d=function(g,d,b,a){if(a){var a=new CKEDITOR.style(a),f=h[b];f.unshift(a);c.attachStyleStateChange(a,function(a){!c.readOnly&&c.getCommand(b).setState(a)});c.addCommand(b,new CKEDITOR.styleCommand(a,{contentForms:f}));c.ui.addButton&&c.ui.addButton(g,{label:d,command:b,toolbar:"basicstyles,"+(e+=10)})}},h={bold:["strong","b",["span",function(a){a=a.styles["font-weight"];return"bold"==a||700<=+a}]],italic:["em","i",["span",function(a){return"italic"==
a.styles["font-style"]}]],underline:["u",["span",function(a){return"underline"==a.styles["text-decoration"]}]],strike:["s","strike",["span",function(a){return"line-through"==a.styles["text-decoration"]}]],subscript:["sub"],superscript:["sup"]},b=c.config,a=c.lang.basicstyles;d("Bold",a.bold,"bold",b.coreStyles_bold);d("Italic",a.italic,"italic",b.coreStyles_italic);d("Underline",a.underline,"underline",b.coreStyles_underline);d("Strike",a.strike,"strike",b.coreStyles_strike);d("Subscript",a.subscript,
"subscript",b.coreStyles_subscript);d("Superscript",a.superscript,"superscript",b.coreStyles_superscript);c.setKeystroke([[CKEDITOR.CTRL+66,"bold"],[CKEDITOR.CTRL+73,"italic"],[CKEDITOR.CTRL+85,"underline"]])}});CKEDITOR.config.coreStyles_bold={element:"strong",overrides:"b"};CKEDITOR.config.coreStyles_italic={element:"em",overrides:"i"};CKEDITOR.config.coreStyles_underline={element:"u"};CKEDITOR.config.coreStyles_strike={element:"s",overrides:"strike"};CKEDITOR.config.coreStyles_subscript={element:"sub"};
CKEDITOR.config.coreStyles_superscript={element:"sup"};(function(){var c='<a id="{id}" class="cke_button cke_button__{name} cke_button_{state} {cls}"'+(CKEDITOR.env.gecko&&10900<=CKEDITOR.env.version&&!CKEDITOR.env.hc?"":" href=\"javascript:void('{titleJs}')\"")+' title="{title}" tabindex="-1" hidefocus="true" role="button" aria-labelledby="{id}_label" aria-haspopup="{hasArrow}" aria-disabled="{ariaDisabled}"';if(CKEDITOR.env.opera||CKEDITOR.env.gecko&&CKEDITOR.env.mac)c+=' onkeypress="return false;"';CKEDITOR.env.gecko&&(c+=' onblur="this.style.cssText = this.style.cssText;"');
var c=c+(' onkeydown="return CKEDITOR.tools.callFunction({keydownFn},event);" onfocus="return CKEDITOR.tools.callFunction({focusFn},event);"  onmousedown="return CKEDITOR.tools.callFunction({mousedownFn},event);" '+(CKEDITOR.env.ie?'onclick="return false;" onmouseup':"onclick")+'="CKEDITOR.tools.callFunction({clickFn},this);return false;"><span class="cke_button_icon cke_button__{iconName}_icon" style="{style}"'),c=c+'>&nbsp;</span><span id="{id}_label" class="cke_button_label cke_button__{name}_label" aria-hidden="false">{label}</span>{arrowHtml}</a>',
m=CKEDITOR.addTemplate("buttonArrow",'<span class="cke_button_arrow">'+(CKEDITOR.env.hc?"&#9660;":"")+"</span>"),n=CKEDITOR.addTemplate("button",c);CKEDITOR.plugins.add("button",{beforeInit:function(a){a.ui.addHandler(CKEDITOR.UI_BUTTON,CKEDITOR.ui.button.handler)}});CKEDITOR.UI_BUTTON="button";CKEDITOR.ui.button=function(a){CKEDITOR.tools.extend(this,a,{title:a.label,click:a.click||function(b){b.execCommand(a.command)}});this._={}};CKEDITOR.ui.button.handler={create:function(a){return new CKEDITOR.ui.button(a)}};
CKEDITOR.ui.button.prototype={render:function(a,b){var c=CKEDITOR.env,i=this._.id=CKEDITOR.tools.getNextId(),f="",e=this.command,l;this._.editor=a;var d={id:i,button:this,editor:a,focus:function(){CKEDITOR.document.getById(i).focus()},execute:function(){this.button.click(a)},attach:function(a){this.button.attach(a)}},o=CKEDITOR.tools.addFunction(function(a){if(d.onkey)return a=new CKEDITOR.dom.event(a),!1!==d.onkey(d,a.getKeystroke())}),p=CKEDITOR.tools.addFunction(function(a){var b;d.onfocus&&(b=
!1!==d.onfocus(d,new CKEDITOR.dom.event(a)));CKEDITOR.env.gecko&&10900>CKEDITOR.env.version&&a.preventBubble();return b}),j=0,q=CKEDITOR.tools.addFunction(function(){if(CKEDITOR.env.opera){var b=a.editable();b.isInline()&&b.hasFocus&&(a.lockSelection(),j=1)}});d.clickFn=l=CKEDITOR.tools.addFunction(function(){j&&(a.unlockSelection(1),j=0);d.execute()});if(this.modes){var k={},g=function(){var b=a.mode;b&&(b=this.modes[b]?void 0!=k[b]?k[b]:CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED,b=a.readOnly&&
!this.readOnly?CKEDITOR.TRISTATE_DISABLED:b,this.setState(b),this.refresh&&this.refresh())};a.on("beforeModeUnload",function(){a.mode&&this._.state!=CKEDITOR.TRISTATE_DISABLED&&(k[a.mode]=this._.state)},this);a.on("activeFilterChange",g,this);a.on("mode",g,this);!this.readOnly&&a.on("readOnly",g,this)}else if(e&&(e=a.getCommand(e)))e.on("state",function(){this.setState(e.state)},this),f+=e.state==CKEDITOR.TRISTATE_ON?"on":e.state==CKEDITOR.TRISTATE_DISABLED?"disabled":"off";if(this.directional)a.on("contentDirChanged",
function(b){var c=CKEDITOR.document.getById(this._.id),d=c.getFirst(),b=b.data;b!=a.lang.dir?c.addClass("cke_"+b):c.removeClass("cke_ltr").removeClass("cke_rtl");d.setAttribute("style",CKEDITOR.skin.getIconStyle(h,"rtl"==b,this.icon,this.iconOffset))},this);e||(f+="off");var h=g=this.name||this.command;this.icon&&!/\./.test(this.icon)&&(h=this.icon,this.icon=null);c={id:i,name:g,iconName:h,label:this.label,cls:this.className||"",state:f,ariaDisabled:"disabled"==f?"true":"false",title:this.title,titleJs:c.gecko&&
10900<=c.version&&!c.hc?"":(this.title||"").replace("'",""),hasArrow:this.hasArrow?"true":"false",keydownFn:o,mousedownFn:q,focusFn:p,clickFn:l,style:CKEDITOR.skin.getIconStyle(h,"rtl"==a.lang.dir,this.icon,this.iconOffset),arrowHtml:this.hasArrow?m.output():""};n.output(c,b);if(this.onRender)this.onRender();return d},setState:function(a){if(this._.state==a)return!1;this._.state=a;var b=CKEDITOR.document.getById(this._.id);return b?(b.setState(a,"cke_button"),a==CKEDITOR.TRISTATE_DISABLED?b.setAttribute("aria-disabled",
!0):b.removeAttribute("aria-disabled"),this.hasArrow?(a=a==CKEDITOR.TRISTATE_ON?this._.editor.lang.button.selectedLabel.replace(/%1/g,this.label):this.label,CKEDITOR.document.getById(this._.id+"_label").setText(a)):a==CKEDITOR.TRISTATE_ON?b.setAttribute("aria-pressed",!0):b.removeAttribute("aria-pressed"),!0):!1},getState:function(){return this._.state},toFeature:function(a){if(this._.feature)return this._.feature;var b=this;!this.allowedContent&&(!this.requiredContent&&this.command)&&(b=a.getCommand(this.command)||
b);return this._.feature=b}};CKEDITOR.ui.prototype.addButton=function(a,b){this.add(a,CKEDITOR.UI_BUTTON,b)}})();(function(){CKEDITOR.plugins.add("panel",{beforeInit:function(a){a.ui.addHandler(CKEDITOR.UI_PANEL,CKEDITOR.ui.panel.handler)}});CKEDITOR.UI_PANEL="panel";CKEDITOR.ui.panel=function(a,b){b&&CKEDITOR.tools.extend(this,b);CKEDITOR.tools.extend(this,{className:"",css:[]});this.id=CKEDITOR.tools.getNextId();this.document=a;this.isFramed=this.forceIFrame||this.css.length;this._={blocks:{}}};CKEDITOR.ui.panel.handler={create:function(a){return new CKEDITOR.ui.panel(a)}};var f=CKEDITOR.addTemplate("panel",
'<div lang="{langCode}" id="{id}" dir={dir} class="cke cke_reset_all {editorId} cke_panel cke_panel {cls} cke_{dir}" style="z-index:{z-index}" role="presentation">{frame}</div>'),g=CKEDITOR.addTemplate("panel-frame",'<iframe id="{id}" class="cke_panel_frame" role="presentation" frameborder="0" src="{src}"></iframe>'),h=CKEDITOR.addTemplate("panel-frame-inner",'<!DOCTYPE html><html class="cke_panel_container {env}" dir="{dir}" lang="{langCode}"><head>{css}</head><body class="cke_{dir}" style="margin:0;padding:0" onload="{onload}"></body></html>');
CKEDITOR.ui.panel.prototype={render:function(a,b){this.getHolderElement=function(){var a=this._.holder;if(!a){if(this.isFramed){var a=this.document.getById(this.id+"_frame"),b=a.getParent(),a=a.getFrameDocument();CKEDITOR.env.iOS&&b.setStyles({overflow:"scroll","-webkit-overflow-scrolling":"touch"});b=CKEDITOR.tools.addFunction(CKEDITOR.tools.bind(function(){this.isLoaded=!0;if(this.onLoad)this.onLoad()},this));a.write(h.output(CKEDITOR.tools.extend({css:CKEDITOR.tools.buildStyleHtml(this.css),onload:"window.parent.CKEDITOR.tools.callFunction("+
b+");"},d)));a.getWindow().$.CKEDITOR=CKEDITOR;a.on("key"+(CKEDITOR.env.opera?"press":"down"),function(a){var b=a.data.getKeystroke(),c=this.document.getById(this.id).getAttribute("dir");this._.onKeyDown&&!1===this._.onKeyDown(b)?a.data.preventDefault():(27==b||b==("rtl"==c?39:37))&&this.onEscape&&!1===this.onEscape(b)&&a.data.preventDefault()},this);a=a.getBody();a.unselectable();CKEDITOR.env.air&&CKEDITOR.tools.callFunction(b)}else a=this.document.getById(this.id);this._.holder=a}return a};var d=
{editorId:a.id,id:this.id,langCode:a.langCode,dir:a.lang.dir,cls:this.className,frame:"",env:CKEDITOR.env.cssClass,"z-index":a.config.baseFloatZIndex+1};if(this.isFramed){var e=CKEDITOR.env.air?"javascript:void(0)":CKEDITOR.env.ie?"javascript:void(function(){"+encodeURIComponent("document.open();("+CKEDITOR.tools.fixDomain+")();document.close();")+"}())":"";d.frame=g.output({id:this.id+"_frame",src:e})}e=f.output(d);b&&b.push(e);return e},addBlock:function(a,b){b=this._.blocks[a]=b instanceof CKEDITOR.ui.panel.block?
b:new CKEDITOR.ui.panel.block(this.getHolderElement(),b);this._.currentBlock||this.showBlock(a);return b},getBlock:function(a){return this._.blocks[a]},showBlock:function(a){var a=this._.blocks[a],b=this._.currentBlock,d=!this.forceIFrame||CKEDITOR.env.ie?this._.holder:this.document.getById(this.id+"_frame");b&&b.hide();this._.currentBlock=a;CKEDITOR.fire("ariaWidget",d);a._.focusIndex=-1;this._.onKeyDown=a.onKeyDown&&CKEDITOR.tools.bind(a.onKeyDown,a);a.show();return a},destroy:function(){this.element&&
this.element.remove()}};CKEDITOR.ui.panel.block=CKEDITOR.tools.createClass({$:function(a,b){this.element=a.append(a.getDocument().createElement("div",{attributes:{tabindex:-1,"class":"cke_panel_block"},styles:{display:"none"}}));b&&CKEDITOR.tools.extend(this,b);this.element.setAttributes({role:this.attributes.role||"presentation","aria-label":this.attributes["aria-label"],title:this.attributes.title||this.attributes["aria-label"]});this.keys={};this._.focusIndex=-1;this.element.disableContextMenu()},
_:{markItem:function(a){-1!=a&&(a=this.element.getElementsByTag("a").getItem(this._.focusIndex=a),(CKEDITOR.env.webkit||CKEDITOR.env.opera)&&a.getDocument().getWindow().focus(),a.focus(),this.onMark&&this.onMark(a))}},proto:{show:function(){this.element.setStyle("display","")},hide:function(){(!this.onHide||!0!==this.onHide.call(this))&&this.element.setStyle("display","none")},onKeyDown:function(a,b){var d=this.keys[a];switch(d){case "next":for(var e=this._.focusIndex,d=this.element.getElementsByTag("a"),
c;c=d.getItem(++e);)if(c.getAttribute("_cke_focus")&&c.$.offsetWidth){this._.focusIndex=e;c.focus();break}return!c&&!b?(this._.focusIndex=-1,this.onKeyDown(a,1)):!1;case "prev":e=this._.focusIndex;for(d=this.element.getElementsByTag("a");0<e&&(c=d.getItem(--e));){if(c.getAttribute("_cke_focus")&&c.$.offsetWidth){this._.focusIndex=e;c.focus();break}c=null}return!c&&!b?(this._.focusIndex=d.count(),this.onKeyDown(a,1)):!1;case "click":case "mouseup":return e=this._.focusIndex,(c=0<=e&&this.element.getElementsByTag("a").getItem(e))&&
(c.$[d]?c.$[d]():c.$["on"+d]()),!1}return!0}}})})();CKEDITOR.plugins.add("floatpanel",{requires:"panel"});
(function(){function q(a,b,c,i,f){var f=CKEDITOR.tools.genKey(b.getUniqueId(),c.getUniqueId(),a.lang.dir,a.uiColor||"",i.css||"",f||""),h=g[f];h||(h=g[f]=new CKEDITOR.ui.panel(b,i),h.element=c.append(CKEDITOR.dom.element.createFromHtml(h.render(a),b)),h.element.setStyles({display:"none",position:"absolute"}));return h}var g={};CKEDITOR.ui.floatPanel=CKEDITOR.tools.createClass({$:function(a,b,c,i){function f(){d.hide()}c.forceIFrame=1;c.toolbarRelated&&a.elementMode==CKEDITOR.ELEMENT_MODE_INLINE&&
(b=CKEDITOR.document.getById("cke_"+a.name));var h=b.getDocument(),i=q(a,h,b,c,i||0),j=i.element,l=j.getFirst(),d=this;j.disableContextMenu();this.element=j;this._={editor:a,panel:i,parentElement:b,definition:c,document:h,iframe:l,children:[],dir:a.lang.dir};a.on("mode",f);a.on("resize",f);h.getWindow().on("resize",f)},proto:{addBlock:function(a,b){return this._.panel.addBlock(a,b)},addListBlock:function(a,b){return this._.panel.addListBlock(a,b)},getBlock:function(a){return this._.panel.getBlock(a)},
showBlock:function(a,b,c,i,f,h){var j=this._.panel,l=j.showBlock(a);this.allowBlur(!1);a=this._.editor.editable();this._.returnFocus=a.hasFocus?a:new CKEDITOR.dom.element(CKEDITOR.document.$.activeElement);var d=this.element,a=this._.iframe,a=CKEDITOR.env.ie?a:new CKEDITOR.dom.window(a.$.contentWindow),g=d.getDocument(),o=this._.parentElement.getPositionedAncestor(),p=b.getDocumentPosition(g),g=o?o.getDocumentPosition(g):{x:0,y:0},m="rtl"==this._.dir,e=p.x+(i||0)-g.x,k=p.y+(f||0)-g.y;if(m&&(1==c||
4==c))e+=b.$.offsetWidth;else if(!m&&(2==c||3==c))e+=b.$.offsetWidth-1;if(3==c||4==c)k+=b.$.offsetHeight-1;this._.panel._.offsetParentId=b.getId();d.setStyles({top:k+"px",left:0,display:""});d.setOpacity(0);d.getFirst().removeStyle("width");this._.editor.focusManager.add(a);this._.blurSet||(CKEDITOR.event.useCapture=!0,a.on("blur",function(a){this.allowBlur()&&a.data.getPhase()==CKEDITOR.EVENT_PHASE_AT_TARGET&&(this.visible&&!this._.activeChild)&&(delete this._.returnFocus,this.hide())},this),a.on("focus",
function(){this._.focused=!0;this.hideChild();this.allowBlur(!0)},this),CKEDITOR.event.useCapture=!1,this._.blurSet=1);j.onEscape=CKEDITOR.tools.bind(function(a){if(this.onEscape&&this.onEscape(a)===false)return false},this);CKEDITOR.tools.setTimeout(function(){var a=CKEDITOR.tools.bind(function(){d.removeStyle("width");if(l.autoSize){var a=l.element.getDocument(),a=(CKEDITOR.env.webkit?l.element:a.getBody()).$.scrollWidth;CKEDITOR.env.ie&&(CKEDITOR.env.quirks&&a>0)&&(a=a+((d.$.offsetWidth||0)-(d.$.clientWidth||
0)+3));d.setStyle("width",a+10+"px");a=l.element.$.scrollHeight;CKEDITOR.env.ie&&(CKEDITOR.env.quirks&&a>0)&&(a=a+((d.$.offsetHeight||0)-(d.$.clientHeight||0)+3));d.setStyle("height",a+"px");j._.currentBlock.element.setStyle("display","none").removeStyle("display")}else d.removeStyle("height");m&&(e=e-d.$.offsetWidth);d.setStyle("left",e+"px");var b=j.element.getWindow(),a=d.$.getBoundingClientRect(),b=b.getViewPaneSize(),c=a.width||a.right-a.left,f=a.height||a.bottom-a.top,i=m?a.right:b.width-a.left,
g=m?b.width-a.right:a.left;m?i<c&&(e=g>c?e+c:b.width>c?e-a.left:e-a.right+b.width):i<c&&(e=g>c?e-c:b.width>c?e-a.right+b.width:e-a.left);c=a.top;b.height-a.top<f&&(k=c>f?k-f:b.height>f?k-a.bottom+b.height:k-a.top);if(CKEDITOR.env.ie){b=a=new CKEDITOR.dom.element(d.$.offsetParent);b.getName()=="html"&&(b=b.getDocument().getBody());b.getComputedStyle("direction")=="rtl"&&(e=CKEDITOR.env.ie8Compat?e-d.getDocument().getDocumentElement().$.scrollLeft*2:e-(a.$.scrollWidth-a.$.clientWidth))}var a=d.getFirst(),
n;(n=a.getCustomData("activePanel"))&&n.onHide&&n.onHide.call(this,1);a.setCustomData("activePanel",this);d.setStyles({top:k+"px",left:e+"px"});d.setOpacity(1);h&&h()},this);j.isLoaded?a():j.onLoad=a;CKEDITOR.tools.setTimeout(function(){var a=CKEDITOR.env.webkit&&CKEDITOR.document.getWindow().getScrollPosition().y;this.focus();l.element.focus();if(CKEDITOR.env.webkit)CKEDITOR.document.getBody().$.scrollTop=a;this.allowBlur(true);this._.editor.fire("panelShow",this)},0,this)},CKEDITOR.env.air?200:
0,this);this.visible=1;this.onShow&&this.onShow.call(this)},focus:function(){if(CKEDITOR.env.webkit){var a=CKEDITOR.document.getActive();!a.equals(this._.iframe)&&a.$.blur()}(this._.lastFocused||this._.iframe.getFrameDocument().getWindow()).focus()},blur:function(){var a=this._.iframe.getFrameDocument().getActive();a.is("a")&&(this._.lastFocused=a)},hide:function(a){if(this.visible&&(!this.onHide||!0!==this.onHide.call(this))){this.hideChild();CKEDITOR.env.gecko&&this._.iframe.getFrameDocument().$.activeElement.blur();
this.element.setStyle("display","none");this.visible=0;this.element.getFirst().removeCustomData("activePanel");if(a=a&&this._.returnFocus)CKEDITOR.env.webkit&&a.type&&a.getWindow().$.focus(),a.focus();delete this._.lastFocused;this._.editor.fire("panelHide",this)}},allowBlur:function(a){var b=this._.panel;void 0!=a&&(b.allowBlur=a);return b.allowBlur},showAsChild:function(a,b,c,g,f,h){this._.activeChild==a&&a._.panel._.offsetParentId==c.getId()||(this.hideChild(),a.onHide=CKEDITOR.tools.bind(function(){CKEDITOR.tools.setTimeout(function(){this._.focused||
this.hide()},0,this)},this),this._.activeChild=a,this._.focused=!1,a.showBlock(b,c,g,f,h),this.blur(),(CKEDITOR.env.ie7Compat||CKEDITOR.env.ie6Compat)&&setTimeout(function(){a.element.getChild(0).$.style.cssText+=""},100))},hideChild:function(a){var b=this._.activeChild;b&&(delete b.onHide,delete this._.activeChild,b.hide(),a&&this.focus())}}});CKEDITOR.on("instanceDestroyed",function(){var a=CKEDITOR.tools.isEmpty(CKEDITOR.instances),b;for(b in g){var c=g[b];a?c.destroy():c.element.hide()}a&&(g=
{})})})();CKEDITOR.plugins.add("menu",{requires:"floatpanel",beforeInit:function(g){for(var h=g.config.menu_groups.split(","),m=g._.menuGroups={},l=g._.menuItems={},a=0;a<h.length;a++)m[h[a]]=a+1;g.addMenuGroup=function(b,a){m[b]=a||100};g.addMenuItem=function(a,c){m[c.group]&&(l[a]=new CKEDITOR.menuItem(this,a,c))};g.addMenuItems=function(a){for(var c in a)this.addMenuItem(c,a[c])};g.getMenuItem=function(a){return l[a]};g.removeMenuItem=function(a){delete l[a]}}});
(function(){function g(a){a.sort(function(a,c){return a.group<c.group?-1:a.group>c.group?1:a.order<c.order?-1:a.order>c.order?1:0})}var h='<span class="cke_menuitem"><a id="{id}" class="cke_menubutton cke_menubutton__{name} cke_menubutton_{state} {cls}" href="{href}" title="{title}" tabindex="-1"_cke_focus=1 hidefocus="true" role="{role}" aria-haspopup="{hasPopup}" aria-disabled="{disabled}" {ariaChecked}';if(CKEDITOR.env.opera||CKEDITOR.env.gecko&&CKEDITOR.env.mac)h+=' onkeypress="return false;"';
CKEDITOR.env.gecko&&(h+=' onblur="this.style.cssText = this.style.cssText;"');var h=h+(' onmouseover="CKEDITOR.tools.callFunction({hoverFn},{index});" onmouseout="CKEDITOR.tools.callFunction({moveOutFn},{index});" '+(CKEDITOR.env.ie?'onclick="return false;" onmouseup':"onclick")+'="CKEDITOR.tools.callFunction({clickFn},{index}); return false;">'),m=CKEDITOR.addTemplate("menuItem",h+'<span class="cke_menubutton_inner"><span class="cke_menubutton_icon"><span class="cke_button_icon cke_button__{iconName}_icon" style="{iconStyle}"></span></span><span class="cke_menubutton_label">{label}</span>{arrowHtml}</span></a></span>'),
l=CKEDITOR.addTemplate("menuArrow",'<span class="cke_menuarrow"><span>{label}</span></span>');CKEDITOR.menu=CKEDITOR.tools.createClass({$:function(a,b){b=this._.definition=b||{};this.id=CKEDITOR.tools.getNextId();this.editor=a;this.items=[];this._.listeners=[];this._.level=b.level||1;var c=CKEDITOR.tools.extend({},b.panel,{css:[CKEDITOR.skin.getPath("editor")],level:this._.level-1,block:{}}),k=c.block.attributes=c.attributes||{};!k.role&&(k.role="menu");this._.panelDefinition=c},_:{onShow:function(){var a=
this.editor.getSelection(),b=a&&a.getStartElement(),c=this.editor.elementPath(),k=this._.listeners;this.removeAll();for(var e=0;e<k.length;e++){var j=k[e](b,a,c);if(j)for(var i in j){var f=this.editor.getMenuItem(i);if(f&&(!f.command||this.editor.getCommand(f.command).state))f.state=j[i],this.add(f)}}},onClick:function(a){this.hide();if(a.onClick)a.onClick();else a.command&&this.editor.execCommand(a.command)},onEscape:function(a){var b=this.parent;b?b._.panel.hideChild(1):27==a&&this.hide(1);return!1},
onHide:function(){this.onHide&&this.onHide()},showSubMenu:function(a){var b=this._.subMenu,c=this.items[a];if(c=c.getItems&&c.getItems()){b?b.removeAll():(b=this._.subMenu=new CKEDITOR.menu(this.editor,CKEDITOR.tools.extend({},this._.definition,{level:this._.level+1},!0)),b.parent=this,b._.onClick=CKEDITOR.tools.bind(this._.onClick,this));for(var k in c){var e=this.editor.getMenuItem(k);e&&(e.state=c[k],b.add(e))}var j=this._.panel.getBlock(this.id).element.getDocument().getById(this.id+(""+a));setTimeout(function(){b.show(j,
2)},0)}else this._.panel.hideChild(1)}},proto:{add:function(a){a.order||(a.order=this.items.length);this.items.push(a)},removeAll:function(){this.items=[]},show:function(a,b,c,k){if(!this.parent&&(this._.onShow(),!this.items.length))return;var b=b||("rtl"==this.editor.lang.dir?2:1),e=this.items,j=this.editor,i=this._.panel,f=this._.element;if(!i){i=this._.panel=new CKEDITOR.ui.floatPanel(this.editor,CKEDITOR.document.getBody(),this._.panelDefinition,this._.level);i.onEscape=CKEDITOR.tools.bind(function(a){if(!1===
this._.onEscape(a))return!1},this);i.onShow=function(){i._.panel.getHolderElement().getParent().addClass("cke cke_reset_all")};i.onHide=CKEDITOR.tools.bind(function(){this._.onHide&&this._.onHide()},this);f=i.addBlock(this.id,this._.panelDefinition.block);f.autoSize=!0;var d=f.keys;d[40]="next";d[9]="next";d[38]="prev";d[CKEDITOR.SHIFT+9]="prev";d["rtl"==j.lang.dir?37:39]=CKEDITOR.env.ie?"mouseup":"click";d[32]=CKEDITOR.env.ie?"mouseup":"click";CKEDITOR.env.ie&&(d[13]="mouseup");f=this._.element=
f.element;d=f.getDocument();d.getBody().setStyle("overflow","hidden");d.getElementsByTag("html").getItem(0).setStyle("overflow","hidden");this._.itemOverFn=CKEDITOR.tools.addFunction(function(a){clearTimeout(this._.showSubTimeout);this._.showSubTimeout=CKEDITOR.tools.setTimeout(this._.showSubMenu,j.config.menu_subMenuDelay||400,this,[a])},this);this._.itemOutFn=CKEDITOR.tools.addFunction(function(){clearTimeout(this._.showSubTimeout)},this);this._.itemClickFn=CKEDITOR.tools.addFunction(function(a){var b=
this.items[a];if(b.state==CKEDITOR.TRISTATE_DISABLED)this.hide(1);else if(b.getItems)this._.showSubMenu(a);else this._.onClick(b)},this)}g(e);for(var d=j.elementPath(),d=['<div class="cke_menu'+(d&&d.direction()!=j.lang.dir?" cke_mixed_dir_content":"")+'" role="presentation">'],h=e.length,m=h&&e[0].group,l=0;l<h;l++){var n=e[l];m!=n.group&&(d.push('<div class="cke_menuseparator" role="separator"></div>'),m=n.group);n.render(this,l,d)}d.push("</div>");f.setHtml(d.join(""));CKEDITOR.ui.fire("ready",
this);this.parent?this.parent._.panel.showAsChild(i,this.id,a,b,c,k):i.showBlock(this.id,a,b,c,k);j.fire("menuShow",[i])},addListener:function(a){this._.listeners.push(a)},hide:function(a){this._.onHide&&this._.onHide();this._.panel&&this._.panel.hide(a)}}});CKEDITOR.menuItem=CKEDITOR.tools.createClass({$:function(a,b,c){CKEDITOR.tools.extend(this,c,{order:0,className:"cke_menubutton__"+b});this.group=a._.menuGroups[this.group];this.editor=a;this.name=b},proto:{render:function(a,b,c){var h=a.id+(""+
b),e="undefined"==typeof this.state?CKEDITOR.TRISTATE_OFF:this.state,j="",i=e==CKEDITOR.TRISTATE_ON?"on":e==CKEDITOR.TRISTATE_DISABLED?"disabled":"off";this.role in{menuitemcheckbox:1,menuitemradio:1}&&(j=' aria-checked="'+(e==CKEDITOR.TRISTATE_ON?"true":"false")+'"');var f=this.getItems,d="&#"+("rtl"==this.editor.lang.dir?"9668":"9658")+";",g=this.name;this.icon&&!/\./.test(this.icon)&&(g=this.icon);a={id:h,name:this.name,iconName:g,label:this.label,cls:this.className||"",state:i,hasPopup:f?"true":
"false",disabled:e==CKEDITOR.TRISTATE_DISABLED,title:this.label,href:"javascript:void('"+(this.label||"").replace("'")+"')",hoverFn:a._.itemOverFn,moveOutFn:a._.itemOutFn,clickFn:a._.itemClickFn,index:b,iconStyle:CKEDITOR.skin.getIconStyle(g,"rtl"==this.editor.lang.dir,g==this.icon?null:this.icon,this.iconOffset),arrowHtml:f?l.output({label:d}):"",role:this.role?this.role:"menuitem",ariaChecked:j};m.output(a,c)}}})})();CKEDITOR.config.menu_groups="clipboard,form,tablecell,tablecellproperties,tablerow,tablecolumn,table,anchor,link,image,flash,checkbox,radio,textfield,hiddenfield,imagebutton,button,select,textarea,div";CKEDITOR.plugins.add("contextmenu",{requires:"menu",onLoad:function(){CKEDITOR.plugins.contextMenu=CKEDITOR.tools.createClass({base:CKEDITOR.menu,$:function(a){this.base.call(this,a,{panel:{className:"cke_menu_panel",attributes:{"aria-label":a.lang.contextmenu.options}}})},proto:{addTarget:function(a,c){a.on("contextmenu",function(a){var a=a.data,b=CKEDITOR.env.webkit?d:CKEDITOR.env.mac?a.$.metaKey:a.$.ctrlKey;if(!c||!b){a.preventDefault();var e=a.getTarget().getDocument(),f=a.getTarget().getDocument().getDocumentElement(),
b=!e.equals(CKEDITOR.document),e=e.getWindow().getScrollPosition(),g=b?a.$.clientX:a.$.pageX||e.x+a.$.clientX,h=b?a.$.clientY:a.$.pageY||e.y+a.$.clientY;CKEDITOR.tools.setTimeout(function(){this.open(f,null,g,h)},CKEDITOR.env.ie?200:0,this)}},this);if(CKEDITOR.env.webkit){var d,b=function(){d=0};a.on("keydown",function(a){d=CKEDITOR.env.mac?a.data.$.metaKey:a.data.$.ctrlKey});a.on("keyup",b);a.on("contextmenu",b)}},open:function(a,c,d,b){this.editor.focus();a=a||CKEDITOR.document.getDocumentElement();
this.editor.selectionChange(1);this.show(a,c,d,b)}}})},beforeInit:function(a){var c=a.contextMenu=new CKEDITOR.plugins.contextMenu(a);a.on("contentDom",function(){c.addTarget(a.editable(),!1!==a.config.browserContextMenuOnCtrl)});a.addCommand("contextMenu",{exec:function(){a.contextMenu.open(a.document.getBody())}});a.setKeystroke(CKEDITOR.SHIFT+121,"contextMenu");a.setKeystroke(CKEDITOR.CTRL+CKEDITOR.SHIFT+121,"contextMenu")}});(function(){function l(e,c,b){b=e.config.forceEnterMode||b;"wysiwyg"==e.mode&&(c||(c=e.activeEnterMode),e.elementPath().isContextFor("p")||(c=CKEDITOR.ENTER_BR,b=1),e.fire("saveSnapshot"),c==CKEDITOR.ENTER_BR?o(e,c,null,b):p(e,c,null,b),e.fire("saveSnapshot"))}function q(e){for(var e=e.getSelection().getRanges(!0),c=e.length-1;0<c;c--)e[c].deleteContents();return e[0]}CKEDITOR.plugins.add("enterkey",{init:function(e){e.addCommand("enter",{modes:{wysiwyg:1},editorFocus:!1,exec:function(c){l(c)}});
e.addCommand("shiftEnter",{modes:{wysiwyg:1},editorFocus:!1,exec:function(c){l(c,c.activeShiftEnterMode,1)}});e.setKeystroke([[13,"enter"],[CKEDITOR.SHIFT+13,"shiftEnter"]])}});var t=CKEDITOR.dom.walker.whitespaces(),u=CKEDITOR.dom.walker.bookmark();CKEDITOR.plugins.enterkey={enterBlock:function(e,c,b,i){if(b=b||q(e)){var f=b.document,j=b.checkStartOfBlock(),h=b.checkEndOfBlock(),a=e.elementPath(b.startContainer).block,k=c==CKEDITOR.ENTER_DIV?"div":"p",d;if(j&&h){if(a&&(a.is("li")||a.getParent().is("li"))){b=
a.getParent();d=b.getParent();var i=!a.hasPrevious(),m=!a.hasNext(),k=e.getSelection(),g=k.createBookmarks(),j=a.getDirection(1),h=a.getAttribute("class"),n=a.getAttribute("style"),l=d.getDirection(1)!=j,e=e.enterMode!=CKEDITOR.ENTER_BR||l||n||h;if(d.is("li"))if(i||m)a[i?"insertBefore":"insertAfter"](d);else a.breakParent(d);else{if(e)if(d=f.createElement(c==CKEDITOR.ENTER_P?"p":"div"),l&&d.setAttribute("dir",j),n&&d.setAttribute("style",n),h&&d.setAttribute("class",h),a.moveChildren(d),i||m)d[i?
"insertBefore":"insertAfter"](b);else a.breakParent(b),d.insertAfter(b);else if(a.appendBogus(!0),i||m)for(;f=a[i?"getFirst":"getLast"]();)f[i?"insertBefore":"insertAfter"](b);else for(a.breakParent(b);f=a.getLast();)f.insertAfter(b);a.remove()}k.selectBookmarks(g);return}if(a&&a.getParent().is("blockquote")){a.breakParent(a.getParent());a.getPrevious().getFirst(CKEDITOR.dom.walker.invisible(1))||a.getPrevious().remove();a.getNext().getFirst(CKEDITOR.dom.walker.invisible(1))||a.getNext().remove();
b.moveToElementEditStart(a);b.select();return}}else if(a&&a.is("pre")&&!h){o(e,c,b,i);return}if(h=b.splitBlock(k)){c=h.previousBlock;a=h.nextBlock;e=h.wasStartOfBlock;j=h.wasEndOfBlock;if(a)g=a.getParent(),g.is("li")&&(a.breakParent(g),a.move(a.getNext(),1));else if(c&&(g=c.getParent())&&g.is("li"))c.breakParent(g),g=c.getNext(),b.moveToElementEditStart(g),c.move(c.getPrevious());if(!e&&!j)a.is("li")&&(d=b.clone(),d.selectNodeContents(a),d=new CKEDITOR.dom.walker(d),d.evaluator=function(a){return!(u(a)||
t(a)||a.type==CKEDITOR.NODE_ELEMENT&&a.getName()in CKEDITOR.dtd.$inline&&!(a.getName()in CKEDITOR.dtd.$empty))},(g=d.next())&&(g.type==CKEDITOR.NODE_ELEMENT&&g.is("ul","ol"))&&(CKEDITOR.env.needsBrFiller?f.createElement("br"):f.createText(" ")).insertBefore(g)),a&&b.moveToElementEditStart(a);else{if(c){if(c.is("li")||!r.test(c.getName())&&!c.is("pre"))d=c.clone()}else a&&(d=a.clone());d?i&&!d.is("li")&&d.renameNode(k):g&&g.is("li")?d=g:(d=f.createElement(k),c&&(m=c.getDirection())&&d.setAttribute("dir",
m));if(f=h.elementPath){i=0;for(k=f.elements.length;i<k;i++){g=f.elements[i];if(g.equals(f.block)||g.equals(f.blockLimit))break;CKEDITOR.dtd.$removeEmpty[g.getName()]&&(g=g.clone(),d.moveChildren(g),d.append(g))}}d.appendBogus();d.getParent()||b.insertNode(d);d.is("li")&&d.removeAttribute("value");if(CKEDITOR.env.ie&&e&&(!j||!c.getChildCount()))b.moveToElementEditStart(j?c:d),b.select();b.moveToElementEditStart(e&&!j?a:d)}b.select();b.scrollIntoView()}}},enterBr:function(e,c,b,i){if(b=b||q(e)){var f=
b.document,j=b.checkEndOfBlock(),h=new CKEDITOR.dom.elementPath(e.getSelection().getStartElement()),a=h.block,h=a&&h.block.getName();!i&&"li"==h?p(e,c,b,i):(!i&&j&&r.test(h)?(j=a.getDirection())?(f=f.createElement("div"),f.setAttribute("dir",j),f.insertAfter(a),b.setStart(f,0)):(f.createElement("br").insertAfter(a),CKEDITOR.env.gecko&&f.createText("").insertAfter(a),b.setStartAt(a.getNext(),CKEDITOR.env.ie?CKEDITOR.POSITION_BEFORE_START:CKEDITOR.POSITION_AFTER_START)):(a="pre"==h&&CKEDITOR.env.ie&&
8>CKEDITOR.env.version?f.createText("\r"):f.createElement("br"),b.deleteContents(),b.insertNode(a),CKEDITOR.env.needsBrFiller?(f.createText("﻿").insertAfter(a),j&&a.getParent().appendBogus(),a.getNext().$.nodeValue="",b.setStartAt(a.getNext(),CKEDITOR.POSITION_AFTER_START)):b.setStartAt(a,CKEDITOR.POSITION_AFTER_END)),b.collapse(!0),b.select(),b.scrollIntoView())}}};var s=CKEDITOR.plugins.enterkey,o=s.enterBr,p=s.enterBlock,r=/^h[1-6]$/})();(function(){function j(a,b){var d={},e=[],f={nbsp:" ",shy:"­",gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},a=a.replace(/\b(nbsp|shy|gt|lt|amp|apos|quot)(?:,|$)/g,function(a,h){var c=b?"&"+h+";":f[h];d[c]=b?f[h]:"&"+h+";";e.push(c);return""});if(!b&&a){var a=a.split(","),c=document.createElement("div"),g;c.innerHTML="&"+a.join(";&")+";";g=c.innerHTML;c=null;for(c=0;c<g.length;c++){var i=g.charAt(c);d[i]="&"+a[c]+";";e.push(i)}}d.regex=e.join(b?"|":"");return d}CKEDITOR.plugins.add("entities",{afterInit:function(a){var b=
a.config;if(a=(a=a.dataProcessor)&&a.htmlFilter){var d=[];!1!==b.basicEntities&&d.push("nbsp,gt,lt,amp");b.entities&&(d.length&&d.push("quot,iexcl,cent,pound,curren,yen,brvbar,sect,uml,copy,ordf,laquo,not,shy,reg,macr,deg,plusmn,sup2,sup3,acute,micro,para,middot,cedil,sup1,ordm,raquo,frac14,frac12,frac34,iquest,times,divide,fnof,bull,hellip,prime,Prime,oline,frasl,weierp,image,real,trade,alefsym,larr,uarr,rarr,darr,harr,crarr,lArr,uArr,rArr,dArr,hArr,forall,part,exist,empty,nabla,isin,notin,ni,prod,sum,minus,lowast,radic,prop,infin,ang,and,or,cap,cup,int,there4,sim,cong,asymp,ne,equiv,le,ge,sub,sup,nsub,sube,supe,oplus,otimes,perp,sdot,lceil,rceil,lfloor,rfloor,lang,rang,loz,spades,clubs,hearts,diams,circ,tilde,ensp,emsp,thinsp,zwnj,zwj,lrm,rlm,ndash,mdash,lsquo,rsquo,sbquo,ldquo,rdquo,bdquo,dagger,Dagger,permil,lsaquo,rsaquo,euro"),
b.entities_latin&&d.push("Agrave,Aacute,Acirc,Atilde,Auml,Aring,AElig,Ccedil,Egrave,Eacute,Ecirc,Euml,Igrave,Iacute,Icirc,Iuml,ETH,Ntilde,Ograve,Oacute,Ocirc,Otilde,Ouml,Oslash,Ugrave,Uacute,Ucirc,Uuml,Yacute,THORN,szlig,agrave,aacute,acirc,atilde,auml,aring,aelig,ccedil,egrave,eacute,ecirc,euml,igrave,iacute,icirc,iuml,eth,ntilde,ograve,oacute,ocirc,otilde,ouml,oslash,ugrave,uacute,ucirc,uuml,yacute,thorn,yuml,OElig,oelig,Scaron,scaron,Yuml"),b.entities_greek&&d.push("Alpha,Beta,Gamma,Delta,Epsilon,Zeta,Eta,Theta,Iota,Kappa,Lambda,Mu,Nu,Xi,Omicron,Pi,Rho,Sigma,Tau,Upsilon,Phi,Chi,Psi,Omega,alpha,beta,gamma,delta,epsilon,zeta,eta,theta,iota,kappa,lambda,mu,nu,xi,omicron,pi,rho,sigmaf,sigma,tau,upsilon,phi,chi,psi,omega,thetasym,upsih,piv"),
b.entities_additional&&d.push(b.entities_additional));var e=j(d.join(",")),f=e.regex?"["+e.regex+"]":"a^";delete e.regex;b.entities&&b.entities_processNumerical&&(f="[^ -~]|"+f);var f=RegExp(f,"g"),c=function(a){return b.entities_processNumerical=="force"||!e[a]?"&#"+a.charCodeAt(0)+";":e[a]},g=j("nbsp,gt,lt,amp,shy",!0),i=RegExp(g.regex,"g"),k=function(a){return g[a]};a.addRules({text:function(a){return a.replace(i,k).replace(f,c)}},{applyToAll:!0,excludeNestedEditable:!0})}}})})();
CKEDITOR.config.basicEntities=!0;CKEDITOR.config.entities=!0;CKEDITOR.config.entities_latin=!0;CKEDITOR.config.entities_greek=!0;CKEDITOR.config.entities_additional="#39";CKEDITOR.plugins.add("htmlwriter",{init:function(b){var a=new CKEDITOR.htmlWriter;a.forceSimpleAmpersand=b.config.forceSimpleAmpersand;a.indentationChars=b.config.dataIndentationChars||"\t";b.dataProcessor.writer=a}});
CKEDITOR.htmlWriter=CKEDITOR.tools.createClass({base:CKEDITOR.htmlParser.basicWriter,$:function(){this.base();this.indentationChars="\t";this.selfClosingEnd=" />";this.lineBreakChars="\n";this.sortAttributes=1;this._.indent=0;this._.indentation="";this._.inPre=0;this._.rules={};var b=CKEDITOR.dtd,a;for(a in CKEDITOR.tools.extend({},b.$nonBodyContent,b.$block,b.$listItem,b.$tableContent))this.setRules(a,{indent:!b[a]["#"],breakBeforeOpen:1,breakBeforeClose:!b[a]["#"],breakAfterClose:1,needsSpace:a in
b.$block&&!(a in{li:1,dt:1,dd:1})});this.setRules("br",{breakAfterOpen:1});this.setRules("title",{indent:0,breakAfterOpen:0});this.setRules("style",{indent:0,breakBeforeClose:1});this.setRules("pre",{breakAfterOpen:1,indent:0})},proto:{openTag:function(b){var a=this._.rules[b];this._.afterCloser&&(a&&a.needsSpace&&this._.needsSpace)&&this._.output.push("\n");this._.indent?this.indentation():a&&a.breakBeforeOpen&&(this.lineBreak(),this.indentation());this._.output.push("<",b);this._.afterCloser=0},
openTagClose:function(b,a){var c=this._.rules[b];a?(this._.output.push(this.selfClosingEnd),c&&c.breakAfterClose&&(this._.needsSpace=c.needsSpace)):(this._.output.push(">"),c&&c.indent&&(this._.indentation+=this.indentationChars));c&&c.breakAfterOpen&&this.lineBreak();"pre"==b&&(this._.inPre=1)},attribute:function(b,a){"string"==typeof a&&(this.forceSimpleAmpersand&&(a=a.replace(/&amp;/g,"&")),a=CKEDITOR.tools.htmlEncodeAttr(a));this._.output.push(" ",b,'="',a,'"')},closeTag:function(b){var a=this._.rules[b];
a&&a.indent&&(this._.indentation=this._.indentation.substr(this.indentationChars.length));this._.indent?this.indentation():a&&a.breakBeforeClose&&(this.lineBreak(),this.indentation());this._.output.push("</",b,">");"pre"==b&&(this._.inPre=0);a&&a.breakAfterClose&&(this.lineBreak(),this._.needsSpace=a.needsSpace);this._.afterCloser=1},text:function(b){this._.indent&&(this.indentation(),!this._.inPre&&(b=CKEDITOR.tools.ltrim(b)));this._.output.push(b)},comment:function(b){this._.indent&&this.indentation();
this._.output.push("<\!--",b,"--\>")},lineBreak:function(){!this._.inPre&&0<this._.output.length&&this._.output.push(this.lineBreakChars);this._.indent=1},indentation:function(){!this._.inPre&&this._.indentation&&this._.output.push(this._.indentation);this._.indent=0},reset:function(){this._.output=[];this._.indent=0;this._.indentation="";this._.afterCloser=0;this._.inPre=0},setRules:function(b,a){var c=this._.rules[b];c?CKEDITOR.tools.extend(c,a,!0):this._.rules[b]=a}}});(function(){function k(a,b){var e,f;b.on("refresh",function(a){var b=[i],c;for(c in a.data.states)b.push(a.data.states[c]);this.setState(CKEDITOR.tools.search(b,m)?m:i)},b,null,100);b.on("exec",function(b){e=a.getSelection();f=e.createBookmarks(1);b.data||(b.data={});b.data.done=!1},b,null,0);b.on("exec",function(){a.forceNextSelectionCheck();e.selectBookmarks(f)},b,null,100)}var i=CKEDITOR.TRISTATE_DISABLED,m=CKEDITOR.TRISTATE_OFF;CKEDITOR.plugins.add("indent",{init:function(a){var b=CKEDITOR.plugins.indent.genericDefinition;
k(a,a.addCommand("indent",new b(!0)));k(a,a.addCommand("outdent",new b));a.ui.addButton&&(a.ui.addButton("Indent",{label:a.lang.indent.indent,command:"indent",directional:!0,toolbar:"indent,20"}),a.ui.addButton("Outdent",{label:a.lang.indent.outdent,command:"outdent",directional:!0,toolbar:"indent,10"}));a.on("dirChanged",function(b){var f=a.createRange(),j=b.data.node;f.setStartBefore(j);f.setEndAfter(j);for(var l=new CKEDITOR.dom.walker(f),c;c=l.next();)if(c.type==CKEDITOR.NODE_ELEMENT)if(!c.equals(j)&&
c.getDirection()){f.setStartAfter(c);l=new CKEDITOR.dom.walker(f)}else{var d=a.config.indentClasses;if(d)for(var g=b.data.dir=="ltr"?["_rtl",""]:["","_rtl"],h=0;h<d.length;h++)if(c.hasClass(d[h]+g[0])){c.removeClass(d[h]+g[0]);c.addClass(d[h]+g[1])}d=c.getStyle("margin-right");g=c.getStyle("margin-left");d?c.setStyle("margin-left",d):c.removeStyle("margin-left");g?c.setStyle("margin-right",g):c.removeStyle("margin-right")}})}});CKEDITOR.plugins.indent={genericDefinition:function(a){this.isIndent=
!!a;this.startDisabled=!this.isIndent},specificDefinition:function(a,b,e){this.name=b;this.editor=a;this.jobs={};this.enterBr=a.config.enterMode==CKEDITOR.ENTER_BR;this.isIndent=!!e;this.relatedGlobal=e?"indent":"outdent";this.indentKey=e?9:CKEDITOR.SHIFT+9;this.database={}},registerCommands:function(a,b){a.on("pluginsLoaded",function(){for(var a in b)(function(a,b){var e=a.getCommand(b.relatedGlobal),c;for(c in b.jobs)e.on("exec",function(d){d.data.done||(a.fire("lockSnapshot"),b.execJob(a,c)&&(d.data.done=
!0),a.fire("unlockSnapshot"),CKEDITOR.dom.element.clearAllMarkers(b.database))},this,null,c),e.on("refresh",function(d){d.data.states||(d.data.states={});d.data.states[b.name+"@"+c]=b.refreshJob(a,c,d.data.path)},this,null,c);a.addFeature(b)})(this,b[a])})}};CKEDITOR.plugins.indent.genericDefinition.prototype={context:"p",exec:function(){}};CKEDITOR.plugins.indent.specificDefinition.prototype={execJob:function(a,b){var e=this.jobs[b];if(e.state!=i)return e.exec.call(this,a)},refreshJob:function(a,
b,e){b=this.jobs[b];b.state=a.activeFilter.checkFeature(this)?b.refresh.call(this,a,e):i;return b.state},getContext:function(a){return a.contains(this.context)}}})();(function(){function h(b,c,a){if(!b.getCustomData("indent_processed")){var d=this.editor,f=this.isIndent;if(c){d=b.$.className.match(this.classNameRegex);a=0;d&&(d=d[1],a=CKEDITOR.tools.indexOf(c,d)+1);if(0>(a+=f?1:-1))return;a=Math.min(a,c.length);a=Math.max(a,0);b.$.className=CKEDITOR.tools.ltrim(b.$.className.replace(this.classNameRegex,""));0<a&&b.addClass(c[a-1])}else{var c=i(b,a),a=parseInt(b.getStyle(c),10),g=d.config.indentOffset||40;isNaN(a)&&(a=0);a+=(f?1:-1)*g;if(0>a)return;a=Math.max(a,
0);a=Math.ceil(a/g)*g;b.setStyle(c,a?a+(d.config.indentUnit||"px"):"");""===b.getAttribute("style")&&b.removeAttribute("style")}CKEDITOR.dom.element.setMarker(this.database,b,"indent_processed",1)}}function i(b,c){return"ltr"==(c||b.getComputedStyle("direction"))?"margin-left":"margin-right"}var j=CKEDITOR.dtd.$listItem,l=CKEDITOR.dtd.$list,f=CKEDITOR.TRISTATE_DISABLED,k=CKEDITOR.TRISTATE_OFF;CKEDITOR.plugins.add("indentblock",{requires:"indent",init:function(b){function c(b,c){a.specificDefinition.apply(this,
arguments);this.allowedContent={"div h1 h2 h3 h4 h5 h6 ol p pre ul":{propertiesOnly:!0,styles:!d?"margin-left,margin-right":null,classes:d||null}};this.enterBr&&(this.allowedContent.div=!0);this.requiredContent=(this.enterBr?"div":"p")+(d?"("+d.join(",")+")":"{margin-left}");this.jobs={20:{refresh:function(a,b){var e=b.block||b.blockLimit;if(e.is(j))e=e.getParent();else if(e.getAscendant(j))return f;if(!this.enterBr&&!this.getContext(b))return f;if(d){var c;c=d;var e=e.$.className.match(this.classNameRegex),
g=this.isIndent;c=e?g?e[1]!=c.slice(-1):true:g;return c?k:f}return this.isIndent?k:e?CKEDITOR[(parseInt(e.getStyle(i(e)),10)||0)<=0?"TRISTATE_DISABLED":"TRISTATE_OFF"]:f},exec:function(a){var b=a.getSelection(),b=b&&b.getRanges()[0],c;if(c=a.elementPath().contains(l))h.call(this,c,d);else{b=b.createIterator();a=a.config.enterMode;b.enforceRealBlocks=true;for(b.enlargeBr=a!=CKEDITOR.ENTER_BR;c=b.getNextParagraph(a==CKEDITOR.ENTER_P?"p":"div");)c.isReadOnly()||h.call(this,c,d)}return true}}}}var a=
CKEDITOR.plugins.indent,d=b.config.indentClasses;a.registerCommands(b,{indentblock:new c(b,"indentblock",!0),outdentblock:new c(b,"outdentblock")});CKEDITOR.tools.extend(c.prototype,a.specificDefinition.prototype,{context:{div:1,dl:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,ul:1,ol:1,p:1,pre:1,table:1},classNameRegex:d?RegExp("(?:^|\\s+)("+d.join("|")+")(?=$|\\s)"):null})}})})();(function(){function s(e){function g(b){for(var f=d.startContainer,a=d.endContainer;f&&!f.getParent().equals(b);)f=f.getParent();for(;a&&!a.getParent().equals(b);)a=a.getParent();if(!f||!a)return!1;for(var h=f,f=[],c=!1;!c;)h.equals(a)&&(c=!0),f.push(h),h=h.getNext();if(1>f.length)return!1;h=b.getParents(!0);for(a=0;a<h.length;a++)if(h[a].getName&&k[h[a].getName()]){b=h[a];break}for(var h=n.isIndent?1:-1,a=f[0],f=f[f.length-1],c=CKEDITOR.plugins.list.listToArray(b,o),g=c[f.getCustomData("listarray_index")].indent,
a=a.getCustomData("listarray_index");a<=f.getCustomData("listarray_index");a++)if(c[a].indent+=h,0<h){var l=c[a].parent;c[a].parent=new CKEDITOR.dom.element(l.getName(),l.getDocument())}for(a=f.getCustomData("listarray_index")+1;a<c.length&&c[a].indent>g;a++)c[a].indent+=h;f=CKEDITOR.plugins.list.arrayToList(c,o,null,e.config.enterMode,b.getDirection());if(!n.isIndent){var i;if((i=b.getParent())&&i.is("li"))for(var h=f.listNode.getChildren(),m=[],j,a=h.count()-1;0<=a;a--)(j=h.getItem(a))&&(j.is&&
j.is("li"))&&m.push(j)}f&&f.listNode.replace(b);if(m&&m.length)for(a=0;a<m.length;a++){for(j=b=m[a];(j=j.getNext())&&j.is&&j.getName()in k;)CKEDITOR.env.needsNbspFiller&&!b.getFirst(t)&&b.append(d.document.createText(" ")),b.append(j);b.insertAfter(i)}f&&e.fire("contentDomInvalidated");return!0}for(var n=this,o=this.database,k=this.context,l=e.getSelection(),l=(l&&l.getRanges()).createIterator(),d;d=l.getNextRange();){for(var b=d.getCommonAncestor();b&&!(b.type==CKEDITOR.NODE_ELEMENT&&k[b.getName()]);)b=
b.getParent();b||(b=d.startPath().contains(k))&&d.setEndAt(b,CKEDITOR.POSITION_BEFORE_END);if(!b){var c=d.getEnclosedNode();c&&(c.type==CKEDITOR.NODE_ELEMENT&&c.getName()in k)&&(d.setStartAt(c,CKEDITOR.POSITION_AFTER_START),d.setEndAt(c,CKEDITOR.POSITION_BEFORE_END),b=c)}b&&(d.startContainer.type==CKEDITOR.NODE_ELEMENT&&d.startContainer.getName()in k)&&(c=new CKEDITOR.dom.walker(d),c.evaluator=i,d.startContainer=c.next());b&&(d.endContainer.type==CKEDITOR.NODE_ELEMENT&&d.endContainer.getName()in k)&&
(c=new CKEDITOR.dom.walker(d),c.evaluator=i,d.endContainer=c.previous());if(b)return g(b)}return 0}function p(e,g){g||(g=e.contains(this.context));return g&&e.block&&e.block.equals(g.getFirst(i))}function i(e){return e.type==CKEDITOR.NODE_ELEMENT&&e.is("li")}function t(e){return u(e)&&v(e)}var u=CKEDITOR.dom.walker.whitespaces(!0),v=CKEDITOR.dom.walker.bookmark(!1,!0),q=CKEDITOR.TRISTATE_DISABLED,r=CKEDITOR.TRISTATE_OFF;CKEDITOR.plugins.add("indentlist",{requires:"indent",init:function(e){function g(e,
g){i.specificDefinition.apply(this,arguments);this.requiredContent=["ul","ol"];e.on("key",function(g){if("wysiwyg"==e.mode&&g.data.keyCode==this.indentKey){var d=this.getContext(e.elementPath());if(d&&(!this.isIndent||!p.call(this,e.elementPath(),d)))e.execCommand(this.relatedGlobal),g.cancel()}},this);this.jobs[this.isIndent?10:30]={refresh:this.isIndent?function(e,d){var b=this.getContext(d),c=p.call(this,d,b);return!b||!this.isIndent||c?q:r}:function(e,d){return!this.getContext(d)||this.isIndent?
q:r},exec:CKEDITOR.tools.bind(s,this)}}var i=CKEDITOR.plugins.indent;i.registerCommands(e,{indentlist:new g(e,"indentlist",!0),outdentlist:new g(e,"outdentlist")});CKEDITOR.tools.extend(g.prototype,i.specificDefinition.prototype,{context:{ol:1,ul:1}})}})})();(function(){function E(c,j,e){function b(b){if((d=a[b?"getFirst":"getLast"]())&&(!d.is||!d.isBlockBoundary())&&(m=j.root[b?"getPrevious":"getNext"](CKEDITOR.dom.walker.invisible(!0)))&&(!m.is||!m.isBlockBoundary({br:1})))c.document.createElement("br")[b?"insertBefore":"insertAfter"](d)}for(var k=CKEDITOR.plugins.list.listToArray(j.root,e),g=[],h=0;h<j.contents.length;h++){var f=j.contents[h];if((f=f.getAscendant("li",!0))&&!f.getCustomData("list_item_processed"))g.push(f),CKEDITOR.dom.element.setMarker(e,
f,"list_item_processed",!0)}f=null;for(h=0;h<g.length;h++)f=g[h].getCustomData("listarray_index"),k[f].indent=-1;for(h=f+1;h<k.length;h++)if(k[h].indent>k[h-1].indent+1){g=k[h-1].indent+1-k[h].indent;for(f=k[h].indent;k[h]&&k[h].indent>=f;)k[h].indent+=g,h++;h--}var a=CKEDITOR.plugins.list.arrayToList(k,e,null,c.config.enterMode,j.root.getAttribute("dir")).listNode,d,m;b(!0);b();a.replace(j.root);c.fire("contentDomInvalidated")}function x(c,j){this.name=c;this.context=this.type=j;this.allowedContent=
j+" li";this.requiredContent=j}function A(c,j,e,b){for(var k,g;k=c[b?"getLast":"getFirst"](F);)(g=k.getDirection(1))!==j.getDirection(1)&&k.setAttribute("dir",g),k.remove(),e?k[b?"insertBefore":"insertAfter"](e):j.append(k,b)}function B(c){var j;(j=function(e){var b=c[e?"getPrevious":"getNext"](q);b&&(b.type==CKEDITOR.NODE_ELEMENT&&b.is(c.getName()))&&(A(c,b,null,!e),c.remove(),c=b)})();j(1)}function C(c){return c.type==CKEDITOR.NODE_ELEMENT&&(c.getName()in CKEDITOR.dtd.$block||c.getName()in CKEDITOR.dtd.$listItem)&&
CKEDITOR.dtd[c.getName()]["#"]}function y(c,j,e){c.fire("saveSnapshot");e.enlarge(CKEDITOR.ENLARGE_LIST_ITEM_CONTENTS);var b=e.extractContents();j.trim(!1,!0);var k=j.createBookmark(),g=new CKEDITOR.dom.elementPath(j.startContainer),h=g.block,g=g.lastElement.getAscendant("li",1)||h,f=new CKEDITOR.dom.elementPath(e.startContainer),a=f.contains(CKEDITOR.dtd.$listItem),f=f.contains(CKEDITOR.dtd.$list);h?(h=h.getBogus())&&h.remove():f&&(h=f.getPrevious(q))&&v(h)&&h.remove();(h=b.getLast())&&(h.type==
CKEDITOR.NODE_ELEMENT&&h.is("br"))&&h.remove();(h=j.startContainer.getChild(j.startOffset))?b.insertBefore(h):j.startContainer.append(b);if(a&&(b=w(a)))g.contains(a)?(A(b,a.getParent(),a),b.remove()):g.append(b);for(;e.checkStartOfBlock()&&e.checkEndOfBlock();){f=e.startPath();b=f.block;if(!b)break;b.is("li")&&(g=b.getParent(),b.equals(g.getLast(q))&&b.equals(g.getFirst(q))&&(b=g));e.moveToPosition(b,CKEDITOR.POSITION_BEFORE_START);b.remove()}e=e.clone();b=c.editable();e.setEndAt(b,CKEDITOR.POSITION_BEFORE_END);
e=new CKEDITOR.dom.walker(e);e.evaluator=function(a){return q(a)&&!v(a)};(e=e.next())&&(e.type==CKEDITOR.NODE_ELEMENT&&e.getName()in CKEDITOR.dtd.$list)&&B(e);j.moveToBookmark(k);j.select();c.fire("saveSnapshot")}function w(c){return(c=c.getLast(q))&&c.type==CKEDITOR.NODE_ELEMENT&&c.getName()in r?c:null}var r={ol:1,ul:1},G=CKEDITOR.dom.walker.whitespaces(),D=CKEDITOR.dom.walker.bookmark(),q=function(c){return!(G(c)||D(c))},v=CKEDITOR.dom.walker.bogus();CKEDITOR.plugins.list={listToArray:function(c,
j,e,b,k){if(!r[c.getName()])return[];b||(b=0);e||(e=[]);for(var g=0,h=c.getChildCount();g<h;g++){var f=c.getChild(g);f.type==CKEDITOR.NODE_ELEMENT&&f.getName()in CKEDITOR.dtd.$list&&CKEDITOR.plugins.list.listToArray(f,j,e,b+1);if("li"==f.$.nodeName.toLowerCase()){var a={parent:c,indent:b,element:f,contents:[]};k?a.grandparent=k:(a.grandparent=c.getParent(),a.grandparent&&"li"==a.grandparent.$.nodeName.toLowerCase()&&(a.grandparent=a.grandparent.getParent()));j&&CKEDITOR.dom.element.setMarker(j,f,
"listarray_index",e.length);e.push(a);for(var d=0,m=f.getChildCount(),i;d<m;d++)i=f.getChild(d),i.type==CKEDITOR.NODE_ELEMENT&&r[i.getName()]?CKEDITOR.plugins.list.listToArray(i,j,e,b+1,a.grandparent):a.contents.push(i)}}return e},arrayToList:function(c,j,e,b,k){e||(e=0);if(!c||c.length<e+1)return null;for(var g,h=c[e].parent.getDocument(),f=new CKEDITOR.dom.documentFragment(h),a=null,d=e,m=Math.max(c[e].indent,0),i=null,n,l,p=b==CKEDITOR.ENTER_P?"p":"div";;){var o=c[d];g=o.grandparent;n=o.element.getDirection(1);
if(o.indent==m){if(!a||c[d].parent.getName()!=a.getName())a=c[d].parent.clone(!1,1),k&&a.setAttribute("dir",k),f.append(a);i=a.append(o.element.clone(0,1));n!=a.getDirection(1)&&i.setAttribute("dir",n);for(g=0;g<o.contents.length;g++)i.append(o.contents[g].clone(1,1));d++}else if(o.indent==Math.max(m,0)+1)o=c[d-1].element.getDirection(1),d=CKEDITOR.plugins.list.arrayToList(c,null,d,b,o!=n?n:null),!i.getChildCount()&&(CKEDITOR.env.needsNbspFiller&&!(7<h.$.documentMode))&&i.append(h.createText(" ")),
i.append(d.listNode),d=d.nextIndex;else if(-1==o.indent&&!e&&g){r[g.getName()]?(i=o.element.clone(!1,!0),n!=g.getDirection(1)&&i.setAttribute("dir",n)):i=new CKEDITOR.dom.documentFragment(h);var a=g.getDirection(1)!=n,u=o.element,z=u.getAttribute("class"),v=u.getAttribute("style"),w=i.type==CKEDITOR.NODE_DOCUMENT_FRAGMENT&&(b!=CKEDITOR.ENTER_BR||a||v||z),s,x=o.contents.length,t;for(g=0;g<x;g++)if(s=o.contents[g],D(s)&&1<x)w?t=s.clone(1,1):i.append(s.clone(1,1));else if(s.type==CKEDITOR.NODE_ELEMENT&&
s.isBlockBoundary()){a&&!s.getDirection()&&s.setAttribute("dir",n);l=s;var y=u.getAttribute("style");y&&l.setAttribute("style",y.replace(/([^;])$/,"$1;")+(l.getAttribute("style")||""));z&&s.addClass(z);l=null;t&&(i.append(t),t=null);i.append(s.clone(1,1))}else w?(l||(l=h.createElement(p),i.append(l),a&&l.setAttribute("dir",n)),v&&l.setAttribute("style",v),z&&l.setAttribute("class",z),t&&(l.append(t),t=null),l.append(s.clone(1,1))):i.append(s.clone(1,1));t&&((l||i).append(t),t=null);i.type==CKEDITOR.NODE_DOCUMENT_FRAGMENT&&
d!=c.length-1&&(CKEDITOR.env.needsBrFiller&&(n=i.getLast())&&(n.type==CKEDITOR.NODE_ELEMENT&&n.is("br"))&&n.remove(),n=i.getLast(q),(!n||!(n.type==CKEDITOR.NODE_ELEMENT&&n.is(CKEDITOR.dtd.$block)))&&i.append(h.createElement("br")));n=i.$.nodeName.toLowerCase();("div"==n||"p"==n)&&i.appendBogus();f.append(i);a=null;d++}else return null;l=null;if(c.length<=d||Math.max(c[d].indent,0)<m)break}if(j)for(c=f.getFirst();c;){if(c.type==CKEDITOR.NODE_ELEMENT&&(CKEDITOR.dom.element.clearMarkers(j,c),c.getName()in
CKEDITOR.dtd.$listItem&&(e=c,h=k=b=void 0,b=e.getDirection()))){for(k=e.getParent();k&&!(h=k.getDirection());)k=k.getParent();b==h&&e.removeAttribute("dir")}c=c.getNextSourceNode()}return{listNode:f,nextIndex:d}}};var H=/^h[1-6]$/,F=CKEDITOR.dom.walker.nodeType(CKEDITOR.NODE_ELEMENT);x.prototype={exec:function(c){this.refresh(c,c.elementPath());var j=c.config,e=c.getSelection(),b=e&&e.getRanges();if(this.state==CKEDITOR.TRISTATE_OFF){var k=c.editable();if(k.getFirst(q)){var g=1==b.length&&b[0];(j=
g&&g.getEnclosedNode())&&(j.is&&this.type==j.getName())&&this.setState(CKEDITOR.TRISTATE_ON)}else j.enterMode==CKEDITOR.ENTER_BR?k.appendBogus():b[0].fixBlock(1,j.enterMode==CKEDITOR.ENTER_P?"p":"div"),e.selectRanges(b)}for(var j=e.createBookmarks(!0),k=[],h={},b=b.createIterator(),f=0;(g=b.getNextRange())&&++f;){var a=g.getBoundaryNodes(),d=a.startNode,m=a.endNode;d.type==CKEDITOR.NODE_ELEMENT&&"td"==d.getName()&&g.setStartAt(a.startNode,CKEDITOR.POSITION_AFTER_START);m.type==CKEDITOR.NODE_ELEMENT&&
"td"==m.getName()&&g.setEndAt(a.endNode,CKEDITOR.POSITION_BEFORE_END);g=g.createIterator();for(g.forceBrBreak=this.state==CKEDITOR.TRISTATE_OFF;a=g.getNextParagraph();)if(!a.getCustomData("list_block")){CKEDITOR.dom.element.setMarker(h,a,"list_block",1);for(var i=c.elementPath(a),d=i.elements,m=0,i=i.blockLimit,n,l=d.length-1;0<=l&&(n=d[l]);l--)if(r[n.getName()]&&i.contains(n)){i.removeCustomData("list_group_object_"+f);(d=n.getCustomData("list_group_object"))?d.contents.push(a):(d={root:n,contents:[a]},
k.push(d),CKEDITOR.dom.element.setMarker(h,n,"list_group_object",d));m=1;break}m||(m=i,m.getCustomData("list_group_object_"+f)?m.getCustomData("list_group_object_"+f).contents.push(a):(d={root:m,contents:[a]},CKEDITOR.dom.element.setMarker(h,m,"list_group_object_"+f,d),k.push(d)))}}for(n=[];0<k.length;)if(d=k.shift(),this.state==CKEDITOR.TRISTATE_OFF)if(r[d.root.getName()]){b=c;f=d;d=h;g=n;m=CKEDITOR.plugins.list.listToArray(f.root,d);i=[];for(a=0;a<f.contents.length;a++)if(l=f.contents[a],(l=l.getAscendant("li",
!0))&&!l.getCustomData("list_item_processed"))i.push(l),CKEDITOR.dom.element.setMarker(d,l,"list_item_processed",!0);for(var l=f.root.getDocument(),p=void 0,o=void 0,a=0;a<i.length;a++){var u=i[a].getCustomData("listarray_index"),p=m[u].parent;p.is(this.type)||(o=l.createElement(this.type),p.copyAttributes(o,{start:1,type:1}),o.removeStyle("list-style-type"),m[u].parent=o)}d=CKEDITOR.plugins.list.arrayToList(m,d,null,b.config.enterMode);m=void 0;i=d.listNode.getChildCount();for(a=0;a<i&&(m=d.listNode.getChild(a));a++)m.getName()==
this.type&&g.push(m);d.listNode.replace(f.root);b.fire("contentDomInvalidated")}else{m=c;a=d;g=n;i=a.contents;b=a.root.getDocument();f=[];1==i.length&&i[0].equals(a.root)&&(d=b.createElement("div"),i[0].moveChildren&&i[0].moveChildren(d),i[0].append(d),i[0]=d);a=a.contents[0].getParent();for(l=0;l<i.length;l++)a=a.getCommonAncestor(i[l].getParent());p=m.config.useComputedState;m=d=void 0;p=void 0===p||p;for(l=0;l<i.length;l++)for(o=i[l];u=o.getParent();){if(u.equals(a)){f.push(o);!m&&o.getDirection()&&
(m=1);o=o.getDirection(p);null!==d&&(d=d&&d!=o?null:o);break}o=u}if(!(1>f.length)){i=f[f.length-1].getNext();l=b.createElement(this.type);g.push(l);for(p=g=void 0;f.length;)g=f.shift(),p=b.createElement("li"),g.is("pre")||H.test(g.getName())||"false"==g.getAttribute("contenteditable")?g.appendTo(p):(g.copyAttributes(p),d&&g.getDirection()&&(p.removeStyle("direction"),p.removeAttribute("dir")),g.moveChildren(p),g.remove()),p.appendTo(l);d&&m&&l.setAttribute("dir",d);i?l.insertBefore(i):l.appendTo(a)}}else this.state==
CKEDITOR.TRISTATE_ON&&r[d.root.getName()]&&E.call(this,c,d,h);for(l=0;l<n.length;l++)B(n[l]);CKEDITOR.dom.element.clearAllMarkers(h);e.selectBookmarks(j);c.focus()},refresh:function(c,j){var e=j.contains(r,1),b=j.blockLimit||j.root;e&&b.contains(e)?this.setState(e.is(this.type)?CKEDITOR.TRISTATE_ON:CKEDITOR.TRISTATE_OFF):this.setState(CKEDITOR.TRISTATE_OFF)}};CKEDITOR.plugins.add("list",{requires:"indentlist",init:function(c){c.blockless||(c.addCommand("numberedlist",new x("numberedlist","ol")),c.addCommand("bulletedlist",
new x("bulletedlist","ul")),c.ui.addButton&&(c.ui.addButton("NumberedList",{label:c.lang.list.numberedlist,command:"numberedlist",directional:!0,toolbar:"list,10"}),c.ui.addButton("BulletedList",{label:c.lang.list.bulletedlist,command:"bulletedlist",directional:!0,toolbar:"list,20"})),c.on("key",function(j){var e=j.data.keyCode;if(c.mode=="wysiwyg"&&e in{8:1,46:1}){var b=c.getSelection().getRanges()[0],k=b&&b.startPath();if(b&&b.collapsed){var g=e==8,h=c.editable(),f=new CKEDITOR.dom.walker(b.clone());
f.evaluator=function(a){return q(a)&&!v(a)};f.guard=function(a,b){return!(b&&a.type==CKEDITOR.NODE_ELEMENT&&a.is("table"))};e=b.clone();if(g){var a,d;if((a=k.contains(r))&&b.checkBoundaryOfElement(a,CKEDITOR.START)&&(a=a.getParent())&&a.is("li")&&(a=w(a))){d=a;a=a.getPrevious(q);e.moveToPosition(a&&v(a)?a:d,CKEDITOR.POSITION_BEFORE_START)}else{f.range.setStartAt(h,CKEDITOR.POSITION_AFTER_START);f.range.setEnd(b.startContainer,b.startOffset);if((a=f.previous())&&a.type==CKEDITOR.NODE_ELEMENT&&(a.getName()in
r||a.is("li"))){if(!a.is("li")){f.range.selectNodeContents(a);f.reset();f.evaluator=C;a=f.previous()}d=a;e.moveToElementEditEnd(d)}}if(d){y(c,e,b);j.cancel()}else if((e=k.contains(r))&&b.checkBoundaryOfElement(e,CKEDITOR.START)){d=e.getFirst(q);if(b.checkBoundaryOfElement(d,CKEDITOR.START)){a=e.getPrevious(q);if(w(d)){if(a){b.moveToElementEditEnd(a);b.select()}}else c.execCommand("outdent");j.cancel()}}}else if(d=k.contains("li")){f.range.setEndAt(h,CKEDITOR.POSITION_BEFORE_END);h=(k=d.getLast(q))&&
C(k)?k:d;d=0;if((a=f.next())&&a.type==CKEDITOR.NODE_ELEMENT&&a.getName()in r&&a.equals(k)){d=1;a=f.next()}else b.checkBoundaryOfElement(h,CKEDITOR.END)&&(d=1);if(d&&a){b=b.clone();b.moveToElementEditStart(a);y(c,e,b);j.cancel()}}else{f.range.setEndAt(h,CKEDITOR.POSITION_BEFORE_END);if((a=f.next())&&a.type==CKEDITOR.NODE_ELEMENT&&a.is(r)){a=a.getFirst(q);if(k.block&&b.checkStartOfBlock()&&b.checkEndOfBlock()){k.block.remove();b.moveToElementEditStart(a);b.select()}else if(w(a)){b.moveToElementEditStart(a);
b.select()}else{b=b.clone();b.moveToElementEditStart(a);y(c,e,b)}j.cancel()}}setTimeout(function(){c.selectionChange(1)})}}}))}})})();CKEDITOR.plugins.add("listblock",{requires:"panel",onLoad:function(){var f=CKEDITOR.addTemplate("panel-list",'<ul role="presentation" class="cke_panel_list">{items}</ul>'),g=CKEDITOR.addTemplate("panel-list-item",'<li id="{id}" class="cke_panel_listItem" role=presentation><a id="{id}_option" _cke_focus=1 hidefocus=true title="{title}" href="javascript:void(\'{val}\')"  {onclick}="CKEDITOR.tools.callFunction({clickFn},\'{val}\'); return false;" role="option">{text}</a></li>'),h=CKEDITOR.addTemplate("panel-list-group",
'<h1 id="{id}" class="cke_panel_grouptitle" role="presentation" >{label}</h1>'),i=/\'/g;CKEDITOR.ui.panel.prototype.addListBlock=function(a,b){return this.addBlock(a,new CKEDITOR.ui.listBlock(this.getHolderElement(),b))};CKEDITOR.ui.listBlock=CKEDITOR.tools.createClass({base:CKEDITOR.ui.panel.block,$:function(a,b){var b=b||{},c=b.attributes||(b.attributes={});(this.multiSelect=!!b.multiSelect)&&(c["aria-multiselectable"]=!0);!c.role&&(c.role="listbox");this.base.apply(this,arguments);this.element.setAttribute("role",
c.role);c=this.keys;c[40]="next";c[9]="next";c[38]="prev";c[CKEDITOR.SHIFT+9]="prev";c[32]=CKEDITOR.env.ie?"mouseup":"click";CKEDITOR.env.ie&&(c[13]="mouseup");this._.pendingHtml=[];this._.pendingList=[];this._.items={};this._.groups={}},_:{close:function(){if(this._.started){var a=f.output({items:this._.pendingList.join("")});this._.pendingList=[];this._.pendingHtml.push(a);delete this._.started}},getClick:function(){this._.click||(this._.click=CKEDITOR.tools.addFunction(function(a){var b=this.toggle(a);
if(this.onClick)this.onClick(a,b)},this));return this._.click}},proto:{add:function(a,b,c){var d=CKEDITOR.tools.getNextId();this._.started||(this._.started=1,this._.size=this._.size||0);this._.items[a]=d;var e;e=CKEDITOR.tools.htmlEncodeAttr(a).replace(i,"\\'");a={id:d,val:e,onclick:CKEDITOR.env.ie?'onclick="return false;" onmouseup':"onclick",clickFn:this._.getClick(),title:CKEDITOR.tools.htmlEncodeAttr(c||a),text:b||a};this._.pendingList.push(g.output(a))},startGroup:function(a){this._.close();
var b=CKEDITOR.tools.getNextId();this._.groups[a]=b;this._.pendingHtml.push(h.output({id:b,label:a}))},commit:function(){this._.close();this.element.appendHtml(this._.pendingHtml.join(""));delete this._.size;this._.pendingHtml=[]},toggle:function(a){var b=this.isMarked(a);b?this.unmark(a):this.mark(a);return!b},hideGroup:function(a){var b=(a=this.element.getDocument().getById(this._.groups[a]))&&a.getNext();a&&(a.setStyle("display","none"),b&&"ul"==b.getName()&&b.setStyle("display","none"))},hideItem:function(a){this.element.getDocument().getById(this._.items[a]).setStyle("display",
"none")},showAll:function(){var a=this._.items,b=this._.groups,c=this.element.getDocument(),d;for(d in a)c.getById(a[d]).setStyle("display","");for(var e in b)a=c.getById(b[e]),d=a.getNext(),a.setStyle("display",""),d&&"ul"==d.getName()&&d.setStyle("display","")},mark:function(a){this.multiSelect||this.unmarkAll();var a=this._.items[a],b=this.element.getDocument().getById(a);b.addClass("cke_selected");this.element.getDocument().getById(a+"_option").setAttribute("aria-selected",!0);this.onMark&&this.onMark(b)},
unmark:function(a){var b=this.element.getDocument(),a=this._.items[a],c=b.getById(a);c.removeClass("cke_selected");b.getById(a+"_option").removeAttribute("aria-selected");this.onUnmark&&this.onUnmark(c)},unmarkAll:function(){var a=this._.items,b=this.element.getDocument(),c;for(c in a){var d=a[c];b.getById(d).removeClass("cke_selected");b.getById(d+"_option").removeAttribute("aria-selected")}this.onUnmark&&this.onUnmark()},isMarked:function(a){return this.element.getDocument().getById(this._.items[a]).hasClass("cke_selected")},
focus:function(a){this._.focusIndex=-1;var b=this.element.getElementsByTag("a"),c,d=-1;if(a)for(c=this.element.getDocument().getById(this._.items[a]).getFirst();a=b.getItem(++d);){if(a.equals(c)){this._.focusIndex=d;break}}else this.element.focus();c&&setTimeout(function(){c.focus()},0)}}})}});CKEDITOR.plugins.add("removeformat",{init:function(a){a.addCommand("removeFormat",CKEDITOR.plugins.removeformat.commands.removeformat);a.ui.addButton&&a.ui.addButton("RemoveFormat",{label:a.lang.removeformat.toolbar,command:"removeFormat",toolbar:"cleanup,10"})}});
CKEDITOR.plugins.removeformat={commands:{removeformat:{exec:function(a){for(var h=a._.removeFormatRegex||(a._.removeFormatRegex=RegExp("^(?:"+a.config.removeFormatTags.replace(/,/g,"|")+")$","i")),e=a._.removeAttributes||(a._.removeAttributes=a.config.removeFormatAttributes.split(",")),f=CKEDITOR.plugins.removeformat.filter,k=a.getSelection().getRanges(1),l=k.createIterator(),c;c=l.getNextRange();){c.collapsed||c.enlarge(CKEDITOR.ENLARGE_ELEMENT);var i=c.createBookmark(),b=i.startNode,j=i.endNode,
d=function(b){for(var c=a.elementPath(b),e=c.elements,d=1,g;(g=e[d])&&!g.equals(c.block)&&!g.equals(c.blockLimit);d++)h.test(g.getName())&&f(a,g)&&b.breakParent(g)};d(b);if(j){d(j);for(b=b.getNextSourceNode(!0,CKEDITOR.NODE_ELEMENT);b&&!b.equals(j);)d=b.getNextSourceNode(!1,CKEDITOR.NODE_ELEMENT),!("img"==b.getName()&&b.data("cke-realelement"))&&f(a,b)&&(h.test(b.getName())?b.remove(1):(b.removeAttributes(e),a.fire("removeFormatCleanup",b))),b=d}c.moveToBookmark(i)}a.forceNextSelectionCheck();a.getSelection().selectRanges(k)}}},
filter:function(a,h){for(var e=a._.removeFormatFilters||[],f=0;f<e.length;f++)if(!1===e[f](h))return!1;return!0}};CKEDITOR.editor.prototype.addRemoveFormatFilter=function(a){this._.removeFormatFilters||(this._.removeFormatFilters=[]);this._.removeFormatFilters.push(a)};CKEDITOR.config.removeFormatTags="b,big,code,del,dfn,em,font,i,ins,kbd,q,s,samp,small,span,strike,strong,sub,sup,tt,u,var";CKEDITOR.config.removeFormatAttributes="class,style,lang,width,height,align,hspace,valign";CKEDITOR.plugins.add("richcombo",{requires:"floatpanel,listblock,button",beforeInit:function(d){d.ui.addHandler(CKEDITOR.UI_RICHCOMBO,CKEDITOR.ui.richCombo.handler)}});
(function(){var d='<span id="{id}" class="cke_combo cke_combo__{name} {cls}" role="presentation"><span id="{id}_label" class="cke_combo_label">{label}</span><a class="cke_combo_button" hidefocus=true title="{title}" tabindex="-1"'+(CKEDITOR.env.gecko&&10900<=CKEDITOR.env.version&&!CKEDITOR.env.hc?"":'" href="javascript:void(\'{titleJs}\')"')+' hidefocus="true" role="button" aria-labelledby="{id}_label" aria-haspopup="true"';if(CKEDITOR.env.opera||CKEDITOR.env.gecko&&CKEDITOR.env.mac)d+=' onkeypress="return false;"';
CKEDITOR.env.gecko&&(d+=' onblur="this.style.cssText = this.style.cssText;"');var d=d+(' onkeydown="return CKEDITOR.tools.callFunction({keydownFn},event,this);" onmousedown="return CKEDITOR.tools.callFunction({mousedownFn},event);"  onfocus="return CKEDITOR.tools.callFunction({focusFn},event);" '+(CKEDITOR.env.ie?'onclick="return false;" onmouseup':"onclick")+'="CKEDITOR.tools.callFunction({clickFn},this);return false;"><span id="{id}_text" class="cke_combo_text cke_combo_inlinelabel">{label}</span><span class="cke_combo_open"><span class="cke_combo_arrow">'+
(CKEDITOR.env.hc?"&#9660;":CKEDITOR.env.air?"&nbsp;":"")+"</span></span></a></span>"),i=CKEDITOR.addTemplate("combo",d);CKEDITOR.UI_RICHCOMBO="richcombo";CKEDITOR.ui.richCombo=CKEDITOR.tools.createClass({$:function(a){CKEDITOR.tools.extend(this,a,{canGroup:!1,title:a.label,modes:{wysiwyg:1},editorFocus:1});a=this.panel||{};delete this.panel;this.id=CKEDITOR.tools.getNextNumber();this.document=a.parent&&a.parent.getDocument()||CKEDITOR.document;a.className="cke_combopanel";a.block={multiSelect:a.multiSelect,
attributes:a.attributes};a.toolbarRelated=!0;this._={panelDefinition:a,items:{}}},proto:{renderHtml:function(a){var b=[];this.render(a,b);return b.join("")},render:function(a,b){function g(){var c=this.modes[a.mode]?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED;a.readOnly&&!this.readOnly&&(c=CKEDITOR.TRISTATE_DISABLED);this.setState(c);this.setValue("");c!=CKEDITOR.TRISTATE_DISABLED&&this.refresh&&this.refresh()}var d=CKEDITOR.env,h="cke_"+this.id,e=CKEDITOR.tools.addFunction(function(b){j&&(a.unlockSelection(1),
j=0);c.execute(b)},this),f=this,c={id:h,combo:this,focus:function(){CKEDITOR.document.getById(h).getChild(1).focus()},execute:function(c){var b=f._;if(b.state!=CKEDITOR.TRISTATE_DISABLED)if(f.createPanel(a),b.on)b.panel.hide();else{f.commit();var d=f.getValue();d?b.list.mark(d):b.list.unmarkAll();b.panel.showBlock(f.id,new CKEDITOR.dom.element(c),4)}},clickFn:e};a.on("activeFilterChange",g,this);a.on("mode",g,this);a.on("selectionChange",g,this);!this.readOnly&&a.on("readOnly",g,this);var k=CKEDITOR.tools.addFunction(function(b,
d){var b=new CKEDITOR.dom.event(b),g=b.getKeystroke();if(40==g)a.once("panelShow",function(a){a.data._.panel._.currentBlock.onKeyDown(40)});switch(g){case 13:case 32:case 40:CKEDITOR.tools.callFunction(e,d);break;default:c.onkey(c,g)}b.preventDefault()}),l=CKEDITOR.tools.addFunction(function(){c.onfocus&&c.onfocus()}),j=0,m=CKEDITOR.tools.addFunction(function(){if(CKEDITOR.env.opera){var b=a.editable();b.isInline()&&b.hasFocus&&(a.lockSelection(),j=1)}});c.keyDownFn=k;d={id:h,name:this.name||this.command,
label:this.label,title:this.title,cls:this.className||"",titleJs:d.gecko&&10900<=d.version&&!d.hc?"":(this.title||"").replace("'",""),keydownFn:k,mousedownFn:m,focusFn:l,clickFn:e};i.output(d,b);if(this.onRender)this.onRender();return c},createPanel:function(a){if(!this._.panel){var b=this._.panelDefinition,d=this._.panelDefinition.block,i=b.parent||CKEDITOR.document.getBody(),h="cke_combopanel__"+this.name,e=new CKEDITOR.ui.floatPanel(a,i,b),f=e.addListBlock(this.id,d),c=this;e.onShow=function(){this.element.addClass(h);
c.setState(CKEDITOR.TRISTATE_ON);c._.on=1;c.editorFocus&&!a.focusManager.hasFocus&&a.focus();if(c.onOpen)c.onOpen();a.once("panelShow",function(){f.focus(!f.multiSelect&&c.getValue())})};e.onHide=function(b){this.element.removeClass(h);c.setState(c.modes&&c.modes[a.mode]?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED);c._.on=0;if(!b&&c.onClose)c.onClose()};e.onEscape=function(){e.hide(1)};f.onClick=function(a,b){c.onClick&&c.onClick.call(c,a,b);e.hide()};this._.panel=e;this._.list=f;e.getBlock(this.id).onHide=
function(){c._.on=0;c.setState(CKEDITOR.TRISTATE_OFF)};this.init&&this.init()}},setValue:function(a,b){this._.value=a;var d=this.document.getById("cke_"+this.id+"_text");d&&(!a&&!b?(b=this.label,d.addClass("cke_combo_inlinelabel")):d.removeClass("cke_combo_inlinelabel"),d.setText("undefined"!=typeof b?b:a))},getValue:function(){return this._.value||""},unmarkAll:function(){this._.list.unmarkAll()},mark:function(a){this._.list.mark(a)},hideItem:function(a){this._.list.hideItem(a)},hideGroup:function(a){this._.list.hideGroup(a)},
showAll:function(){this._.list.showAll()},add:function(a,b,d){this._.items[a]=d||a;this._.list.add(a,b,d)},startGroup:function(a){this._.list.startGroup(a)},commit:function(){this._.committed||(this._.list.commit(),this._.committed=1,CKEDITOR.ui.fire("ready",this));this._.committed=1},setState:function(a){if(this._.state!=a){var b=this.document.getById("cke_"+this.id);b.setState(a,"cke_combo");a==CKEDITOR.TRISTATE_DISABLED?b.setAttribute("aria-disabled",!0):b.removeAttribute("aria-disabled");this._.state=
a}},getState:function(){return this._.state},enable:function(){this._.state==CKEDITOR.TRISTATE_DISABLED&&this.setState(this._.lastState)},disable:function(){this._.state!=CKEDITOR.TRISTATE_DISABLED&&(this._.lastState=this._.state,this.setState(CKEDITOR.TRISTATE_DISABLED))}},statics:{handler:{create:function(a){return new CKEDITOR.ui.richCombo(a)}}}});CKEDITOR.ui.prototype.addRichCombo=function(a,b){this.add(a,CKEDITOR.UI_RICHCOMBO,b)}})();(function(){function f(a,b,c){var e=CKEDITOR.document.getById(c),d;if(e&&(c=a.fire("uiSpace",{space:b,html:""}).html))a.on("uiSpace",function(a){a.data.space==b&&a.cancel()},null,null,1),d=e.append(CKEDITOR.dom.element.createFromHtml(g.output({id:a.id,name:a.name,langDir:a.lang.dir,langCode:a.langCode,space:b,spaceId:a.ui.spaceId(b),content:c}))),e.getCustomData("cke_hasshared")?d.hide():e.setCustomData("cke_hasshared",1),d.unselectable(),d.on("mousedown",function(a){a=a.data;a.getTarget().hasAscendant("a",
1)||a.preventDefault()}),a.focusManager.add(d,1),a.on("focus",function(){for(var a=0,b,c=e.getChildren();b=c.getItem(a);a++)b.type==CKEDITOR.NODE_ELEMENT&&(!b.equals(d)&&b.hasClass("cke_shared"))&&b.hide();d.show()}),a.on("destroy",function(){d.remove()})}var g=CKEDITOR.addTemplate("sharedcontainer",'<div id="cke_{name}" class="cke {id} cke_reset_all cke_chrome cke_editor_{name} cke_shared cke_detached cke_{langDir} '+CKEDITOR.env.cssClass+'" dir="{langDir}" title="'+(CKEDITOR.env.gecko?" ":"")+'" lang="{langCode}" role="presentation"><div class="cke_inner"><div id="{spaceId}" class="cke_{space}" role="presentation">{content}</div></div></div>');
CKEDITOR.plugins.add("sharedspace",{init:function(a){a.on("loaded",function(){var b=a.config.sharedSpaces;if(b)for(var c in b)f(a,c,b[c])},null,null,9)}})})();CKEDITOR.plugins.add("specialchar",{availableLangs:{ar:1,bg:1,ca:1,cs:1,cy:1,de:1,el:1,en:1,eo:1,es:1,et:1,fa:1,fi:1,fr:1,"fr-ca":1,gl:1,he:1,hr:1,hu:1,id:1,it:1,ja:1,km:1,ku:1,lv:1,nb:1,nl:1,no:1,pl:1,pt:1,"pt-br":1,ru:1,si:1,sk:1,sl:1,sq:1,sv:1,th:1,tr:1,ug:1,uk:1,vi:1,zh:1,"zh-cn":1},requires:"dialog",init:function(a){var c=this;CKEDITOR.dialog.add("specialchar",this.path+"dialogs/specialchar.js");a.addCommand("specialchar",{exec:function(){var b=a.langCode,b=c.availableLangs[b]?b:c.availableLangs[b.replace(/-.*/,
"")]?b.replace(/-.*/,""):"en";CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(c.path+"dialogs/lang/"+b+".js"),function(){CKEDITOR.tools.extend(a.lang.specialchar,c.langEntries[b]);a.openDialog("specialchar")})},modes:{wysiwyg:1},canUndo:!1});a.ui.addButton&&a.ui.addButton("SpecialChar",{label:a.lang.specialchar.toolbar,command:"specialchar",toolbar:"insert,50"})}});CKEDITOR.config.specialChars="! &quot; # $ % &amp; ' ( ) * + - . / 0 1 2 3 4 5 6 7 8 9 : ; &lt; = &gt; ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ &euro; &lsquo; &rsquo; &ldquo; &rdquo; &ndash; &mdash; &iexcl; &cent; &pound; &curren; &yen; &brvbar; &sect; &uml; &copy; &ordf; &laquo; &not; &reg; &macr; &deg; &sup2; &sup3; &acute; &micro; &para; &middot; &cedil; &sup1; &ordm; &raquo; &frac14; &frac12; &frac34; &iquest; &Agrave; &Aacute; &Acirc; &Atilde; &Auml; &Aring; &AElig; &Ccedil; &Egrave; &Eacute; &Ecirc; &Euml; &Igrave; &Iacute; &Icirc; &Iuml; &ETH; &Ntilde; &Ograve; &Oacute; &Ocirc; &Otilde; &Ouml; &times; &Oslash; &Ugrave; &Uacute; &Ucirc; &Uuml; &Yacute; &THORN; &szlig; &agrave; &aacute; &acirc; &atilde; &auml; &aring; &aelig; &ccedil; &egrave; &eacute; &ecirc; &euml; &igrave; &iacute; &icirc; &iuml; &eth; &ntilde; &ograve; &oacute; &ocirc; &otilde; &ouml; &divide; &oslash; &ugrave; &uacute; &ucirc; &uuml; &yacute; &thorn; &yuml; &OElig; &oelig; &#372; &#374 &#373 &#375; &sbquo; &#8219; &bdquo; &hellip; &trade; &#9658; &bull; &rarr; &rArr; &hArr; &diams; &asymp;".split(" ");(function(){function i(c){return{editorFocus:!1,canUndo:!1,modes:{wysiwyg:1},exec:function(d){if(d.editable().hasFocus){var e=d.getSelection(),b;if(b=(new CKEDITOR.dom.elementPath(e.getCommonAncestor(),e.root)).contains({td:1,th:1},1)){var e=d.createRange(),a=CKEDITOR.tools.tryThese(function(){var a=b.getParent().$.cells[b.$.cellIndex+(c?-1:1)];a.parentNode.parentNode;return a},function(){var a=b.getParent(),a=a.getAscendant("table").$.rows[a.$.rowIndex+(c?-1:1)];return a.cells[c?a.cells.length-1:
0]});if(!a&&!c){for(var f=b.getAscendant("table").$,a=b.getParent().$.cells,f=new CKEDITOR.dom.element(f.insertRow(-1),d.document),g=0,h=a.length;g<h;g++)f.append((new CKEDITOR.dom.element(a[g],d.document)).clone(!1,!1)).appendBogus();e.moveToElementEditStart(f)}else if(a)a=new CKEDITOR.dom.element(a),e.moveToElementEditStart(a),(!e.checkStartOfBlock()||!e.checkEndOfBlock())&&e.selectNodeContents(a);else return!0;e.select(!0);return!0}}return!1}}}var h={editorFocus:!1,modes:{wysiwyg:1,source:1}},
g={exec:function(c){c.container.focusNext(!0,c.tabIndex)}},f={exec:function(c){c.container.focusPrevious(!0,c.tabIndex)}};CKEDITOR.plugins.add("tab",{init:function(c){for(var d=!1!==c.config.enableTabKeyTools,e=c.config.tabSpaces||0,b="";e--;)b+=" ";if(b)c.on("key",function(a){9==a.data.keyCode&&(c.insertHtml(b),a.cancel())});if(d)c.on("key",function(a){(9==a.data.keyCode&&c.execCommand("selectNextCell")||a.data.keyCode==CKEDITOR.SHIFT+9&&c.execCommand("selectPreviousCell"))&&a.cancel()});c.addCommand("blur",
CKEDITOR.tools.extend(g,h));c.addCommand("blurBack",CKEDITOR.tools.extend(f,h));c.addCommand("selectNextCell",i());c.addCommand("selectPreviousCell",i(!0))}})})();
CKEDITOR.dom.element.prototype.focusNext=function(i,h){var g=void 0===h?this.getTabIndex():h,f,c,d,e,b,a;if(0>=g)for(b=this.getNextSourceNode(i,CKEDITOR.NODE_ELEMENT);b;){if(b.isVisible()&&0===b.getTabIndex()){d=b;break}b=b.getNextSourceNode(!1,CKEDITOR.NODE_ELEMENT)}else for(b=this.getDocument().getBody().getFirst();b=b.getNextSourceNode(!1,CKEDITOR.NODE_ELEMENT);){if(!f)if(!c&&b.equals(this)){if(c=!0,i){if(!(b=b.getNextSourceNode(!0,CKEDITOR.NODE_ELEMENT)))break;f=1}}else c&&!this.contains(b)&&
(f=1);if(b.isVisible()&&!(0>(a=b.getTabIndex()))){if(f&&a==g){d=b;break}a>g&&(!d||!e||a<e)?(d=b,e=a):!d&&0===a&&(d=b,e=a)}}d&&d.focus()};
CKEDITOR.dom.element.prototype.focusPrevious=function(i,h){for(var g=void 0===h?this.getTabIndex():h,f,c,d,e=0,b,a=this.getDocument().getBody().getLast();a=a.getPreviousSourceNode(!1,CKEDITOR.NODE_ELEMENT);){if(!f)if(!c&&a.equals(this)){if(c=!0,i){if(!(a=a.getPreviousSourceNode(!0,CKEDITOR.NODE_ELEMENT)))break;f=1}}else c&&!this.contains(a)&&(f=1);if(a.isVisible()&&!(0>(b=a.getTabIndex())))if(0>=g){if(f&&0===b){d=a;break}b>e&&(d=a,e=b)}else{if(f&&b==g){d=a;break}if(b<g&&(!d||b>e))d=a,e=b}}d&&d.focus()};CKEDITOR.plugins.add("table",{requires:"dialog",init:function(a){function d(a){return CKEDITOR.tools.extend(a||{},{contextSensitive:1,refresh:function(a,e){this.setState(e.contains("table",1)?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED)}})}if(!a.blockless){var b=a.lang.table;a.addCommand("table",new CKEDITOR.dialogCommand("table",{context:"table",allowedContent:"table{width,height}[align,border,cellpadding,cellspacing,summary];caption tbody thead tfoot;th td tr[scope];"+(a.plugins.dialogadvtab?
"table"+a.plugins.dialogadvtab.allowedContent():""),requiredContent:"table",contentTransformations:[["table{width}: sizeToStyle","table[width]: sizeToAttribute"]]}));a.addCommand("tableProperties",new CKEDITOR.dialogCommand("tableProperties",d()));a.addCommand("tableDelete",d({exec:function(a){var c=a.elementPath().contains("table",1);if(c){var b=c.getParent();1==b.getChildCount()&&!b.is("body","td","th")&&(c=b);a=a.createRange();a.moveToPosition(c,CKEDITOR.POSITION_BEFORE_START);c.remove();a.select()}}}));
a.ui.addButton&&a.ui.addButton("Table",{label:b.toolbar,command:"table",toolbar:"insert,30"});CKEDITOR.dialog.add("table",this.path+"dialogs/table.js");CKEDITOR.dialog.add("tableProperties",this.path+"dialogs/table.js");a.addMenuItems&&a.addMenuItems({table:{label:b.menu,command:"tableProperties",group:"table",order:5},tabledelete:{label:b.deleteTable,command:"tableDelete",group:"table",order:1}});a.on("doubleclick",function(a){a.data.element.is("table")&&(a.data.dialog="tableProperties")});a.contextMenu&&
a.contextMenu.addListener(function(){return{tabledelete:CKEDITOR.TRISTATE_OFF,table:CKEDITOR.TRISTATE_OFF}})}}});(function(){function p(e){function d(a){!(0<b.length)&&(a.type==CKEDITOR.NODE_ELEMENT&&y.test(a.getName())&&!a.getCustomData("selected_cell"))&&(CKEDITOR.dom.element.setMarker(c,a,"selected_cell",!0),b.push(a))}for(var e=e.getRanges(),b=[],c={},a=0;a<e.length;a++){var f=e[a];if(f.collapsed)f=f.getCommonAncestor(),(f=f.getAscendant("td",!0)||f.getAscendant("th",!0))&&b.push(f);else{var f=new CKEDITOR.dom.walker(f),g;for(f.guard=d;g=f.next();)if(g.type!=CKEDITOR.NODE_ELEMENT||!g.is(CKEDITOR.dtd.table))if((g=
g.getAscendant("td",!0)||g.getAscendant("th",!0))&&!g.getCustomData("selected_cell"))CKEDITOR.dom.element.setMarker(c,g,"selected_cell",!0),b.push(g)}}CKEDITOR.dom.element.clearAllMarkers(c);return b}function o(e,d){for(var b=p(e),c=b[0],a=c.getAscendant("table"),c=c.getDocument(),f=b[0].getParent(),g=f.$.rowIndex,b=b[b.length-1],h=b.getParent().$.rowIndex+b.$.rowSpan-1,b=new CKEDITOR.dom.element(a.$.rows[h]),g=d?g:h,f=d?f:b,b=CKEDITOR.tools.buildTableMap(a),a=b[g],g=d?b[g-1]:b[g+1],b=b[0].length,
c=c.createElement("tr"),h=0;a[h]&&h<b;h++){var i;1<a[h].rowSpan&&g&&a[h]==g[h]?(i=a[h],i.rowSpan+=1):(i=(new CKEDITOR.dom.element(a[h])).clone(),i.removeAttribute("rowSpan"),i.appendBogus(),c.append(i),i=i.$);h+=i.colSpan-1}d?c.insertBefore(f):c.insertAfter(f)}function q(e){if(e instanceof CKEDITOR.dom.selection){for(var d=p(e),b=d[0].getAscendant("table"),c=CKEDITOR.tools.buildTableMap(b),e=d[0].getParent().$.rowIndex,d=d[d.length-1],a=d.getParent().$.rowIndex+d.$.rowSpan-1,d=[],f=e;f<=a;f++){for(var g=
c[f],h=new CKEDITOR.dom.element(b.$.rows[f]),i=0;i<g.length;i++){var j=new CKEDITOR.dom.element(g[i]),l=j.getParent().$.rowIndex;1==j.$.rowSpan?j.remove():(j.$.rowSpan-=1,l==f&&(l=c[f+1],l[i-1]?j.insertAfter(new CKEDITOR.dom.element(l[i-1])):(new CKEDITOR.dom.element(b.$.rows[f+1])).append(j,1)));i+=j.$.colSpan-1}d.push(h)}c=b.$.rows;b=new CKEDITOR.dom.element(c[a+1]||(0<e?c[e-1]:null)||b.$.parentNode);for(f=d.length;0<=f;f--)q(d[f]);return b}e instanceof CKEDITOR.dom.element&&(b=e.getAscendant("table"),
1==b.$.rows.length?b.remove():e.remove());return null}function r(e,d){for(var b=d?Infinity:0,c=0;c<e.length;c++){var a;a=e[c];for(var f=d,g=a.getParent().$.cells,h=0,i=0;i<g.length;i++){var j=g[i],h=h+(f?1:j.colSpan);if(j==a.$)break}a=h-1;if(d?a<b:a>b)b=a}return b}function k(e,d){for(var b=p(e),c=b[0].getAscendant("table"),a=r(b,1),b=r(b),a=d?a:b,f=CKEDITOR.tools.buildTableMap(c),c=[],b=[],g=f.length,h=0;h<g;h++)c.push(f[h][a]),b.push(d?f[h][a-1]:f[h][a+1]);for(h=0;h<g;h++)c[h]&&(1<c[h].colSpan&&
b[h]==c[h]?(a=c[h],a.colSpan+=1):(a=(new CKEDITOR.dom.element(c[h])).clone(),a.removeAttribute("colSpan"),a.appendBogus(),a[d?"insertBefore":"insertAfter"].call(a,new CKEDITOR.dom.element(c[h])),a=a.$),h+=a.rowSpan-1)}function u(e,d){var b=e.getStartElement();if(b=b.getAscendant("td",1)||b.getAscendant("th",1)){var c=b.clone();c.appendBogus();d?c.insertBefore(b):c.insertAfter(b)}}function t(e){if(e instanceof CKEDITOR.dom.selection){var e=p(e),d=e[0]&&e[0].getAscendant("table"),b;a:{var c=0;b=e.length-
1;for(var a={},f,g;f=e[c++];)CKEDITOR.dom.element.setMarker(a,f,"delete_cell",!0);for(c=0;f=e[c++];)if((g=f.getPrevious())&&!g.getCustomData("delete_cell")||(g=f.getNext())&&!g.getCustomData("delete_cell")){CKEDITOR.dom.element.clearAllMarkers(a);b=g;break a}CKEDITOR.dom.element.clearAllMarkers(a);g=e[0].getParent();(g=g.getPrevious())?b=g.getLast():(g=e[b].getParent(),b=(g=g.getNext())?g.getChild(0):null)}for(g=e.length-1;0<=g;g--)t(e[g]);b?m(b,!0):d&&d.remove()}else e instanceof CKEDITOR.dom.element&&
(d=e.getParent(),1==d.getChildCount()?d.remove():e.remove())}function m(e,d){var b=e.getDocument(),c=CKEDITOR.document;CKEDITOR.env.ie&&10==CKEDITOR.env.version&&(c.focus(),b.focus());b=new CKEDITOR.dom.range(b);if(!b["moveToElementEdit"+(d?"End":"Start")](e))b.selectNodeContents(e),b.collapse(d?!1:!0);b.select(!0)}function v(e,d,b){e=e[d];if("undefined"==typeof b)return e;for(d=0;e&&d<e.length;d++){if(b.is&&e[d]==b.$)return d;if(d==b)return new CKEDITOR.dom.element(e[d])}return b.is?-1:null}function s(e,
d,b){var c=p(e),a;if((d?1!=c.length:2>c.length)||(a=e.getCommonAncestor())&&a.type==CKEDITOR.NODE_ELEMENT&&a.is("table"))return!1;var f,e=c[0];a=e.getAscendant("table");var g=CKEDITOR.tools.buildTableMap(a),h=g.length,i=g[0].length,j=e.getParent().$.rowIndex,l=v(g,j,e);if(d){var n;try{var m=parseInt(e.getAttribute("rowspan"),10)||1;f=parseInt(e.getAttribute("colspan"),10)||1;n=g["up"==d?j-m:"down"==d?j+m:j]["left"==d?l-f:"right"==d?l+f:l]}catch(z){return!1}if(!n||e.$==n)return!1;c["up"==d||"left"==
d?"unshift":"push"](new CKEDITOR.dom.element(n))}for(var d=e.getDocument(),o=j,m=n=0,q=!b&&new CKEDITOR.dom.documentFragment(d),s=0,d=0;d<c.length;d++){f=c[d];var k=f.getParent(),t=f.getFirst(),r=f.$.colSpan,u=f.$.rowSpan,k=k.$.rowIndex,w=v(g,k,f),s=s+r*u,m=Math.max(m,w-l+r);n=Math.max(n,k-j+u);if(!b){r=f;(u=r.getBogus())&&u.remove();r.trim();if(f.getChildren().count()){if(k!=o&&t&&(!t.isBlockBoundary||!t.isBlockBoundary({br:1})))(o=q.getLast(CKEDITOR.dom.walker.whitespaces(!0)))&&(!o.is||!o.is("br"))&&
q.append("br");f.moveChildren(q)}d?f.remove():f.setHtml("")}o=k}if(b)return n*m==s;q.moveChildren(e);e.appendBogus();m>=i?e.removeAttribute("rowSpan"):e.$.rowSpan=n;n>=h?e.removeAttribute("colSpan"):e.$.colSpan=m;b=new CKEDITOR.dom.nodeList(a.$.rows);c=b.count();for(d=c-1;0<=d;d--)a=b.getItem(d),a.$.cells.length||(a.remove(),c++);return e}function w(e,d){var b=p(e);if(1<b.length)return!1;if(d)return!0;var b=b[0],c=b.getParent(),a=c.getAscendant("table"),f=CKEDITOR.tools.buildTableMap(a),g=c.$.rowIndex,
h=v(f,g,b),i=b.$.rowSpan,j;if(1<i){j=Math.ceil(i/2);for(var i=Math.floor(i/2),c=g+j,a=new CKEDITOR.dom.element(a.$.rows[c]),f=v(f,c),l,c=b.clone(),g=0;g<f.length;g++)if(l=f[g],l.parentNode==a.$&&g>h){c.insertBefore(new CKEDITOR.dom.element(l));break}else l=null;l||a.append(c)}else{i=j=1;a=c.clone();a.insertAfter(c);a.append(c=b.clone());l=v(f,g);for(h=0;h<l.length;h++)l[h].rowSpan++}c.appendBogus();b.$.rowSpan=j;c.$.rowSpan=i;1==j&&b.removeAttribute("rowSpan");1==i&&c.removeAttribute("rowSpan");return c}
function x(e,d){var b=p(e);if(1<b.length)return!1;if(d)return!0;var b=b[0],c=b.getParent(),a=c.getAscendant("table"),a=CKEDITOR.tools.buildTableMap(a),f=v(a,c.$.rowIndex,b),g=b.$.colSpan;if(1<g)c=Math.ceil(g/2),g=Math.floor(g/2);else{for(var g=c=1,h=[],i=0;i<a.length;i++){var j=a[i];h.push(j[f]);1<j[f].rowSpan&&(i+=j[f].rowSpan-1)}for(a=0;a<h.length;a++)h[a].colSpan++}a=b.clone();a.insertAfter(b);a.appendBogus();b.$.colSpan=c;a.$.colSpan=g;1==c&&b.removeAttribute("colSpan");1==g&&a.removeAttribute("colSpan");
return a}var y=/^(?:td|th)$/;CKEDITOR.plugins.tabletools={requires:"table,dialog,contextmenu",init:function(e){function d(a){return CKEDITOR.tools.extend(a||{},{contextSensitive:1,refresh:function(a,b){this.setState(b.contains({td:1,th:1},1)?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED)}})}function b(a,b){var c=e.addCommand(a,b);e.addFeature(c)}var c=e.lang.table;b("cellProperties",new CKEDITOR.dialogCommand("cellProperties",d({allowedContent:"td th{width,height,border-color,background-color,white-space,vertical-align,text-align}[colspan,rowspan]",
requiredContent:"table"})));CKEDITOR.dialog.add("cellProperties",this.path+"dialogs/tableCell.js");b("rowDelete",d({requiredContent:"table",exec:function(a){a=a.getSelection();m(q(a))}}));b("rowInsertBefore",d({requiredContent:"table",exec:function(a){a=a.getSelection();o(a,!0)}}));b("rowInsertAfter",d({requiredContent:"table",exec:function(a){a=a.getSelection();o(a)}}));b("columnDelete",d({requiredContent:"table",exec:function(a){for(var a=a.getSelection(),a=p(a),b=a[0],c=a[a.length-1],a=b.getAscendant("table"),
d=CKEDITOR.tools.buildTableMap(a),e,j,l=[],n=0,o=d.length;n<o;n++)for(var k=0,q=d[n].length;k<q;k++)d[n][k]==b.$&&(e=k),d[n][k]==c.$&&(j=k);for(n=e;n<=j;n++)for(k=0;k<d.length;k++)c=d[k],b=new CKEDITOR.dom.element(a.$.rows[k]),c=new CKEDITOR.dom.element(c[n]),c.$&&(1==c.$.colSpan?c.remove():c.$.colSpan-=1,k+=c.$.rowSpan-1,b.$.cells.length||l.push(b));j=a.$.rows[0]&&a.$.rows[0].cells;e=new CKEDITOR.dom.element(j[e]||(e?j[e-1]:a.$.parentNode));l.length==o&&a.remove();e&&m(e,!0)}}));b("columnInsertBefore",
d({requiredContent:"table",exec:function(a){a=a.getSelection();k(a,!0)}}));b("columnInsertAfter",d({requiredContent:"table",exec:function(a){a=a.getSelection();k(a)}}));b("cellDelete",d({requiredContent:"table",exec:function(a){a=a.getSelection();t(a)}}));b("cellMerge",d({allowedContent:"td[colspan,rowspan]",requiredContent:"td[colspan,rowspan]",exec:function(a){m(s(a.getSelection()),!0)}}));b("cellMergeRight",d({allowedContent:"td[colspan]",requiredContent:"td[colspan]",exec:function(a){m(s(a.getSelection(),
"right"),!0)}}));b("cellMergeDown",d({allowedContent:"td[rowspan]",requiredContent:"td[rowspan]",exec:function(a){m(s(a.getSelection(),"down"),!0)}}));b("cellVerticalSplit",d({allowedContent:"td[rowspan]",requiredContent:"td[rowspan]",exec:function(a){m(w(a.getSelection()))}}));b("cellHorizontalSplit",d({allowedContent:"td[colspan]",requiredContent:"td[colspan]",exec:function(a){m(x(a.getSelection()))}}));b("cellInsertBefore",d({requiredContent:"table",exec:function(a){a=a.getSelection();u(a,!0)}}));
b("cellInsertAfter",d({requiredContent:"table",exec:function(a){a=a.getSelection();u(a)}}));e.addMenuItems&&e.addMenuItems({tablecell:{label:c.cell.menu,group:"tablecell",order:1,getItems:function(){var a=e.getSelection(),b=p(a);return{tablecell_insertBefore:CKEDITOR.TRISTATE_OFF,tablecell_insertAfter:CKEDITOR.TRISTATE_OFF,tablecell_delete:CKEDITOR.TRISTATE_OFF,tablecell_merge:s(a,null,!0)?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED,tablecell_merge_right:s(a,"right",!0)?CKEDITOR.TRISTATE_OFF:
CKEDITOR.TRISTATE_DISABLED,tablecell_merge_down:s(a,"down",!0)?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED,tablecell_split_vertical:w(a,!0)?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED,tablecell_split_horizontal:x(a,!0)?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED,tablecell_properties:0<b.length?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED}}},tablecell_insertBefore:{label:c.cell.insertBefore,group:"tablecell",command:"cellInsertBefore",order:5},tablecell_insertAfter:{label:c.cell.insertAfter,
group:"tablecell",command:"cellInsertAfter",order:10},tablecell_delete:{label:c.cell.deleteCell,group:"tablecell",command:"cellDelete",order:15},tablecell_merge:{label:c.cell.merge,group:"tablecell",command:"cellMerge",order:16},tablecell_merge_right:{label:c.cell.mergeRight,group:"tablecell",command:"cellMergeRight",order:17},tablecell_merge_down:{label:c.cell.mergeDown,group:"tablecell",command:"cellMergeDown",order:18},tablecell_split_horizontal:{label:c.cell.splitHorizontal,group:"tablecell",
command:"cellHorizontalSplit",order:19},tablecell_split_vertical:{label:c.cell.splitVertical,group:"tablecell",command:"cellVerticalSplit",order:20},tablecell_properties:{label:c.cell.title,group:"tablecellproperties",command:"cellProperties",order:21},tablerow:{label:c.row.menu,group:"tablerow",order:1,getItems:function(){return{tablerow_insertBefore:CKEDITOR.TRISTATE_OFF,tablerow_insertAfter:CKEDITOR.TRISTATE_OFF,tablerow_delete:CKEDITOR.TRISTATE_OFF}}},tablerow_insertBefore:{label:c.row.insertBefore,
group:"tablerow",command:"rowInsertBefore",order:5},tablerow_insertAfter:{label:c.row.insertAfter,group:"tablerow",command:"rowInsertAfter",order:10},tablerow_delete:{label:c.row.deleteRow,group:"tablerow",command:"rowDelete",order:15},tablecolumn:{label:c.column.menu,group:"tablecolumn",order:1,getItems:function(){return{tablecolumn_insertBefore:CKEDITOR.TRISTATE_OFF,tablecolumn_insertAfter:CKEDITOR.TRISTATE_OFF,tablecolumn_delete:CKEDITOR.TRISTATE_OFF}}},tablecolumn_insertBefore:{label:c.column.insertBefore,
group:"tablecolumn",command:"columnInsertBefore",order:5},tablecolumn_insertAfter:{label:c.column.insertAfter,group:"tablecolumn",command:"columnInsertAfter",order:10},tablecolumn_delete:{label:c.column.deleteColumn,group:"tablecolumn",command:"columnDelete",order:15}});e.contextMenu&&e.contextMenu.addListener(function(a,b,c){return(a=c.contains({td:1,th:1},1))&&!a.isReadOnly()?{tablecell:CKEDITOR.TRISTATE_OFF,tablerow:CKEDITOR.TRISTATE_OFF,tablecolumn:CKEDITOR.TRISTATE_OFF}:null})},getSelectedCells:p};
CKEDITOR.plugins.add("tabletools",CKEDITOR.plugins.tabletools)})();CKEDITOR.tools.buildTableMap=function(p){for(var p=p.$.rows,o=-1,q=[],r=0;r<p.length;r++){o++;!q[o]&&(q[o]=[]);for(var k=-1,u=0;u<p[r].cells.length;u++){var t=p[r].cells[u];for(k++;q[o][k];)k++;for(var m=isNaN(t.colSpan)?1:t.colSpan,t=isNaN(t.rowSpan)?1:t.rowSpan,v=0;v<t;v++){q[o+v]||(q[o+v]=[]);for(var s=0;s<m;s++)q[o+v][k+s]=p[r].cells[u]}k+=m-1}}return q};(function(){function t(a){return CKEDITOR.env.ie?a.$.clientWidth:parseInt(a.getComputedStyle("width"),10)}function o(a,g){var b=a.getComputedStyle("border-"+g+"-width"),c={thin:"0px",medium:"1px",thick:"2px"};0>b.indexOf("px")&&(b=b in c&&"none"!=a.getComputedStyle("border-style")?c[b]:0);return parseInt(b,10)}function w(a){var g=[],b=-1,c="rtl"==a.getComputedStyle("direction"),k;k=a.$.rows;for(var h=0,f,d,e,i=0,p=k.length;i<p;i++)e=k[i],f=e.cells.length,f>h&&(h=f,d=e);k=d;h=new CKEDITOR.dom.element(a.$.tBodies[0]);
f=h.getDocumentPosition();d=0;for(e=k.cells.length;d<e;d++){var i=new CKEDITOR.dom.element(k.cells[d]),p=k.cells[d+1]&&new CKEDITOR.dom.element(k.cells[d+1]),b=b+(i.$.colSpan||1),l,j,m=i.getDocumentPosition().x;c?j=m+o(i,"left"):l=m+i.$.offsetWidth-o(i,"right");p?(m=p.getDocumentPosition().x,c?l=m+p.$.offsetWidth-o(p,"right"):j=m+o(p,"left")):(m=a.getDocumentPosition().x,c?l=m:j=m+a.$.offsetWidth);i=Math.max(j-l,3);g.push({table:a,index:b,x:l,y:f.y,width:i,height:h.$.offsetHeight,rtl:c})}return g}
function u(a){(a.data||a).preventDefault()}function A(a){function g(){i=0;e.setOpacity(0);l&&b();var v=f.table;setTimeout(function(){v.removeCustomData("_cke_table_pillars")},0);d.removeListener("dragstart",u)}function b(){for(var v=f.rtl,a=v?m.length:x.length,b=0;b<a;b++){var c=x[b],d=m[b],e=f.table;CKEDITOR.tools.setTimeout(function(a,b,c,d,f,k){a&&a.setStyle("width",j(Math.max(b+k,0)));c&&c.setStyle("width",j(Math.max(d-k,0)));f&&e.setStyle("width",j(f+k*(v?-1:1)))},0,this,[c,c&&t(c),d,d&&t(d),
(!c||!d)&&t(e)+o(e,"left")+o(e,"right"),l])}}function c(a){u(a);for(var a=f.index,c=CKEDITOR.tools.buildTableMap(f.table),b=[],g=[],j=Number.MAX_VALUE,o=j,s=f.rtl,r=0,w=c.length;r<w;r++){var n=c[r],q=n[a+(s?1:0)],n=n[a+(s?0:1)],q=q&&new CKEDITOR.dom.element(q),n=n&&new CKEDITOR.dom.element(n);if(!q||!n||!q.equals(n))q&&(j=Math.min(j,t(q))),n&&(o=Math.min(o,t(n))),b.push(q),g.push(n)}x=b;m=g;y=f.x-j;z=f.x+o;e.setOpacity(0.5);p=parseInt(e.getStyle("left"),10);l=0;i=1;e.on("mousemove",h);d.on("dragstart",
u);d.on("mouseup",k,this)}function k(a){a.removeListener();g()}function h(a){r(a.data.getPageOffset().x)}var f,d,e,i,p,l,x,m,y,z;d=a.document;e=CKEDITOR.dom.element.createFromHtml('<div data-cke-temp=1 contenteditable=false unselectable=on style="position:absolute;cursor:col-resize;filter:alpha(opacity=0);opacity:0;padding:0;background-color:#004;background-image:none;border:0px none;z-index:10"></div>',d);a.on("destroy",function(){e.remove()});s||d.getDocumentElement().append(e);this.attachTo=function(a){i||
(s&&(d.getBody().append(e),l=0),f=a,e.setStyles({width:j(a.width),height:j(a.height),left:j(a.x),top:j(a.y)}),s&&e.setOpacity(0.25),e.on("mousedown",c,this),d.getBody().setStyle("cursor","col-resize"),e.show())};var r=this.move=function(a){if(!f)return 0;if(!i&&(a<f.x||a>f.x+f.width))return f=null,i=l=0,d.removeListener("mouseup",k),e.removeListener("mousedown",c),e.removeListener("mousemove",h),d.getBody().setStyle("cursor","auto"),s?e.remove():e.hide(),0;a-=Math.round(e.$.offsetWidth/2);if(i){if(a==
y||a==z)return 1;a=Math.max(a,y);a=Math.min(a,z);l=a-p}e.setStyle("left",j(a));return 1}}function r(a){var g=a.data.getTarget();if("mouseout"==a.name){if(!g.is("table"))return;for(var b=new CKEDITOR.dom.element(a.data.$.relatedTarget||a.data.$.toElement);b&&b.$&&!b.equals(g)&&!b.is("body");)b=b.getParent();if(!b||b.equals(g))return}g.getAscendant("table",1).removeCustomData("_cke_table_pillars");a.removeListener()}var j=CKEDITOR.tools.cssLength,s=CKEDITOR.env.ie&&(CKEDITOR.env.ie7Compat||CKEDITOR.env.quirks);
CKEDITOR.plugins.add("tableresize",{requires:"tabletools",init:function(a){a.on("contentDom",function(){var g,b=a.editable();b.attachListener(b.isInline()?b:a.document,"mousemove",function(c){var c=c.data,b=c.getPageOffset().x;if(g&&g.move(b))u(c);else{var c=c.getTarget(),h;if(c.is("table")||c.getAscendant("tbody",1)){h=c.getAscendant("table",1);if(!(c=h.getCustomData("_cke_table_pillars")))h.setCustomData("_cke_table_pillars",c=w(h)),h.on("mouseout",r),h.on("mousedown",r);a:{h=0;for(var f=c.length;h<
f;h++){var d=c[h];if(b>=d.x&&b<=d.x+d.width){b=d;break a}}b=null}b&&(!g&&(g=new A(a)),g.attachTo(b))}}})})}})})();(function(){function w(a){function d(){for(var b=g(),e=CKEDITOR.tools.clone(a.config.toolbarGroups)||n(a),f=0;f<e.length;f++){var k=e[f];if("/"!=k){"string"==typeof k&&(k=e[f]={name:k});var i,d=k.groups;if(d)for(var h=0;h<d.length;h++)i=d[h],(i=b[i])&&c(k,i);(i=b[k.name])&&c(k,i)}}return e}function g(){var b={},c,f,e;for(c in a.ui.items)f=a.ui.items[c],e=f.toolbar||"others",e=e.split(","),f=e[0],e=parseInt(e[1]||-1,10),b[f]||(b[f]=[]),b[f].push({name:c,order:e});for(f in b)b[f]=b[f].sort(function(b,
a){return b.order==a.order?0:0>a.order?-1:0>b.order?1:b.order<a.order?-1:1});return b}function c(c,e){if(e.length){c.items?c.items.push(a.ui.create("-")):c.items=[];for(var f;f=e.shift();)if(f="string"==typeof f?f:f.name,!b||-1==CKEDITOR.tools.indexOf(b,f))(f=a.ui.create(f))&&a.addFeature(f)&&c.items.push(f)}}function h(b){var a=[],e,d,h;for(e=0;e<b.length;++e)d=b[e],h={},"/"==d?a.push(d):CKEDITOR.tools.isArray(d)?(c(h,CKEDITOR.tools.clone(d)),a.push(h)):d.items&&(c(h,CKEDITOR.tools.clone(d.items)),
h.name=d.name,a.push(h));return a}var b=a.config.removeButtons,b=b&&b.split(","),e=a.config.toolbar;"string"==typeof e&&(e=a.config["toolbar_"+e]);return a.toolbar=e?h(e):d()}function n(a){return a._.toolbarGroups||(a._.toolbarGroups=[{name:"document",groups:["mode","document","doctools"]},{name:"clipboard",groups:["clipboard","undo"]},{name:"editing",groups:["find","selection","spellchecker"]},{name:"forms"},"/",{name:"basicstyles",groups:["basicstyles","cleanup"]},{name:"paragraph",groups:["list",
"indent","blocks","align","bidi"]},{name:"links"},{name:"insert"},"/",{name:"styles"},{name:"colors"},{name:"tools"},{name:"others"},{name:"about"}])}var u=function(){this.toolbars=[];this.focusCommandExecuted=!1};u.prototype.focus=function(){for(var a=0,d;d=this.toolbars[a++];)for(var g=0,c;c=d.items[g++];)if(c.focus){c.focus();return}};var x={modes:{wysiwyg:1,source:1},readOnly:1,exec:function(a){a.toolbox&&(a.toolbox.focusCommandExecuted=!0,CKEDITOR.env.ie||CKEDITOR.env.air?setTimeout(function(){a.toolbox.focus()},
100):a.toolbox.focus())}};CKEDITOR.plugins.add("toolbar",{requires:"button",init:function(a){var d,g=function(c,h){var b,e="rtl"==a.lang.dir,j=a.config.toolbarGroupCycling,o=e?37:39,e=e?39:37,j=void 0===j||j;switch(h){case 9:case CKEDITOR.SHIFT+9:for(;!b||!b.items.length;)if(b=9==h?(b?b.next:c.toolbar.next)||a.toolbox.toolbars[0]:(b?b.previous:c.toolbar.previous)||a.toolbox.toolbars[a.toolbox.toolbars.length-1],b.items.length)for(c=b.items[d?b.items.length-1:0];c&&!c.focus;)(c=d?c.previous:c.next)||
(b=0);c&&c.focus();return!1;case o:b=c;do b=b.next,!b&&j&&(b=c.toolbar.items[0]);while(b&&!b.focus);b?b.focus():g(c,9);return!1;case 40:return c.button&&c.button.hasArrow?(a.once("panelShow",function(b){b.data._.panel._.currentBlock.onKeyDown(40)}),c.execute()):g(c,40==h?o:e),!1;case e:case 38:b=c;do b=b.previous,!b&&j&&(b=c.toolbar.items[c.toolbar.items.length-1]);while(b&&!b.focus);b?b.focus():(d=1,g(c,CKEDITOR.SHIFT+9),d=0);return!1;case 27:return a.focus(),!1;case 13:case 32:return c.execute(),
!1}return!0};a.on("uiSpace",function(c){if(c.data.space==a.config.toolbarLocation){c.removeListener();a.toolbox=new u;var d=CKEDITOR.tools.getNextId(),b=['<span id="',d,'" class="cke_voice_label">',a.lang.toolbar.toolbars,"</span>",'<span id="'+a.ui.spaceId("toolbox")+'" class="cke_toolbox" role="group" aria-labelledby="',d,'" onmousedown="return false;">'],d=!1!==a.config.toolbarStartupExpanded,e,j;a.config.toolbarCanCollapse&&a.elementMode!=CKEDITOR.ELEMENT_MODE_INLINE&&b.push('<span class="cke_toolbox_main"'+
(d?">":' style="display:none">'));for(var o=a.toolbox.toolbars,f=w(a),k=0;k<f.length;k++){var i,l=0,r,m=f[k],s;if(m)if(e&&(b.push("</span>"),j=e=0),"/"===m)b.push('<span class="cke_toolbar_break"></span>');else{s=m.items||m;for(var t=0;t<s.length;t++){var p=s[t],n;if(p)if(p.type==CKEDITOR.UI_SEPARATOR)j=e&&p;else{n=!1!==p.canGroup;if(!l){i=CKEDITOR.tools.getNextId();l={id:i,items:[]};r=m.name&&(a.lang.toolbar.toolbarGroups[m.name]||m.name);b.push('<span id="',i,'" class="cke_toolbar"',r?' aria-labelledby="'+
i+'_label"':"",' role="toolbar">');r&&b.push('<span id="',i,'_label" class="cke_voice_label">',r,"</span>");b.push('<span class="cke_toolbar_start"></span>');var q=o.push(l)-1;0<q&&(l.previous=o[q-1],l.previous.next=l)}n?e||(b.push('<span class="cke_toolgroup" role="presentation">'),e=1):e&&(b.push("</span>"),e=0);i=function(c){c=c.render(a,b);q=l.items.push(c)-1;if(q>0){c.previous=l.items[q-1];c.previous.next=c}c.toolbar=l;c.onkey=g;c.onfocus=function(){a.toolbox.focusCommandExecuted||a.focus()}};
j&&(i(j),j=0);i(p)}}e&&(b.push("</span>"),j=e=0);l&&b.push('<span class="cke_toolbar_end"></span></span>')}}a.config.toolbarCanCollapse&&b.push("</span>");if(a.config.toolbarCanCollapse&&a.elementMode!=CKEDITOR.ELEMENT_MODE_INLINE){var v=CKEDITOR.tools.addFunction(function(){a.execCommand("toolbarCollapse")});a.on("destroy",function(){CKEDITOR.tools.removeFunction(v)});a.addCommand("toolbarCollapse",{readOnly:1,exec:function(b){var a=b.ui.space("toolbar_collapser"),c=a.getPrevious(),e=b.ui.space("contents"),
d=c.getParent(),f=parseInt(e.$.style.height,10),h=d.$.offsetHeight,g=a.hasClass("cke_toolbox_collapser_min");g?(c.show(),a.removeClass("cke_toolbox_collapser_min"),a.setAttribute("title",b.lang.toolbar.toolbarCollapse)):(c.hide(),a.addClass("cke_toolbox_collapser_min"),a.setAttribute("title",b.lang.toolbar.toolbarExpand));a.getFirst().setText(g?"▲":"◀");e.setStyle("height",f-(d.$.offsetHeight-h)+"px");b.fire("resize")},modes:{wysiwyg:1,source:1}});a.setKeystroke(CKEDITOR.ALT+(CKEDITOR.env.ie||CKEDITOR.env.webkit?
189:109),"toolbarCollapse");b.push('<a title="'+(d?a.lang.toolbar.toolbarCollapse:a.lang.toolbar.toolbarExpand)+'" id="'+a.ui.spaceId("toolbar_collapser")+'" tabIndex="-1" class="cke_toolbox_collapser');d||b.push(" cke_toolbox_collapser_min");b.push('" onclick="CKEDITOR.tools.callFunction('+v+')">','<span class="cke_arrow">&#9650;</span>',"</a>")}b.push("</span>");c.data.html+=b.join("")}});a.on("destroy",function(){if(this.toolbox){var a,d=0,b,e,g;for(a=this.toolbox.toolbars;d<a.length;d++){e=a[d].items;
for(b=0;b<e.length;b++)g=e[b],g.clickFn&&CKEDITOR.tools.removeFunction(g.clickFn),g.keyDownFn&&CKEDITOR.tools.removeFunction(g.keyDownFn)}}});a.on("uiReady",function(){var c=a.ui.space("toolbox");c&&a.focusManager.add(c,1)});a.addCommand("toolbarFocus",x);a.setKeystroke(CKEDITOR.ALT+121,"toolbarFocus");a.ui.add("-",CKEDITOR.UI_SEPARATOR,{});a.ui.addHandler(CKEDITOR.UI_SEPARATOR,{create:function(){return{render:function(a,d){d.push('<span class="cke_toolbar_separator" role="separator"></span>');return{}}}}})}});
CKEDITOR.ui.prototype.addToolbarGroup=function(a,d,g){var c=n(this.editor),h=0===d,b={name:a};if(g){if(g=CKEDITOR.tools.search(c,function(a){return a.name==g})){!g.groups&&(g.groups=[]);if(d&&(d=CKEDITOR.tools.indexOf(g.groups,d),0<=d)){g.groups.splice(d+1,0,a);return}h?g.groups.splice(0,0,a):g.groups.push(a);return}d=null}d&&(d=CKEDITOR.tools.indexOf(c,function(a){return a.name==d}));h?c.splice(0,0,a):"number"==typeof d?c.splice(d+1,0,b):c.push(a)}})();CKEDITOR.UI_SEPARATOR="separator";
CKEDITOR.config.toolbarLocation="top";(function(){function g(a){this.editor=a;this.reset()}CKEDITOR.plugins.add("undo",{init:function(a){function c(a){b.enabled&&!1!==a.data.command.canUndo&&b.save()}function d(){b.enabled=a.readOnly?!1:"wysiwyg"==a.mode;b.onChange()}var b=a.undoManager=new g(a),e=a.addCommand("undo",{exec:function(){b.undo()&&(a.selectionChange(),this.fire("afterUndo"))},startDisabled:!0,canUndo:!1}),f=a.addCommand("redo",{exec:function(){b.redo()&&(a.selectionChange(),this.fire("afterRedo"))},startDisabled:!0,canUndo:!1});
a.setKeystroke([[CKEDITOR.CTRL+90,"undo"],[CKEDITOR.CTRL+89,"redo"],[CKEDITOR.CTRL+CKEDITOR.SHIFT+90,"redo"]]);b.onChange=function(){e.setState(b.undoable()?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED);f.setState(b.redoable()?CKEDITOR.TRISTATE_OFF:CKEDITOR.TRISTATE_DISABLED)};a.on("beforeCommandExec",c);a.on("afterCommandExec",c);a.on("saveSnapshot",function(a){b.save(a.data&&a.data.contentOnly)});a.on("contentDom",function(){a.editable().on("keydown",function(a){a=a.data.getKey();(8==a||46==
a)&&b.type(a,0)});a.editable().on("keypress",function(a){b.type(a.data.getKey(),1)})});a.on("beforeModeUnload",function(){"wysiwyg"==a.mode&&b.save(!0)});a.on("mode",d);a.on("readOnly",d);a.ui.addButton&&(a.ui.addButton("Undo",{label:a.lang.undo.undo,command:"undo",toolbar:"undo,10"}),a.ui.addButton("Redo",{label:a.lang.undo.redo,command:"redo",toolbar:"undo,20"}));a.resetUndo=function(){b.reset();a.fire("saveSnapshot")};a.on("updateSnapshot",function(){b.currentImage&&b.update()});a.on("lockSnapshot",
function(a){b.lock(a.data&&a.data.dontUpdate)});a.on("unlockSnapshot",b.unlock,b)}});CKEDITOR.plugins.undo={};var f=CKEDITOR.plugins.undo.Image=function(a,c){this.editor=a;a.fire("beforeUndoImage");var d=a.getSnapshot();CKEDITOR.env.ie&&d&&(d=d.replace(/\s+data-cke-expando=".*?"/g,""));this.contents=d;c||(this.bookmarks=(d=d&&a.getSelection())&&d.createBookmarks2(!0));a.fire("afterUndoImage")},h=/\b(?:href|src|name)="[^"]*?"/gi;f.prototype={equalsContent:function(a){var c=this.contents,a=a.contents;
if(CKEDITOR.env.ie&&(CKEDITOR.env.ie7Compat||CKEDITOR.env.ie6Compat))c=c.replace(h,""),a=a.replace(h,"");return c!=a?!1:!0},equalsSelection:function(a){var c=this.bookmarks,a=a.bookmarks;if(c||a){if(!c||!a||c.length!=a.length)return!1;for(var d=0;d<c.length;d++){var b=c[d],e=a[d];if(b.startOffset!=e.startOffset||b.endOffset!=e.endOffset||!CKEDITOR.tools.arrayCompare(b.start,e.start)||!CKEDITOR.tools.arrayCompare(b.end,e.end))return!1}}return!0}};g.prototype={type:function(a,c){var d=!c&&a!=this.lastKeystroke,
b=this.editor;if(!this.typing||c&&!this.wasCharacter||d){var e=new f(b),g=this.snapshots.length;CKEDITOR.tools.setTimeout(function(){var a=b.getSnapshot();CKEDITOR.env.ie&&(a=a.replace(/\s+data-cke-expando=".*?"/g,""));e.contents!=a&&g==this.snapshots.length&&(this.typing=!0,this.save(!1,e,!1)||this.snapshots.splice(this.index+1,this.snapshots.length-this.index-1),this.hasUndo=!0,this.hasRedo=!1,this.modifiersCount=this.typesCount=1,this.onChange())},0,this)}this.lastKeystroke=a;(this.wasCharacter=
c)?(this.modifiersCount=0,this.typesCount++,25<this.typesCount?(this.save(!1,null,!1),this.typesCount=1):setTimeout(function(){b.fire("change")},0)):(this.typesCount=0,this.modifiersCount++,25<this.modifiersCount?(this.save(!1,null,!1),this.modifiersCount=1):setTimeout(function(){b.fire("change")},0))},reset:function(){this.lastKeystroke=0;this.snapshots=[];this.index=-1;this.limit=this.editor.config.undoStackSize||20;this.currentImage=null;this.hasRedo=this.hasUndo=!1;this.locked=null;this.resetType()},
resetType:function(){this.typing=!1;delete this.lastKeystroke;this.modifiersCount=this.typesCount=0},fireChange:function(){this.hasUndo=!!this.getNextImage(!0);this.hasRedo=!!this.getNextImage(!1);this.resetType();this.onChange()},save:function(a,c,d){if(this.locked)return!1;var b=this.snapshots;c||(c=new f(this.editor));if(!1===c.contents)return!1;if(this.currentImage)if(c.equalsContent(this.currentImage)){if(a||c.equalsSelection(this.currentImage))return!1}else this.editor.fire("change");b.splice(this.index+
1,b.length-this.index-1);b.length==this.limit&&b.shift();this.index=b.push(c)-1;this.currentImage=c;!1!==d&&this.fireChange();return!0},restoreImage:function(a){var c=this.editor,d;a.bookmarks&&(c.focus(),d=c.getSelection());this.locked=1;this.editor.loadSnapshot(a.contents);a.bookmarks?d.selectBookmarks(a.bookmarks):CKEDITOR.env.ie&&(d=this.editor.document.getBody().$.createTextRange(),d.collapse(!0),d.select());this.locked=0;this.index=a.index;this.currentImage=this.snapshots[this.index];this.update();
this.fireChange();c.fire("change")},getNextImage:function(a){var c=this.snapshots,d=this.currentImage,b;if(d)if(a)for(b=this.index-1;0<=b;b--){if(a=c[b],!d.equalsContent(a))return a.index=b,a}else for(b=this.index+1;b<c.length;b++)if(a=c[b],!d.equalsContent(a))return a.index=b,a;return null},redoable:function(){return this.enabled&&this.hasRedo},undoable:function(){return this.enabled&&this.hasUndo},undo:function(){if(this.undoable()){this.save(!0);var a=this.getNextImage(!0);if(a)return this.restoreImage(a),
!0}return!1},redo:function(){if(this.redoable()&&(this.save(!0),this.redoable())){var a=this.getNextImage(!1);if(a)return this.restoreImage(a),!0}return!1},update:function(a){if(!this.locked){a||(a=new f(this.editor));for(var c=this.index,d=this.snapshots;0<c&&this.currentImage.equalsContent(d[c-1]);)c-=1;d.splice(c,this.index-c+1,a);this.index=c;this.currentImage=a}},lock:function(a){this.locked?this.locked.level++:a?this.locked={level:1}:(a=new f(this.editor,!0),this.locked={update:this.currentImage&&
this.currentImage.equalsContent(a)?a:null,level:1})},unlock:function(){if(this.locked&&!--this.locked.level){var a=this.locked.update,c=a&&new f(this.editor,!0);this.locked=null;a&&!a.equalsContent(c)&&this.update()}}}})();CKEDITOR.plugins.add("wordcount",{lang:"ca de en es fr it jp nl no pl pt-BR ru".split(" "),version:1.09,init:function(b){function k(b){var a=document.createElement("div");a.innerHTML=b;return""==a.textContent&&"undefined"==typeof a.innerText?"0":a.textContent||a.innerText}function h(g){var e=0,c=0,f,d;if(d=g.getData())if(a.showCharCount&&(a.countHTML?c=d.length:(b.config.fullPage&&(c=d.search(/<body>/i),-1!=c&&(f=d.search(/<\/body>/i),d=d.substring(c+6,f))),f=d.replace(/(\r\n|\n|\r)/gm,"").replace(/^\s+|\s+$/g,
"").replace("&nbsp;","").replace(/\s/g,""),f=k(f).replace(/^([\s\t\r\n]*)$/,""),c=f.length)),a.showWordCount){f=d.replace(/(\r\n|\n|\r)/gm," ").replace(/^\s+|\s+$/g,"").replace("&nbsp;"," ");f=k(f);e=f.split(/\s+/);for(d=e.length-1;0<=d;d--)e[d].match(/^([\s\t\r\n]*)$/)&&e.splice(d,1);e=e.length}d=o.replace("%wordCount%",e).replace("%charCount%",c);document.getElementById("cke_wordcount_"+g.name).innerHTML=d;if(c==l)return!0;l=c;a.showWordCount&&e>a.wordLimit?m(b,i):a.showWordCount&&e==a.wordLimit?
g.fire("saveSnapshot"):!j&&e<a.wordLimit&&n(b);a.showCharCount&&c>a.charLimit?m(b,i):a.showCharCount&&c==a.charLimit?g.fire("saveSnapshot"):!j&&c<a.charLimit&&n(b);return!0}function m(a,c){i=!0;j=!1;a.execCommand("undo");c||a.fire("limitReached",{},b);a.config.Locked=1}function n(a){j=!0;i=!1;a.config.Locked=0;document.getElementById("cke_wordcount_"+a.name).className="cke_wordcount"}if(b.elementMode!==CKEDITOR.ELEMENT_MODE_INLINE){var c='<span class="cke_path_item">',l=0,i=!1,j=!1,a=CKEDITOR.tools.extend({showWordCount:!0,
showCharCount:!1,charLimit:"unlimited",wordLimit:"unlimited",countHTML:!1},b.config.wordcount||{},!0);a.showCharCount&&(c+=b.lang.wordcount[a.countHTML?"CharCountWithHTML":"CharCount"]+"&nbsp;%charCount%","unlimited"!=a.charLimit&&(c+="&nbsp;("+b.lang.wordcount.limit+"&nbsp;"+a.charLimit+")"));a.showCharCount&&a.showWordCount&&(c+=",&nbsp;");a.showWordCount&&(c+=b.lang.wordcount.WordCount+" %wordCount%","unlimited"!=a.wordLimit&&(c+="&nbsp;("+b.lang.wordcount.limit+"&nbsp;"+a.wordLimit+")"));var o=
c+"</span>";CKEDITOR.document.appendStyleSheet(this.path+"css/wordcount.css");b.on("key",function(a){b.mode==="source"&&h(a.editor)},b,null,100);b.on("change",function(a){h(a.editor)},b,null,100);b.on("uiSpace",function(a){if(a.data.space=="bottom")a.data.html=a.data.html+('<div id="cke_wordcount_'+a.editor.name+'" class="cke_wordcount" style="" title="'+b.lang.wordcount.title+'">&nbsp;</div>')},b,null,100);b.on("dataReady",function(a){h(a.editor)},b,null,100);b.on("afterPaste",function(a){h(a.editor)},
b,null,100);b.on("blur",function(){},b,null,300);String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")})}}});CKEDITOR.plugins.add("divarea",{afterInit:function(a){a.addMode("wysiwyg",function(c){var b=CKEDITOR.dom.element.createFromHtml('<div class="cke_wysiwyg_div cke_reset" hidefocus="true"></div>');a.ui.space("contents").append(b);b=a.editable(b);b.detach=CKEDITOR.tools.override(b.detach,function(a){return function(){a.apply(this,arguments);this.remove()}});a.setData(a.getData(1),c);a.fire("contentDom")})}});(function(){function k(a){var d=this.editor,b=a.document,c=b.body;(a=b.getElementById("cke_actscrpt"))&&a.parentNode.removeChild(a);(a=b.getElementById("cke_shimscrpt"))&&a.parentNode.removeChild(a);CKEDITOR.env.gecko&&(c.contentEditable=!1,2E4>CKEDITOR.env.version&&(c.innerHTML=c.innerHTML.replace(/^.*<\!-- cke-content-start --\>/,""),setTimeout(function(){var a=new CKEDITOR.dom.range(new CKEDITOR.dom.document(b));a.setStart(new CKEDITOR.dom.node(c),0);d.getSelection().selectRanges([a])},0)));c.contentEditable=
!0;CKEDITOR.env.ie&&(c.hideFocus=!0,c.disabled=!0,c.removeAttribute("disabled"));delete this._.isLoadingData;this.$=c;b=new CKEDITOR.dom.document(b);this.setup();CKEDITOR.env.ie&&(b.getDocumentElement().addClass(b.$.compatMode),d.config.enterMode!=CKEDITOR.ENTER_P&&this.attachListener(b,"selectionchange",function(){var a=b.getBody(),c=d.getSelection(),e=c&&c.getRanges()[0];e&&(a.getHtml().match(/^<p>(?:&nbsp;|<br>)<\/p>$/i)&&e.startContainer.equals(a))&&setTimeout(function(){e=d.getSelection().getRanges()[0];
if(!e.startContainer.equals("body")){a.getFirst().remove(1);e.moveToElementEditEnd(a);e.select()}},0)}));if(CKEDITOR.env.webkit||CKEDITOR.env.ie&&10<CKEDITOR.env.version)b.getDocumentElement().on("mousedown",function(a){a.data.getTarget().is("html")&&setTimeout(function(){d.editable().focus()})});try{d.document.$.execCommand("2D-position",!1,!0)}catch(e){}try{d.document.$.execCommand("enableInlineTableEditing",!1,!d.config.disableNativeTableHandles)}catch(g){}if(d.config.disableObjectResizing)try{this.getDocument().$.execCommand("enableObjectResizing",
!1,!1)}catch(f){this.attachListener(this,CKEDITOR.env.ie?"resizestart":"resize",function(a){a.data.preventDefault()})}(CKEDITOR.env.gecko||CKEDITOR.env.ie&&"CSS1Compat"==d.document.$.compatMode)&&this.attachListener(this,"keydown",function(a){var b=a.data.getKeystroke();if(b==33||b==34)if(CKEDITOR.env.ie)setTimeout(function(){d.getSelection().scrollIntoView()},0);else if(d.window.$.innerHeight>this.$.offsetHeight){var c=d.createRange();c[b==33?"moveToElementEditStart":"moveToElementEditEnd"](this);
c.select();a.data.preventDefault()}});CKEDITOR.env.ie&&this.attachListener(b,"blur",function(){try{b.$.selection.empty()}catch(a){}});d.document.getElementsByTag("title").getItem(0).data("cke-title",d.document.$.title);CKEDITOR.env.ie&&(d.document.$.title=this._.docTitle);CKEDITOR.tools.setTimeout(function(){d.fire("contentDom");if(this._.isPendingFocus){d.focus();this._.isPendingFocus=false}setTimeout(function(){d.fire("dataReady")},0);CKEDITOR.env.ie&&setTimeout(function(){if(d.document){var a=
d.document.$.body;a.runtimeStyle.marginBottom="0px";a.runtimeStyle.marginBottom=""}},1E3)},0,this)}function l(){var a=[];if(8<=CKEDITOR.document.$.documentMode){a.push("html.CSS1Compat [contenteditable=false]{min-height:0 !important}");var d=[],b;for(b in CKEDITOR.dtd.$removeEmpty)d.push("html.CSS1Compat "+b+"[contenteditable=false]");a.push(d.join(",")+"{display:inline-block}")}else CKEDITOR.env.gecko&&(a.push("html{height:100% !important}"),a.push("img:-moz-broken{-moz-force-broken-image-icon:1;min-width:24px;min-height:24px}"));
a.push("html{cursor:text;*cursor:auto}");a.push("img,input,textarea{cursor:default}");return a.join("\n")}CKEDITOR.plugins.add("wysiwygarea",{init:function(a){a.config.fullPage&&a.addFeature({allowedContent:"html head title; style [media,type]; body (*)[id]; meta link [*]",requiredContent:"body"});a.addMode("wysiwyg",function(d){function b(b){b&&b.removeListener();a.editable(new j(a,e.$.contentWindow.document.body));a.setData(a.getData(1),d)}var c="document.open();"+(CKEDITOR.env.ie?"("+CKEDITOR.tools.fixDomain+
")();":"")+"document.close();",c=CKEDITOR.env.air?"javascript:void(0)":CKEDITOR.env.ie?"javascript:void(function(){"+encodeURIComponent(c)+"}())":"",e=CKEDITOR.dom.element.createFromHtml('<iframe src="'+c+'" frameBorder="0"></iframe>');e.setStyles({width:"100%",height:"100%"});e.addClass("cke_wysiwyg_frame cke_reset");var g=a.ui.space("contents");g.append(e);if(c=CKEDITOR.env.ie||CKEDITOR.env.gecko)e.on("load",b);var f=a.title,h=a.lang.common.editorHelp;f&&(CKEDITOR.env.ie&&(f+=", "+h),e.setAttribute("title",
f));var f=CKEDITOR.tools.getNextId(),i=CKEDITOR.dom.element.createFromHtml('<span id="'+f+'" class="cke_voice_label">'+h+"</span>");g.append(i,1);a.on("beforeModeUnload",function(a){a.removeListener();i.remove()});e.setAttributes({"aria-describedby":f,tabIndex:a.tabIndex,allowTransparency:"true"});!c&&b();CKEDITOR.env.webkit&&(c=function(){g.setStyle("width","100%");e.hide();e.setSize("width",g.getSize("width"));g.removeStyle("width");e.show()},e.setCustomData("onResize",c),CKEDITOR.document.getWindow().on("resize",
c));a.fire("ariaWidget",e)})}});var j=CKEDITOR.tools.createClass({$:function(a){this.base.apply(this,arguments);this._.frameLoadedHandler=CKEDITOR.tools.addFunction(function(a){CKEDITOR.tools.setTimeout(k,0,this,a)},this);this._.docTitle=this.getWindow().getFrame().getAttribute("title")},base:CKEDITOR.editable,proto:{setData:function(a,d){var b=this.editor;if(d)this.setHtml(a),b.fire("dataReady");else{this._.isLoadingData=!0;b._.dataStore={id:1};var c=b.config,e=c.fullPage,g=c.docType,f=CKEDITOR.tools.buildStyleHtml(l()).replace(/<style>/,
'<style data-cke-temp="1">');e||(f+=CKEDITOR.tools.buildStyleHtml(b.config.contentsCss));var h=c.baseHref?'<base href="'+c.baseHref+'" data-cke-temp="1" />':"";e&&(a=a.replace(/<!DOCTYPE[^>]*>/i,function(a){b.docType=g=a;return""}).replace(/<\?xml\s[^\?]*\?>/i,function(a){b.xmlDeclaration=a;return""}));a=b.dataProcessor.toHtml(a);e?(/<body[\s|>]/.test(a)||(a="<body>"+a),/<html[\s|>]/.test(a)||(a="<html>"+a+"</html>"),/<head[\s|>]/.test(a)?/<title[\s|>]/.test(a)||(a=a.replace(/<head[^>]*>/,"$&<title></title>")):
a=a.replace(/<html[^>]*>/,"$&<head><title></title></head>"),h&&(a=a.replace(/<head>/,"$&"+h)),a=a.replace(/<\/head\s*>/,f+"$&"),a=g+a):a=c.docType+'<html dir="'+c.contentsLangDirection+'" lang="'+(c.contentsLanguage||b.langCode)+'"><head><title>'+this._.docTitle+"</title>"+h+f+"</head><body"+(c.bodyId?' id="'+c.bodyId+'"':"")+(c.bodyClass?' class="'+c.bodyClass+'"':"")+">"+a+"</body></html>";CKEDITOR.env.gecko&&(a=a.replace(/<body/,'<body contenteditable="true" '),2E4>CKEDITOR.env.version&&(a=a.replace(/<body[^>]*>/,
"$&<\!-- cke-content-start --\>")));c='<script id="cke_actscrpt" type="text/javascript"'+(CKEDITOR.env.ie?' defer="defer" ':"")+">var wasLoaded=0;function onload(){if(!wasLoaded)window.parent.CKEDITOR.tools.callFunction("+this._.frameLoadedHandler+",window);wasLoaded=1;}"+(CKEDITOR.env.ie?"onload();":'document.addEventListener("DOMContentLoaded", onload, false );')+"<\/script>";CKEDITOR.env.ie&&9>CKEDITOR.env.version&&(c+='<script id="cke_shimscrpt">window.parent.CKEDITOR.tools.enableHtml5Elements(document)<\/script>');
a=a.replace(/(?=\s*<\/(:?head)>)/,c);this.clearCustomData();this.clearListeners();b.fire("contentDomUnload");var i=this.getDocument();try{i.write(a)}catch(j){setTimeout(function(){i.write(a)},0)}}},getData:function(a){if(a)return this.getHtml();var a=this.editor,d=a.config,b=d.fullPage,c=b&&a.docType,e=b&&a.xmlDeclaration,g=this.getDocument(),b=b?g.getDocumentElement().getOuterHtml():g.getBody().getHtml();CKEDITOR.env.gecko&&d.enterMode!=CKEDITOR.ENTER_BR&&(b=b.replace(/<br>(?=\s*(:?$|<\/body>))/,
""));b=a.dataProcessor.toDataFormat(b);e&&(b=e+"\n"+b);c&&(b=c+"\n"+b);return b},focus:function(){this._.isLoadingData?this._.isPendingFocus=!0:j.baseProto.focus.call(this)},detach:function(){var a=this.editor,d=a.document,a=a.window.getFrame();j.baseProto.detach.call(this);this.clearCustomData();d.getDocumentElement().clearCustomData();a.clearCustomData();CKEDITOR.tools.removeFunction(this._.frameLoadedHandler);(d=a.removeCustomData("onResize"))&&d.removeListener();a.remove()}}})})();
CKEDITOR.config.disableObjectResizing=!1;CKEDITOR.config.disableNativeTableHandles=!0;CKEDITOR.config.disableNativeSpellChecker=!0;CKEDITOR.config.contentsCss=CKEDITOR.getUrl("contents.css");CKEDITOR.config.plugins='dialogui,dialog,a11yhelp,basicstyles,button,panel,floatpanel,menu,contextmenu,enterkey,entities,htmlwriter,indent,indentblock,indentlist,list,listblock,removeformat,richcombo,sharedspace,specialchar,tab,table,tabletools,tableresize,toolbar,undo,wordcount,divarea,wysiwygarea';CKEDITOR.config.skin='moono';(function() {var setIcons = function(icons, strip) {var path = CKEDITOR.getUrl( 'plugins/' + strip );icons = icons.split( ',' );for ( var i = 0; i < icons.length; i++ )CKEDITOR.skin.icons[ icons[ i ] ] = { path: path, offset: -icons[ ++i ], bgsize : icons[ ++i ] };};if (CKEDITOR.env.hidpi) setIcons('bold,0,,italic,24,,strike,48,,subscript,72,,superscript,96,,underline,120,,indent-rtl,144,,indent,168,,outdent-rtl,192,,outdent,216,,bulletedlist-rtl,240,,bulletedlist,264,,numberedlist-rtl,288,,numberedlist,312,,removeformat,336,,specialchar,360,,table,384,,redo-rtl,408,,redo,432,,undo-rtl,456,,undo,480,','icons_hidpi.png');else setIcons('bold,0,auto,italic,24,auto,strike,48,auto,subscript,72,auto,superscript,96,auto,underline,120,auto,indent-rtl,144,auto,indent,168,auto,outdent-rtl,192,auto,outdent,216,auto,bulletedlist-rtl,240,auto,bulletedlist,264,auto,numberedlist-rtl,288,auto,numberedlist,312,auto,removeformat,336,auto,specialchar,360,auto,table,384,auto,redo-rtl,408,auto,redo,432,auto,undo-rtl,456,auto,undo,480,auto','icons.png');})();CKEDITOR.lang.languages={"en":1};}());

// FILE: en.js (b628e484) 5/2/2014 12:55:58 PM

CKEDITOR.lang['en']={"editor":"Rich Text Editor","editorPanel":"Rich Text Editor panel","common":{"editorHelp":"Press ALT 0 for help","browseServer":"Browse Server","url":"URL","protocol":"Protocol","upload":"Upload","uploadSubmit":"Send it to the Server","image":"Image","flash":"Flash","form":"Form","checkbox":"Checkbox","radio":"Radio Button","textField":"Text Field","textarea":"Textarea","hiddenField":"Hidden Field","button":"Button","select":"Selection Field","imageButton":"Image Button","notSet":"<not set>","id":"Id","name":"Name","langDir":"Language Direction","langDirLtr":"Left to Right (LTR)","langDirRtl":"Right to Left (RTL)","langCode":"Language Code","longDescr":"Long Description URL","cssClass":"Stylesheet Classes","advisoryTitle":"Advisory Title","cssStyle":"Style","ok":"OK","cancel":"Cancel","close":"Close","preview":"Preview","resize":"Resize","generalTab":"General","advancedTab":"Advanced","validateNumberFailed":"This value is not a number.","confirmNewPage":"Any unsaved changes to this content will be lost. Are you sure you want to load new page?","confirmCancel":"You have changed some options. Are you sure you want to close the dialog window?","options":"Options","target":"Target","targetNew":"New Window (_blank)","targetTop":"Topmost Window (_top)","targetSelf":"Same Window (_self)","targetParent":"Parent Window (_parent)","langDirLTR":"Left to Right (LTR)","langDirRTL":"Right to Left (RTL)","styles":"Style","cssClasses":"Stylesheet Classes","width":"Width","height":"Height","align":"Alignment","alignLeft":"Left","alignRight":"Right","alignCenter":"Center","alignTop":"Top","alignMiddle":"Middle","alignBottom":"Bottom","invalidValue":"Invalid value.","invalidHeight":"Height must be a number.","invalidWidth":"Width must be a number.","invalidCssLength":"Value specified for the \"%1\" field must be a positive number with or without a valid CSS measurement unit (px, %, in, cm, mm, em, ex, pt, or pc).","invalidHtmlLength":"Value specified for the \"%1\" field must be a positive number with or without a valid HTML measurement unit (px or %).","invalidInlineStyle":"Value specified for the inline style must consist of one or more tuples with the format of \"name : value\", separated by semi-colons.","cssLengthTooltip":"Enter a number for a value in pixels or a number with a valid CSS unit (px, %, in, cm, mm, em, ex, pt, or pc).","unavailable":"%1<span class=\"cke_accessibility\">, unavailable</span>"},"basicstyles":{"bold":"Bold","italic":"Italic","strike":"Strike Through","subscript":"Subscript","superscript":"Superscript","underline":"Underline"},"button":{"selectedLabel":"%1 (Selected)"},"contextmenu":{"options":"Context Menu Options"},"indent":{"indent":"Increase Indent","outdent":"Decrease Indent"},"list":{"bulletedlist":"Insert/Remove Bulleted List","numberedlist":"Insert/Remove Numbered List"},"removeformat":{"toolbar":"Remove Format"},"specialchar":{"options":"Special Character Options","title":"Select Special Character","toolbar":"Insert Special Character"},"table":{"border":"Border size","caption":"Caption","cell":{"menu":"Cell","insertBefore":"Insert Cell Before","insertAfter":"Insert Cell After","deleteCell":"Delete Cells","merge":"Merge Cells","mergeRight":"Merge Right","mergeDown":"Merge Down","splitHorizontal":"Split Cell Horizontally","splitVertical":"Split Cell Vertically","title":"Cell Properties","cellType":"Cell Type","rowSpan":"Rows Span","colSpan":"Columns Span","wordWrap":"Word Wrap","hAlign":"Horizontal Alignment","vAlign":"Vertical Alignment","alignBaseline":"Baseline","bgColor":"Background Color","borderColor":"Border Color","data":"Data","header":"Header","yes":"Yes","no":"No","invalidWidth":"Cell width must be a number.","invalidHeight":"Cell height must be a number.","invalidRowSpan":"Rows span must be a whole number.","invalidColSpan":"Columns span must be a whole number.","chooseColor":"Choose"},"cellPad":"Cell padding","cellSpace":"Cell spacing","column":{"menu":"Column","insertBefore":"Insert Column Before","insertAfter":"Insert Column After","deleteColumn":"Delete Columns"},"columns":"Columns","deleteTable":"Delete Table","headers":"Headers","headersBoth":"Both","headersColumn":"First column","headersNone":"None","headersRow":"First Row","invalidBorder":"Border size must be a number.","invalidCellPadding":"Cell padding must be a positive number.","invalidCellSpacing":"Cell spacing must be a positive number.","invalidCols":"Number of columns must be a number greater than 0.","invalidHeight":"Table height must be a number.","invalidRows":"Number of rows must be a number greater than 0.","invalidWidth":"Table width must be a number.","menu":"Table Properties","row":{"menu":"Row","insertBefore":"Insert Row Before","insertAfter":"Insert Row After","deleteRow":"Delete Rows"},"rows":"Rows","summary":"Summary","title":"Table Properties","toolbar":"Table","widthPc":"percent","widthPx":"pixels","widthUnit":"width unit"},"toolbar":{"toolbarCollapse":"Collapse Toolbar","toolbarExpand":"Expand Toolbar","toolbarGroups":{"document":"Document","clipboard":"Clipboard/Undo","editing":"Editing","forms":"Forms","basicstyles":"Basic Styles","paragraph":"Paragraph","links":"Links","insert":"Insert","styles":"Styles","colors":"Colors","tools":"Tools"},"toolbars":"Editor toolbars"},"undo":{"redo":"Redo","undo":"Undo"},"wordcount":{"WordCount":"Words:","CharCount":"Characters:","CharCountWithHTML":"Characters (including HTML):","limit":"Limit:","title":"Statistics"}};

// FILE: styles.js (aa9f6537) 5/2/2014 12:55:58 PM

CKEDITOR.stylesSet.add( 'default', [
{ name: 'Italic Title',  element: 'h2', styles: { 'font-style': 'italic' } },
{ name: 'Subtitle',   element: 'h3', styles: { 'color': '#aaa', 'font-style': 'italic' } },
{
name: 'Special Container',
element: 'div',
styles: {
padding: '5px 10px',
background: '#eee',
border: '1px solid #ccc'
}
},
{ name: 'Marker',   element: 'span', attributes: { 'class': 'marker' } },
{ name: 'Big',    element: 'big' },
{ name: 'Small',   element: 'small' },
{ name: 'Typewriter',  element: 'tt' },
{ name: 'Computer Code', element: 'code' },
{ name: 'Keyboard Phrase', element: 'kbd' },
{ name: 'Sample Text',  element: 'samp' },
{ name: 'Variable',   element: 'var' },
{ name: 'Deleted Text',  element: 'del' },
{ name: 'Inserted Text', element: 'ins' },
{ name: 'Cited Work',  element: 'cite' },
{ name: 'Inline Quotation', element: 'q' },
{ name: 'Language: RTL', element: 'span', attributes: { 'dir': 'rtl' } },
{ name: 'Language: LTR', element: 'span', attributes: { 'dir': 'ltr' } },
{
name: 'Styled image (left)',
element: 'img',
attributes: { 'class': 'left' }
},
{
name: 'Styled image (right)',
element: 'img',
attributes: { 'class': 'right' }
},
{
name: 'Compact table',
element: 'table',
attributes: {
cellpadding: '5',
cellspacing: '0',
border: '1',
bordercolor: '#ccc'
},
styles: {
'border-collapse': 'collapse'
}
},
{ name: 'Borderless Table',  element: 'table', styles: { 'border-style': 'hidden', 'background-color': '#E6E6FA' } },
{ name: 'Square Bulleted List', element: 'ul',  styles: { 'list-style-type': 'square' } }
] );

// FILE: table.js (6a5b73c7) 5/2/2014 12:55:58 PM

(function(){function r(a){for(var e=0,l=0,k=0,m,g=a.$.rows.length;k<g;k++){m=a.$.rows[k];for(var d=e=0,c,b=m.cells.length;d<b;d++)c=m.cells[d],e+=c.colSpan;e>l&&(l=e)}return l}function o(a){return function(){var e=this.getValue(),e=!!(CKEDITOR.dialog.validate.integer()(e)&&0<e);e||(alert(a),this.select());return e}}function n(a,e){var l=function(g){return new CKEDITOR.dom.element(g,a.document)},n=a.editable(),m=a.plugins.dialogadvtab;return{title:a.lang.table.title,minWidth:310,minHeight:CKEDITOR.env.ie?
310:280,onLoad:function(){var g=this,a=g.getContentElement("advanced","advStyles");if(a)a.on("change",function(){var a=this.getStyle("width",""),b=g.getContentElement("info","txtWidth");b&&b.setValue(a,!0);a=this.getStyle("height","");(b=g.getContentElement("info","txtHeight"))&&b.setValue(a,!0)})},onShow:function(){var g=a.getSelection(),d=g.getRanges(),c,b=this.getContentElement("info","txtRows"),h=this.getContentElement("info","txtCols"),p=this.getContentElement("info","txtWidth"),f=this.getContentElement("info",
"txtHeight");"tableProperties"==e&&((g=g.getSelectedElement())&&g.is("table")?c=g:0<d.length&&(CKEDITOR.env.webkit&&d[0].shrink(CKEDITOR.NODE_ELEMENT),c=a.elementPath(d[0].getCommonAncestor(!0)).contains("table",1)),this._.selectedElement=c);c?(this.setupContent(c),b&&b.disable(),h&&h.disable()):(b&&b.enable(),h&&h.enable());p&&p.onChange();f&&f.onChange()},onOk:function(){var g=a.getSelection(),d=this._.selectedElement&&g.createBookmarks(),c=this._.selectedElement||l("table"),b={};this.commitContent(b,
c);if(b.info){b=b.info;if(!this._.selectedElement)for(var h=c.append(l("tbody")),e=parseInt(b.txtRows,10)||0,f=parseInt(b.txtCols,10)||0,i=0;i<e;i++)for(var j=h.append(l("tr")),k=0;k<f;k++)j.append(l("td")).appendBogus();e=b.selHeaders;if(!c.$.tHead&&("row"==e||"both"==e)){j=new CKEDITOR.dom.element(c.$.createTHead());h=c.getElementsByTag("tbody").getItem(0);h=h.getElementsByTag("tr").getItem(0);for(i=0;i<h.getChildCount();i++)f=h.getChild(i),f.type==CKEDITOR.NODE_ELEMENT&&!f.data("cke-bookmark")&&
(f.renameNode("th"),f.setAttribute("scope","col"));j.append(h.remove())}if(null!==c.$.tHead&&!("row"==e||"both"==e)){j=new CKEDITOR.dom.element(c.$.tHead);h=c.getElementsByTag("tbody").getItem(0);for(k=h.getFirst();0<j.getChildCount();){h=j.getFirst();for(i=0;i<h.getChildCount();i++)f=h.getChild(i),f.type==CKEDITOR.NODE_ELEMENT&&(f.renameNode("td"),f.removeAttribute("scope"));h.insertBefore(k)}j.remove()}if(!this.hasColumnHeaders&&("col"==e||"both"==e))for(j=0;j<c.$.rows.length;j++)f=new CKEDITOR.dom.element(c.$.rows[j].cells[0]),
f.renameNode("th"),f.setAttribute("scope","row");if(this.hasColumnHeaders&&!("col"==e||"both"==e))for(i=0;i<c.$.rows.length;i++)j=new CKEDITOR.dom.element(c.$.rows[i]),"tbody"==j.getParent().getName()&&(f=new CKEDITOR.dom.element(j.$.cells[0]),f.renameNode("td"),f.removeAttribute("scope"));b.txtHeight?c.setStyle("height",b.txtHeight):c.removeStyle("height");b.txtWidth?c.setStyle("width",b.txtWidth):c.removeStyle("width");c.getAttribute("style")||c.removeAttribute("style")}if(this._.selectedElement)try{g.selectBookmarks(d)}catch(m){}else a.insertElement(c),
setTimeout(function(){var g=new CKEDITOR.dom.element(c.$.rows[0].cells[0]),b=a.createRange();b.moveToPosition(g,CKEDITOR.POSITION_AFTER_START);b.select()},0)},contents:[{id:"info",label:a.lang.table.title,elements:[{type:"hbox",widths:[null,null],styles:["vertical-align:top"],children:[{type:"vbox",padding:0,children:[{type:"text",id:"txtRows","default":3,label:a.lang.table.rows,required:!0,controlStyle:"width:5em",validate:o(a.lang.table.invalidRows),setup:function(a){this.setValue(a.$.rows.length)},
commit:k},{type:"text",id:"txtCols","default":2,label:a.lang.table.columns,required:!0,controlStyle:"width:5em",validate:o(a.lang.table.invalidCols),setup:function(a){this.setValue(r(a))},commit:k},{type:"html",html:"&nbsp;"},{type:"select",id:"selHeaders",requiredContent:"th","default":"",label:a.lang.table.headers,items:[[a.lang.table.headersNone,""],[a.lang.table.headersRow,"row"],[a.lang.table.headersColumn,"col"],[a.lang.table.headersBoth,"both"]],setup:function(a){var d=this.getDialog();d.hasColumnHeaders=
!0;for(var c=0;c<a.$.rows.length;c++){var b=a.$.rows[c].cells[0];if(b&&"th"!=b.nodeName.toLowerCase()){d.hasColumnHeaders=!1;break}}null!==a.$.tHead?this.setValue(d.hasColumnHeaders?"both":"row"):this.setValue(d.hasColumnHeaders?"col":"")},commit:k},{type:"text",id:"txtBorder",requiredContent:"table[border]","default":a.filter.check("table[border]")?1:0,label:a.lang.table.border,controlStyle:"width:3em",validate:CKEDITOR.dialog.validate.number(a.lang.table.invalidBorder),setup:function(a){this.setValue(a.getAttribute("border")||
"")},commit:function(a,d){this.getValue()?d.setAttribute("border",this.getValue()):d.removeAttribute("border")}},{id:"cmbAlign",type:"select",requiredContent:"table[align]","default":"",label:a.lang.common.align,items:[[a.lang.common.notSet,""],[a.lang.common.alignLeft,"left"],[a.lang.common.alignCenter,"center"],[a.lang.common.alignRight,"right"]],setup:function(a){this.setValue(a.getAttribute("align")||"")},commit:function(a,d){this.getValue()?d.setAttribute("align",this.getValue()):d.removeAttribute("align")}}]},
{type:"vbox",padding:0,children:[{type:"hbox",widths:["5em"],children:[{type:"text",id:"txtWidth",requiredContent:"table{width}",controlStyle:"width:5em",label:a.lang.common.width,title:a.lang.common.cssLengthTooltip,"default":a.filter.check("table{width}")?500>n.getSize("width")?"100%":500:0,getValue:q,validate:CKEDITOR.dialog.validate.cssLength(a.lang.common.invalidCssLength.replace("%1",a.lang.common.width)),onChange:function(){var a=this.getDialog().getContentElement("advanced","advStyles");a&&
a.updateStyle("width",this.getValue())},setup:function(a){this.setValue(a.getStyle("width"))},commit:k}]},{type:"hbox",widths:["5em"],children:[{type:"text",id:"txtHeight",requiredContent:"table{height}",controlStyle:"width:5em",label:a.lang.common.height,title:a.lang.common.cssLengthTooltip,"default":"",getValue:q,validate:CKEDITOR.dialog.validate.cssLength(a.lang.common.invalidCssLength.replace("%1",a.lang.common.height)),onChange:function(){var a=this.getDialog().getContentElement("advanced","advStyles");
a&&a.updateStyle("height",this.getValue())},setup:function(a){(a=a.getStyle("height"))&&this.setValue(a)},commit:k}]},{type:"html",html:"&nbsp;"},{type:"text",id:"txtCellSpace",requiredContent:"table[cellspacing]",controlStyle:"width:3em",label:a.lang.table.cellSpace,"default":a.filter.check("table[cellspacing]")?1:0,validate:CKEDITOR.dialog.validate.number(a.lang.table.invalidCellSpacing),setup:function(a){this.setValue(a.getAttribute("cellSpacing")||"")},commit:function(a,d){this.getValue()?d.setAttribute("cellSpacing",
this.getValue()):d.removeAttribute("cellSpacing")}},{type:"text",id:"txtCellPad",requiredContent:"table[cellpadding]",controlStyle:"width:3em",label:a.lang.table.cellPad,"default":a.filter.check("table[cellpadding]")?1:0,validate:CKEDITOR.dialog.validate.number(a.lang.table.invalidCellPadding),setup:function(a){this.setValue(a.getAttribute("cellPadding")||"")},commit:function(a,d){this.getValue()?d.setAttribute("cellPadding",this.getValue()):d.removeAttribute("cellPadding")}}]}]},{type:"html",align:"right",
html:""},{type:"vbox",padding:0,children:[{type:"text",id:"txtCaption",requiredContent:"caption",label:a.lang.table.caption,setup:function(a){this.enable();a=a.getElementsByTag("caption");if(0<a.count()){var a=a.getItem(0),d=a.getFirst(CKEDITOR.dom.walker.nodeType(CKEDITOR.NODE_ELEMENT));d&&!d.equals(a.getBogus())?(this.disable(),this.setValue(a.getText())):(a=CKEDITOR.tools.trim(a.getText()),this.setValue(a))}},commit:function(e,d){if(this.isEnabled()){var c=this.getValue(),b=d.getElementsByTag("caption");
if(c)0<b.count()?(b=b.getItem(0),b.setHtml("")):(b=new CKEDITOR.dom.element("caption",a.document),d.getChildCount()?b.insertBefore(d.getFirst()):b.appendTo(d)),b.append(new CKEDITOR.dom.text(c,a.document));else if(0<b.count())for(c=b.count()-1;0<=c;c--)b.getItem(c).remove()}}},{type:"text",id:"txtSummary",requiredContent:"table[summary]",label:a.lang.table.summary,setup:function(a){this.setValue(a.getAttribute("summary")||"")},commit:function(a,d){this.getValue()?d.setAttribute("summary",this.getValue()):
d.removeAttribute("summary")}}]}]},m&&m.createAdvancedTab(a,null,"table")]}}var q=CKEDITOR.tools.cssLength,k=function(a){var e=this.id;a.info||(a.info={});a.info[e]=this.getValue()};CKEDITOR.dialog.add("table",function(a){return n(a,"table")});CKEDITOR.dialog.add("tableProperties",function(a){return n(a,"tableProperties")})})();

// FILE: specialchar.js (a93573d9) 5/2/2014 12:55:58 PM

CKEDITOR.dialog.add("specialchar",function(i){var e,l=i.lang.specialchar,k=function(c){var b,c=c.data?c.data.getTarget():new CKEDITOR.dom.element(c);if("a"==c.getName()&&(b=c.getChild(0).getHtml()))c.removeClass("cke_light_background"),e.hide(),c=i.document.createElement("span"),c.setHtml(b),i.insertText(c.getText())},m=CKEDITOR.tools.addFunction(k),j,g=function(c,b){var a,b=b||c.data.getTarget();"span"==b.getName()&&(b=b.getParent());if("a"==b.getName()&&(a=b.getChild(0).getHtml())){j&&d(null,j);
var f=e.getContentElement("info","htmlPreview").getElement();e.getContentElement("info","charPreview").getElement().setHtml(a);f.setHtml(CKEDITOR.tools.htmlEncode(a));b.getParent().addClass("cke_light_background");j=b}},d=function(c,b){b=b||c.data.getTarget();"span"==b.getName()&&(b=b.getParent());"a"==b.getName()&&(e.getContentElement("info","charPreview").getElement().setHtml("&nbsp;"),e.getContentElement("info","htmlPreview").getElement().setHtml("&nbsp;"),b.getParent().removeClass("cke_light_background"),
j=void 0)},n=CKEDITOR.tools.addFunction(function(c){var c=new CKEDITOR.dom.event(c),b=c.getTarget(),a;a=c.getKeystroke();var f="rtl"==i.lang.dir;switch(a){case 38:if(a=b.getParent().getParent().getPrevious())a=a.getChild([b.getParent().getIndex(),0]),a.focus(),d(null,b),g(null,a);c.preventDefault();break;case 40:if(a=b.getParent().getParent().getNext())if((a=a.getChild([b.getParent().getIndex(),0]))&&1==a.type)a.focus(),d(null,b),g(null,a);c.preventDefault();break;case 32:k({data:c});c.preventDefault();
break;case f?37:39:if(a=b.getParent().getNext())a=a.getChild(0),1==a.type?(a.focus(),d(null,b),g(null,a),c.preventDefault(!0)):d(null,b);else if(a=b.getParent().getParent().getNext())(a=a.getChild([0,0]))&&1==a.type?(a.focus(),d(null,b),g(null,a),c.preventDefault(!0)):d(null,b);break;case f?39:37:(a=b.getParent().getPrevious())?(a=a.getChild(0),a.focus(),d(null,b),g(null,a),c.preventDefault(!0)):(a=b.getParent().getParent().getPrevious())?(a=a.getLast().getChild(0),a.focus(),d(null,b),g(null,a),c.preventDefault(!0)):
d(null,b)}});return{title:l.title,minWidth:430,minHeight:280,buttons:[CKEDITOR.dialog.cancelButton],charColumns:17,onLoad:function(){for(var c=this.definition.charColumns,b=i.config.specialChars,a=CKEDITOR.tools.getNextId()+"_specialchar_table_label",f=['<table role="listbox" aria-labelledby="'+a+'" style="width: 320px; height: 100%; border-collapse: separate;" align="center" cellspacing="2" cellpadding="2" border="0">'],d=0,g=b.length,h,e;d<g;){f.push('<tr role="presentation">');for(var j=0;j<c;j++,
d++){if(h=b[d]){h instanceof Array?(e=h[1],h=h[0]):(e=h.replace("&","").replace(";","").replace("#",""),e=l[e]||h);var k="cke_specialchar_label_"+d+"_"+CKEDITOR.tools.getNextNumber();f.push('<td class="cke_dark_background" style="cursor: default" role="presentation"><a href="javascript: void(0);" role="option" aria-posinset="'+(d+1)+'"',' aria-setsize="'+g+'"',' aria-labelledby="'+k+'"',' class="cke_specialchar" title="',CKEDITOR.tools.htmlEncode(e),'" onkeydown="CKEDITOR.tools.callFunction( '+n+
', event, this )" onclick="CKEDITOR.tools.callFunction('+m+', this); return false;" tabindex="-1"><span style="margin: 0 auto;cursor: inherit">'+h+'</span><span class="cke_voice_label" id="'+k+'">'+e+"</span></a>")}else f.push('<td class="cke_dark_background">&nbsp;');f.push("</td>")}f.push("</tr>")}f.push("</tbody></table>",'<span id="'+a+'" class="cke_voice_label">'+l.options+"</span>");this.getContentElement("info","charContainer").getElement().setHtml(f.join(""))},contents:[{id:"info",label:i.lang.common.generalTab,
title:i.lang.common.generalTab,padding:0,align:"top",elements:[{type:"hbox",align:"top",widths:["320px","90px"],children:[{type:"html",id:"charContainer",html:"",onMouseover:g,onMouseout:d,focus:function(){var c=this.getElement().getElementsByTag("a").getItem(0);setTimeout(function(){c.focus();g(null,c)},0)},onShow:function(){var c=this.getElement().getChild([0,0,0,0,0]);setTimeout(function(){c.focus();g(null,c)},0)},onLoad:function(c){e=c.sender}},{type:"hbox",align:"top",widths:["100%"],children:[{type:"vbox",
align:"top",children:[{type:"html",html:"<div></div>"},{type:"html",id:"charPreview",className:"cke_dark_background",style:"border:1px solid #eeeeee;font-size:28px;height:40px;width:70px;padding-top:9px;font-family:'Microsoft Sans Serif',Arial,Helvetica,Verdana;text-align:center;",html:"<div>&nbsp;</div>"},{type:"html",id:"htmlPreview",className:"cke_dark_background",style:"border:1px solid #eeeeee;font-size:14px;height:20px;width:70px;padding-top:2px;font-family:'Microsoft Sans Serif',Arial,Helvetica,Verdana;text-align:center;",
html:"<div>&nbsp;</div>"}]}]}]}]}]}});

// FILE: en.js (0c56bc99) 5/2/2014 12:55:58 PM

CKEDITOR.plugins.setLang("specialchar","en",{euro:"Euro sign",lsquo:"Left single quotation mark",rsquo:"Right single quotation mark",ldquo:"Left double quotation mark",rdquo:"Right double quotation mark",ndash:"En dash",mdash:"Em dash",iexcl:"Inverted exclamation mark",cent:"Cent sign",pound:"Pound sign",curren:"Currency sign",yen:"Yen sign",brvbar:"Broken bar",sect:"Section sign",uml:"Diaeresis",copy:"Copyright sign",ordf:"Feminine ordinal indicator",laquo:"Left-pointing double angle quotation mark",
not:"Not sign",reg:"Registered sign",macr:"Macron",deg:"Degree sign",sup2:"Superscript two",sup3:"Superscript three",acute:"Acute accent",micro:"Micro sign",para:"Pilcrow sign",middot:"Middle dot",cedil:"Cedilla",sup1:"Superscript one",ordm:"Masculine ordinal indicator",raquo:"Right-pointing double angle quotation mark",frac14:"Vulgar fraction one quarter",frac12:"Vulgar fraction one half",frac34:"Vulgar fraction three quarters",iquest:"Inverted question mark",Agrave:"Latin capital letter A with grave accent",
Aacute:"Latin capital letter A with acute accent",Acirc:"Latin capital letter A with circumflex",Atilde:"Latin capital letter A with tilde",Auml:"Latin capital letter A with diaeresis",Aring:"Latin capital letter A with ring above",AElig:"Latin Capital letter Æ",Ccedil:"Latin capital letter C with cedilla",Egrave:"Latin capital letter E with grave accent",Eacute:"Latin capital letter E with acute accent",Ecirc:"Latin capital letter E with circumflex",Euml:"Latin capital letter E with diaeresis",Igrave:"Latin capital letter I with grave accent",
Iacute:"Latin capital letter I with acute accent",Icirc:"Latin capital letter I with circumflex",Iuml:"Latin capital letter I with diaeresis",ETH:"Latin capital letter Eth",Ntilde:"Latin capital letter N with tilde",Ograve:"Latin capital letter O with grave accent",Oacute:"Latin capital letter O with acute accent",Ocirc:"Latin capital letter O with circumflex",Otilde:"Latin capital letter O with tilde",Ouml:"Latin capital letter O with diaeresis",times:"Multiplication sign",Oslash:"Latin capital letter O with stroke",
Ugrave:"Latin capital letter U with grave accent",Uacute:"Latin capital letter U with acute accent",Ucirc:"Latin capital letter U with circumflex",Uuml:"Latin capital letter U with diaeresis",Yacute:"Latin capital letter Y with acute accent",THORN:"Latin capital letter Thorn",szlig:"Latin small letter sharp s",agrave:"Latin small letter a with grave accent",aacute:"Latin small letter a with acute accent",acirc:"Latin small letter a with circumflex",atilde:"Latin small letter a with tilde",auml:"Latin small letter a with diaeresis",
aring:"Latin small letter a with ring above",aelig:"Latin small letter æ",ccedil:"Latin small letter c with cedilla",egrave:"Latin small letter e with grave accent",eacute:"Latin small letter e with acute accent",ecirc:"Latin small letter e with circumflex",euml:"Latin small letter e with diaeresis",igrave:"Latin small letter i with grave accent",iacute:"Latin small letter i with acute accent",icirc:"Latin small letter i with circumflex",iuml:"Latin small letter i with diaeresis",eth:"Latin small letter eth",
ntilde:"Latin small letter n with tilde",ograve:"Latin small letter o with grave accent",oacute:"Latin small letter o with acute accent",ocirc:"Latin small letter o with circumflex",otilde:"Latin small letter o with tilde",ouml:"Latin small letter o with diaeresis",divide:"Division sign",oslash:"Latin small letter o with stroke",ugrave:"Latin small letter u with grave accent",uacute:"Latin small letter u with acute accent",ucirc:"Latin small letter u with circumflex",uuml:"Latin small letter u with diaeresis",
yacute:"Latin small letter y with acute accent",thorn:"Latin small letter thorn",yuml:"Latin small letter y with diaeresis",OElig:"Latin capital ligature OE",oelig:"Latin small ligature oe",372:"Latin capital letter W with circumflex",374:"Latin capital letter Y with circumflex",373:"Latin small letter w with circumflex",375:"Latin small letter y with circumflex",sbquo:"Single low-9 quotation mark",8219:"Single high-reversed-9 quotation mark",bdquo:"Double low-9 quotation mark",hellip:"Horizontal ellipsis",
trade:"Trade mark sign",9658:"Black right-pointing pointer",bull:"Bullet",rarr:"Rightwards arrow",rArr:"Rightwards double arrow",hArr:"Left right double arrow",diams:"Black diamond suit",asymp:"Almost equal to"});

// FILE: plugin.js (afc9c4ae) 5/2/2014 12:55:57 PM

(function (CKEDITOR) {
var modeName = 'spellcheck';
var cmdName = 'spellchecker';
var pluginName = 'spellchecker';
function createSpellCheck(editor) {
if (editor.spellCheck) return;
editor.spellCheck = new SpellCheck(SpellCheckManager, editor.contentDom);
$(editor.contentDom).click(function (evt) {
if (editor.commands.spellchecker.enabled) {
if ($(evt.target).hasClass('spellcheck-word')) {
clickedWord(editor, evt);
}
}
});
}
function disableSpellChecks() {
Util.Object.values(CKEDITOR.instances).forEach(function (editor) {
var cmdSC = editor.commands.spellchecker;
if (cmdSC.enabled) {
cmdSC.exec();
}
});
}
function enableSpellCheck(editor) {
if (this.enabled) return;
console.log('SpellCheck Enabled "' + editor.name + '": ' + this.language);
disableSpellChecks();
this.enabled = true;
createSpellCheck(editor);
SpellCheckManager.setLanguage(this.language);
Util.Dom.blur(editor.contentDom);
editor.setReadOnly(true);
editor.spellCheck.check();
this.setState(CKEDITOR.TRISTATE_ON);
}
function disableSpellCheck(editor) {
if (!this.enabled) return;
console.log('SpellCheck Disabled "' + editor.name + '"');
this.enabled = false;
editor.spellCheck.done();
editor.setReadOnly(false);
this.setState(CKEDITOR.TRISTATE_OFF);
if (editor.focusManager.hasFocus) {
Util.Dom.blur(editor.contentDom);
}
setTimeout(function() {
Util.Dom.focus(editor.contentDom);
}, 0);
}
function replaceWord(editor, node, word, replacement) {
editor.spellCheck.replaceWord(node, word, replacement);
}
function clickedWord(editor, evt) {
var node = evt.target;
var word = Util.Dom.getTextContent(node);
if (!word) return;
var suggestions = SpellCheckManager.getSuggestions(word);
var menuItems = [];
if (suggestions.length > 0) {
for (var i = 0; i < suggestions.length; i++) {
var suggestion = suggestions[i];
menuItems.push({
text: suggestion,
onclick: { fn: replaceWord.bind(null, editor, node, word, suggestion) }
});
}
} else {
menuItems.push({
text: 'No suggestions'
});
}
var menuXY = YUD.getXY(node);
menuXY = ContentManager.getEventXY(evt, menuXY);
var region = YAHOO.util.Region.getRegion(node);
menuXY[1] += region.height;
ContentManager.Menu.show(evt, menuItems, menuXY);
};
function initLanguages(editor) {
var lookup = {
ESN: 'Español',
ENU: 'English'
};
var languages = window.ContentManager ? ContentManager.getAccommodationProperties().getLanguages() : ['ENU', 'ESN'];
var defaultLang = window.ContentManager ? ContentManager.getAccommodationProperties().getLanguage() : 'ENU';
if (languages.indexOf('ESN') != -1) {
if (languages.indexOf('ENU') == -1) {
languages.push('ENU');
}
}
if (languages.indexOf('ENU-Braille') != -1) {
if (languages.indexOf('ENU') == -1) {
languages.push('ENU');
}
if (defaultLang == 'ENU-Braille') {
defaultLang = 'ENU';
}
}
var cmdSC = editor.commands.spellchecker;
cmdSC.language = defaultLang;
if (languages.length > 1) {
editor.ui.addRichCombo('Languages', {
toolbar: 'spellchecker,20',
label: lookup[defaultLang],
value: defaultLang,
onClick: function (selectedLang) {
this.setValue(selectedLang, lookup[selectedLang]);
this.label = lookup[selectedLang];
cmdSC.language = selectedLang;
},
panel: {
css: [CKEDITOR.skin.getPath('editor')].concat(editor.config.contentsCss),
multiSelect: false,
attributes: { 'aria-label': 'Spellcheck language' }
},
init: function () {
this.startGroup('Language');
for (var i = 0; i < languages.length; ++i) {
if (lookup[languages[i]]) {
this.add(languages[i], lookup[languages[i]]);
}
}
this.commit();
}
});
}
}
function initPlugin(editor) {
var cmd = editor.addCommand(cmdName, {
canUndo: true,
async: false,
modes: { wysiwyg: 1, spellcheck: 1 },
exec: function () {
if (this.enabled) {
disableSpellCheck.call(this, editor);
} else {
enableSpellCheck.call(this, editor);
}
},
enabled: false
});
var button = editor.ui.addButton('SpellChecker', {
label: 'SpellCheck',
icon: 'spellchecker',
command: cmdName,
toolbar: 'spellchecker,10'
});
initLanguages(editor);
}
CKEDITOR.plugins.add(pluginName, {
requires: 'richcombo',
config: {
parser: 'html'
},
init: initPlugin
});
})(CKEDITOR);

// FILE: plugin.js (6aa93862) 7/23/2014 4:30:36 PM

(function () {
'use strict';
CKEDITOR.plugins.add('clipboard', {
requires: 'dialog',
icons: 'copy,cut,paste',
init: function (editor) {
initClipboard(editor);
}
});
function initClipboard(editor) {
var BUFFER = null;
var inReadOnly = 0;
addListeners();
addButtonsCommands();
function pasteHtml() {
if (!BUFFER) return;
var sel = editor.getSelection();
var rng = sel.getRanges();
if (rng && rng.length > 0) {
editor.insertHtml(BUFFER, 'html');
}
};
function cutCopyHtml(type) {
var sel = editor.getSelection();
var rng = sel.getRanges();
if (!rng || rng.length == 0) return;
var contents;
if (type == 'cut') {
contents = rng[0].extractContents();
} else {
contents = rng[0].cloneContents();
sel.selectRanges(rng);
}
var commonParent = rng[0].getCommonAncestor();
var parentNodes = [];
if (commonParent) {
commonParent = commonParent.$;
if (commonParent.nodeType === Util.Dom.NodeType.TEXT) {
commonParent = commonParent.parentNode;
}
var tableCellContent = false;
while (!tableCellContent && !YUD.hasClass(commonParent, 'cke_editable')) {
switch (commonParent.tagName.toLowerCase()) {
case 'strong':
case 'em':
case 'u':
parentNodes.push(commonParent);
break;
case 'td':
tableCellContent = true;
break;
}
commonParent = commonParent.parentNode;
}
}
if (parentNodes.length > 0) {
var bufferRoot = document.createDocumentFragment();
var bufferNode = bufferRoot;
for (var nodeIndex = parentNodes.length - 1; nodeIndex >= 0; --nodeIndex) {
bufferNode.appendChild(parentNodes[nodeIndex].cloneNode(false));
bufferNode = bufferNode.firstChild;
}
bufferNode.appendChild(contents.$.cloneNode(true));
contents.$ = bufferRoot;
}
var div = document.createElement('div');
div.appendChild(contents.$);
BUFFER = div.innerHTML;
setToolbarStates();
}
function addButtonsCommands() {
addButtonCommand('Cut', 'cut', createCutCopyCmd('cut'), 10, 1);
addButtonCommand('Copy', 'copy', createCutCopyCmd('copy'), 20, 4);
addButtonCommand('Paste', 'paste', createPasteCmd(), 30, 8);
function addButtonCommand(buttonName, commandName, command, toolbarOrder, ctxMenuOrder) {
var lang = editor.lang.clipboard[commandName];
editor.addCommand(commandName, command);
editor.ui.addButton && editor.ui.addButton(buttonName, {
label: lang,
command: commandName,
toolbar: 'clipboard,' + toolbarOrder
});
if (editor.addMenuItems) {
editor.addMenuItem(commandName, {
label: lang,
command: commandName,
group: 'clipboard',
order: ctxMenuOrder
});
}
}
}
function isSelectionReadOnly(selection) {
var rng = selection.getRanges();
return rng && rng[0] && rng[0].checkReadOnly ? rng[0].checkReadOnly() : true;
}
function addListeners() {
editor.on('key', onKey);
editor.on('contentDom', addListenersToEditable);
editor.on('selectionChange', function (evt) {
inReadOnly = isSelectionReadOnly(evt.data.selection);
setToolbarStates();
});
if (editor.contextMenu) {
editor.contextMenu.addListener(function (element, selection) {
inReadOnly = isSelectionReadOnly(selection);
return {
cut: stateFromNamedCommand('Cut'),
copy: stateFromNamedCommand('Copy'),
paste: stateFromNamedCommand('Paste')
};
});
}
}
function addListenersToEditable() {
var editable = editor.editable();
editable.on('mouseup', function () {
setTimeout(function () {
setToolbarStates();
}, 0);
});
editable.on('keyup', setToolbarStates);
if (editor.document && editor.document.$ != document) {
var mouseupTimeout;
editable.attachListener(CKEDITOR.env.ie ? editable : editor.document.getDocumentElement(), 'mouseup', function () {
mouseupTimeout = setTimeout(function () {
setToolbarStates();
}, 0);
});
editor.on('destroy', function () {
clearTimeout(mouseupTimeout);
});
}
}
function createCutCopyCmd(type) {
return {
type: type,
canUndo: type == 'cut',
startDisabled: true,
exec: function (data) {
cutCopyHtml(type);
}
};
}
function createPasteCmd() {
return {
canUndo: false,
startDisabled: true,
exec: function () {
pasteHtml();
}
};
}
function onKey(event) {
if (editor.mode != 'wysiwyg') {
return;
}
switch (event.data.keyCode) {
case CKEDITOR.CTRL + 86:
pasteHtml();
event.cancel();
return;
case CKEDITOR.CTRL + 67:
cutCopyHtml('copy');
event.cancel();
return;
case CKEDITOR.CTRL + 88:
cutCopyHtml('cut');
event.cancel();
editor.fire('saveSnapshot');
return;
}
}
function setToolbarStates() {
if (editor.mode != 'wysiwyg') {
return;
}
editor.getCommand('cut').setState(stateFromNamedCommand('Cut'));
editor.getCommand('copy').setState(stateFromNamedCommand('Copy'));
editor.getCommand('paste').setState(stateFromNamedCommand('Paste'));
}
function stateFromNamedCommand(command) {
if (editor.readOnly) {
return CKEDITOR.TRISTATE_DISABLED;
}
var retval;
if (inReadOnly && command in { Paste: 1, Cut: 1 }) {
return CKEDITOR.TRISTATE_DISABLED;
}
if (command == 'Paste') {
if (BUFFER) {
return CKEDITOR.TRISTATE_OFF;
} else {
return CKEDITOR.TRISTATE_DISABLED;
}
}
else {
var sel = editor.getSelection(),
ranges = sel.getRanges();
retval = sel.getType() != CKEDITOR.SELECTION_NONE && !(ranges.length == 1 && ranges[0].collapsed);
}
return retval ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED;
}
}
})();

// FILE: en.js (26df6efe) 5/2/2014 12:55:57 PM

CKEDITOR.plugins.setLang( 'clipboard', 'en', {
copy: 'Copy',
copyError: 'Your browser security settings don\'t permit the editor to automatically execute copying operations. Please use the keyboard for that (Ctrl/Cmd+C).',
cut: 'Cut',
cutError: 'Your browser security settings don\'t permit the editor to automatically execute cutting operations. Please use the keyboard for that (Ctrl/Cmd+X).',
paste: 'Paste',
pasteArea: 'Paste Area',
pasteMsg: 'Please paste inside the following box using the keyboard (<strong>Ctrl/Cmd+V</strong>) and hit OK',
securityMsg: 'Because of your browser security settings, the editor is not able to access your clipboard data directly. You are required to paste it again in this window.',
title: 'Paste'
});

// FILE: base.js (7c6ef747) 7/23/2014 4:30:36 PM

(function (CKEDITOR) {
if (CKEDITOR == null) return;
CKEDITOR.disableAutoInline = true;
var useInline = false;
var mode = Util.QueryString.parse().ckeditor;
if (mode) {
useInline = (mode == 'inline');
} else if (Util.Browser.isIOS() || Util.Browser.isAndroid()) {
useInline = true;
}
CKEDITOR.on('instanceCreated', function (ev) {
var clipPath = HTMLEditor.resolveBaseUrl('Scripts/HTMLEditor2/plugins/clipboard/icons/');
var spellPath = HTMLEditor.resolveBaseUrl('Scripts/HTMLEditor2/plugins/spellchecker/icons/');
CKEDITOR.skin.addIcon('cut', clipPath + 'cut.png', 0, true);
CKEDITOR.skin.addIcon('copy', clipPath + 'copy.png', 0, true);
CKEDITOR.skin.addIcon('paste', clipPath + 'paste.png', 0, true);
CKEDITOR.skin.addIcon('spellchecker', spellPath + 'spellchecker.png', 0, true);
});
function fixPaths() {
var version = '4.3';
var rootPath = HTMLEditor.resolveBaseUrl('');
var basePath = rootPath + 'Scripts/Libraries/ckeditor/' + version + '/';
var pluginsPath = basePath + 'plugins/';
var customPath = rootPath + 'Scripts/HTMLEditor2/plugins/';
if (CKEDITOR.basePath != basePath) {
CKEDITOR.basePath = basePath;
}
if (CKEDITOR.plugins.basePath != pluginsPath) {
CKEDITOR.plugins.basePath = pluginsPath;
}
var pluginName;
for (pluginName in CKEDITOR.plugins.registered) {
var plugin = CKEDITOR.plugins.registered[pluginName];
if (plugin.path.indexOf(pluginsPath) == -1) {
plugin.path = CKEDITOR.plugins.getPath(pluginName);
}
}
var iconName;
for (iconName in CKEDITOR.skin.icons) {
var icon = CKEDITOR.skin.icons[iconName];
var fileName = icon.path.split('/').pop();
if (icon.path.indexOf(customPath) == -1) {
icon.path = pluginsPath + fileName;
}
}
}
function createConfig(responseType) {
var config = {
title: '',
customConfig: '',
readOnly: true,
startupFocus: false,
baseFloatZIndex: 50,
dialog_noConfirmCancel: true,
tabSpaces: 4,
extraPlugins: 'clipboard,spellchecker',
removePlugins: 'sharedSpaces,floatingspace,resize,tableresize,wordcount',
disableNativeSpellChecker: true,
disableNativeTableHandles: true,
height: ''
};
if (responseType == 'PlainTextSpell') {
config.toolbarGroups = [
{ name: 'spellchecker' }
];
} else {
config.toolbarGroups = [
{ name: 'basicstyles', groups: ['basicstyles', 'cleanup'] },
{ name: 'paragraph', groups: ['list', 'indent', 'blocks', 'align'] },
{ name: 'clipboard', groups: ['clipboard', 'undo'] },
{ name: 'spellchecker' },
{ name: 'insert' }
];
}
if (responseType == 'HTMLEditorTable') {
config.removeButtons = 'Strike,Subscript,Superscript';
} else {
config.removeButtons = 'Strike,Subscript,Superscript,Table';
}
if (useInline) {
config.removePlugins += ',wysiwygarea';
} else {
config.removePlugins += ',divarea';
}
if (!useInline) {
var styles = [];
styles.push(HTMLEditor.resolveBaseUrl('Shared/CSS/accommodations.css'));
styles.push(HTMLEditor.resolveBaseUrl('Scripts/HTMLEditor2/frame.css'));
config.contentsCss = styles;
}
return config;
}
function onInstanceReady(editor) {
editor.isReady = true;
editor.container.addClass('editor');
if (useInline) {
var editable = editor.editable();
editor.contentDom = editable.$;
} else {
editor.contentDom = editor.document.$.body;
}
var editorEl = editor.element.$;
if (editorEl.removeAttribute) {
editorEl.removeAttribute('title');
}
setTimeout(function() {
editor.setReadOnly(false);
}, 0);
}
function createEditor(containerEl, responseType, configOverride) {
containerEl.innerHTML = '';
fixPaths();
var config = createConfig(responseType);
if (configOverride) {
for (var property in configOverride){
config[property] = configOverride[property];
}
}
var editor = CKEDITOR.appendTo(containerEl, config);
editor.isReady = false;
editor.on('instanceReady', onInstanceReady.bind(null, editor));
return editor;
};
var HTMLEditor = {};
HTMLEditor.create = createEditor;
HTMLEditor.resolveBaseUrl = function (url) {
return url;
}
HTMLEditor.getLanguage = function() {
return 'ENU';
}
window.HTMLEditor = HTMLEditor;
})(window.CKEDITOR);
(function(CKEDITOR) {
CKEDITOR.on('dialogDefinition', function (e) {
var dialogName = e.data.name;
var dialog = e.data.definition.dialog;
dialog.on('show', function () {
YUD.addClass(document.body, 'showingDialog');
});
dialog.on('hide', function () {
YUD.removeClass(document.body, 'showingDialog');
});
});
CKEDITOR.on('instanceCreated', function (ev) {
ev.editor.on('contentDom', function () {
var element = (document != ev.editor.document) ?
ev.editor.document : ev.editor.element;
element.on('dragstart', function (ev) {
ev.data.preventDefault(true);
});
element.on('drop', function (ev) {
ev.data.preventDefault(true);
});
element.on('contextmenu', function (ev) {
ev.data.preventDefault(true);
});
});
});
CKEDITOR.on('ariaWidget', function (e) {
var menuIframe = e.data;
if (menuIframe.hasClass && !menuIframe.hasClass('dragDisabled')) {
var doc = menuIframe.getFrameDocument();
var menuBody = doc.getBody();
if (doc && menuBody) {
menuBody.setAttribute('ondragstart', 'return false;');
menuIframe.addClass('dragDisabled');
}
}
});
if (Util.Browser.getFirefoxVersion() < 10) {
CKEDITOR.editor.prototype.getSelection = function (forceRealSelection) {
if ((this._.savedSelection || this._.fakeSelection) && !forceRealSelection)
return this._.savedSelection || this._.fakeSelection;
var editable = this.editable();
if (editable && (this.mode === undefined || this.mode == 'wysiwyg')) {
var sel = new CKEDITOR.dom.selection(editable);
if (this.mode === undefined) {
sel.isLocked = 1;
}
return sel;
}
return null;
};
}
})(CKEDITOR);
(function (CKEDITOR) {
var charDiff = 10;
function instanceCreated(editor) {
var lastChange = '';
editor.on('change', function (evt) {
var editable = editor.editable();
var text = editable.getText();
if (text) {
text = text.replace(/([\s\t\r\n]*)/gm, '');
}
if (text != lastChange && text.length == 0 && lastChange.length > charDiff) {
console.warn('EDITOR DELETE WARNING: ' + lastChange);
}
lastChange = text;
});
}
CKEDITOR.on('instanceCreated', function (ev) {
instanceCreated(ev.editor);
});
})(CKEDITOR);

// FILE: table.js (1d098fb0) 7/23/2014 4:30:36 PM

(function(CKEDITOR, HTMLEditor) {
var MAX_ROWS = 100;
var MAX_COLS = 10;
var lang = HTMLEditor.getLanguage();
var invalidRowsMsg = 'TDSCKE.Alert.InvalidRows.' + lang;
var invalidColsMsg = 'TDSCKE.Alert.InvalidCols.' + lang;
var invalidWidthMsg = 'TDSCKE.Alert.InvalidWidth.' + lang;
var invalidHeightMsg = 'TDSCKE.Alert.InvalidHeight.' + lang;
function validateNum(msg, max) {
return function () {
var value = this.getValue(),
pass = !!(CKEDITOR.dialog.validate.integer()(value) && value > 0 && value <= max);
if (!pass) {
var invalidValue = this.getInputElement().$;
TDS.Dialog.showAlert(msg, function () { invalidValue.select(); });
}
return pass;
};
}
function validateSize(msg) {
return function () {
var value = this.getValue(),
pass = /^(((\d*(\.\d+))|(\d*))(px|em|ex|in|cm|mm|pt|pc|\%)?)?$/i.test(value);
if (!pass) {
var invalidValue = this.getInputElement().$;
TDS.Dialog.showAlert(msg, function () { invalidValue.select(); });
}
return pass;
};
}
CKEDITOR.on('dialogDefinition', function (e) {
var dialogName = e.data.name;
var dialog = e.data.definition.dialog;
var def = e.data.definition;
if (dialogName && def) {
if (dialogName == 'table' || dialogName == 'tableProperties') {
var tableTab = def.getContents('info');
if (tableTab) {
tableTab.remove('txtBorder');
tableTab.remove('txtCellSpace');
tableTab.remove('txtCellPad');
tableTab.remove('txtSummary');
var txtRows = tableTab.get('txtRows');
txtRows.validate = validateNum(invalidRowsMsg, MAX_ROWS);
var txtCols = tableTab.get('txtCols');
txtCols.validate = validateNum(invalidColsMsg, MAX_COLS);
var txtWidth = tableTab.get('txtWidth');
txtWidth.validate = validateSize(invalidWidthMsg);
var txtHeight = tableTab.get('txtHeight');
txtHeight.validate = validateSize(invalidHeightMsg);
var cmbAlign = tableTab.get('cmbAlign');
cmbAlign.setup = function (selectedTable) {
this.setValue($(selectedTable.$).css('text-align') || '');
};
cmbAlign.commit = function (data, selectedTable) {
if (this.getValue()) {
$(selectedTable.$).css('text-align', this.getValue());
} else {
$(selectedTable.$).css('text-align', '');
}
};
}
} else if (dialogName == 'cellProperties') {
var cellTab = def.getContents('info');
if (cellTab) {
cellTab.remove('rowSpan');
cellTab.remove('colSpan');
cellTab.remove('txtSummary');
}
}
}
});
})(CKEDITOR, HTMLEditor);

// FILE: module.js (7ad71c2f) 7/23/2014 4:30:36 PM

(function (HTMLEditor, CM) {
HTMLEditor.resolveBaseUrl = CM.resolveBaseUrl.bind(CM);
HTMLEditor.getLanguage = CM.getLanguage.bind(CM);
function process(page, item) {
var containerEl = page.getDoc().getElementById('editor_' + item.position);
var editor = HTMLEditor.create(containerEl, item.responseType);
item.editor = editor;
editor.parentItem = item;
if (item.value) {
editor._.data = item.value;
}
}
CM.onItemEvent('available', function (page, item) {
if (page.layout != '12' && (
item.isResponseType('HTMLEditor') ||
item.isResponseType('HTMLEditorTable') ||
item.isResponseType('PlainTextSpell') ||
item.isResponseType('Prompt Selection'))) {
process(page, item);
}
});
CKEDITOR.on('instanceReady', function (ev) {
var editor = ev.editor;
var item = editor.parentItem;
if (!editor || !item) return;
editor.blur = function () {
var editable = editor.editable();
if (editable) {
editable.$.blur();
}
};
editor.on('focus', function (ev) {
item.setActiveComponent(editor);
});
item.addComponent(editor);
var doc = editor.document.$;
var win = editor.document.getWindow().$;
if (doc == document) return;
ContentManager.Menu.applyDocFix(win);
ContentManager.addMouseEvents(item, doc);
ContentManager.addKeyEvents(doc);
if (Util.Browser.isTouchDevice()) {
ContentManager.listenForFocus(doc);
}
var page = item.getPage();
if (doc.body) {
var pageAccommodations = page.getAccommodations();
pageAccommodations.applyCSS(doc.body);
}
var zoom = page.getZoom();
zoom.addDocument(doc);
zoom.refresh();
});
CM.onEntityEvent('menushow', function (page, entity, contentMenu, evt) {
if (!entity.editor) return;
var editor = entity.editor;
if (editor.focusManager &&
editor.focusManager.hasFocus) {
contentMenu.cancel = true;
} else if (editor.element) {
var editorEl = editor.element.$;
var menuTargetEl = YUE.getTarget(evt);
if (editorEl == menuTargetEl ||
YUD.isAncestor(editorEl, menuTargetEl)) {
contentMenu.cancel = true;
}
}
});
CM.onItemEvent('hide', function (page, item) {
var editor = item.editor;
if (editor &&
editor.commands &&
editor.commands.spellchecker &&
editor.commands.spellchecker.enabled) {
editor.commands.spellchecker.exec();
}
});
})(HTMLEditor, ContentManager);
(function(CM) {
function getter(item, response) {
if (item.editor) {
response.isReady = item.editor.isReady;
response.value = item.editor.getData();
response.isValid = (response.value.length > 0);
response.isSelected = response.isValid;
} else {
response.isReady = false;
}
};
function plainTextGetter(item, response) {
if (item.editor) {
var value = item.editor.element.$;
response.isReady = item.editor.isReady;
response.value = Util.Dom.getTextContent(value);
response.isValid = (response.value.length > 0);
response.isSelected = response.isValid;
} else {
response.isReady = false;
}
};
function setter(item, value) {
if (item.editor) {
item.editor.setData(value);
}
};
CM.registerResponseHandler('htmleditor', getter, setter);
CM.registerResponseHandler('PlainTextSpell', plainTextGetter, setter);
CM.registerResponseHandler('HTMLEditorTable', getter, setter);
})(ContentManager);

// FILE: writing.unit.js (49e055f5) 3/7/2014 11:24:14 AM

function WritingUnit(divUnit)
{
this.onOpenEdit = new YAHOO.util.CustomEvent('onOpenEdit', this, false, YAHOO.util.CustomEvent.FLAT),
this.onCloseEdit = new YAHOO.util.CustomEvent('onCloseEdit', this, false, YAHOO.util.CustomEvent.FLAT),
this.item = null;
this.position = divUnit.id.split('_')[1] * 1;
this.divPrompt = YUD.getElementsByClassName('prompt', 'div', divUnit)[0];
this.divContent = YUD.getElementsByClassName('promptContent', 'span', this.divPrompt)[0];
this.linkSelect = YUD.getElementsByClassName('addMark', 'span', divUnit)[0];
this.linkExpandPrompt = YUD.getElementsByClassName('expandPrompt', 'a', divUnit)[0];
var unitDoc = divUnit.ownerDocument;
this.divComment = unitDoc.getElementById("Item_CommentBox_" + this.position);
this.textComment = unitDoc.getElementById("Item_Comment_" + this.position);
this.hiddenChanged = unitDoc.getElementById("Item_Changed_" + this.position);
this.hiddenSelected = unitDoc.getElementById("Item_Selected_" + this.position);
this.textResponse = unitDoc.getElementById("Item_Response_CR_" + this.position);
this.checkMark = unitDoc.getElementById("Item_Mark_" + this.position);
this.isExpanded = function()
{
return YUD.hasClass(this.divPrompt, 'openedPrompt');
};
this.expand = function()
{
return YUD.addClass(this.divPrompt, 'openedPrompt');
};
this.collapse = function()
{
return YUD.removeClass(this.divPrompt, 'openedPrompt');
};
this.toggleExpand = function()
{
if (this.isExpanded()) this.collapse();
else this.expand();
};
this.isSelected = function()
{
return this.hiddenSelected.value.toUpperCase() == "TRUE";
};
this.getValue = function()
{
return this.textResponse.value;
};
this.hasChanges = function()
{
return this.hiddenChanged.value.toUpperCase() == "TRUE";
};
this.select = function()
{
YUD.addClass(divUnit, 'selectedPrompt');
this.hiddenSelected.value = true;
};
this.deselect = function()
{
YUD.removeClass(divUnit, 'selectedPrompt');
this.hiddenSelected.value = false;
};
}

// FILE: writing.widget.js (4b54bd61) 3/7/2014 11:24:14 AM

function WritingWidget(divLayout, frame)
{
this.maxWords = 850;
this.units = [];
this.divBigTable = YUD.getFirstChild(divLayout);
this.linkStart = YUD.getElementsByClassName('writeNow', 'a', divLayout)[0];
this.linksChangePrompt = YUD.getElementsByClassName('changePrompt', 'a', divLayout);
this.linkExpandAll = YUD.getElementsByClassName('expandAll', 'a', divLayout)[0];
this.isEditing = function()
{
return YUD.hasClass(this.divBigTable, 'nowWrite');
};
this.enableEditing = function()
{
var selectedUnit = this.getSelectedUnit();
if (selectedUnit == null)
{
return false;
}
else
{
YUD.addClass(this.divBigTable, 'nowWrite');
if (selectedUnit.item && selectedUnit.item.editor && selectedUnit.item.editor.contentLoaded)
{
selectedUnit.item.editor.show();
selectedUnit.item.editor.hide();
selectedUnit.item.editor.show();
ContentManager.focus(frame);
ContentManager.focus(divLayout);
}
selectedUnit.onOpenEdit.fire();
return true;
}
};
this.disableEditing = function() {
var selectedUnit = this.getSelectedUnit();
if (selectedUnit != null) {
if (selectedUnit.item && selectedUnit.item.editor && selectedUnit.item.editor.spell) {
selectedUnit.item.editor.spell.destroy();
}
if (YUD.getStyle(selectedUnit.divComment, 'display') == 'block') {
YUD.setStyle(selectedUnit.divComment, 'display', 'none');
}
}
YUD.removeClass(this.divBigTable, 'nowWrite');
selectedUnit.onCloseEdit.fire();
};
this.toggleEdit = function()
{
if (this.checkForErrors('toggleEdit')) return;
var selectedUnit = this.getSelectedUnit();
if (this.isEditing())
{
if (YUD.hasClass(document.body, 'dialogPromptShow')) return;
var that = this;
var closeEdit = function()
{
that.disableEditing();
TTS.getInstance().stop();
ContentManager.Menu.hide();
};
if (window.TestShell)
{
TestShell.UI.showWarningPrompt('TDSWritingJS.Label.ChangePassage',
{
yes: closeEdit
});
}
else
{
closeEdit();
}
}
else
{
this.enableEditing();
TTS.getInstance().stop();
ContentManager.Menu.hide();
}
};
this.isExpandAll = function()
{
return YUD.hasClass(this.linkExpandAll, 'collapse');
};
this.toggleExpandAll = function()
{
if (this.isEditing()) return;
for(var i = 0; i < this.units.length; i++)
{
if (this.isExpandAll()) this.units[i].collapse();
else this.units[i].expand();
}
if (this.isExpandAll()) YUD.removeClass(this.linkExpandAll, 'collapse');
else YUD.addClass(this.linkExpandAll, 'collapse');
};
this.selectUnit = function(unit)
{
YUD.removeClass(this.linkStart, 'inactive');
var selectedUnit = this.getSelectedUnit();
if (selectedUnit != null)
{
if (selectedUnit == unit)
{
if (this.isEditing()) selectedUnit.toggleExpand();
return;
}
selectedUnit.deselect();
}
unit.select();
this.checkForErrors('selectUnit');
};
this.getSelectedUnit = function()
{
for(var i = 0; i < this.units.length; i++)
{
if (this.units[i].isSelected()) return this.units[i];
}
return null;
};
this.checkForErrors = function(stack)
{
stack = (stack == null) ? '' : stack;
var selectedUnits = [];
for (var i = 0; i < this.units.length; i++)
{
var unit = this.units[i];
if (unit.isSelected()) selectedUnits.push(unit);
}
if (selectedUnits.length > 1)
{
for (var i = 0; i < selectedUnits.length; i++)
{
selectedUnits[i].deselect();
selectedUnits[i].hiddenChanged.value = true;
}
if (this.isEditing()) this.disableEditing();
return true;
}
return false;
};
YUE.addListener(this.linkStart, 'click', this.toggleEdit, this, true);
YUE.addListener(this.linksChangePrompt, 'click', this.toggleEdit, this, true);
YUE.addListener(this.linkExpandAll, 'click', this.toggleExpandAll, this, true);
};

// FILE: module_writing.js (b1580cb9) 7/23/2014 4:30:36 PM

(function(CKEDITOR) {
var wordsAllowed = 850;
function countHTMLWords(html) {
var text = html.
replace(/(\r\n|\n|\r)/gm, " ").
replace(/^\s+|\s+$/g, "").
replace("&nbsp;", " ");
var tmp = document.createElement("div");
tmp.innerHTML = text;
text = tmp.textContent || tmp.innerText;
var words = text.split(/\s+/);
for (var wordIndex = words.length - 1; wordIndex >= 0; wordIndex--) {
if (words[wordIndex].match(/^([\s\t\r\n]*)$/)) {
words.splice(wordIndex, 1);
}
}
return words.length;
};
function createEditor(writing, item) {
var itemDiv = YUD.get('Item_' + item.position);
var editorDiv = itemDiv.getElementsByClassName('writingBlock')[0];
var editor = HTMLEditor.create(editorDiv, item.position, item.responseType);
item.editor = editor;
editor.parentItem = item;
if (item.value) {
editor._.data = item.value;
}
item.addComponent(editor);
function updateWordCount(warning) {
var wordsCount = countHTMLWords(editor.getData());
var wordCountString = (wordsCount == 0) ? '' : wordsCount + ' out of ' + wordsAllowed + ' words used.';
writing.wordCountEl.innerHTML = wordCountString;
if (wordsCount > 0) {
var promptWordCount = YUD.getElementsByClassName('inlineCount', 'span', YUD.get('Item_' + item.position))[0];
promptWordCount.innerHTML = wordsCount + ' words';
}
if (warning && wordsCount > wordsAllowed) {
var message = 'Your response cannot exceed ' + wordsAllowed + ' words.';
TDS.Dialog.showAlert(message, function () {
ContentManager.focus(editor);
});
}
};
editor.on('change', function() {
updateWordCount(true);
});
editor.on('instanceReady', function () {
updateWordCount(false);
});
}
function processItem(writing, item) {
var unit = new WritingUnit(item.getElement());
unit.item = item;
item.unit = unit;
writing.units.push(unit);
if (unit.isSelected()) {
unit.select();
YUD.removeClass(writing.linkStart, 'inactive');
item.setActive();
}
YUE.addListener(unit.linkSelect, 'click', function () {
if (ContentManager.Menu.isShowing()) return;
writing.selectUnit(unit);
});
YUE.addListener(unit.linkExpandPrompt, 'click', unit.toggleExpand, unit, true);
item.isVisible = function () {
return Util.Dom.isVisible(unit.divPrompt);
};
item.unit.onOpenEdit.subscribe(function () {
if (!item.editor) {
createEditor(writing, item);
}
});
}
function processPage(page) {
var pageWin = page.getWin();
var divWriting = page.getElement();
var writing = new WritingWidget(divWriting, pageWin);
page.writing = writing;
var wordCountDiv = divWriting.getElementsByClassName('writeNav2')[0];
YUD.addClass(wordCountDiv, 'writeNav2');
var parentDiv = divWriting.getElementsByClassName('bigTable')[0];
parentDiv.appendChild(wordCountDiv);
page.writing.wordCountEl = wordCountDiv;
var items = page.getItems();
Util.Array.each(items, function(item) {
processItem(writing, item);
});
if (writing.units.length == 1) {
writing.units[0].select();
writing.enableEditing();
}
else {
writing.toggleEdit();
}
}
ContentManager.onPageEvent('available', function(page) {
if (page.layout == '12') {
processPage(page);
}
});
})(window.CKEDITOR);
ContentManager.onItemEvent('keyevent', function(page, item, evt) {
if (!item.unit) return;
if (evt.type != 'keydown' || evt.ctrlKey || evt.altKey) return;
var writing = page.writing;
var unit = item.unit;
if (evt.key == 'Enter' && !writing.isEditing())
{
if (unit.isSelected()) {
writing.enableEditing();
} else {
writing.selectUnit(unit);
}
}
});
ContentManager.onItemEvent('menushow', function(page, item, menu) {
if (!item.unit) return;
if (item.getActiveComponent() != item.getStemElement()) return;
var writing = page.writing;
if (writing.isEditing()) {
menu._entity.push({
text: 'Change Prompt',
classname: 'changePrompt',
onclick: {
fn: writing.toggleEdit,
scope: writing
}
});
}
});
(function()
{
var getter = function(item, response) {
if (!item.editor) {
response.isSelected = false;
return;
}
response.value = item.editor.getData();
response.isValid = (response.value.length > 0);
response.isSelected = item.unit.isSelected();
};
var setter = function(item, value) {
item.editor.setData(value);
};
ContentManager.registerResponseHandler('prompt selection', getter, setter);
})();

// FILE: common.js (815f4e7e) 3/7/2014 11:24:07 AM

var Lang = YAHOO.util.Lang;
var ErrorHandler =
{
report: function(name, ex)
{
if (typeof console != 'object') return;
console.error(name + ' ' + ex.name + ': ' + ex.message + ' - ' + ex.fileName + ' (line ' + ex.lineNumber + ')');
},
wrapFunction: function(context, name)
{
var fn = context[name];
if (YAHOO.lang.isObject(context) && YAHOO.lang.isFunction(fn))
{
context[name] = function()
{
try
{
return fn.apply(context, arguments);
}
catch (ex)
{
ErrorHandler.report(name, ex);
throw ex;
}
};
}
},
wrapFunctions: function(context, names)
{
if (YAHOO.lang.isArray(names))
{
for (var i = 0; i < names.length; i++)
{
ErrorHandler.wrapFunction(context, names[i]);
}
}
}
};
var EventLazyProvider = function() {};
EventLazyProvider.prototype =
{
_scope: null,
setScope: function(obj) { this._scope = obj; },
fireLazy: function(name, obj)
{
if (!this.hasEvent(name))
{
if (this._scope) this.createEvent(name, { scope: this._scope });
else this.createEvent(name);
}
return this.fireEvent(name, obj);
}
};
YAHOO.lang.augmentProto(EventLazyProvider, YAHOO.util.EventProvider);
(function() {
var con;
try {
con = top.console;
} catch (ex) {
con = console;
}
function Logger(prefix) {
var enabled = true;
this.enable = function() {
enabled = true;
};
this.disable = function() {
enabled = false;
};
function log(level, message, params) {
if (!enabled) {
return;
}
if (level == 'error') {
level = 'warn';
}
if (!con || !con[level]) {
return;
}
if (prefix) {
message = prefix + message;
}
if (params) {
message = YAHOO.lang.substitute(message, params);
}
try {
con[level](message);
} catch (ex) {
}
}
this.debug = function (message, params) { log('debug', message, params); };
this.info = function (message, params) { log('info', message, params); };
this.warn = function (message, params) { log('warn', message, params); };
this.error = function (message, params) { log('error', message, params); };
};
window.Logger = Logger;
})();
var logger = new Logger('GRID: ');

// FILE: grid.js (19b0410c) 3/7/2014 11:24:07 AM

var Grid = function(element, svgFile)
{
this._element = YAHOO.util.Dom.get(element);
this._svgFile = svgFile;
this.view = null;
this.ui = null;
this.model = null;
this.question = null;
this.importexport = null;
this.palette = null;
this.toolbar = null;
this.feedback = null;
this.canvas = null;
this._currentPanel = null;
this._currentMode = null;
this._state = Grid.State.Uninitialized;
this._canvasComponents = [];
this.showCoordinates = false;
this.allowTab = true;
this._debug = false;
this.view = this.ui = new Grid.View(this._svgFile);
this.model = this.question = new Grid.Model();
this.importexport = new Grid.ImportExport(this.model);
this.palette = new Grid.Palette(this);
this.toolbar = new Grid.Toolbar(this);
this.canvas = new Grid.Canvas(this);
if (Grid.Utils.hasSVGWeb())
{
ErrorHandler.wrapFunctions(this, ['_svgRendered', 'init', 'update', 'loadItemXml', 'loadResponseXml', 'getResponseXml']);
}
Grid.Events.fireLazy('onNew', this);
};
Grid.Events = new EventLazyProvider();
YAHOO.lang.augmentProto(Grid, EventLazyProvider);
Grid.State =
{
Error: -1,
Uninitialized: 0,
Initialized: 1,
Created: 2,
Ready: 3,
Loading: 4,
Loaded: 5
};
GridState = Grid.State;
Grid.prototype.isReadOnly = function() { return false; };
Grid.prototype._setState = function(state, data)
{
this._state = state;
var stateName = 'Unknown';
switch (this._state)
{
case Grid.State.Error: stateName = 'Error'; break;
case Grid.State.Uninitialized: stateName = 'Uninitialized'; break;
case Grid.State.Initialized: stateName = 'Initialized'; break;
case Grid.State.Created: stateName = 'Created'; break;
case Grid.State.Ready: stateName = 'Ready'; break;
case Grid.State.Loading: stateName = 'Loading'; break;
case Grid.State.Loaded: stateName = 'Loaded'; break;
}
this.fireLazy('onStateChange', { grid: this, state: state, name: stateName, data: data });
};
Grid.prototype.getState = function() { return this._state; };
Grid.prototype.reportError = function(msg, ex, silent)
{
this.fireLazy('onError', { message: msg, exception: ex });
if (ex && !silent) throw ex;
};
Grid.prototype._processKeyEvent = function(evt)
{
evt.preventDefault();
if (this.isReadOnly()) return;
var key = '';
switch (evt.keyCode)
{
case 9: key = 'tab'; break;
case 13: key = 'enter'; break;
case 27: key = 'esc'; break;
case 32: key = 'space'; break;
case 37: key = 'left'; break;
case 38: key = 'up'; break;
case 39: key = 'right'; break;
case 40: key = 'down'; break;
}
var keyEvent =
{
dom: evt,
key: key
};
var area = this.getArea();
if (this.allowTab && evt.ctrlKey && key == 'tab')
{
this.view._svgWin.focus();
if (area == 'canvas')
{
if (this.model.options.showPalette) this.setArea('palette');
else if (this.model.options.showButtons.length > 0) this.setArea('toolbar');
}
else if (area == 'palette') this.setArea('toolbar');
else if (area == 'toolbar') this.setArea('canvas');
return;
}
if (area == 'canvas' && typeof this.canvas.processKeyEvent == 'function') this.canvas.processKeyEvent(keyEvent);
else if (area == 'palette' && typeof this.palette.processKeyEvent == 'function') this.palette.processKeyEvent(keyEvent);
else if (area == 'toolbar' && typeof this.toolbar.processKeyEvent == 'function') this.toolbar.processKeyEvent(keyEvent);
};
Grid.prototype._svgRendered = function()
{
var grid = this;
var groupPalette = this.view.getElementById('groupPalette');
var groupToolbar = this.view.getElementById('groupToolbar');
var groupCanvas = this.view.getElementById('groupCanvas');
if (groupPalette) {
Grid.Utils.addMouseListener(groupPalette, 'mousedown', function (evt) {
if (!grid.isReadOnly()) {
grid.setArea('palette');
}
});
}
if (groupToolbar) {
Grid.Utils.addMouseListener(groupToolbar, 'mousedown', function (evt) {
if (!grid.isReadOnly()) {
grid.setArea('toolbar');
}
});
}
Grid.Utils.addMouseListener(groupCanvas, 'mousedown', function (evt) {
if (!grid.isReadOnly()) {
grid.setArea('canvas');
}
});
this.view._svgRoot.addEventListener("keyup", function(evt) { evt.preventDefault(); }, false);
this.view._svgRoot.addEventListener("keypress", function(evt) { evt.preventDefault(); }, false);
this.view._svgRoot.addEventListener("keydown", function(evt)
{
try { grid._processKeyEvent(evt); }
catch (ex) { grid.reportError('Error processing key event', ex); }
}, false);
grid.view._svgRoot.addEventListener('contextmenu', function(evt) {
evt.preventDefault();
}, false);
this.addMouseListener('groupCanvas', function(evt)
{
if (grid.isReadOnly()) return;
try
{
var i = grid._canvasComponents.length;
while (i--)
{
var canvasComponent = grid._canvasComponents[i];
var success;
if (typeof canvasComponent.processMouseEvent == 'function')
{
success = canvasComponent.processMouseEvent(evt);
}
if (success === false) return;
}
}
catch (ex) { grid.reportError('Error processing canvas mouse event', ex); }
});
this.registerCanvasComponent(grid.canvas);
this.addMouseListener('groupWrapper', function(evt)
{
if (grid.isReadOnly()) return;
try { grid.palette.processMouseEvent(evt); }
catch (ex) { grid.reportError('Error processing palette mouse event', ex); }
});
this.addMouseListener('groupCanvas', function(evt)
{
if (grid.showCoordinates)
{
grid.view.setCoordinatesText('(' + evt.currentPosition.x + ',' + (grid.model.options.canvasHeight - evt.currentPosition.y) + ')');
}
});
grid.palette.subscribeToModelEvents();
grid.canvas.subscribeToModelEvents();
if (groupToolbar)
{
this.toolbar.init();
}
this.setMode('move');
if (YAHOO.env.ua.gecko < 1.91)
{
this.view._suspendRedrawEnabled = true;
this.view._attributeBatchEnabled = true;
}
setTimeout(function()
{
grid._setState(Grid.State.Ready);
}, 0);
};
Grid.prototype.registerCanvasComponent = function(obj)
{
this._canvasComponents.push(obj);
};
Grid.prototype.getArea = function() { return this._currentPanel; };
Grid.prototype.setArea = function(panelName)
{
if (this._currentPanel == panelName) return false;
this.canvas.stopAction();
this.canvas.clearFocused();
if (this._currentPanel != null)
{
switch (this._currentPanel)
{
case 'canvas': this.view.setAttributes('backgroundCanvas', { 'stroke': 'black' }); break;
case 'palette': this.view.setAttributes('backgroundPalette', { 'stroke': 'black' }); break;
case 'toolbar': this.view.setAttributes('backgroundToolbar', { 'stroke': 'white' }); break;
}
}
this._currentPanel = panelName;
if (this._currentPanel != null)
{
switch (this._currentPanel)
{
case 'canvas': this.view.setAttributes('backgroundCanvas', { 'stroke': 'blue' }); break;
case 'palette': this.view.setAttributes('backgroundPalette', { 'stroke': 'blue' }); break;
case 'toolbar': this.view.setAttributes('backgroundToolbar', { 'stroke': 'blue' }); break;
}
}
this.fireLazy('onAreaChange', { grid: this, name: panelName });
return true;
};
Grid.prototype.getMode = function() { return this._currentMode; };
Grid.prototype.setMode = function(mode)
{
if (this.palette.moving) return;
if (this._currentMode != null && mode == this._currentMode && mode == 'move') return;
if (mode == this._currentMode)
{
mode = 'move';
}
var currentButton;
if (this._currentMode)
{
currentButton = this.toolbar.getButton(this._currentMode);
if (currentButton) currentButton.deselect();
}
this._currentMode = mode;
currentButton = this.toolbar.getButton(this._currentMode);
if (currentButton) currentButton.select();
this.canvas.stopAction();
this.setModeCursor();
this.setModeHint();
this.fireLazy('onModeChange', { grid: this, name: mode });
};
Grid.prototype.init = function()
{
var grid = this;
if (this.getState() != Grid.State.Uninitialized)
{
throw Error('Grid has already been initialized.');
}
this.view.subscribe('loaded', function()
{
grid._setState(Grid.State.Created);
grid._svgRendered();
});
this._setState(Grid.State.Initialized);
this.view.render(this._element);
};
Grid.prototype.getLayout = function() {
if (this.model == null || this.model.options == null) return null;
var options = this.model.options;
var layout = new Grid.Layout();
layout.setContainerPadding(
options.containerPaddingTop,
options.containerPaddingRight,
options.containerPaddingBottom,
options.containerPaddingLeft);
layout.setPaletteWidth(options.paletteWidth, options.paletteGutter);
layout.setToolbarHeight(options.toolbarHeight, options.toolbarGutter);
layout.setCanvasWidth(options.canvasWidth + options.canvasWidthExt);
layout.setCanvasHeight(options.canvasHeight + options.canvasHeightExt);
layout.setCanvasBorderOffset(options.canvasBorderOffset);
layout.setFeedbackHeight(options.feedbackHeight, options.feedbackGutter);
return layout;
};
Grid.prototype.update = function()
{
var options = this.model.options;
if (options.updateLayout) {
var layout = this.getLayout();
this.view.updateLayout(layout);
}
if (options.showGridLines) this.view.createGridLines(options.gridSpacing);
else this.view.clearGridLines();
if (options.showPalette) this.view.showPalette();
else this.view.hidePalette();
if (options.showFeedback) this.view.showFeedback();
else this.view.hideFeedback();
if (options.showToolbar && options.showButtons.length > 0)
{
this.view.showToolbar();
var buttonNames = ['move'];
for (var i = 0; i < options.showButtons.length; i++)
{
var buttonName = options.showButtons[i];
buttonNames.push(buttonName);
}
this.toolbar.enableButtons(buttonNames);
}
else
{
this.view.hideToolbar();
this.toolbar.resetButtons();
}
this.view.updateCenterScaleImage(options.paletteCenter, options.paletteScale);
this.setMode('move');
};
Grid.prototype.loadXml = function(itemXml, responseXml)
{
if (this._debug) logger.info('LOAD ITEM XML = ' + itemXml);
if (this.getState() < Grid.State.Ready)
{
throw Error('Grid is not ready to load (make sure to call init first).');
}
this._setState(Grid.State.Loading);
var grid = this;
var callbackFailure = function(message, values)
{
grid._setState(Grid.State.Error, { message: message, values: values });
};
var callbackCreated = function()
{
var svgImages = grid.view.getElementsByTagName('image');
if (YAHOO.env.ua.gecko &&
typeof ResourceLoader == 'function' &&
(svgImages && svgImages.length > 0))
{
var imageLoader = new ResourceLoader.ImageCollection();
for (var i = 0; i < svgImages.length; i++)
{
imageLoader.addImage(svgImages[i]);
}
imageLoader.load(callbackLoaded, function()
{
var imageErrors = imageLoader.getErrors();
callbackFailure('Error loading SVG images', imageErrors);
});
}
else
{
callbackLoaded();
}
};
var callbackLoaded = function()
{
grid.update();
if (responseXml)
{
if (grid._debug) logger.info('LOAD RESPONSE XML = ' + responseXml);
grid.importexport.loadAnswer(responseXml);
}
grid._setState(Grid.State.Loaded);
grid.view.zoom(1);
};
this.importexport.loadItem(itemXml, callbackCreated, callbackFailure);
};
Grid.prototype.getResponseXml = function()
{
if (!this.isLoaded()) return null;
return this.importexport.getAnswerXml();
};
Grid.prototype.isLoaded = function()
{
return (this.getState() == Grid.State.Loaded);
};
Grid.prototype.hasChanged = function(xml)
{
if (!this.isLoaded()) return false;
var cleanXml = function(xml)
{
if (xml == null) return '';
var values = xml.split('DOCTYPE');
if (values.length > 1) return values[1].split(' ').join('').split('\r').join('');
else return xml;
};
var currentAnswerXml = this.getResponseXml();
return (cleanXml(currentAnswerXml) != cleanXml(xml));
};
Grid.prototype.isValid = function()
{
if (this.isLoaded())
{
if (this.importexport && this.importexport.isStudentResponseValid()) return true;
}
return false;
};
Grid.Hints =
{
'SetPoint': 'Select locations of points',
'Connect': 'Select 2 points to connect or press & drag to create & connect points.',
'Arrow': 'Select 2 points to connect with arrow.',
'DoubleArrow': 'Select 2 points to connect with double arrow.',
'Delete': 'Select object to delete.',
'AddValue': 'Select point or edge to add value',
'AddLabel': 'Select location of label',
'AddComponent': '',
'MotionPending': 'Move object to new location and click where you want it.',
'DraggingObject': 'Release the mouse button to drop it where you want it.',
'WaitForDropDragging': 'Release the mouse button to drop it where you want it.',
'WaitForDrop': 'Click to drop the object where you want it.',
'None': ' '
};
Grid.getHint = function(key)
{
if(typeof(window.Messages) == 'object')
{
return window.Messages.get("GridJS.Label.Hint"+key);
}
return Grid.Hints[key] || '';
};
Grid.prototype.setHint = function(key) { this.view.setFeedbackText(Grid.getHint(key)); };
Grid.prototype.setModeHint = function()
{
var mode = this.getMode();
switch(mode)
{
case 'move': this.setHint('None'); break;
case 'delete': this.setHint('Delete'); break;
case 'point': this.setHint('SetPoint'); break;
case 'connect': this.setHint('Connect'); break;
case 'arrow': this.setHint('Arrow'); break;
case 'arrw2': this.setHint('DoubleArrow'); break;
default: this.setHint('');
}
};
Grid.prototype.setModeCursor = function()
{
var mode = this.getMode();
switch(mode)
{
case 'move': this.view.setCanvasCursor('default'); break;
case 'delete': this.view.setCanvasCursor('crosshair'); break;
case 'arrow': this.view.setCanvasCursor('pointer'); break;
case 'arrw2': this.view.setCanvasCursor('pointer'); break;
case 'point': this.view.setCanvasCursor('pointer'); break;
case 'connect': this.view.setCanvasCursor('pointer'); break;
default: this.view.setCanvasCursor('default');
}
};
Grid.prototype.addMouseListener = function(id, handler)
{
var group = this.view.getElementById(id);
if (!group) return false;
var grid = this;
var isClicked = false;
var isDragging = false;
var clickedPosition = null;
var mouseEventHandler = function(name               , evt             )
{
evt.preventDefault();
var clientX = evt.clientX - 0.5;
var clientY = evt.clientY - 0.5;
var currentPosition = grid.view.translateElement(group, clientX, clientY);
if (YAHOO.env.ua.ie)
{
currentPosition.x = Math.round(currentPosition.x);
currentPosition.y = Math.round(currentPosition.y);
}
if (name == 'mousedown') clickedPosition = currentPosition;
var callHandler = function(eventName)
{
var svgEvent =
{
name: eventName,
target: evt.target,
raw: evt,
currentPosition: currentPosition,
clickedPosition: clickedPosition
};
handler(svgEvent);
};
if (name == 'mousedown')
{
if (isDragging)
{
callHandler('dragend');
isClicked = false;
isDragging = false;
}
else
{
isClicked = true;
callHandler('mousedown');
}
}
else if (name == 'mousemove')
{
if (isClicked) {
if (!isDragging) {
var hasMoved = (clickedPosition.x != currentPosition.x ||
clickedPosition.y != currentPosition.y);
if (hasMoved) {
callHandler('dragbegin');
isDragging = true;
}
}
if (isDragging) {
callHandler('drag');
}
} else {
callHandler('mousemove');
}
}
else if (name == 'mouseup')
{
if (isDragging)
{
callHandler('dragend');
isDragging = false;
}
else if (isClicked)
{
callHandler('mouseup');
}
isClicked = false;
clickedPosition = null;
}
if (name == 'mousedown') {
grid.view._svgWin.focus();
}
};
Grid.Utils.addMouseListener(group, 'mousedown', function(evt) {
mouseEventHandler('mousedown', evt);
});
Grid.Utils.addMouseListener(group, 'mousemove', function(evt) {
mouseEventHandler('mousemove', evt);
});
Grid.Utils.addMouseListener(group, 'mouseup', function(evt) {
mouseEventHandler('mouseup', evt);
});
return true;
};
Grid.prototype.dispose = function()
{
if (this.view) this.view.dispose();
Grid.Events.fireLazy('onDispose', this);
};
Grid.prototype.validate = function()
{
if (YAHOO.env.ua.gecko == 0) return true;
var setError = Util.bind(function(msg, modelImage)
{
if (typeof console == 'object') console.error('GRID: ' + msg);
this._setState(GridState.Error, { message: msg, values: [ modelImage ] });
return false;
}, this);
var modelImages = [];
modelImages = modelImages.concat(this.model.getBackgroundImages());
modelImages = modelImages.concat(this.model.getImages());
modelImages = modelImages.concat(this.model.getRegionsImages());
for (var i = 0; i < modelImages.length; i++)
{
var modelImage = modelImages[i];
var modelRect = modelImage.getBoundingRect();
var inBounds = (modelRect.left >= -1 && modelRect.left <= this.view.width &&
modelRect.top >= -1 && modelRect.top <= this.view.height);
if (!inBounds) return setError('Error with position of image out of bounds', modelImage);
var svgImage = this.view.getElementById(modelImage.getID());
if (!svgImage) return setError('Error finding the svg image', modelImage);
if (modelImage.isVisible())
{
if (svgImage.getAttribute('display') == 'none')
{
return setError('Error with image it should be visible but it is hidden', modelImage);
}
}
else
{
if (svgImage.getAttribute('display') != 'none')
{
return setError('Error with image it should be hidden but it is visible', modelImage);
}
}
var imgAttribs = {
x: svgImage.getAttribute('x') * 1,
y: svgImage.getAttribute('y') * 1,
width: svgImage.getAttribute('width') * 1,
height: svgImage.getAttribute('height') * 1
};
if (modelRect.width != imgAttribs.width ||
modelRect.height != imgAttribs.height)
{
return setError('Error with the attributes width/height of image', modelImage);
}
if (modelRect.left != imgAttribs.x ||
modelRect.top != imgAttribs.y)
{
return setError('Error with the attributes position of image', modelImage);
}
var imgRect = null;
if (modelImage.isVisible() && typeof svgImage.getBBox == 'function')
{
try { imgRect = svgImage.getBBox(); }
catch (ex)
{
return setError('Error with image bounding box', modelImage);
}
}
if (imgRect)
{
if (modelRect.width != imgRect.width ||
modelRect.height != imgRect.height)
{
return setError('Error with the bounding box width/height of image', modelImage);
}
if (modelRect.left != imgRect.x ||
modelRect.top != imgRect.y)
{
return setError('Error with the bounding box position of image', modelImage);
}
}
}
return true;
};

// FILE: utils.js (afbe1732) 3/7/2014 11:24:07 AM

Grid.Utils = {};
Grid.Utils.hasSVGNative = function() {
return document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
};
Grid.Utils.hasSVGWeb = function() {
return (typeof(svgweb) == 'object');
};
Grid.Utils.isSVGFlash = function() {
return (Grid.Utils.hasSVGWeb() && svgweb.getHandlerType() == 'flash');
};
(function (Utils) {
var touchScreen = 'ontouchstart' in window;
var touchEvents = {
'mousedown': 'touchstart',
'mouseup': 'touchend',
'mousemove': 'touchmove'
};
var mouseEvents = {
'mousedown': 'mousedown',
'mouseup': 'mouseup',
'mousemove': 'mousemove'
};
var getWindowsNTVersion = function() {
var matches = navigator.userAgent.match(/Windows NT (\d+\.\d+)/);
var value;
if (matches && matches[1]) {
value = parseFloat(matches[1]);
}
return value || 0;
};
var supportsTouchAndMouse = function() {
return (touchScreen && getWindowsNTVersion() >= 6.1);
};
var normalizeTouchEvent = function (evt) {
if (evt.changedTouches) {
var touches = evt.changedTouches;
for (var i = 0, ii = touches.length; i < ii; i++) {
if (touches[i].target == evt.target) {
var oldevt = evt;
evt = touches[i];
evt.preventDefault = function () {
return oldevt.preventDefault();
};
evt.stopPropagation = function () {
return oldevt.stopPropagation();
};
return evt;
}
}
}
return evt;
};
var addMouseListener = function (target, name, fn) {
var touchAndMouse = supportsTouchAndMouse();
var eventName, altEventName;
if (touchScreen) {
eventName = (touchEvents[name] || name);
if (touchAndMouse) {
altEventName = (mouseEvents[name] || name);
}
} else {
eventName = (mouseEvents[name] || name);
}
var processEvent = function(evt) {
if (touchAndMouse) {
evt.preventDefault();
}
if (touchScreen) {
evt = normalizeTouchEvent(evt);
}
fn(evt);
};
if (eventName) {
target.addEventListener(eventName, processEvent, false);
if (altEventName) {
target.addEventListener(altEventName, processEvent, false);
}
}
};
Utils.addMouseListener = addMouseListener;
})(Grid.Utils);
Grid.Utils.importNode = function(doc, importedNode, deep) {
if (!doc) doc = document;
var node = null;
switch (importedNode.nodeType) {
case 1:
var nodeNS = importedNode.namespaceURI;
if (typeof doc.createElementNS == 'function' && nodeNS != null) {
node = doc.createElementNS(nodeNS, importedNode.nodeName);
} else {
node = doc.createElement(importedNode.nodeName);
}
Grid.Utils.importAttributes(importedNode, node);
if (deep && importedNode.childNodes && importedNode.childNodes.length > 0) {
for (var i = 0, il = importedNode.childNodes.length; i < il; i++) {
var childNode = Grid.Utils.importNode(doc, importedNode.childNodes[i], deep);
if (childNode) node.appendChild(childNode);
}
}
break;
case 3:
node = doc.createTextNode(importedNode.nodeValue, true);
break;
case 4:
break;
case 7:
break;
case 8:
break;
}
return node;
};
Grid.Utils.importAttributes = function(importedNode, node) {
if (importedNode.attributes && importedNode.attributes.length > 0) {
for (var i = 0, il = importedNode.attributes.length; i < il; i++) {
var attrNS = importedNode.attributes[i].namespaceURI;
var attrName = importedNode.attributes[i].nodeName;
if (node.getAttribute(attrName) == null) {
var attrValue = importedNode.getAttribute(attrName);
if (typeof node.setAttributeNS == 'function' && attrNS != null) {
node.setAttributeNS(attrNS, attrName, attrValue);
} else {
node.setAttribute(attrName, attrValue);
}
}
}
}
};
Grid.Utils.getOffset = function(element) {
var hasClientRects = false;
try {
hasClientRects = (element && typeof element.getClientRects == 'function');
} catch (ex) {
}
if (hasClientRects) {
return {
top: element.getClientRects()[0].top,
left: element.getClientRects()[0].left
};
} else {
return {
top: 0,
left: 0
};
}
};
Grid.Utils.getOffsetAdv = function(elem)
{
if (!("getBoundingClientRect" in document.documentElement))
{
return { top: 0, left: 0 };
}
var boxModel = true;
var box = elem.getBoundingClientRect();
var doc = elem.ownerDocument;
var body = doc.body;
var docElem = doc.documentElement;
var clientTop = docElem.clientTop || body.clientTop || 0;
var clientLeft = docElem.clientLeft || body.clientLeft || 0;
var top = box.top + (self.pageYOffset || boxModel && docElem.scrollTop || body.scrollTop) - clientTop;
var left = box.left + (self.pageXOffset || boxModel && docElem.scrollLeft || body.scrollLeft) - clientLeft;
return { top: top, left: left };
};
Grid.Utils.fixOffset = function(svgObject)
{
var getElementFrame = function()
{
var doc;
try {
doc = element.ownerDocument;
} catch (ex) {
return null;
}
var win = doc.parentWindow || doc.defaultView;
return win.frameElement;
};
var element = svgObject;
var elements = [];
do
{
elements.push(element);
}
while (element = getElementFrame())
elements.reverse();
var top = 0, left = 0;
for (var i = 0; i < elements.length; i++)
{
var offset = Grid.Utils.getOffset(elements[i]);
if (offset) {
top += (Math.ceil(offset.top) - offset.top);
left += (Math.ceil(offset.left) - offset.left);
}
}
if (top > 0) {
YAHOO.util.Dom.setStyle(svgObject, 'margin-top', top + 'px');
}
if (left > 0) {
YAHOO.util.Dom.setStyle(svgObject, 'margin-left', left + 'px');
}
};
Grid.Utils.parseElementXY = function(el)
{
var getFloat = function(attrib)
{
var value = el.getAttribute(attrib);
return (value == null) ? 0 : parseFloat(value);
};
var data = {};
if (el.nodeName == 'circle')
{
data.x = getFloat('cx');
data.y = getFloat('cy');
data.radius = getFloat('r');
}
else if (el.nodeName == 'line')
{
data.x1 = getFloat('x1');
data.y1 = getFloat('y1');
data.x2 = getFloat('x2');
data.y2 = getFloat('y2');
}
else if (el.nodeName == 'image' || el.nodeName == 'rect')
{
data.x = getFloat('x');
data.y = getFloat('y');
data.width = getFloat('width');
data.height = getFloat('height');
}
else
{
data.x = getFloat('x');
data.y = getFloat('y');
}
data.thickness = getFloat('stroke-width');
return data;
};

// FILE: crtool.js (992a0fd2) 3/7/2014 11:24:07 AM

var crToolMouseDownPoint = {x: -1,y: -1};
var crToolMouseDragPoint = {x: -1,y: -1};
var crToolMouseUpPoint = {x: -1,y: -1};
var CRToolMode =
{
Test: 0,
Question: 1,
Dot: 2,
Rectangle: 3,
Circle: 4,
NoAction: 5,
Hotspots: 6
};
function CRTool(grid, mode)
{
this.grid = grid;
this._selectedBackgroundImage = null;
if (mode) this.mode = mode;
else this.mode = CRToolMode.Test;
this.resetCRToolData();
this.grid.showCoordinates = true;
};
CRTool.prototype.setMode = function(mode)
{
this.mode = mode;
this.resetCRToolData();
this.clearCRToolUI();
this.paletteAndSnapPointUIControl();
}
CRTool.prototype.getMode = function()
{
return this.mode;
}
CRTool.prototype.processBackgroundImage = function(evt)
{
if (evt.name == 'mousedown' && evt.target != null)
{
var entity = this.grid.model.getEntity(evt.target.id);
if (entity && entity.getType() == 'backgroundimage')
{
this.grid.canvas.setFocused(entity);
var id = this.grid.canvas._currentFocus.getID();
this._selectedBackgroundImage = this.grid.canvas._currentFocus;
return true;
}
else
{
this.grid.canvas.clearFocused();
return false;
}
}
else if (evt.name == 'drag')
{
if (this._selectedBackgroundImage)
{
var x = evt.currentPosition.x, y = evt.currentPosition.y;
this._selectedBackgroundImage.moveTo(x, y, true);
var id = this._selectedBackgroundImage.getID();
var entity = this._selectedBackgroundImage;
this.grid.view.moveImage(id, entity.x, entity.y, entity.width, entity.height, true);
return true;
}
}
else if (evt.name == 'dragend')
{
if (this._selectedBackgroundImage)
{
var id = this._selectedBackgroundImage.getID();
this.grid.view.deselectImage(id);
this._selectedBackgroundImage.x = this._selectedBackgroundImage.x - this._selectedBackgroundImage.width / 2;
this._selectedBackgroundImage.y = this._selectedBackgroundImage.y - this._selectedBackgroundImage.height;
this._selectedBackgroundImage = null;
return true;
}
}
return false;
};
CRTool.prototype.resetCRToolData = function()
{
crToolMouseUpPoint.x = -1;
crToolMouseUpPoint.y = -1;
crToolMouseDragPoint.x = -1;
crToolMouseDragPoint.y = -1;
crToolMouseDownPoint.x = -1;
crToolMouseDownPoint.y = -1;
}
CRTool.prototype.clearCRToolUI = function()
{
var crtoolShapes = ['crtool_rectangle', 'crtool_circle'];
for (var i=0; i<crtoolShapes.length; i++) removeChildren(crtoolShapes[i]);
}
function removeChildren(id) {
var crtoolNode = this.grid.view.getElementById(id);
var len = crtoolNode.childNodes.length;
var centerIDs = [];
for (var i=0; i<len; i++)
{
centerIDs.push(crtoolNode.childNodes[i].id);
}
for (var j=0; j<len; j++)
{
this.grid.view.removeElement(centerIDs[j]);
}
}
CRTool.prototype.paletteAndSnapPointUIControl = function()
{
if (this.getMode() == CRToolMode.Question) {
if (this.grid.model.options.paletteWidth > 0 &&
!this.grid.model.options.showPalette) this.grid.view.showPalette();
} else {
this.clearSnapPointsUI();
if (this.grid.model.options.showPalette) this.grid.view.showPalette();
else this.grid.view.hidePalette();
}
if (this.getMode() != CRToolMode.Test) this.showSnapPoints();
}
CRTool.prototype.setMouseDownPoint = function(x,y)
{
crToolMouseUpPoint.x = -1;
crToolMouseUpPoint.y = -1;
crToolMouseDragPoint.x = -1;
crToolMouseDragPoint.y = -1;
crToolMouseDownPoint.x = x;
crToolMouseDownPoint.y = y;
}
CRTool.prototype.setMouseDragPoint = function(x,y)
{
crToolMouseDragPoint.x = x;
crToolMouseDragPoint.y = y;
}
CRTool.prototype.setMouseUpPoint = function(x,y)
{
crToolMouseUpPoint.x = x;
crToolMouseUpPoint.y = y;
}
CRTool.prototype.getCRToolData = function(type)
{
if (type == 'mousedown') return crToolMouseDownPoint.x + ',' + crToolMouseDownPoint.y;
if (type == 'drag')      return crToolMouseDragPoint.x + ',' + crToolMouseDragPoint.y;
if (type == 'dragend')   return crToolMouseUpPoint.x + ',' + crToolMouseUpPoint.y;
return '-1,-1';
}
CRTool.prototype.setCRToolMouseLocation = function(evt)
{
var x = Math.round(evt.currentPosition.x),
y = Math.round(evt.currentPosition.y);
if (evt.name == 'mousedown')
{
this.setMouseDownPoint(x,y);
} else
if (evt.name == 'drag')
{
this.setMouseDragPoint(x,y);
} else
if (evt.name == 'mouseup' || evt.name == 'dragend')
{
this.setMouseUpPoint(x,y);
}
};
CRTool.prototype.updateCRToolUI = function(evt)
{
if (evt.name == 'mousemove') return;
if (this.mode == CRToolMode.Rectangle) {
if (this.dataReady('mousedown') && this.dataReady('mouseup')) {
this.drawCRToolRectangle(crToolMouseDownPoint.x, crToolMouseDownPoint.y, crToolMouseUpPoint.x, crToolMouseUpPoint.y);
} else {
if (this.dataReady('mousedown') && this.dataReady('drag')) {
this.drawCRToolRectangle(crToolMouseDownPoint.x, crToolMouseDownPoint.y,crToolMouseDragPoint.x, crToolMouseDragPoint.y);
}
}
} else
if (this.mode == CRToolMode.Circle) {
if (this.dataReady('mousedown') && this.dataReady('mouseup')) {
var r = Math.sqrt( Math.pow((crToolMouseDownPoint.x-crToolMouseUpPoint.x),2) + Math.pow((crToolMouseDownPoint.y-crToolMouseUpPoint.y),2));
this.drawCRToolCircle(crToolMouseDownPoint.x, crToolMouseDownPoint.y,r);
} else {
if (this.dataReady('mousedown') && this.dataReady('drag')) {
var r = Math.sqrt( Math.pow((crToolMouseDownPoint.x-crToolMouseDragPoint.x),2) + Math.pow((crToolMouseDownPoint.y-crToolMouseDragPoint.y),2));
this.drawCRToolCircle(crToolMouseDownPoint.x, crToolMouseDownPoint.y,r);
}
}
} else
if (this.mode == CRToolMode.Question) {
if (!this.getSnapToPointFlag()) return;
if (this.dataReady('mousedown') && this.dataReady('mouseup')) {
if ( (crToolMouseDownPoint.x == crToolMouseUpPoint.x) && (crToolMouseDownPoint.y == crToolMouseUpPoint.y) ) {
var snapPoint = this.grid.model.addSnapPoint(crToolMouseDownPoint.x, crToolMouseDownPoint.y, this.getSnapToPointRadius());
this.resetCRToolData();
this.showSnapPoints();
}
}
}
}
CRTool.prototype.showSnapPoints = function()
{
var snapPnts = this.grid.model.getSnapPoints();
this.clearSnapPointsUI();
if ((snapPnts) && (snapPnts.length > 0)) {
for (var i=0; i<snapPnts.length; i++) {
var id = snapPnts[i].getID();
this.grid.view.createSnapToPointAndCircle(snapPnts[i].x, snapPnts[i].y, this.getSnapToPointRadius(), id);
}
}
}
CRTool.prototype.clearSnapPointsUI = function()
{
removeChildren('crtool_snapcenter');
removeChildren('crtool_snapcircle');
}
CRTool.prototype.drawCRToolCircle = function(x,y,r)
{
this.clearCRToolUI();
this.grid.view.createCRToolCircle(x,y,r);
}
CRTool.prototype.drawCRToolRectangle = function(x1,y1,x2,y2)
{
this.clearCRToolUI();
this.grid.view.createCRToolRectangle(x1,y1,x2,y2);
}
CRTool.prototype.crToolDrawDot = function(x,y)
{
}
CRTool.prototype.getSnapToPointFlag = function()
{
return (document.getElementById('snapToPoint').checked);
}
CRTool.prototype.getSnapToPointRadius = function()
{
return (document.getElementById('snapPointRadius').value);
}
CRTool.prototype.deleteSnapPoint = function(evt)
{
var snapPoints = this.grid.model.getSnapPoints();
for (var i=0; i<snapPoints.length; i++) {
if (('snapPointCenter_snappoint_' + snapPoints[i]._id) == evt.target.id) {
this.grid.view.removeElement(evt.target.id);
this.grid.view.removeElement('snapPointCircle_snappoint_' + snapPoints[i]._id);
this.grid.model.deleteSnapPoint(snapPoints[i]);
this.showSnapPoints();
return true;
}
}
return false;
}
CRTool.prototype.dataReady = function (type)
{
if ((type == 'mousedown') && (crToolMouseDownPoint.x >=0) && (crToolMouseDownPoint.y >=0)) return true;
if ((type == 'drag') && (crToolMouseDragPoint.x >=0) && (crToolMouseDragPoint.y >=0)) return true;
if ((type == 'mouseup') && (crToolMouseUpPoint.x >=0) && (crToolMouseUpPoint.y >=0)) return true;
return false;
}
CRTool.prototype.listStaticGridImages = function()
{
function removePath(urlFile)
{
if (urlFile.indexOf('localhost') == -1)
{
var index = urlFile.lastIndexOf("/");
var file = '../NET/WebGraphicReview/'+ urlFile.substring(index + 1);
return file;
} else {
var pathname = window.location.pathname;
var index = pathname.lastIndexOf("/");
pathname = pathname.substring(0, index);
pathname = window.location.protocol + "//" + window.location.host + pathname;
index = urlFile.indexOf(pathname);
if (index != -1) return urlFile.substring(pathname.length+1);
else return urlFile;
}
}
var bkgImages = this.grid.model.getBackgroundImages();
var imageList = '';
for (var i=0; i<bkgImages.length; i++) {
imageList += translateImageLinkToDisplayName(removePath(bkgImages[i].url) + '|' +
bkgImages[i].x  + ',' + bkgImages[i].y);
if (i != bkgImages.length-1) imageList += ';';
}
return imageList;
}
CRTool.prototype.crToolGetGridPoint = function()
{
var CanvasHeight = this.grid.model.options.canvasHeight;
if ((crToolMouseDownPoint.x == -1) || (crToolMouseUpPoint.x == -1)) return '0,0';
if ((crToolMouseDownPoint.x == crToolMouseUpPoint.x) && (crToolMouseDownPoint.y == crToolMouseUpPoint.y))
return (crToolMouseDownPoint.x + ',' + (CanvasHeight - crToolMouseDownPoint.y));
return '0,0';
}
CRTool.prototype.crToolGetCenterAndTolerance = function()
{
var CanvasHeight = this.grid.model.options.canvasHeight;
if ((crToolMouseDownPoint.x != -1) && (crToolMouseUpPoint.x != -1))
{
var tol = Math.sqrt(Math.pow((crToolMouseDownPoint.x - crToolMouseUpPoint.x),2) + Math.pow((crToolMouseDownPoint.y - crToolMouseUpPoint.y),2));
tol = Math.round(tol);
return  (Math.round(crToolMouseDownPoint.x) + ',' + (CanvasHeight - Math.round(crToolMouseDownPoint.y)) + ',' + tol);
}
return '0,0,0';
}
CRTool.prototype.crToolGetArea = function()
{
var CanvasHeight = this.grid.model.options.canvasHeight;
if ((crToolMouseDownPoint.x != -1) && (crToolMouseUpPoint.x != -1))
{
var area = crToolMouseDownPoint.x + ',' + (CanvasHeight-crToolMouseDownPoint.y) + ',' + crToolMouseUpPoint.x + ',' + (CanvasHeight - crToolMouseUpPoint.y);
return area;
}
return '0,0,0,0';
}
CRTool.prototype.SetSnapToPointRadius = function(radius)
{
var snapPoints = this.grid.model.getSnapPoints();
for (var i = 0; i < snapPoints.length; i++)
{
snapPoints[i].snapRadius = radius;
}
}
CRTool.prototype.setCenterImage = function(onoff)
{
this.grid.view.paletteCenter = onoff;
this.grid.model.options.paletteCenter = onoff;
this.grid.view._updatePaletteLayout();
}
CRTool.prototype.setScaleImage = function(onoff)
{
this.grid.view.paletteScale = onoff;
this.grid.model.options.paletteScale = onoff;
this.grid.view._updatePaletteLayout();
}
var crToolCanvsComponent =
{
processMouseEvent: function(evt)
{
var crtool = getGridCRtoolObject();
if (crtool == null) return;
if (crtool.getMode() == CRToolMode.Question)
{
var btnMode = getGridObject().getMode();
if (btnMode == 'move')
{
if (crtool.getSnapToPointFlag())
{
crtool.setCRToolMouseLocation(evt);
crtool.updateCRToolUI(evt);
}
else
{
}
}
else if (btnMode == 'delete')
{
if (evt.name == 'mousedown') crtool.deleteSnapPoint(evt);
}
}
else
{
crtool.setCRToolMouseLocation(evt);
crtool.updateCRToolUI(evt);
}
}
}

// FILE: math.js (226d2130) 3/7/2014 11:24:07 AM

function Point2D(x,y){if(arguments.length>0){this.x=x;this.y=y;}}
Point2D.prototype.clone=function(){return new Point2D(this.x,this.y);};
Point2D.prototype.add=function(that){return new Point2D(this.x+that.x,this.y+that.y);};
Point2D.prototype.addEquals=function(that){this.x+=that.x;this.y+=that.y;return this;};
Point2D.prototype.offset=function(a,b){var result=0;if(!(b.x<=this.x||this.x+a.x<=0)){var t=b.x*a.y-a.x*b.y;var s;var d;if(t>0){if(this.x<0){s=this.x*a.y;d=s/a.x-this.y;}else if(this.x>0){s=this.x*b.y;d=s/b.x-this.y}else{d=-this.y;}}else{if(b.x<this.x+a.x){s=(b.x-this.x)*a.y;d=b.y-(this.y+s/a.x);}else if(b.x>this.x+a.x){s=(a.x+this.x)*b.y;d=s/b.x-(this.y+a.y);}else{d=b.y-(this.y+a.y);}}if(d>0){result=d;}}return result;};
Point2D.prototype.rmoveto=function(dx,dy){this.x+=dx;this.y+=dy;};
Point2D.prototype.scalarAdd=function(scalar){return new Point2D(this.x+scalar,this.y+scalar);};
Point2D.prototype.scalarAddEquals=function(scalar){this.x+=scalar;this.y+=scalar;return this;};
Point2D.prototype.subtract=function(that){return new Point2D(this.x-that.x,this.y-that.y);};
Point2D.prototype.subtractEquals=function(that){this.x-=that.x;this.y-=that.y;return this;};
Point2D.prototype.scalarSubtract=function(scalar){return new Point2D(this.x-scalar,this.y-scalar);};
Point2D.prototype.scalarSubtractEquals=function(scalar){this.x-=scalar;this.y-=scalar;return this;};
Point2D.prototype.multiply=function(scalar){return new Point2D(this.x*scalar,this.y*scalar);};
Point2D.prototype.multiplyEquals=function(scalar){this.x*=scalar;this.y*=scalar;return this;};
Point2D.prototype.divide=function(scalar){return new Point2D(this.x/scalar, this.y/scalar);};
Point2D.prototype.divideEquals=function(scalar){this.x/=scalar;this.y/=scalar;return this;};
Point2D.prototype.compare=function(that){return(this.x-that.x||this.y-that.y);};
Point2D.prototype.eq=function(that){return(this.x==that.x&&this.y==that.y);};
Point2D.prototype.lt=function(that){return(this.x<that.x&&this.y<that.y);};
Point2D.prototype.lte=function(that){return(this.x<=that.x&&this.y<=that.y);};
Point2D.prototype.gt=function(that){return(this.x>that.x&&this.y>that.y);};
Point2D.prototype.gte=function(that){return(this.x>=that.x&&this.y>=that.y);};
Point2D.prototype.distanceFrom=function(that){var dx=this.x-that.x;var dy=this.y-that.y;return Math.sqrt(dx*dx+dy*dy);};
Point2D.prototype.min=function(that){return new Point2D(Math.min(this.x,that.x),Math.min(this.y,that.y));};
Point2D.prototype.max=function(that){return new Point2D(Math.max(this.x,that.x),Math.max(this.y,that.y));};
Point2D.prototype.toString=function(){return this.x+","+this.y;};
Point2D.prototype.setXY=function(x,y){this.x=x;this.y=y;};
Point2D.prototype.setFromPoint=function(that){this.x=that.x;this.y=that.y;};
Point2D.prototype.swap=function(that){var x=this.x;var y=this.y;this.x=that.x;this.y=that.y;that.x=x;that.y=y;};
Point2D.prototype.lerp=function(that,t){return new Point2D(this.x+(that.x-this.x)*t,this.y+(that.y-this.y)*t);};
function Intersection(status){if(arguments.length>0){this.init(status);}}
Intersection.prototype.init=function(status){this.status=status;this.points=new Array();};
Intersection.prototype.appendPoint=function(point){this.points.push(point);};
Intersection.prototype.appendPoints=function(points){this.points=this.points.concat(points);};
Intersection.intersectCircleCircle=function(c1,r1,c2,r2){var result;var r_max=r1+r2;var r_min=Math.abs(r1-r2);var c_dist=c1.distanceFrom(c2);if(c_dist>r_max){result=new Intersection("Outside");}else if(c_dist<r_min){result=new Intersection("Inside");}else{result=new Intersection("Intersection");var a=(r1*r1-r2*r2+c_dist*c_dist)/(2*c_dist);var h=Math.sqrt(r1*r1-a*a);var p=c1.lerp(c2,a/c_dist);var b=h/c_dist;result.points.push(new Point2D(p.x-b*(c2.y-c1.y),p.y+b*(c2.x-c1.x)));result.points.push(new Point2D(p.x+b*(c2.y-c1.y),p.y-b*(c2.x-c1.x)));}return result;};
Intersection.intersectCircleLine=function(c,r,a1,a2){var result;var a=(a2.x-a1.x)*(a2.x-a1.x)+(a2.y-a1.y)*(a2.y-a1.y);var b=2*((a2.x-a1.x)*(a1.x-c.x)+(a2.y-a1.y)*(a1.y-c.y));var cc=c.x*c.x+c.y*c.y+a1.x*a1.x+a1.y*a1.y-2*(c.x*a1.x+c.y*a1.y)-r*r;var deter=b*b-4*a*cc;if(deter<0){result=new Intersection("Outside");}else if(deter==0){result=new Intersection("Tangent");}else{var e=Math.sqrt(deter);var u1=(-b+e)/(2*a);var u2=(-b-e)/(2*a);if((u1<0||u1>1)&&(u2<0||u2>1)){if((u1<0&&u2<0)||(u1>1&&u2>1)){result=new Intersection("Outside");}else{result=new Intersection("Inside");}}else{result=new Intersection("Intersection");if(0<=u1&&u1<=1)result.points.push(a1.lerp(a2,u1));if(0<=u2&&u2<=1)result.points.push(a1.lerp(a2,u2));}}return result;};
Intersection.intersectLineLine=function(a1,a2,b1,b2){var result;var ua_t=(b2.x-b1.x)*(a1.y-b1.y)-(b2.y-b1.y)*(a1.x-b1.x);var ub_t=(a2.x-a1.x)*(a1.y-b1.y)-(a2.y-a1.y)*(a1.x-b1.x);var u_b=(b2.y-b1.y)*(a2.x-a1.x)-(b2.x-b1.x)*(a2.y-a1.y);if(u_b!=0){var ua=ua_t/u_b;var ub=ub_t/u_b;if(0<=ua&&ua<=1&&0<=ub&&ub<=1){result=new Intersection("Intersection");result.points.push(new Point2D(a1.x+ua*(a2.x-a1.x),a1.y+ua*(a2.y-a1.y)));}else{result=new Intersection("No Intersection");}}else{if(ua_t==0||ub_t==0){result=new Intersection("Coincident");}else{result=new Intersection("Parallel");}}return result;};
Intersection.intersectRectangleRectangle=function(a1,a2,b1,b2){var min=a1.min(a2);var max=a1.max(a2);var topRight=new Point2D(max.x,min.y);var bottomLeft=new Point2D(min.x,max.y);var inter1=Intersection.intersectLineRectangle(min,topRight,b1,b2);var inter2=Intersection.intersectLineRectangle(topRight,max,b1,b2);var inter3=Intersection.intersectLineRectangle(max,bottomLeft,b1,b2);var inter4=Intersection.intersectLineRectangle(bottomLeft,min,b1,b2);var result=new Intersection("No Intersection");result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0)result.status="Intersection";return result;};
Intersection.intersectCircleRectangle = function(c, r, r1, r2) { var min = r1.min(r2); var max = r1.max(r2); var topRight = new Point2D(max.x, min.y); var bottomLeft = new Point2D(min.x, max.y); var inter1 = Intersection.intersectCircleLine(c, r, min, topRight); var inter2 = Intersection.intersectCircleLine(c, r, topRight, max); var inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft); var inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min); var result = new Intersection("No Intersection"); result.appendPoints(inter1.points); result.appendPoints(inter2.points); result.appendPoints(inter3.points); result.appendPoints(inter4.points); if (result.points.length > 0) result.status = "Intersection"; else result.status = inter1.status; return result; };
Intersection.intersectLineRectangle = function(a1, a2, r1, r2) { var min = r1.min(r2); var max = r1.max(r2); var topRight = new Point2D(max.x, min.y); var bottomLeft = new Point2D(min.x, max.y); var inter1 = Intersection.intersectLineLine(min, topRight, a1, a2); var inter2 = Intersection.intersectLineLine(topRight, max, a1, a2); var inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2); var inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2); var result = new Intersection("No Intersection"); result.appendPoints(inter1.points); result.appendPoints(inter2.points); result.appendPoints(inter3.points); result.appendPoints(inter4.points); if (result.points.length > 0) result.status = "Intersection"; return result; };

// FILE: model.js (546da46e) 3/7/2014 11:24:06 AM

Grid.Model = function(id, options)
{
this.id = id || '';
this.options = options || new Grid.Model.Options();
this._uuid = 0;
this.questionPartID = 1;
this.description = '';
this.defaultRadius = 5;
this._collection = [];
this._cache = {};
this._addCache = function(id, obj) { this._cache[id] = obj; };
this._removeCache = function(id) { this._cache[id] = null; };
this._points = [];
this._snappoints = [];
this._lines = [];
this._paletteimages = [];
this._canvasimages = [];
this._staticimages = [];
this._backgroundimages = [];
this._labels = [];
this._rectangles = [];
this._circles = [];
this._regions = [];
this._regionGroups = [];
this.importing = false;
this._listenForCacheEvents();
this._instance = ++Grid.Model._instances;
};
YAHOO.lang.augmentProto(Grid.Model, EventLazyProvider);
Grid.Model.arrayRemoveAt = function(arr, i)
{
return (Array.prototype.splice.call(arr, i, 1).length == 1);
};
Grid.Model.arrayRemove = function(arr, obj)
{
var i = arr.indexOf(obj);
var rv;
if ((rv = i >= 0))
{
Grid.Model.arrayRemoveAt(arr, i);
}
return rv;
};
Grid.Model._instances = 0;
Grid.Model.getEmptyStyles = function()
{
return {
'fill': 'white',
'fill-opacity': '0',
'stroke': 'white',
'stroke-width': '0',
'stroke-opacity': '',
'stroke-dasharray': ''
};
};
Grid.Model.getDefaultStyles = function()
{
return {
'fill': 'white',
'fill-opacity': '0',
'stroke': 'red',
'stroke-width': '1',
'stroke-opacity': '',
'stroke-dasharray': ''
};
};
Grid.Model.prototype._createUUID = function()
{
var t = new Date().getTime();
var r = Math.random().toString().split('.')[1] * 1;
++this._uuid;
return this._uuid;
};
Grid.Model.prototype._listenForCacheEvents = function()
{
var model = this;
this.subscribe('onAdd', function(entity)
{
var id = entity.getID();
model._cache[id] = entity;
model._collection.push(entity);
});
this.subscribe('onDelete', function(entity)
{
var id = entity.getID();
delete model._cache[id];
Grid.Model.arrayRemove(model._collection, entity);
});
};
Grid.Model.prototype._hasString = function(id) { return (Lang.isString(id) && id.length > 0); };
Grid.Model.prototype.deleteEntity = function(entityToDelete)
{
var type = entityToDelete.getType();
var collectionName = '_' + type + 's';
var collection = this[collectionName];
if (collection != null)
{
Grid.Model.arrayRemove(this[collectionName], entityToDelete);
}
this.fireLazy('onDelete', entityToDelete);
};
Grid.Model.prototype.clearResponse = function()
{
while (this._snappoints.length > 0) this.deleteSnapPoint(this._snappoints[0]);
while (this._points.length > 0) this.deletePoint(this._points[0]);
while (this._canvasimages.length > 0) this.deleteImage(this._canvasimages[0]);
while (this._circles.length > 0) this.deleteCircle(this._circles[0]);
for (var i = 0; i < this._regions.length; i++)
{
var region = this._regions[i];
if (region.isSelected()) region.deselect();
}
};
Grid.Model.prototype.clearQuestion = function()
{
this.clearResponse();
while (this._snappoints.length > 0) this.deleteSnapPoint(this._snappoints[0]);
while (this._paletteimages.length > 0) this.deletePaletteImage(this._paletteimages[0]);
while (this._backgroundimages.length > 0) this.deleteBackgroundImage(this._backgroundimages[0]);
while (this._staticimages.length > 0) this.deleteStaticImage(this._staticimages[0]);
while (this._regionGroups.length > 0) this.deleteRegionGroup(this._regionGroups[0], true);
this.options = new Grid.Model.Options();
};
Grid.Model.prototype.getEntity = function(id)
{
if (id == null || id == '') return null;
return this._cache[id] || null;
};
Grid.Model.prototype.getEntities = function() { return this._collection; };
Grid.Model.prototype.addEntity = function(entity)
{
this.fireLazy('onAdd', entity);
};
Grid.Model.prototype.addPoint = function(x, y)
{
var radius = (arguments[2] > 0) ? arguments[2] : this.defaultRadius;
var point = new Grid.Model.Point(this, x, y, radius);
this._points.push(point);
this.fireLazy('onAdd', point);
return point;
};
Grid.Model.prototype.getPoints = function() { return this._points; };
Grid.Model.prototype.deletePoint = function(point)
{
for (var i = 0; i < this._points.length; i++)
{
if (point != this._points[i]) continue;
var pointLines = point.getLines();
for (var j = 0; j < pointLines.length; j++)
{
var line = pointLines[j];
this.deleteLine(line);
}
Grid.Model.arrayRemoveAt(this._points, i);
this.fireLazy('onDelete', point);
return true;
}
return false;
};
Grid.Model.prototype.getLines = function() { return this._lines; };
Grid.Model.prototype.addLine = function(source, target, dirType, style)
{
if (!source || !target) throw new Error('Invalid source or target point');
if (source == target) return null;
for(var i = 0; i < this._lines.length; i++)
{
var existingLine = this._lines[i];
if (source == existingLine.source && target == existingLine.target) return existingLine;
if (target == existingLine.source && source == existingLine.target) return existingLine;
}
var line = new Grid.Model.Line(this, source, target, dirType, style, this.options.properLineGeometry);
this._lines.push(line);
this.fireLazy('onAdd', line);
return line;
};
Grid.Model.prototype.getLinesByDir = function(dirType)
{
var lineDirections = [];
for (var i = 0; i < this._lines.length; i++)
{
var line = this._lines[i];
if (line.dirType == dirType) lineDirections.push(line);
}
return lineDirections;
};
Grid.Model.prototype.deleteLine = function(line)
{
return this.deleteEntity(line);
};
Grid.Model.prototype.getSnapPoints = function() { return this._snappoints; };
Grid.Model.prototype.addSnapPoint = function(x, y, snapRadius)
{
var snapPoint = new Grid.Model.SnapPoint(this, x, y, this.defaultRadius, snapRadius);
this._snappoints.push(snapPoint);
this.fireLazy('onAdd', snapPoint);
return snapPoint;
};
Grid.Model.prototype.deleteSnapPoint = function(snapPoint)
{
return this.deleteEntity(snapPoint);
};
Grid.Model.prototype.getPaletteImages = function() { return this._paletteimages; };
Grid.Model.prototype.addPaletteImage = function(name              , url                 , width, height)
{
var paletteImage = new Grid.Model.PaletteImage(this, name, url, width, height);
this._paletteimages.push(paletteImage);
this.fireLazy('onAdd', paletteImage);
return paletteImage;
};
Grid.Model.prototype.deletePaletteImage = function(paletteImage)
{
var canvasImages = paletteImage.getImages();
this.deleteEntity(paletteImage);
for (var i = 0; i < canvasImages.length; i++)
{
this.deleteEntity(canvasImages[0]);
}
};
Grid.Model.prototype.getImages = function() { return this._canvasimages; };
Grid.Model.prototype.addImage = function(name, x, y)
{
if (!Lang.isString(name) || name.length == 0) return null;
var paletteImage = null;
for (var i = 0; i < this._paletteimages.length; i++)
{
if (name == this._paletteimages[i].name)
{
paletteImage = this._paletteimages[i];
break;
}
}
if (paletteImage == null) throw new Error('Cannot add the image ' + name + ' because the palette image does not exist.');
var image = new Grid.Model.Image(this, name, x, y, paletteImage.width, paletteImage.height);
this._canvasimages.push(image);
this.fireLazy('onAdd', image);
return image;
};
Grid.Model.prototype.deleteImage = function(image)
{
return this.deleteEntity(image);
};
Grid.Model.prototype.getStaticImages = function() { return this._staticimages; };
Grid.Model.prototype.addStaticImage = function(url                 , x, y, width, height)
{
var staticImage = new Grid.Model.StaticImage(this, url, x, y, width, height);
this._staticimages.push(staticImage);
this.fireLazy('onAdd', staticImage);
return staticImage;
};
Grid.Model.prototype.deleteStaticImage = function(staticImage)
{
return this.deleteEntity(staticImage);
};
Grid.Model.prototype.getBackgroundImages = function() { return this._backgroundimages; };
Grid.Model.prototype.addBackgroundImage = function(url                 , x, y, width, height)
{
var backgroundImage = new Grid.Model.BackgroundImage(this, url, x, y, width, height);
this._backgroundimages.push(backgroundImage);
this.fireLazy('onAdd', backgroundImage);
return backgroundImage;
};
Grid.Model.prototype.deleteBackgroundImage = function(backgroundImage)
{
return this.deleteEntity(backgroundImage);
};
Grid.Model.prototype.getRectangles = function() { return this._rectangles; };
Grid.Model.prototype.createRectangle = function(x1, y1, x2, y2)
{
var width = (x2 - x1);
var height = (y2 - y1);
return new Grid.Model.Rectangle(this, x1, y1, width, height);
};
Grid.Model.prototype.addRectangle = function(rect)
{
if (!(rect instanceof Grid.Model.Rectangle)) throw new Error('Can only add valid rectangle objects.');
this._rectangles.push(rect);
this.fireLazy('onAdd', rect);
return rect;
};
Grid.Model.prototype.getCircles = function() { return this._circles; };
Grid.Model.prototype.createCircle = function(x, y, radius)
{
return new Grid.Model.Circle(this, x, y, radius);
};
Grid.Model.prototype.addCircle = function(circle)
{
if (!(circle instanceof Grid.Model.Circle)) throw new Error('Can only add valid circle objects.');
this._circles.push(circle);
this.fireLazy('onAdd', circle);
return circle;
};
Grid.Model.prototype.deleteCircle = function (circle)
{
return this.deleteEntity(circle);
};
Grid.Model.prototype.getLabels = function() { return this._labels; };
Grid.Model.prototype.addLabel = function(x, y, text, fontSize, fontFamily)
{
var label = new Grid.Model.Label(this, x, y, text, fontSize, fontFamily);
this._labels.push(label);
this.fireLazy('onAdd', label);
return label;
};
Grid.Model.prototype.getRegionGroups = function() { return this._regionGroups; };
Grid.Model.prototype.getRegionGroup = function(name)
{
var regionGroups = grid.model.getRegionGroups();
for (var i = 0; i < regionGroups.length; i++)
{
var group = regionGroups[i];
if (group.name == name) return group;
}
return null;
};
Grid.Model.prototype.createRegionGroup = function(name, min, max)
{
var regionGroup = new Grid.Model.RegionGroup(this, name, min, max);
this._regionGroups.push(regionGroup);
return regionGroup;
};
Grid.Model.prototype.deleteRegionGroup = function(group, deleteOrphans)
{
var regions = group.getRegions();
while (regions.length > 0)
{
group.removeRegion(regions[0], deleteOrphans);
}
Grid.Model.arrayRemove(this._regionGroups, group);
};
Grid.Model.prototype.createRegion = function(name           , shape           , coords           )
{
var region = null;
switch (shape)
{
case 'rect': region = this._buildRegionRect(name); break;
case 'circle': region = this._buildRegionCircle(name); break;
case 'poly': region = this._buildRegionPolygon(name); break;
}
if (region != null)
{
region.setHoverable(true);
region.setFocusable(Grid.Model.Focusable.Auto);
region.setSelectable(true);
region.setMoveable(false);
this.addEntity(region);
this._regions.push(region);
if (YAHOO.lang.isString(coords))
{
region.setCoords(coords);
}
}
return region;
};
Grid.Model.prototype._buildRegionRect = function(name)
{
var regionClass = Grid.Model.buildRegion(Grid.Model.Rectangle, name);
return new regionClass(this, 0, 0, 0, 0);
};
Grid.Model.prototype._buildRegionCircle = function(name)
{
var regionClass = Grid.Model.buildRegion(Grid.Model.Circle, name);
return new regionClass(this, 0, 0, 0);
};
Grid.Model.prototype._buildRegionPolygon = function(name)
{
var regionClass = Grid.Model.buildRegion(Grid.Model.Polygon, name);
return new regionClass(this);
};
Grid.Model.prototype.deleteRegion = function(region)
{
var events = region.getEvents();
for (var i = 0; i < events.length; i++)
{
var event = events[i];
region.deleteEvent(event);
}
Grid.Model.arrayRemove(this._regions, region);
this.deleteEntity(region);
};
Grid.Model.prototype.getRegions = function() { return this._regions; };
Grid.Model.prototype.getRegion = function(name)
{
for (var i = 0; i < this._regions.length; i++)
{
var region = this._regions[i];
if (region.name == name) return region;
}
return null;
};
Grid.Model.prototype.getRegionsImages = function()
{
var regionImages = [];
var regions = this.getRegions();
for (var i = 0; i < regions.length; i++)
{
var regionEvents = regions[i].getEvents();
for (var j = 0; j < regionEvents.length; j++)
{
var eventImage = regionEvents[j].getImage();
if (eventImage != null) regionImages.push(eventImage);
}
}
return regionImages;
};

// FILE: model.options.js (103f2380) 3/7/2014 11:24:06 AM

Grid.Model.Options = function()
{
this.updateLayout = true;
this.containerPaddingTop = 0;
this.containerPaddingRight = 1;
this.containerPaddingBottom = 1;
this.containerPaddingLeft = 0;
this.showPalette = false;
this.paletteWidth = 75;
this.paletteGutter = 5;
this.paletteCenter = false;
this.paletteScale = false;
this.showToolbar = true;
this.toolbarHeight = 21;
this.toolbarGutter = 4;
this.showButtons = [];
this.canvasWidth = 500;
this.canvasWidthExt = 2;
this.canvasHeight = 410;
this.canvasHeightExt = 1;
this.canvasBorderOffset = -1;
this.properLineGeometry = false;
this.showGridLines = false;
this.gridColor = 'None';
this.gridSpacing = 0;
this.snapToGrid = false;
this.snapRadius = 0;
this.selectionTolerance = 0;
this.showFeedback = true;
this.feedbackHeight = 30;
this.feedbackGutter = 4;
};
Grid.Model.Options.prototype.addButton = function(button)
{
if (button == 'delete' ||
button == 'point' ||
button == 'connect' ||
button == 'arrow' ||
button == 'arrw2' ||
button == 'dash' ||
button == 'circle') {
this.showButtons.push(button);
}
};
Grid.Model.Options.prototype.clearButtons = function() {
this.showButtons = [];
};

// FILE: model.base.js (b3d6fadd) 3/7/2014 11:24:06 AM

Grid.Model.Base = function(model)
{
if (!(model instanceof Grid.Model))
{
throw new Error('The base class does not have a valid model.');
}
this.model = model;
this._id = model._instance + '_' + model._createUUID();
this._visible = true;
this._hoverable = false;
this._hovering = false;
this._focusable = Grid.Model.Focusable.Never;
this._focused = false;
this._moveable = false;
this._deletable = false;
this._selectable = false;
this._selected = false;
};
Grid.Model.Focusable =
{
Never: 0,
Manual: 1,
Auto: 2
};
Grid.Model.Base.prototype.getType = function()
{
if (this instanceof Grid.Model.BackgroundImage) return 'backgroundimage';
if (this instanceof Grid.Model.StaticImage) return 'staticimage';
if (this instanceof Grid.Model.PaletteImage) return 'paletteimage';
if (this instanceof Grid.Model.Image) return 'canvasimage';
if (this instanceof Grid.Model.Line) return 'line';
if (this instanceof Grid.Model.SnapPoint) return 'snappoint';
if (this instanceof Grid.Model.Point) return 'point';
if (this instanceof Grid.Model.Circle) return 'circle';
if (this instanceof Grid.Model.Rectangle) return 'rect';
if (this instanceof Grid.Model.Polygon) return 'poly';
if (this instanceof Grid.Model.Path) return 'path';
if (this instanceof Grid.Model.Base) return 'base';
return 'unknown';
};
Grid.Model.Base.prototype.getID = function()
{
return this.getType() + '_' + this._id;
};
Grid.Model.Base.prototype.setVisible = function(visible) { this._visible = visible; };
Grid.Model.Base.prototype.isVisible = function() { return this._visible; };
Grid.Model.Base.prototype.show = function()
{
this.setVisible(true);
this.update();
};
Grid.Model.Base.prototype.hide = function()
{
this.setVisible(false);
this.update();
};
Grid.Model.Base.prototype.setHoverable = function(hoverable) { this._hoverable = hoverable; };
Grid.Model.Base.prototype.isHoverable = function()
{
return this.isVisible() ? this._hoverable : false;
};
Grid.Model.Base.prototype.setHovering = function(hovering) { this._hovering = hovering; };
Grid.Model.Base.prototype.isHovering = function() { return this._hovering; };
Grid.Model.Base.prototype.setFocusable = function(focusable) { this._focusable = focusable; };
Grid.Model.Base.prototype.isFocusable = function()
{
return this.isVisible() ? this._focusable : false;
};
Grid.Model.Base.prototype.setFocused = function(focused) { this._focused = focused; };
Grid.Model.Base.prototype.isFocused = function() { return this._focused; };
Grid.Model.Base.prototype.setSelectable = function(selectable) { this._selectable = selectable; };
Grid.Model.Base.prototype.isSelectable = function() { return this._selectable; };
Grid.Model.Base.prototype.isSelected = function() { return this._selected; };
Grid.Model.Base.prototype.select = function()
{
if (this.isSelected()) return false;
if (!this.isSelectable()) return false;
this._selected = true;
this.update();
return true;
};
Grid.Model.Base.prototype.deselect = function()
{
if (!this.isSelected()) return false;
this._selected = false;
this.update();
return true;
};
Grid.Model.Base.prototype.setMoveable = function(moveable) { this._moveable = moveable; };
Grid.Model.Base.prototype.isMoveable = function() { return this._moveable; };
Grid.Model.Base.prototype.setDeletable = function(deletable) { this._deletable = deletable; };
Grid.Model.Base.prototype.isDeletable = function() { return this._deletable; };
Grid.Model.Base.prototype.update = function()
{
this.model.fireLazy('onUpdate', this);
};
Grid.Model.Base.prototype.setCoords = function() {};
Grid.Model.Base.prototype.getStyles = function()
{
return Grid.Model.getDefaultStyles();
};
Grid.Model.Base.prototype.getElement = function(view)
{
var id = this.getID();
return view.getElementById(id);
};
Grid.Model.Base.prototype.createElement = function(view) { return null; };
Grid.Model.Base.prototype.getElementGroup = function() { return 'shapes'; };
Grid.Model.Base.prototype.appendElement = function(view, element)
{
var groupId = this.getElementGroup();
view.appendChild(groupId, element);
};
Grid.Model.Base.prototype.moveElement = function(view) {};
Grid.Model.Base.prototype.removeElement = function(view)
{
var id = this.getID();
view.removeElement(id);
};
Grid.Model.Base.prototype.updateElement = function(view)
{
var element = this.getElement(view);
if (element == null) return;
var styles = this.getStyles();
view.setAttributes(element, styles);
var visible = this.isVisible();
view.setAttributes(element,
{
'display': visible ? 'inline' : 'none'
});
};

// FILE: model.position.js (73916789) 3/7/2014 11:24:06 AM

Grid.Model.Position = function(model, x, y)
{
Grid.Model.Position.superclass.constructor.call(this, model);
this.x = x;
this.y = y;
this._boundsEnabled = true;
this._snapEnabled = true;
};
Lang.extend(Grid.Model.Position, Grid.Model.Base);
Grid.Model.Position.prototype.get2D = function() { return new Point2D(this.x, this.y); };
Grid.Model.Position.prototype.isBoundsEnabled = function() { return this._boundsEnabled; };
Grid.Model.Position.prototype.setBoundsEnabled = function(boundsEnabled) { this._boundsEnabled = boundsEnabled; };
Grid.Model.Position.prototype.isSnapEnabled = function() { return this._snapEnabled; };
Grid.Model.Position.prototype.setSnapEnabled = function(snapEnabled) { this._snapEnabled = snapEnabled; };
Grid.Model.Position.prototype.getFixedCoords = function(x, y)
{
return { x: x, y: y };
};
Grid.Model.Position.prototype.moveTo = function(moveX, moveY, preventSnap             )
{
if (this.isBoundsEnabled())
{
var fixedCoords = this.getFixedCoords(moveX, moveY);
moveX = fixedCoords.x;
moveY = fixedCoords.y;
}
if (moveX == this.x && moveY == this.y) return false;
this.x = moveX;
this.y = moveY;
if (this.isSnapEnabled() && !preventSnap) this.snapToGrid();
this.model.fireLazy('onMove', this);
return true;
};
Grid.Model.Position.prototype._moveBy = function(moveSize)
{
var options = this.model.options;
if (options.snapToGrid && options.gridSpacing > 0)
{
return options.gridSpacing;
}
return moveSize;
};
Grid.Model.Position.prototype.moveLeft = function(moveSize)
{
return this.moveTo(this.x - this._moveBy(moveSize), this.y);
};
Grid.Model.Position.prototype.moveUp = function(moveSize)
{
return this.moveTo(this.x, this.y - this._moveBy(moveSize));
};
Grid.Model.Position.prototype.moveRight = function(moveSize)
{
return this.moveTo(this.x + this._moveBy(moveSize), this.y);
};
Grid.Model.Position.prototype.moveDown = function(moveSize)
{
return this.moveTo(this.x, this.y + this._moveBy(moveSize));
};
Grid.Model.Position.prototype.distanceFrom = function(that)
{
var p1 = this.get2D(),
p2 = that.get2D();
return p1.distanceFrom(p2);
};
Grid.Model.Position.prototype._getNearestSnapPoint = function()
{
var snapPoints = this.model.getSnapPoints();
var closestSnapPoint = null;
var closestDistance = +Infinity;
for(var i = 0; i < snapPoints.length; i++)
{
var snapPoint = snapPoints[i];
var distance = this.distanceFrom(snapPoint);
if (distance <= snapPoint.snapRadius && distance < closestDistance)
{
closestDistance = distance;
closestSnapPoint = snapPoint;
}
}
return closestSnapPoint;
};
Grid.Model.Position.prototype.snapToPoint = function()
{
var snapPoint = this._getNearestSnapPoint();
if (snapPoint != null)
{
return this.moveTo(snapPoint.x, snapPoint.y, true);
}
return false;
};
Grid.Model.Position.prototype.snapToGrid = function()
{
var spacing = 1;
var options = this.model.options;
if (options.snapToGrid && options.gridSpacing > 0)
{
spacing = options.gridSpacing;
}
var fixedX = this.x;
var fixedY = this.y;
if (this instanceof Grid.Model.Image)
{
fixedX = (fixedX - Math.round(this.width / 2)); // NOTE: JAVA floored this value
fixedY = (fixedY - this.height);
}
var snappedX = Math.round(fixedX / spacing) * spacing;
var snappedY = Math.round(fixedY / spacing) * spacing;
if (this instanceof Grid.Model.Image)
{
snappedX = (snappedX + Math.round(this.width / 2)); // NOTE: JAVA floored this value
snappedY = (snappedY + this.height);
}
return this.moveTo(snappedX, snappedY, true);
};
Grid.Model.Position.prototype.snap = function () {
if (!this.snapToPoint()) {
this.snapToGrid();
}
};
Grid.Model.Position.prototype.moveElement = function(view)
{
var element = this.getElement(view);
view.setAttributes(element,
{
'x': this.x,
'y': this.y
});
};

// FILE: model.circle.js (5a88952c) 3/7/2014 11:24:06 AM

Grid.Model.Circle = function(model, x, y, radius)
{
Grid.Model.Circle.superclass.constructor.call(this, model, x, y);
this.radius = radius;
this.setHoverable(false);
this.setFocusable(Grid.Model.Focusable.Manual);
this.setMoveable(true);
this.setSelectable(false);
};
Lang.extend(Grid.Model.Circle, Grid.Model.Position);
Grid.Model.Circle.prototype.getList = function()
{
return this.model.getPoints();
};
Grid.Model.Circle.prototype.getBoundingRect = function(x, y)
{
if (!YAHOO.lang.isNumber(x)) x = this.x;
if (!YAHOO.lang.isNumber(y)) y = this.y;
var width = (this.radius * 2);
var height = (this.radius * 2);
var topLeftX = (x - this.radius);
var topLeftY = (y - this.radius);
var bottomRightX = (topLeftX + width);
var bottomRightY = (topLeftY + height);
return {
width: width,
height: height,
left: topLeftX,
top: topLeftY,
right: bottomRightX,
bottom: bottomRightY
};
};
Grid.Model.Circle.prototype.getFixedCoords = function(moveX, moveY)
{
var rect = this.getBoundingRect(moveX, moveY);
var canvasWidth = this.model.options.canvasWidth;
var canvasHeight = this.model.options.canvasHeight;
if (rect.left < 0) moveX = this.radius;
if (rect.top < 0) moveY = this.radius;
if (rect.right > canvasWidth) moveX = (canvasWidth - this.radius);
if (rect.bottom > canvasHeight) moveY = (canvasHeight - this.radius);
return { x: moveX, y: moveY };
};
Grid.Model.Circle.prototype.intersect = function(that)
{
var c1 = this.get2D(),
r1 = this.radius,
c2 = that.get2D(),
r2 = that.radius;
return (Intersection.intersectCircleCircle(c1, r1, c2, r2).status != 'Outside');
};
Grid.Model.Circle.prototype.getIntersections = function()
{
var intersectingPoints = [];
var points = this.getList();
for(var i = 0; i < points.length; i++)
{
var point = points[i];
if (this != point && this.intersect(point))
{
intersectingPoints.push(point);
}
}
return intersectingPoints;
};
Grid.Model.Circle.prototype.setCoords = function(coords)
{
coords = coords.split(',');
for (var i = 0; i < coords.length; i++) { coords[i] = (coords[i] * 1); }
this.x = coords[0];
this.y = coords[1];
this.radius = coords[2];
this.update();
};
Grid.Model.Circle.prototype.getCoords = function()
{
return YAHOO.lang.substitute('{x}, {y}, {radius}', this);
};
Grid.Model.Circle.prototype.createElement = function(view)
{
var id = this.getID();
var circleElement = view.createElement('circle', { 'id': id });
this.appendElement(view, circleElement);
return circleElement;
};
Grid.Model.Circle.prototype.updateElement = function(view)
{
var circleElement = this.getElement(view);
view.setAttributes(circleElement, {
'cx': this.x,
'cy': this.y,
'r':  (this.radius - 0.4)
});
Grid.Model.Circle.superclass.updateElement.call(this, view);
};
Grid.Model.Circle.prototype.moveElement = function(view)
{
var circleElement = this.getElement(view);
view.setAttributes(circleElement, {
'cx': this.x,
'cy': this.y
});
};

// FILE: model.polygon.js (9a90a7ae) 3/7/2014 11:24:06 AM

Grid.Model.PolygonPoint = function(model, x, y)
{
Grid.Model.PolygonPoint.superclass.constructor.call(this, model, x, y);
};
Lang.extend(Grid.Model.PolygonPoint, Grid.Model.Position);
Grid.Model.PolygonPoint.prototype.toString = function()
{
return this.x + ',' + this.y;
};
Grid.Model.Polygon = function(model)
{
Grid.Model.Polygon.superclass.constructor.call(this, model, 0, 0);
this._points = [];
this._focusable = Grid.Model.Focusable.Manual;
this._moveable = true;
};
Lang.extend(Grid.Model.Polygon, Grid.Model.Position);
Grid.Model.Polygon.prototype.getPoints = function() { return this._points; };
Grid.Model.Polygon.prototype.addPoint = function(x, y)
{
var point = new Grid.Model.PolygonPoint(this.model, x, y);
this._points.push(point);
};
Grid.Model.Polygon.prototype.getCoords = function()
{
return this._points.join(' ');
};
Grid.Model.Polygon._path_regexp = (function()
{
var number = '-?[0-9.]+';
var comma = '\s*[, \t]\s*';
var xy = number + comma + number;
return new RegExp(xy, 'ig');
})();
Grid.Model.Polygon._parsePath = function(path)
{
var points = [];
var tokens = path.match(Grid.Model.Polygon._path_regexp);
if (YAHOO.lang.isArray(tokens))
{
for (var i = 0; i < tokens.length; i++)
{
var token = tokens[i].replace(/^\s+|\s+$/g, '');
var xy = token.split(/[, \t]+/);
var x = parseFloat(xy[0]);
var y = parseFloat(xy[1]);
points.push([x, y]);
}
}
return points;
};
Grid.Model.Polygon.prototype.setCoords = function(coords)
{
this._points = [];
var parsedPoints = Grid.Model.Polygon._parsePath(coords);
for (var i = 0; i < parsedPoints.length; i++)
{
var parsedPoint = parsedPoints[i];
this.addPoint(parsedPoint[0], parsedPoint[1]);
}
if (this._points.length > 0)
{
this.x = parsedPoints[0][0];
this.y = parsedPoints[0][1];
}
this.update();
};
Grid.Model.Polygon.prototype.createElement = function(view)
{
var id = this.getID();
var polyElement = view.createElement('polygon', {
'id': id,
'points': this._points.join(' ')
});
this.appendElement(view, polyElement);
return polyElement;
};
Grid.Model.Polygon.prototype.moveElement = function(view)
{
var polyElement = this.getElement(view);
var xDiff = 0;
var yDiff = 0;
for (var i = 0; i < this._points.length; i++)
{
var point = this._points[i];
if (i == 0)
{
xDiff = this.x - point.x;
yDiff = this.y - point.y;
point.x = this.x;
point.y = this.y;
}
else
{
point.x += xDiff;
point.y += yDiff ;
}
}
view.setAttributes(polyElement, {
'points': this._points.join(' ')
});
};
Grid.Model.Polygon.prototype.updateElement = function(view)
{
this.moveElement(view);
Grid.Model.Polygon.superclass.updateElement.call(this, view);
};

// FILE: model.path.js (f9610d5b) 3/7/2014 11:24:06 AM

Grid.Model.Path = function(model, pathData)
{
Grid.Model.Path.superclass.constructor.call(this, model);
this.pathData = pathData;
this._focusable = Grid.Model.Focusable.Manual;
};
Lang.extend(Grid.Model.Path, Grid.Model.Base);
Grid.Model.Path.prototype.createElement = function(view)
{
var id = this.getID();
var polyElement = view.createElement('path', { 'id': id });
this.appendElement(view, polyElement);
this.updateElement(view);
return polyElement;
};
Grid.Model.Path.prototype.updateElement = function(view)
{
var polyElement = this.getElement(view);
view.setAttributes(polyElement, { 'd': this.pathData });
Grid.Model.Path.superclass.updateElement.call(this, view);
};

// FILE: model.point.js (5ca8217a) 3/7/2014 11:24:06 AM

Grid.Model.Point = function(model, x, y, radius)
{
Grid.Model.Point.superclass.constructor.call(this, model, x, y, radius);
this.radius = radius;
this._transparent = false;
};
Lang.extend(Grid.Model.Point, Grid.Model.Circle);
Grid.Model.Point.prototype.makeTransparent = function(transparent) {
this._transparent = transparent;
this.update();
};
Grid.Model.Point.prototype.isTransparent = function () {
return this._transparent;
};
Grid.Model.Point.prototype.getBoundingRect = function(x, y)
{
var rect = Grid.Model.Point.superclass.getBoundingRect.call(this, x, y);
rect.top -= this.radius;
rect.bottom -= this.radius;
return rect;
};
Grid.Model.Point.prototype.getFixedCoords = function(moveX, moveY)
{
var rect = this.getBoundingRect(moveX, moveY);
var canvasWidth = this.model.options.canvasWidth;
var canvasHeight = this.model.options.canvasHeight;
if (rect.left < 0) moveX = 0;
if (rect.top < 0) moveY = 0;
if (rect.right > canvasWidth) moveX = canvasWidth;
if (rect.bottom > canvasHeight) moveY = canvasHeight;
return { x: moveX, y: moveY };
};
Grid.Model.Point.prototype.moveTo = function(moveX, moveY, preventSnap)
{
var moved = Grid.Model.Point.superclass.moveTo.call(this, moveX, moveY, preventSnap);
if (moved)
{
var lines = this.getLines();
for (var i = 0; i < lines.length; i++) this.model.fireLazy('onMove', lines[i]);
}
return moved;
};
Grid.Model.Point.prototype.getLines = function()
{
var pointLines = [];
var lines = this.model.getLines();
for(var i = 0; i < lines.length; i++)
{
var line = lines[i];
if (this == line.source || this == line.target)
{
pointLines.push(line);
}
}
return pointLines;
};
Grid.Model.Point.prototype.moveLines = function(toPoint)
{
if (!toPoint) return false;
var fromLines = this.getLines();
for(var i = 0; i < fromLines.length; i++)
{
var fromLine = fromLines[i];
var isSource = (fromLine.source == this);
this.model.deleteLine(fromLine);
if (isSource) this.model.addLine(toPoint, fromLine.target, fromLine.dirType);
else this.model.addLine(fromLine.source, toPoint, fromLine.dirType);
}
return true;
};
Grid.Model.Point.prototype._intersectLine = function(line)
{
var c = this.get2D(),
r = this.radius,
a1 = line.source.get2D(),
a2 = line.target.get2D();
return (Intersection.intersectCircleLine(c, r, a1, a2).source != 'Outside');
};
Grid.Model.Point.prototype._nearestPointAlongLine = function(line)
{
var px = this.x,
py = this.y,
x1 = line.source.x,
y1 = line.source.y,
x2 = line.target.x,
y2 = line.target.y;
var dx = x2 - x1;
var dy = y2 - y1;
if (dx == 0 && dy == 0) return { x: x1, y: y1 };
var t = ((px - x1) * dx + (py - y1) * dy) / (dx * dx + dy * dy);
if (t < 0)
{
dx = x1;
dy = y1;
}
else if (t > 1)
{
dx = x2;
dy = y2;
}
else
{
dx = x1 + t * dx;
dy = y1 + t * dy;
}
return new Point2D(dx, dy);
};
Grid.Model.Point.prototype.distanceFromLine = function(line)
{
var nearestPoint = this._nearestPointAlongLine(line);
return this.get2D().distanceFrom(nearestPoint);
};
Grid.Model.Point.prototype.getStyles = function()
{
var styles =
{
'fill': 'red',
'stroke': 'blue',
'stroke-width': '0',
'stroke-dasharray': ''
};
if (this.isFocused())
{
styles['stroke-width'] = '1';
}
else
{
styles['stroke-width'] = '0';
}
if (this._transparent) {
styles['opacity'] = '0';
}
return styles;
};
Grid.Model.Point.prototype.getElementGroup = function() { return 'points'; };
Grid.Model.Point.prototype.updateElement = function(view)
{
var pointElement = this.getElement(view);
if (this.isFocused())
{
view.bringToFront(pointElement);
}
Grid.Model.Point.superclass.updateElement.call(this, view);
};

// FILE: model.snappoint.js (f948b9f4) 3/7/2014 11:24:06 AM

Grid.Model.SnapPoint = function(model, x, y, radius, snapRadius)
{
Grid.Model.SnapPoint.superclass.constructor.call(this, model, x, y, radius);
this.snapRadius = snapRadius;
this.setHoverable(false);
this.setFocusable(Grid.Model.Focusable.Never);
this.setMoveable(false);
this.setSelectable(false);
this.setVisible(false);
};
Lang.extend(Grid.Model.SnapPoint, Grid.Model.Circle);
Grid.Model.SnapPoint.prototype.getList = function()
{
return this.model.getSnapPoints();
};
Grid.Model.SnapPoint.prototype.getStyles = function()
{
return Grid.Model.getEmptyStyles();
}

// FILE: model.line.js (18c255fe) 3/7/2014 11:24:06 AM

Grid.Model.Line = function(model, source, target, dirType, style, transparent)
{
Grid.Model.Line.superclass.constructor.call(this, model);
this.source = source;
this.target = target;
this.style = style || 'solid';
if (Lang.isBoolean(dirType)) {
dirType = dirType ? 'forward' : 'none';
}
else if (Lang.isString(dirType)) {
dirType = dirType.toLowerCase();
if (dirType != 'none' && dirType != 'forward' && dirType != 'back' && dirType != 'both') {
throw new Error('Invalid line direction');
}
} else {
dirType = 'none';
}
if (transparent) {
source.makeTransparent(dirType == 'both' || dirType == 'back');
target.makeTransparent(dirType == 'both' || dirType == 'forward');
}
this.dirType = dirType;
};
Lang.extend(Grid.Model.Line, Grid.Model.Base);
Grid.Model.Line.prototype.getLength = function()
{
var p1 = this.source.get2D();
var p2 = this.target.get2D();
return p1.distanceFrom(p2);
};
Grid.Model.Line.prototype.intersect = function(line)
{
var a1 = this.source.get2D(),
a2 = this.target.get2D(),
b1 = line.source.get2D(),
b2 = line.target.get2D();
return (Intersection.intersectLineLine(a1, a2, b1, b2).status == 'Intersection');
};
Grid.Model.Line.prototype.distanceFrom = function(line)
{
if (this.intersect(line)) return 0;
var distances = [];
distances.push(this.source.distanceFromLine(line));
distances.push(this.target.distanceFromLine(line));
distances.push(line.source.distanceFromLine(this));
distances.push(line.target.distanceFromLine(this));
return Math.min.apply(Math, distances);
};
Grid.Model.Line.prototype.getSlope = function()
{
var denom = this.target.x - this.source.x;
var num = this.target.y - this.source.y;
if (denom == 0) return Infinity;
else if (num == 0) return 0.0;
else return num / denom;
};
Grid.Model.Line.prototype.getAngle = function()
{
var x1 = this.source.x,
y1 = this.source.y,
x2 = this.target.x,
y2 = this.target.y;
return Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
};
Grid.Model.Line.prototype.getAngle2 = function()
{
var x1 = this.source.x,
y1 = this.source.y,
x2 = this.target.x,
y2 = this.target.y;
var radians = (x1 <= x2) ? Math.atan2(y2 - y1, x2 - x1) : Math.atan2(y1 - y2, x1 - x2);
var degrees = (radians * 180 / Math.PI);
return degrees;
};
Grid.Model.Line.prototype.isParallelTo = function(line, tolerance) {
var angleTolerance = 0.05;
var line1Vertical = false;
var line1Horizontal = false;
var line2Vertical = false;
var line2Horizontal = false;
var line1 = this;
var line2 = line;
if (line1.source.x >= line1.target.x) {
if (Math.abs(line1.source.x - line1.target.x) < .25) {
line1Vertical = true;
}
} else if (Math.abs(line1.target.x - line1.source.x) < .25) {
line1Vertical = true;
}
if (line2.source.x >= line2.target.x) {
if (Math.abs(line2.source.x - line2.target.x) < .25) {
line2Vertical = true;
}
} else if (Math.abs(line2.target.x - line2.source.x) < .25) {
line2Vertical = true;
}
if (line1.source.y >= line1.target.y) {
if (Math.abs(line1.source.y - line1.target.y) < .25) {
line1Horizontal = true;
}
} else if (Math.abs(line1.target.y - line1.source.y) < .25) {
line1Horizontal = true;
}
if (line2.source.y >= line2.target.y) {
if (Math.abs(line2.source.y - line2.target.y) < .25) {
line2Horizontal = true;
}
} else if (Math.abs(line2.target.y - line2.source.y) < .25) {
line2Horizontal = true;
}
if ((line1Vertical && line2Vertical) || (line1Horizontal && line2Horizontal)) {
return true;
}
if (!line1Vertical && !line2Vertical) {
var slope1 = (line1.target.y - line1.source.y) / (line1.target.x - line1.source.x);
var slope2 = (line2.target.y - line2.source.y) / (line2.target.x - line2.source.x);
if (slope1 == slope2) return true;
}
var distance = function(x, y) {
return (Math.sqrt(Math.pow((x), 2) + Math.pow((y), 2)));
};
var newX1 = line1.target.x - line1.source.x;
var newY1 = line1.target.y - line1.source.y;
var newX2 = line2.target.x - line2.source.x;
var newY2 = line2.target.y - line2.source.y;
var dotProd = newX1 * newX2 + newY1 * newY2;
var distance1 = distance(newX1, newY1);
var distance2 = distance(newX2, newY2);
var lengthProd = distance1 * distance2;
if (Math.abs(dotProd) == Math.abs(lengthProd)) return true;
var theta = angleTolerance + 1;
if (lengthProd != 0) theta = Math.acos(Math.abs(dotProd / lengthProd));
if (theta <= angleTolerance) return true;
return false;
};
Grid.Model.Line.prototype.getLongestLine = function(line)
{
var lines = [];
var d1 = this.source.distanceFrom(line.source);
var d2 = this.source.distanceFrom(line.target);
var start, end;
if (d1 < d2)
{
start = line.source;
end = line.target;
}
else
{
start = line.target;
end = line.source;
}
lines[0] = new Grid.Model.Line(this.model, start, end);
lines[1] = new Grid.Model.Line(this.model, this.source, end);
lines[2] = new Grid.Model.Line(this.model, start, this.target);
lines[3] = new Grid.Model.Line(this.model, end, this.target);
var length = this.getLength();
var longest = this;
for (var i = 0; i < 4; i++)
{
var l = lines[i].getLength();
if (lines[i].getLength() > length)
{
longest = lines[i];
length = l;
}
}
return longest;
};
Grid.Model.Line.prototype.getInfo = function()
{
var x1 = this.source.x,
y1 = this.source.y,
r1 = this.source.radius,
t1 = 1;
var x2 = this.target.x,
y2 = this.target.y,
r2 = this.target.radius,
t2 = 1;
var radians = Math.atan2(y2 - y1, x2 - x1);
var sourceOffset = -2;
var targetOffset = (this.dirType == 'none') ? -2 : -1;
if (!this.source.isTransparent()) {
x1 = x1 + (Math.cos(radians) * ((r1 + t1) + sourceOffset));
y1 = y1 + (Math.sin(radians) * ((r1 + t1) + sourceOffset));
}
if (!this.target.isTransparent()) {
x2 = x2 - (Math.cos(radians) * ((r2 + t2) + targetOffset));
y2 = y2 - (Math.sin(radians) * ((r2 + t2) + targetOffset));
}
var angle = (radians / (2 * Math.PI)) * 360; // radians to degrees
return {x1: x1, y1: y1, x2: x2, y2: y2, angle: angle };
};
Grid.Model.Line.prototype.getStyles = function()
{
return {
'fill': 'none',
'stroke': 'red',
'stroke-width': '1',
'stroke-dasharray': (this.style == 'dashed') ? '5, 5' : ''
};
};
Grid.Model.Line.prototype.getArrowStyles = function()
{
return {
'stroke-width': '1.3'
};
};
Grid.Model.Line.prototype.getElementGroup = function() { return 'lines'; };
Grid.Model.Line.prototype.createElement = function(view)
{
var id = this.getID();
var lineInfo = this.getInfo();
var lineElement = view.createElement('line', {
'id': id,
'x1': lineInfo.x1,
'y1': lineInfo.y1,
'x2': lineInfo.x2,
'y2': lineInfo.y2
});
this.appendElement(view, lineElement);
if (this.dirType == 'forward' || this.dirType == 'both')
{
this._createArrowElement(view, id + '_arrow1', lineInfo.x2, lineInfo.y2, lineInfo.angle);
}
if (this.dirType == 'both')
{
this._createArrowElement(view, id + '_arrow2', lineInfo.x1, lineInfo.y1, (lineInfo.angle - 180));
}
return lineElement;
};
Grid.Model.Line.prototype._getArrowPath = function(x, y)
{
var size = 6;
return 'M' + x + ' ' + y + ' L' + (x - size) + ' ' + (y - size) + ' M' + (x - size) + ' ' + (y + size) + ' L' + x + ' ' + y;
};
Grid.Model.Line.prototype._createArrowElement = function(view, id, x, y, angle)
{
var path = this._getArrowPath(x, y);
var arrowElement = view.createElement('path', {
'id': id,
'd': path,
'transform': 'rotate(' + angle + ', ' + x + ', ' + y + ')'
});
var lineStyles = this.getStyles();
var arrowStyles = this.getArrowStyles();
YAHOO.lang.augmentObject(arrowStyles, lineStyles, false);
view.setAttributes(arrowElement, arrowStyles);
view.appendChild('arrows', arrowElement);
return arrowElement;
};
Grid.Model.Line.prototype.moveElement = function(view)
{
var id = this.getID();
var lineInfo = this.getInfo();
var lineElement = view.getElementById(id);
if (!lineElement) throw new Error('Cannot move the line ' + id + ' because it does not exist');
view.setAttributes(lineElement, {
'x1': lineInfo.x1,
'y1': lineInfo.y1,
'x2': lineInfo.x2,
'y2': lineInfo.y2
});
if (this.dirType == 'forward' || this.dirType == 'both')
{
this._updateArrowElement(view, id + '_arrow1', lineInfo.x2, lineInfo.y2, lineInfo.angle);
}
if (this.dirType == 'both')
{
this._updateArrowElement(view, id + '_arrow2', lineInfo.x1, lineInfo.y1, (lineInfo.angle - 180));
}
};
Grid.Model.Line.prototype._updateArrowElement = function(view, id, x, y, angle)
{
var arrowElement = view.getElementById(id);
if (!arrowElement) throw new Error('Cannot move the arrow ' + id + ' because it does not exist');
var path = this._getArrowPath(x, y);
view.setAttributes(arrowElement, {
'd': path,
'transform': 'rotate(' + angle + ', ' + x + ', ' + y + ')'
});
};
Grid.Model.Line.prototype.removeElement = function(view)
{
var id = this.getID();
Grid.Model.Line.superclass.removeElement.call(this, view);
if (this.dirType == 'forward' || this.dirType == 'both') view.removeElement(id + '_arrow1');
if (this.dirType == 'both') view.removeElement(id + '_arrow2');
};
Grid.Model.Line.prototype.getElementGroup = function() { return 'lines'; };
Grid.Model.Line.prototype.createElement = function(view)
{
var id = this.getID();
var lineInfo = this.getInfo();
var lineElement = view.createElement('line', {
'id': id,
'x1': lineInfo.x1,
'y1': lineInfo.y1,
'x2': lineInfo.x2,
'y2': lineInfo.y2
});
this.appendElement(view, lineElement);
if (this.dirType == 'forward' || this.dirType == 'both')
{
this._createArrowElement(view, id + '_arrow1', lineInfo.x2, lineInfo.y2, lineInfo.angle);
}
if (this.dirType == 'both')
{
this._createArrowElement(view, id + '_arrow2', lineInfo.x1, lineInfo.y1, (lineInfo.angle - 180));
}
return lineElement;
};
Grid.Model.Line.prototype._getArrowPath = function(x, y)
{
var size = 6;
return 'M' + x + ' ' + y + ' L' + (x - size) + ' ' + (y - size) + ' M' + (x - size) + ' ' + (y + size) + ' L' + x + ' ' + y;
};
Grid.Model.Line.prototype._createArrowElement = function(view, id, x, y, angle)
{
var path = this._getArrowPath(x, y);
var arrowElement = view.createElement('path', {
'id': id,
'd': path,
'transform': 'rotate(' + angle + ', ' + x + ', ' + y + ')'
});
var lineStyles = this.getStyles();
var arrowStyles = this.getArrowStyles();
YAHOO.lang.augmentObject(arrowStyles, lineStyles, false);
view.setAttributes(arrowElement, arrowStyles);
view.appendChild('arrows', arrowElement);
return arrowElement;
};
Grid.Model.Line.prototype.moveElement = function(view)
{
var id = this.getID();
var lineInfo = this.getInfo();
var lineElement = view.getElementById(id);
if (!lineElement) throw new Error('Cannot move the line ' + id + ' because it does not exist');
view.setAttributes(lineElement, {
'x1': lineInfo.x1,
'y1': lineInfo.y1,
'x2': lineInfo.x2,
'y2': lineInfo.y2
});
if (this.dirType == 'forward' || this.dirType == 'both')
{
this._updateArrowElement(view, id + '_arrow1', lineInfo.x2, lineInfo.y2, lineInfo.angle);
}
if (this.dirType == 'both')
{
this._updateArrowElement(view, id + '_arrow2', lineInfo.x1, lineInfo.y1, (lineInfo.angle - 180));
}
};
Grid.Model.Line.prototype._updateArrowElement = function(view, id, x, y, angle)
{
var arrowElement = view.getElementById(id);
if (!arrowElement) throw new Error('Cannot move the arrow ' + id + ' because it does not exist');
var path = this._getArrowPath(x, y);
view.setAttributes(arrowElement, {
'd': path,
'transform': 'rotate(' + angle + ', ' + x + ', ' + y + ')'
});
};
Grid.Model.Line.prototype.removeElement = function(view)
{
var id = this.getID();
Grid.Model.Line.superclass.removeElement.call(this, view);
if (this.dirType == 'forward' || this.dirType == 'both') view.removeElement(id + '_arrow1');
if (this.dirType == 'both') view.removeElement(id + '_arrow2');
};

// FILE: model.rectangle.js (fee59fba) 3/7/2014 11:24:06 AM

Grid.Model.Rectangle = function(model, x, y, width, height)
{
Grid.Model.Rectangle.superclass.constructor.call(this, model, x, y);
this.width = width || 0;
this.height = height || 0;
this.setHoverable(false);
this.setFocusable(Grid.Model.Focusable.Manual);
this.setMoveable(true);
this.setSelectable(false);
};
Lang.extend(Grid.Model.Rectangle, Grid.Model.Position);
Grid.Model.Rectangle.prototype.getSize = function() { return this.width * this.height; };
Grid.Model.Rectangle.prototype.getBoundingRect = function(x, y)
{
if (!YAHOO.lang.isNumber(x)) x = this.x;
if (!YAHOO.lang.isNumber(y)) y = this.y;
var topLeftX = x;
var topLeftY = y;
var bottomRightX = (topLeftX + this.width);
var bottomRightY = (topLeftY + this.height);
return {
width: this.width,
height: this.height,
left: topLeftX,
top: topLeftY,
right: bottomRightX,
bottom: bottomRightY
};
};
Grid.Model.Rectangle.prototype.getFixedCoords = function(moveX, moveY)
{
var rect = this.getBoundingRect(moveX, moveY);
var canvasWidth = this.model.options.canvasWidth;
var canvasHeight = this.model.options.canvasHeight;
if (rect.left < 0) moveX = 0;
if (rect.top < 0) moveY = 0;
if (rect.right > canvasWidth) moveX = (canvasWidth - this.width);
if (rect.bottom > canvasHeight) moveY = (canvasHeight - this.height);
return { x: moveX, y: moveY };
};
Grid.Model.Rectangle.prototype.setCoords = function(coords)
{
coords = coords.split(',');
for (var i = 0; i < coords.length; i++) { coords[i] = (coords[i] * 1); }
var x1 = coords[0];
var y1 = coords[1];
var x2 = coords[2];
var y2 = coords[3];
this.x = x1;
this.y = y1;
this.width = (x2 - x1);
this.height = (y2 - y1);
this.update();
};
Grid.Model.Rectangle.prototype.getCoords = function()
{
var boundingRect = this.getBoundingRect();
return YAHOO.lang.substitute('{left}, {top}, {right}, {bottom}', boundingRect);
};
Grid.Model.Rectangle.prototype.createElement = function(view)
{
var id = this.getID();
var element = view.createElement('rect', { 'id': id });
this.appendElement(view, element);
return element;
};
Grid.Model.Rectangle.prototype.updateElement = function(view)
{
var element = this.getElement(view);
var boundingRect = this.getBoundingRect();
view.setAttributes(element, {
'x': boundingRect.left,
'y': boundingRect.top,
'width': boundingRect.width,
'height': boundingRect.height
});
Grid.Model.Rectangle.superclass.updateElement.call(this, view);
};
Grid.Model.Rectangle.prototype.moveElement = function(view)
{
var element = this.getElement(view);
var boundingRect = this.getBoundingRect();
view.setAttributes(element,
{
'x': boundingRect.left,
'y': boundingRect.top
});
};

// FILE: model.image.js (1c1be2af) 3/7/2014 11:24:06 AM

Grid.Model.Image = function(model, name, x, y, width, height)
{
Grid.Model.Image.superclass.constructor.call(this, model, x, y, width, height);
this.name = name;
this.setHoverable(false);
this.setFocusable(Grid.Model.Focusable.Manual);
this.setMoveable(true);
this.setSelectable(false);
};
Lang.extend(Grid.Model.Image, Grid.Model.Rectangle);
Grid.Model.Image.prototype.getBoundingRect = function(x, y)
{
if (!YAHOO.lang.isNumber(x)) x = this.x;
if (!YAHOO.lang.isNumber(y)) y = this.y;
var topLeftX = (x - Math.round(this.width / 2));
var topLeftY = (y - this.height);
var bottomRightX = (topLeftX + this.width);
var bottomRightY = (topLeftY + this.height);
return {
width: this.width,
height: this.height,
left: topLeftX,
top: topLeftY,
right: bottomRightX,
bottom: bottomRightY
};
};
Grid.Model.Image.prototype.getFixedCoords = function(moveX, moveY)
{
var rect = this.getBoundingRect(moveX, moveY);
var canvasWidth = this.model.options.canvasWidth;
var canvasHeight = this.model.options.canvasHeight;
if (rect.left < 0) moveX = Math.round(this.width / 2);
if (rect.top < 0) moveY = this.height;
if (rect.right > canvasWidth) moveX = (canvasWidth - Math.round(this.width / 2));
if (rect.bottom > canvasHeight) moveY = canvasHeight;
var tolerance = 4;
var rec = this.otherImageInSamePlace(moveX, moveY, tolerance);
while (rec != null)
{
moveX = rec.x + tolerance;
moveY = rec.y + tolerance;
rec = this.otherImageInSamePlace(moveX, moveY, tolerance);
}
return { x: moveX, y: moveY };
};
Grid.Model.Image.prototype.getPaletteImage = function()
{
var paletteImages = this.model.getPaletteImages();
for (var i = 0; i < paletteImages.length; i++)
{
var paletteImage = paletteImages[i];
if (paletteImage.name == this.name) return paletteImage;
}
return null;
};
Grid.Model.Image.prototype.otherImageInSamePlace = function(realX, realY, tolerance)
{
var p = new Point2D(realX, realY);
var size = this.getSize();
var images = this.model.getImages();
for(var i = 0; i < images.length; i++)
{
var rec = images[i];
if (rec == this) continue;
var distance = rec.get2D().distanceFrom(p);
if (distance < tolerance)
{
var sizeDif = Math.abs(rec.getSize() - size);
if (sizeDif < (.15 * size)) return rec;
}
}
return null;
};
Grid.Model.Image.prototype.getStyles = function()
{
return null;
};
Grid.Model.Image.prototype.getBorderStyles = function()
{
return {
'stroke': 'blue',
'stroke-width': '2',
'fill': 'none'
};
};
Grid.Model.Image.prototype.toString = function() { return this.name; };
Grid.Model.Image.prototype.getElementGroup = function() { return 'images'; };
Grid.Model.Image.prototype.createElement = function(view)
{
var id = this.getID();
var imageElement = view.createElement('image', {
'id': id,
'transform': 'translate(-0.5, -0.5)'
});
var paletteImage = this.getPaletteImage();
imageElement.setAttributeNS(XLINK_NS, 'xlink:href', paletteImage.url);
this.appendElement(view, imageElement);
return imageElement;
};
Grid.Model.Image.prototype.moveElement = function(view)
{
Grid.Model.Image.superclass.moveElement.call(this, view);
if (this.isFocused()) this._updateBorderElement(view);
};
Grid.Model.Image.prototype.updateElement = function(view)
{
Grid.Model.Image.superclass.updateElement.call(this, view);
if (this.isFocused()) this._updateBorderElement(view);
else this._removeBorderElement(view);
};
Grid.Model.Image.prototype.removeElement = function(view)
{
if (this.isFocused()) this._removeBorderElement(view);
Grid.Model.Image.superclass.removeElement.call(this, view);
};
Grid.Model.Image.prototype._updateBorderElement = function(view)
{
var id = this.getID();
var imageElement = view.getElementById(id);
var rect = this.getBoundingRect();
var borderID = imageElement.id + '_border';
var borderElement = view.getElementById(borderID);
if (borderElement == null)
{
borderElement = view.createElement('rect', { 'id': borderID });
var borderStyles = this.getBorderStyles();
view.setAttributes(borderElement, borderStyles);
view.appendChild('imageborders', borderElement);
}
view.setAttributes(borderElement,
{
'x': rect.left - 2,
'y': rect.top - 2,
'width': rect.width + 4,
'height': rect.height + 4
});
};
Grid.Model.Image.prototype._removeBorderElement = function(view)
{
var id = this.getID();
view.removeElement(id + '_border');
};

// FILE: model.staticimage.js (1dc2d357) 3/7/2014 11:24:06 AM

Grid.Model.StaticImage = function(model, url, x, y, width, height)
{
Grid.Model.StaticImage.superclass.constructor.call(this, model, x, y, width, height);
this.url = url;
this.setHoverable(false);
this.setFocusable(Grid.Model.Focusable.None);
this.setMoveable(false);
this.setSelectable(false);
};
Lang.extend(Grid.Model.StaticImage, Grid.Model.Rectangle);
Grid.Model.StaticImage.prototype.getStyles = function()
{
return null;
};
Grid.Model.BackgroundImage = function(model, url, x, y, width, height)
{
Grid.Model.BackgroundImage.superclass.constructor.call(this, model, url, x, y, width, height);
};
Lang.extend(Grid.Model.BackgroundImage, Grid.Model.StaticImage);
Grid.Model.StaticImage.prototype.getElementGroup = function() { return 'staticimages'; };
Grid.Model.StaticImage.prototype.createElement = function(view)
{
var id = this.getID();
var element = view.createElement('image', {
'id': id,
'transform': 'translate(-0.5, -0.5)'
});
element.setAttributeNS(XLINK_NS, 'xlink:href', this.url);
this.appendElement(view, element);
return element;
};

// FILE: model.label.js (859ad8a1) 3/7/2014 11:24:06 AM

Grid.Model.Label = function(model, x, y, text, fontSize, fontFamily)
{
Grid.Model.Label.superclass.constructor.call(this, model, x, y);
this.text = text;
this.fontSize = fontSize || '12';
this.fontFamily = fontFamily || 'Arial';
};
Lang.extend(Grid.Model.Label, Grid.Model.Position);
Grid.Model.Label.prototype.getStyles = function()
{
return {
"font-size": this.fontSize,
"font-family": this.fontFamily,
"fill": "black"
};
};
Grid.Model.Label.prototype.getElementGroup = function() { return 'labels'; };
Grid.Model.Label.prototype.createElement = function(view)
{
var id = this.getID();
var label = view.createElement('text', {
'id': id,
'x': this.x,
'y': this.y
});
this.appendElement(view, label);
};
Grid.Model.Label.prototype.updateElement = function(view)
{
var labelElement = this.getElement(view);
view.setText(labelElement.id, this.text);
Grid.Model.Label.superclass.updateElement.call(this, view);
};

// FILE: model.region.js (63277355) 3/7/2014 11:24:06 AM

Grid.Model.buildRegion = function(entityClass, regionName)
{
var regionClass = function()
{
var args = Array.prototype.slice.call(arguments, 0);
regionClass.superclass.constructor.apply(this, args);
this.name = regionName;
this._currentEvent = null;
this._events = {};
};
Lang.extend(regionClass, entityClass, Grid.Model.Region);
regionClass.prototype.isSelectable = function()
{
if (this.isSelected()) return true;
var regionGroups = this.getGroups();
for (var i = 0; i < regionGroups.length; i++)
{
var regionGroup = regionGroups[i];
if (regionGroup.isMaxMet()) return false;
}
return regionClass.superclass.isSelectable.call(this);
};
regionClass.prototype.select = function()
{
if (!this.isSelected()) this.deselectConflicts();
return regionClass.superclass.select.call(this);
};
return regionClass;
};
Grid.Model.Region = {};
Grid.Model.Region.getGroups = function()
{
var refGroups = [];
var regionGroups = this.model.getRegionGroups();
for (var i = 0; i < regionGroups.length; i++)
{
var regionGroup = regionGroups[i];
if (regionGroup.containsRegion(this))
{
refGroups.push(regionGroup);
}
}
return refGroups;
};
Grid.Model.Region.isOrphan = function()
{
return (this.getGroups().length == 0);
};
Grid.Model.Region.deselectConflicts = function()
{
var refGroups = this.getGroups();
var deselectRegions = [];
for (var i = 0; i < refGroups.length; i++)
{
var refGroup = refGroups[i];
var selectedRegions = refGroup.getSelectedRegions();
if (selectedRegions.length > 0)
{
if (refGroup.max == 1) deselectRegions.push(selectedRegions[0]);
else if (refGroup.isMaxMet()) return false;
}
}
for (var i = 0; i < deselectRegions.length; i++)
{
deselectRegions[i].deselect();
}
return true;
};
Grid.Model.Region.getEvent = function(name) { return this._events[name]; };
Grid.Model.Region.hasEvent = function(name) { return (this.getEvent(name) != null); };
Grid.Model.Region.createEvent = function(name)
{
this._events[name] = new Grid.Model.RegionEvent(this, name);
return this.getEvent(name);
};
Grid.Model.Region.deleteEvent = function(event)
{
event.deleteImage();
event.deleteLabel();
if (this._currentEvent == event) this._currentEvent = null;
delete(this._events[event.name]);
};
Grid.Model.Region.getCurrentEvent = function() { return this._currentEvent; };
Grid.Model.Region.setCurrentEvent = function(name)
{
if (this._currentEvent != null)
{
var entities = this._currentEvent.getEntities();
for (var i = 0; i < entities.length; i++)
{
entities[i].hide();
}
this._currentEvent = null;
}
this._currentEvent = this.getEvent(name);
if (this._currentEvent != null)
{
var entities = this._currentEvent.getEntities();
for (var i = 0; i < entities.length; i++)
{
entities[i].show();
}
return true;
}
return false;
};
Grid.Model.Region.getEvents = function()
{
var eventList = [];
for (var evt in this._events)
{
eventList.push(this._events[evt]);
}
return eventList;
};
Grid.Model.Region.getStyles = function()
{
var regionEvent = this.getCurrentEvent();
if (regionEvent != null)
{
return regionEvent.getStyles();
}
else
{
return Grid.Model.getEmptyStyles();
}
};
Grid.Model.Region.updateElement = function(view)
{
if (this.isSelected() && this.isFocused() && this.hasEvent('hoverselect'))
{
this.setCurrentEvent('hoverselect');
}
else if (this.isSelected() && this.hasEvent('select'))
{
this.setCurrentEvent('select');
}
else if (this.isFocused() && this.hasEvent('hover'))
{
this.setCurrentEvent('hover');
}
else if (this.hasEvent('unselect'))
{
this.setCurrentEvent('unselect');
}
else
{
this.setCurrentEvent(null);
}
this.constructor.superclass.updateElement.call(this, view);
};

// FILE: model.region.group.js (16ed26c2) 3/7/2014 11:24:06 AM

Grid.Model.RegionGroup = function(model, name, min, max)
{
this.model = model;
this.name = name || '';
this.min = min || 0;
this.max = max || 0;
this._regions = [];
};
Grid.Model.RegionGroup.prototype.getRegions = function() { return this._regions; };
Grid.Model.RegionGroup.prototype.getRegion = function(name)
{
var regions = this.getRegions();
for (var i = 0; i < regions.length; i++)
{
var region = regions[i];
if (region.name == name) return region;
}
return null;
};
Grid.Model.RegionGroup.prototype.getSelectedRegions = function()
{
var regions = this.getRegions();
var selectedRegions = [];
for (var i = 0; i < regions.length; i++)
{
var region = regions[i];
if (region.isSelected()) selectedRegions.push(region);
}
return selectedRegions;
};
Grid.Model.RegionGroup.prototype.addRegion = function(region)
{
this._regions.push(region);
};
Grid.Model.RegionGroup.prototype.containsRegion = function(region)
{
return (this._regions.indexOf(region) > -1);
};
Grid.Model.RegionGroup.prototype.removeRegion = function(region, deleteOrphan)
{
Grid.Model.arrayRemove(this._regions, region);
if (deleteOrphan && region.getGroups().length == 0)
{
this.model.deleteRegion(region);
}
};
Grid.Model.RegionGroup.prototype.isMaxMet = function()
{
var selectedRegions = this.getSelectedRegions();
return (this.max > 0 && selectedRegions.length >= this.max);
};

// FILE: model.region.event.js (ebfd2be4) 3/7/2014 11:24:06 AM

Grid.Model.RegionEvent = function(region, name)
{
this.region = region;
this.name = name;
this._image = null;
this._label = null;
this._styles = Grid.Model.getEmptyStyles();
};
Grid.Model.RegionEvent.prototype.getStyles = function() { return this._styles; };
Grid.Model.RegionEvent.prototype.setStyles = function(newStyles)
{
YAHOO.lang.augmentObject(this._styles, newStyles, true);
};
Grid.Model.RegionEvent.prototype.getEntities = function()
{
var entities = [];
if (this._image != null) entities.push(this._image);
if (this._label != null) entities.push(this._label);
return entities;
};
Grid.Model.RegionEvent.prototype.getImage = function() { return this._image; };
Grid.Model.RegionEvent.prototype.setImage = function(url, x, y, width, height)
{
if (this._image != null) this.deleteImage();
this._image = this.region.model.addStaticImage(url, x, y, width, height);
this._image.hide();
};
Grid.Model.RegionEvent.prototype.deleteImage = function()
{
if (this._image == null) return false;
this.region.model.deleteStaticImage(this._image);
this._image = null;
return true;
};
Grid.Model.RegionEvent.prototype.getLabel = function() { return this._label; };
Grid.Model.RegionEvent.prototype.setLabel = function(x, y, text)
{
if (this._label != null) this.deleteLabel();
this._label = this.region.model.addLabel(x, y, text);
this._label.hide();
};
Grid.Model.RegionEvent.prototype.deleteLabel = function()
{
if (this._label == null) return false;
this.region.model.deleteEntity(this._label);
this._label = null;
return true;
};
(function()
{
if (YAHOO.env.ua.gecko > 0) return;
Grid.Model.getEmptyStyles = function()
{
return {
'fill': 'white',
'fill-opacity': '0',
'stroke': 'white',
'stroke-width': '0',
'stroke-opacity': '0',
'stroke-dasharray': ''
};
};
Grid.Model.getDefaultStyles = function()
{
return {
'fill': 'white',
'fill-opacity': '0',
'stroke': 'red',
'stroke-width': '1',
'stroke-opacity': '1',
'stroke-dasharray': ''
};
};
var fixStyles = function(styles)
{
if (styles['stroke-opacity'] == null ||
styles['stroke-opacity'] == '')
{
var strokeWidth = parseInt(styles['stroke-width']);
if (strokeWidth > 0) styles['stroke-opacity'] = '1';
else if (strokeWidth === 0) styles['stroke-opacity'] = '0';
}
};
Grid.Model.RegionEvent.prototype.setStyles = function(newStyles)
{
YAHOO.lang.augmentObject(this._styles, newStyles, true);
fixStyles(this._styles);
};
})();

// FILE: model.palette.js (f7be00de) 3/7/2014 11:24:06 AM

Grid.Model.PaletteImage = function(model, name, url, width, height)
{
Grid.Model.PaletteImage.superclass.constructor.call(this, model);
this.name = name;
this.url = url;
this.width = width || 0;
this.height = height || 0;
this.loaded = false;
};
Lang.extend(Grid.Model.PaletteImage, Grid.Model.Base);
Grid.Model.PaletteImage.prototype.getImages = function()
{
var paletteCanvasImages = [];
var images = this.model.getImages();
for(var i = 0; i < images.length; i++)
{
var image = images[i];
if (image.name == this.name)
{
paletteCanvasImages.push(image);
}
}
return paletteCanvasImages;
};
Grid.Model.PaletteImage.prototype.toString = function() { return this.name; };

// FILE: view.js (2b2f9d1b) 3/7/2014 11:24:06 AM

var SVG_NS = "http://www.w3.org/2000/svg";
var XLINK_NS = "http://www.w3.org/1999/xlink";
var GRID_NS = 'http://www.air.org/2010/grid/';
Grid.View = function(svgFile)
{
this.svgFile = svgFile;
this.paletteImgIndex = 0;
this.paletteCenter = false;
this.paletteScale = false;
this.width = 600;
this.height = 500;
this._svgObject = null;
this._svgDoc = null;
this._svgWin = null;
this._svgRoot = null;
this._svgElement = null;
this._zoomLevel = 1;
this._domCache = {};
this.svgReady = false;
this.svgLoaded = false;
this._suspendRedrawEnabled = false;
this._debug = false;
this._fixedOffset = false;
this._layout = null;
if (Grid.Utils.hasSVGWeb()) {
ErrorHandler.wrapFunctions(this, [
'setAttributes', 'createElement',
'createPoint', 'createSnapPoint', 'movePoint', 'createLine', 'moveLine'
]);
}
};
Grid.View.prototype.render = function(id)
{
var parent = YAHOO.util.Dom.get(id);
var view = this;
var ready = function() {
view.svgReady = true;
view._create(parent);
};
if (Grid.Utils.hasSVGWeb()) {
if (svgweb.pageLoaded) {
ready();
} else {
window.onsvgload = function() { ready(); };
}
}
else if (Grid.Utils.hasSVGNative()) {
ready();
} else {
throw new Error('This browser does not have support for SVG');
}
};
Grid.View.prototype._fixOffset = function()
{
if (this._fixedOffset) return;
Grid.Utils.fixOffset(this._svgObject);
this._fixedOffset = true;
};
Grid.View.prototype._addCache = function(element) {
if (typeof element.id == 'string') this._domCache[element.id] = element;
};
Grid.View.prototype._removeCache = function(element) {
if (typeof element.id == 'string') delete(this._domCache[element.id]);
};
Grid.View.prototype.getElementById = function(id) {
if (this._svgDoc == null) return null;
if (!id) return null;
if (id.nodeType) return id;
if (typeof id == 'string') {
var element = this._domCache[id];
if (element) return element;
else return this._svgDoc.getElementById(id);
}
return null;
};
Grid.View.prototype.getElementsByTagName = function(tagName)
{
if (this._svgDoc == null) return null;
return this._svgDoc.getElementsByTagNameNS(SVG_NS, tagName);
};
Grid.View.prototype.createElement = function(name, attrs) {
if (typeof name != 'string') return false;
var element = null;
if (attrs != null && typeof attrs.id == 'string') {
element = this.getElementById(attrs.id);
}
if (element == null) {
element = this._svgDoc.createElementNS(SVG_NS, name);
}
this.setAttributes(element, attrs);
if (this._debug && element.id) {
logger.debug('Created \'{nodeName}\' with id \'{id}\'', element);
}
this._addCache(element);
return element;
};
Grid.View.prototype.setAttributes = function(node, attrs)
{
if (typeof node == 'string') {
node = this.getElementById(node);
}
if (node == null) return false;
if (attrs == null) return false;
var handle = null;
if (this._suspendRedrawEnabled === true) {
try {
handle = this._svgRoot.suspendRedraw(10000);
} catch (ex) {}
}
for (var name in attrs) {
if (attrs.hasOwnProperty(name)) {
var value = attrs[name];
node.setAttribute(name, value);
}
}
if (handle != null) {
this._svgRoot.unsuspendRedraw(handle);
}
return true;
};
Grid.View.prototype.setAttribute = function(node, name, value)
{
if (typeof node == 'string') {
node = this.getElementById(node);
}
if (node == null) return false;
node.setAttribute(name, value);
return true;
};
Grid.View.prototype.appendChild = function(parent, element)
{
if (typeof parent == 'string') {
parent = this.getElementById(parent);
}
if (parent == null) {
logger.warn('Failed to append the element \'' + element.id + '\' because the parent was not found.');
return false;
}
parent.appendChild(element);
if (Grid.Utils.isSVGFlash()) {
if (parent.getAttribute('style') != '') {
this.setAttributes(element, {
'style': parent.getAttribute('style')
});
}
}
return true;
};
Grid.View.prototype.removeChild = function(parent, element)
{
parent.removeChild(element);
if (YAHOO.lang.isObject(element._fakeNode) &&
YAHOO.lang.isArray(element._fakeNode._listeners)) {
element._fakeNode._listeners = {};
}
};
Grid.View.prototype.removeChildren = function(parent)
{
if (typeof parent == 'string') {
parent = this.getElementById(parent);
}
while (parent && parent.firstChild) {
this.removeChild(parent, parent.firstChild);
}
};
Grid.View.prototype.removeElement = function(id)
{
var element = this.getElementById(id);
if (element == null) {
logger.warn('Cannot remove the element \'' + id + '\' because it does not exist');
return false;
}
this._removeCache(element);
if (element.parentNode != null) {
this.removeChild(element.parentNode, element);
}
if (this._debug) logger.debug('Removed \'{nodeName}\' with id \'{id}\'', element);
return true;
};
Grid.View.prototype.setText = function(id, text)
{
var element = this.getElementById(id);
if (element == null) return false;
this.removeChildren(element);
var textNode = this._svgDoc.createTextNode(text);
element.appendChild(textNode);
return true;
};
Grid.View.prototype.bringToFront = function(id)
{
var element = this.getElementById(id);
if (element == null) return false;
var parent = element.parentNode;
if (parent == null) return false;
this.removeChild(parent, element);
parent.appendChild(element);
return true;
};
Grid.View.prototype.zoom = function(scale) {
this._zoomLevel = scale = (scale || this._zoomLevel || 1);
var zoomedWidth = Math.round(this.width * scale);
var zoomedHeight = Math.round(this.height * scale);
if (this._svgElement) {
if (this._svgElement.width.baseVal) {
this._svgElement.width.baseVal.value = zoomedWidth;
this._svgElement.height.baseVal.value = zoomedHeight;
}
if (YAHOO.env.ua.android > 0) {
this._svgElement.setAttribute('width', zoomedWidth);
this._svgElement.setAttribute('height', zoomedHeight);
}
}
if (this._svgObject) {
this._svgObject.width = zoomedWidth;
this._svgObject.height = zoomedHeight;
}
var groupWrapper = this.getElementById('groupWrapper');
if (groupWrapper) {
var groupTransform = groupWrapper.getAttribute('transform');
var groupTranslate = groupTransform.split(' scale')[0];
this.setAttributes(groupWrapper, {
'transform': groupTranslate + ' scale(' + scale + ')'
});
}
};
Grid.View.prototype.translateElement = function(element, x, y)
{
if (typeof element == 'string') {
element = this.getElementById(element);
}
if (element == null) return null;
var matrix = element.getCTM().inverse();
x = matrix.a * x + matrix.c * y + matrix.e;
y = matrix.b * x + matrix.d * y + matrix.f;
return { x: x, y: y };
};
Grid.View.prototype.dispose = function()
{
if (this._svgObject && this._svgObject.parentNode) {
this._svgObject.parentNode.removeChild(this._svgObject);
}
this._svgObject = null;
this._svgDoc = null;
this._svgWin = null;
this._svgRoot = null;
this._svgElement = null;
this._domCache = null;
if (Grid.Utils.hasSVGWeb()) {
if (svgweb._removedNodes != null) {
for (var i = 0; i < svgweb._removedNodes.length; i++) {
var node = svgweb._removedNodes[i];
if (node._fakeNode) {
node._fakeNode._htcNode = null;
}
node._fakeNode = null;
node._handler = null;
svgweb._removedNodes[i] = null;
}
svgweb._removedNodes = [];
}
}
};
YAHOO.lang.augmentProto(Grid.View, EventLazyProvider);
if (window.svgweb && top != window) top.svgweb = window.svgweb;

// FILE: view.layout.js (e0dca6f2) 3/7/2014 11:24:06 AM

Grid.Layout = function() {
var containerPaddingTop = 0;
var containerPaddingRight = 0;
var containerPaddingBottom = 0;
var containerPaddingLeft = 0;
var canvasWidth = 0;
var canvasHeight = 0;
var canvasBorderOffset = 0;
var paletteWidth = 0;
var toolbarHeight = 0;
var feedbackHeight = 0;
var paletteGutter = 0;
var toolbarGutter = 0;
var feedbackGutter = 0;
this.setContainerPadding = function(top, right, bottom, left) {
containerPaddingTop = top;
containerPaddingRight = right;
containerPaddingBottom = bottom;
containerPaddingLeft = left;
};
this.setCanvasWidth = function(width) {
canvasWidth = width;
};
this.setCanvasHeight = function(height) {
canvasHeight = height;
};
this.setCanvasBorderOffset = function(offset) {
canvasBorderOffset = offset;
};
this.setPaletteWidth = function(width, gutter) {
paletteWidth = width;
paletteGutter = gutter;
};
this.setToolbarHeight = function(height, gutter) {
toolbarHeight = height;
toolbarGutter = gutter;
};
this.setFeedbackHeight = function(height, gutter) {
feedbackHeight = height;
feedbackGutter = gutter;
};
this.getCanvasWidth = function() {
return canvasWidth;
};
this.getCanvasHeight = function() {
return canvasHeight;
};
this.getCanvasBorderOffset = function() {
return canvasBorderOffset;
};
this.getToolbarWidth = function() {
return this.getToolbarHeight() > 0 ? this.getCanvasWidth() : 0;
};
this.getToolbarHeight = function() {
return toolbarHeight;
};
this.getToolbarGutter = function() {
return (toolbarHeight > 0) ? toolbarGutter : 0;
};
this.getFeedbackWidth = function() {
return this.getFeedbackHeight() > 0 ? this.getCanvasWidth() : 0;
};
this.getFeedbackHeight = function() {
return feedbackHeight;
};
this.getFeedbackGutter = function() {
return (feedbackHeight > 0) ? feedbackGutter : 0;
};
this._getWidth = function() {
return this.getPaletteWidth() + this.getPaletteGutter() + this.getCanvasWidth();
};
this._getHeight = function() {
return this.getToolbarHeight() + this.getToolbarGutter() + this.getCanvasHeight() +
this.getFeedbackGutter() + this.getFeedbackHeight();
};
this.getPaletteWidth = function() {
return paletteWidth;
};
this.getPaletteHeight = function() {
return this._getHeight();
};
this.getPaletteGutter = function() {
return (paletteWidth > 0) ? paletteGutter : 0;
};
this.getGridWidth = function() {
return this._getWidth() + containerPaddingLeft + containerPaddingRight;
};
this.getGridHeight = function() {
return this._getHeight() + containerPaddingTop  + containerPaddingBottom;
};
this.getContainerPaddingTop = function() {
return containerPaddingTop;
};
this.getContainerPaddingLeft = function() {
return containerPaddingLeft;
};
this.getContainerPaddingBottom = function() {
return containerPaddingBottom;
};
this.getContainerPaddingRight = function() {
return containerPaddingRight;
};
this.getPaletteX = function() {
return 0;
};
this.getPaletteY = function() {
return 0;
};
this.getToolbarX = function() {
return this.getPaletteWidth() + this.getPaletteGutter();
};
this.getToolbarY = function() {
return 0;
};
this.getCanvasX = function() {
return this.getPaletteWidth() + this.getPaletteGutter();
};
this.getCanvasY = function() {
return this.getToolbarHeight() + this.getToolbarGutter();
};
this.getFeedbackX = function() {
return this.getPaletteWidth() + this.getPaletteGutter();
};
this.getFeedbackY = function() {
return this.getToolbarHeight() + this.getToolbarGutter() + this.getCanvasHeight() + this.getFeedbackGutter();
};
};
Grid.Layout.debug = function(layout) {
console.log('Palette: width=%d height=%d x=%d y=%d visible=%s',
layout.getPaletteWidth(), layout.getPaletteHeight(), layout.getPaletteX(), layout.getPaletteY());
console.log('Toolbar: width=%d height=%d x=%d y=%d visible=%s',
layout.getToolbarWidth(), layout.getToolbarHeight(), layout.getToolbarX(), layout.getToolbarY());
console.log('Canvas: width=%d height=%d x=%d y=%d',
layout.getCanvasWidth(), layout.getCanvasHeight(), layout.getCanvasX(), layout.getCanvasY());
console.log('Feedback: width=%d height=%d x=%d y=%d visible=%s',
layout.getFeedbackWidth(), layout.getFeedbackHeight(), layout.getFeedbackX(), layout.getFeedbackY());
};
Grid.View.prototype.updateLayout = function(layout) {
this.setAttribute('groupPalette', 'transform', 'translate(' +
layout.getPaletteX() + ',' +
layout.getPaletteY() + ')');
this.setAttributes('backgroundPalette', {
'width': layout.getPaletteWidth(),
'height': layout.getPaletteHeight()
});
this.setAttribute('groupToolbar', 'transform', 'translate(' +
layout.getToolbarX() + ',' +
layout.getToolbarY() + ')');
this.setAttributes('backgroundToolbar', {
'width': layout.getToolbarWidth(),
'height': layout.getToolbarHeight()
});
this.setAttribute('groupCanvas', 'transform', 'translate(' +
layout.getCanvasX() + ',' +
layout.getCanvasY() + ')');
this.setAttributes('backgroundCanvas', {
'width': layout.getCanvasWidth(),
'height': layout.getCanvasHeight(),
'x': layout.getCanvasBorderOffset(),
'y': layout.getCanvasBorderOffset()
});
this.setAttribute('groupFeedback', 'transform', 'translate(' +
layout.getFeedbackX() + ',' +
layout.getFeedbackY() + ')');
this.setAttributes('backgroundFeedback', {
'width': layout.getFeedbackWidth(),
'height': layout.getFeedbackHeight()
});
this.setAttribute('groupWrapper', 'transform', 'translate(' +
(layout.getContainerPaddingLeft() + 0.5) + ',' +
(layout.getContainerPaddingTop() + 0.5) + ')');
this.width = layout.getGridWidth();
this.height = layout.getGridHeight();
this.zoom();
};

// FILE: view.loader.js (f8646ae0) 3/7/2014 11:24:06 AM

Grid.View.prototype._create = function(parentEl)
{
var view = this;
var elementDoc = parentEl.ownerDocument;
var elementWin = elementDoc.parentWindow || elementDoc.defaultView;
var isFrame = (window != elementWin);
if (Grid.Utils.hasSVGWeb() && elementWin && !elementWin.svgweb)
{
elementWin.svgweb = window.svgweb;
}
var pageUnloaded = function() {
view.dispose();
};
elementWin.addEventListener('unload', pageUnloaded, false);
if (this._inlineHtml) this._createInline(parentEl);
else this._createObject(parentEl);
};
Grid.View.prototype._createObject = function(parentEl)
{
var svgID = parentEl.id + 'Container';
var svgObject = document.createElement('object', true);
svgObject.setAttribute('id', svgID);
svgObject.setAttribute('name', svgID);
svgObject.setAttribute('type', 'image/svg+xml');
svgObject.setAttribute('data', this.svgFile);
var view = this;
var loaded = function() { view._loadedObject(this); };
if (Grid.Utils.hasSVGWeb())
{
svgObject.addEventListener('SVGLoad', loaded, false);
svgweb.appendChild(svgObject, parentEl);
}
else
{
svgObject.addEventListener('load', loaded, false);
parentEl.appendChild(svgObject);
}
};
Grid.View.prototype._loadedObject = function(svgObject)
{
this._svgObject = svgObject;
this._svgDoc = this._svgObject.contentDocument;
this._svgWin = this._svgDoc.defaultView;
this._svgElement = this._svgDoc.documentElement;
this._svgRoot = this._svgDoc.rootElement;
this.svgLoaded = true;
this.fireLazy('loaded');
};
Grid.View.prototype._createInline = function(parentEl)
{
var callback =
{
success: this._loadedInline,
failure: this._failedInline,
scope: this,
argument: parentEl
};
YAHOO.util.Connect.asyncRequest('GET', this.svgFile, callback);
};
Grid.View.prototype._loadedInline = function(xhrObj)
{
var parentEl = xhrObj.argument;
var svgText = xhrObj.responseText;
parentEl.innerHTML = svgText;
this._svgElement = YAHOO.util.Dom.getChildren(parentEl)[0];
this._svgRoot = this._svgElement;
this._svgObject = this._svgElement;
this._svgDoc = this._svgElement.ownerDocument;
this._svgWin = this._svgDoc.parentWindow || this._svgDoc.defaultView;
this.svgLoaded = true;
this.fireLazy('loaded');
};

// FILE: view.canvas.js (285f52e5) 3/7/2014 11:24:06 AM

Grid.View.prototype.getCanvasResolution = function()
{
var backgroundCanvas = this.getElementById('backgroundCanvas');
return {
width: backgroundCanvas.getAttribute("width") * 1,
height: backgroundCanvas.getAttribute("height") * 1
};
};
Grid.View.prototype.createGridLines = function(spacing)
{
this.clearGridLines();
if (!YAHOO.lang.isNumber(spacing) || spacing == 0) return false;
var gridLines = this.getElementById('gridlines');
var createLine = function(x1, y1, x2, y2)
{
var lineElement = this.createElement('line', {
'x1': x1,
'y1': y1,
'x2': x2,
'y2': y2
});
gridLines.appendChild(lineElement);
};
var res = this.getCanvasResolution();
for (var x = 0; x <= res.width; x += spacing)
{
createLine.call(this, x, 0, x, res.height);
}
for (var y = 0; y <= res.height; y += spacing)
{
createLine.call(this, 0, y, res.width, y);
}
return true;
};
Grid.View.prototype.clearGridLines = function()
{
this.removeChildren('gridlines');
};
Grid.View.prototype.setCanvasCursor = function(type)
{
var groupCanvas = this.getElementById('groupCanvas');
this.setAttributes(groupCanvas, {
'cursor': type
});
};
Grid.View.prototype.setCanvasCustomCursor = function(url, x, y)
{
var groupCanvas = this.getElementById('groupCanvas');
x = x || 0;
y = y || 0;
this.setAttributes(groupCanvas, {
'cursor': 'url(\'' + url + '\') ' + x + ' ' + y + ' , crosshair'
});
};

// FILE: view.palette.js (0877ee20) 3/7/2014 11:24:06 AM

Grid.View.prototype._updatePaletteImgIndex = function(panup)
{
if (panup)
{
this.paletteImgIndex--;
}
else this.paletteImgIndex++;
this._updatePalettePaning();
};
Grid.View.prototype._getPaletteContainerWidth = function()
{
var paletteContainer = this.getElementById('backgroundPalette');
var paletteContainerXY = Grid.Utils.parseElementXY(paletteContainer);
return paletteContainerXY.width;
};
Grid.View.prototype.updateCenterScaleImage = function(paletteCenter, paletteScale)
{
this.paletteCenter = paletteCenter;
this.paletteScale = paletteScale;
this._updatePaletteLayout();
};
Grid.View.prototype._updatePaletteLayout = function()
{
var paletteContainer = this.getElementById('backgroundPalette');
var paletteContainerXY = Grid.Utils.parseElementXY(paletteContainer);
var paletteImages = this.getElementById('paletteImages').childNodes;
var paletteWidth = paletteContainerXY.width;
var x = 2;
var spacing = this.getPaletteSpacing();
var y = spacing;
for(var i = 0; i < paletteImages.length; i++)
{
var paletteImage = paletteImages[i];
var imageXY = Grid.Utils.parseElementXY(paletteImage);
if (this.paletteCenter)
{
if ((paletteWidth - imageXY.width) >= 0)
x = (paletteWidth - imageXY.width)/2;
else {
if (this.paletteScale) x = 0;
else x = (paletteWidth - imageXY.width)/2;
}
}
this.setAttributes(paletteImage, {
'x': x,
'y': y
}, 0);
paletteImage.scale = paletteWidth / imageXY.width;
if (this.paletteScale && paletteImage.scale < 1.0) {
paletteImage.scaled = true;
var transform = 'matrix(' + paletteImage.scale + ',0,0,' + paletteImage.scale + ',0,' + y * (1 - paletteImage.scale) + ')';
paletteImage.setAttribute('transform', transform);
} else if (paletteImage.scaled) {
paletteImage.scaled = false;
var transform = 'matrix(1,0,0,1,0,0)';
paletteImage.setAttribute('transform', transform);
}
if (this.paletteScale) {
y = y + imageXY.height * paletteImage.scale + spacing;
} else {
y = y + imageXY.height + spacing;
}
}
this._updatePalettePaning();
};
Grid.View.prototype._updatePalettePaning = function()
{
var panYoffset = this.getPalettePanOffset();
this.setAttributes(this.getElementById('paletteImages'),
{
'transform': 'translate(0, ' + (0 - panYoffset) + ')'
}, 0);
this.setAttributes(this.getElementById('palettecliprect'),
{
'x': 0,
'y': this.getPaletteClipOffset(panYoffset),
'height': this.getPaletteClipHeight()
}, 0);
};
Grid.View.prototype.getPaletteClipOffset = function(panYoffset)
{
var topClipAdjust = this.getPalettePanHeight();
if (panYoffset == 0) topClipAdjust = 0;
return (panYoffset + topClipAdjust);
};
Grid.View.prototype.getPalettePanOffset = function()
{
var paletteContainer = this.getElementById('backgroundPalette');
var paletteContainerXY = Grid.Utils.parseElementXY(paletteContainer);
var paletteImages = this.getElementById('paletteImages').childNodes;
var panYoffset = 0;
if (this.paletteImgIndex > 0) {
this.getElementById('panup').style.display = 'block';
for (var i=0; i<this.paletteImgIndex; i++) {
var paletteImage = paletteImages[i];
var imageXY = Grid.Utils.parseElementXY(paletteImage);
if (this.paletteScale)
panYoffset += imageXY.height * paletteImage.scale + this.getPaletteSpacing();
else
panYoffset += imageXY.height + this.getPaletteSpacing();
}
panYoffset -=  this.getPalettePanHeight();
} else {
this.getElementById('panup').style.display = 'none';
}
return panYoffset;
};
Grid.View.prototype.getPaletteClipHeight = function()
{
var paletteContainer = this.getElementById('backgroundPalette');
var paletteContainerXY = Grid.Utils.parseElementXY(paletteContainer);
var paletteImages = this.getElementById('paletteImages').childNodes;
var availableHeight = paletteContainerXY.height;
if (this.paletteImgIndex > 0) availableHeight -= this.getPalettePanHeight();
var totalHeight = 0;
for (var i = this.paletteImgIndex; i < paletteImages.length; i++)
{
var paletteImage = paletteImages[i];
var scale = 1;
if (this.paletteScale) scale = paletteImage.scale;
var imageXY = Grid.Utils.parseElementXY(paletteImage);
if (i == paletteImages.length - 1) totalHeight += imageXY.height * scale;
else totalHeight += imageXY.height * scale + this.getPaletteSpacing();
if (availableHeight < totalHeight)
{
availableHeight -= this.getPalettePanHeight();
this.getElementById('pandown').style.display = 'block';
var j = i;
while (totalHeight > availableHeight)
{
var preimage = paletteImages[j--];
var preXY = Grid.Utils.parseElementXY(preimage);
var increase;
if (this.paletteScale)
increase = preXY.height * preimage.scale + this.getPaletteSpacing();
else
increase = preXY.height + this.getPaletteSpacing();
totalHeight -= increase;
}
return totalHeight;
}
}
this.getElementById('pandown').style.display = 'none';
return availableHeight;
};
Grid.View.prototype.getPalettePanHeight = function()
{
return 15;
};
Grid.View.prototype.getPaletteSpacing = function()
{
return 3;
};
Grid.View.prototype.showPalette = function() {
this.setAttributes('groupPalette', { 'display': 'inline' });
};
Grid.View.prototype.hidePalette = function() {
this.setAttributes('groupPalette', { 'display': 'none' });
};
Grid.View.prototype.createPaletteImage = function(id, width, height, url)
{
var paletteElement = this.createElement('image', {
'id': id,
'width': width,
'height': height,
'transform': 'translate(-0.5, -0.5)'
});
paletteElement.setAttributeNS(XLINK_NS, 'xlink:href', url);
this.appendChild('paletteImages', paletteElement);
this._updatePaletteLayout();
return paletteElement;
};
Grid.View.prototype.clonePaletteImage = function(id, cloneID)
{
var paletteElement = this.getElementById(id);
var clonedElement = paletteElement.cloneNode(true);
clonedElement.id = cloneID;
this.appendChild('paletteDragging', clonedElement);
if (paletteElement.scaled) {
var x = paletteElement.getAttribute("x");
var y = paletteElement.getAttribute("y");
var s = "matrix(1,0,0,1,0,0)";
clonedElement.setAttribute("transform", s);
}
return clonedElement;
};
Grid.View.prototype.movePaletteImage = function(id, x, y)
{
var clonedElement = this.getElementById(id);
this.setAttributes(clonedElement,
{
'x': x,
'y': y
});
};
Grid.View.prototype.removePaletteImage = function(id)
{
this.removeElement(id);
this._updatePaletteLayout();
};
Grid.View.prototype.selectPaletteImage = function(paletteID)
{
var paletteElement = this.getElementById(paletteID);
var imageXY = Grid.Utils.parseElementXY(paletteElement);
var selectedPalette = this.getElementById('selectedPalette');
var height = imageXY.height + 4;
if (this.paletteScale) height = imageXY.height * paletteElement.scale + 4;
this.setAttributes(selectedPalette,
{
'x': 0,
'y': imageXY.y - this.getPalettePanOffset(),
'width': 75,
'height': height
}, 0);
selectedPalette.style.display = '';
};
Grid.View.prototype.deselectPaletteImage = function()
{
var selectedPalette = this.getElementById('selectedPalette');
selectedPalette.style.display = 'none';
};

// FILE: view.toolbar.js (37b2719f) 3/7/2014 11:24:06 AM

Grid.View.prototype.showToolbar = function() {
this.setAttributes('groupToolbar', { 'display': 'inline' });
};
Grid.View.prototype.hideToolbar = function() {
this.setAttributes('groupToolbar', { 'display': 'none' });
};

// FILE: view.feedback.js (a9e7cf78) 3/7/2014 11:24:06 AM

Grid.View.prototype.setFeedbackText = function(text)
{
this.setText('feedback', text);
};
Grid.View.prototype.setCoordinatesText = function(text)
{
this.setText('coordinates', text);
};
Grid.View.prototype.showFeedback = function() {
this.setAttributes('groupFeedback', { 'display': 'inline' });
};
Grid.View.prototype.hideFeedback = function() {
this.setAttributes('groupFeedback', { 'display': 'none' });
};

// FILE: view.editor.js (507bd1fa) 3/7/2014 11:24:06 AM

Grid.View.prototype.createSnapToPointAndCircle = function(x, y, r, id)
{
var center = this.createElement("circle", {
"id": 'snapPointCenter_' + id,
"cx": x,
"cy": y,
"r": 4
});
this.appendChild('crtool_snapcenter', center);
var circle = this.createElement("circle", {
"id": 'snapPointCircle_' + id,
"cx": x,
"cy": y,
"r": r
});
this.appendChild('crtool_snapcircle', circle);
};
Grid.View.prototype.createCRToolCircle = function(x, y, r)
{
var container = 'crtool_circle';
var centerId = 'crToolCircleCenter';
var circleId = 'crToolCircle';
var center = this.createElement("circle", {
"id": centerId,
"cx": x,
"cy": y,
"r": 4
});
this.appendChild(container, center);
var circle = this.createElement("circle", {
"id": circleId,
"cx": x,
"cy": y,
"r": r
});
this.appendChild(container, circle);
};
Grid.View.prototype.createCRToolRectangle = function(x1,y1,x2,y2)
{
var container = 'crtool_rectangle';
var rect = this.createElement("rect", {
"id": 'crToolRectangle',
"x": x1,
"y": y1,
"width": x2-x1,
"height": y2-y1
});
this.appendChild(container, rect);
};
Grid.View.prototype.updateHelperLine = function(id, x1, y1, x2, y2)
{
var mergeLine = this.getElementById(id);
if (!mergeLine)
{
mergeLine = this.createElement('line', {
'id': id,
'fill': 'none',
'stroke': 'green',
'stroke-width': '1',
'opacity': '0.7',
'stroke-dasharray': '3, 3'
});
this.appendChild('mergeLines', mergeLine);
}
this.setAttributes(mergeLine,
{
'x1': x1,
'y1': y1,
'x2': x2,
'y2': y2
});
};

// FILE: action.js (79bf0adc) 3/7/2014 11:24:06 AM

Grid.Action = {};
Grid.Action.actions = {};
Grid.Action.registerAction = function(modeName, action) { Grid.Action.actions[modeName] = action; };
Grid.Action.Base = function(grid)
{
this.grid = grid;
this.canvas = grid.canvas;
this.model = grid.model;
this._completed = false;
};
Grid.Action.Base.prototype.isCompleted = function() { return this._completed; };
Grid.Action.Base.prototype.onMouseEvent = function(evt) {};
Grid.Action.Base.prototype.onKeyEvent = function(evt) {};
Grid.Action.Base.prototype.dispose = function() {};
Grid.Action.Base.prototype.finalize = function()
{
this.dispose();
this._completed = true;
};

// FILE: action.move.js (940864e9) 3/7/2014 11:24:06 AM

Grid.Action.Move = function(grid)
{
Grid.Action.Move.superclass.constructor.call(this, grid);
this.moveObject = null;
};
YAHOO.lang.extend(Grid.Action.Move, Grid.Action.Base);
Grid.Action.Move.prototype.dispose = function()
{
if (this.moveObject instanceof Grid.Model.Point) this.canvas.finalizePoint(this.moveObject);
else if (this.moveObject instanceof Grid.Model.Image) this.canvas.finalizeImage(this.moveObject);
};
Grid.Action.Move.prototype.onMouseEvent = function(evt)
{
var focusedObject = this.canvas.getFocused();
if (evt.name == 'mousedown')
{
if (this.moveObject || focusedObject == null || !focusedObject.isMoveable())
{
this.finalize();
}
else
{
this.moveObject = focusedObject;
this.grid.setHint('DraggingObject');
}
}
if (this.moveObject == null) return;
if (evt.name == 'mousemove' || evt.name == 'drag')
{
var x = evt.currentPosition.x,
y = evt.currentPosition.y;
if (typeof this.moveObject.moveTo == 'function')
{
this.moveObject.moveTo(x, y);
}
}
if (evt.name == 'dragend')
{
this.finalize();
}
if (evt.name == 'mouseup' && focusedObject instanceof Grid.Model.Point)
{
this.finalize();
}
};
Grid.Action.Move.prototype.onKeyEvent = function(evt)
{
if (this.moveObject != null)
{
this.canvas.clearFocused();
this.finalize();
}
else
{
var focusedObject = this.canvas.getFocused();
if (focusedObject != null && focusedObject.isMoveable())
{
this.moveObject = focusedObject;
}
else
{
this.finalize();
}
}
};

// FILE: action.point.js (d490d4bb) 3/7/2014 11:24:06 AM

Grid.Action.Point = function(grid)
{
Grid.Action.Point.superclass.constructor.call(this, grid);
this.createdPoint = null;
};
YAHOO.lang.extend(Grid.Action.Point, Grid.Action.Base);
Grid.Action.Point.prototype.dispose = function()
{
if (this.createdPoint)
{
this.createdPoint = this.canvas.finalizePoint(this.createdPoint);
}
};
Grid.Action.Point.prototype.onMouseEvent = function(evt)
{
var x = evt.currentPosition.x,
y = evt.currentPosition.y;
if (evt.name == 'mousedown')
{
var entity = this.model.getEntity(evt.target.id);
if (entity && entity.getType() == 'point')
{
this.createdPoint = entity;
}
else
{
this.createdPoint = this.model.addPoint(x, y);
}
if (this.createdPoint == null) this.finalize();
}
if (evt.name == 'drag' && this.createdPoint.isMoveable())
{
this.createdPoint.moveTo(x, y);
}
if (evt.name == 'mouseup' || evt.name == 'dragend')
{
this.finalize();
}
};
Grid.Action.Point.prototype.onKeyEvent = function(evt)
{
if (!this.createdPoint)
{
this.createdPoint = this.model.addPoint(30, 30);
this.createdPoint.snapToGrid();
}
else
{
this.finalize();
}
};

// FILE: action.line.js (a25d6038) 3/7/2014 11:24:06 AM

Grid.Action.Line = function(grid)
{
Grid.Action.Line.superclass.constructor.call(this, grid);
this.pointType = 'none';
this.sourcePoint = null;
this.targetPoint = null;
this.line = null;
this.moved = false;
};
YAHOO.lang.extend(Grid.Action.Line, Grid.Action.Base);
Grid.Action.Line.prototype.dispose = function()
{
if (this.pointType == 'source')
{
this.canvas.finalizePoint(this.sourcePoint);
}
else if (this.pointType == 'target')
{
this.targetPoint = this.canvas.finalizePoint(this.targetPoint);
if (this.sourcePoint == this.targetPoint)
{
this.model.deleteLine(this.line);
}
}
};
Grid.Action.Line.prototype.getPoint = function() { return this[this.pointType + 'Point']; };
Grid.Action.Line.prototype.setPoint = function(point) { this[this.pointType + 'Point'] = point; };
Grid.Action.Line.prototype.movePoint = function(x, y)
{
var currentPoint = this.getPoint();
currentPoint.moveTo(x, y);
};
Grid.Action.Line.prototype.createLine = function()
{
this.line = this.model.addLine(this.sourcePoint, this.targetPoint);
};
Grid.Action.Line.prototype.canLineBeFinalized = function()
{
if (this.sourcePoint == null || this.targetPoint == null) return false;
if (!this.targetPoint.isMoveable()) return true;
if (!this.moved) return false;
var intersectedPoints = this.targetPoint.getIntersections();
for (var i = 0; i < intersectedPoints.length; i++)
{
if (this.sourcePoint == intersectedPoints[i]) return false;
}
return true;
};
Grid.Action.Line.prototype.onMouseEvent = function(evt)
{
var x = evt.currentPosition.x,
y = evt.currentPosition.y;
if (evt.name == 'mousedown')
{
var clickedEntity = this.model.getEntity(evt.target.id);
if (this.sourcePoint && this.sourcePoint == clickedEntity) return;
if (this.sourcePoint == null)
{
this.pointType = 'source';
if (clickedEntity && clickedEntity.getType == 'point')
{
this.setPoint(clickedEntity);
}
else
{
this.setPoint(this.model.addPoint(x, y));
this.sourcePoint = this.canvas.finalizePoint(this.sourcePoint);
}
}
if (this.targetPoint == null)
{
this.pointType = 'target';
this.setPoint(this.model.addPoint(x, y));
this.createLine();
}
if (this.canLineBeFinalized()) this.finalize();
}
if ((evt.name == 'mousemove' || evt.name == 'drag') && this.targetPoint.isMoveable())
{
this.moved = true;
this.movePoint(x, y);
}
if (evt.name == 'dragend')
{
if (this.canLineBeFinalized()) this.finalize();
}
};
Grid.Action.Line.prototype.onKeyEvent = function(evt)
{
var selected = this.canvas.getFocused();
if (selected && this.pointType == 'none')
{
this.pointType = 'source';
this.setPoint(selected);
}
if (!selected && this.pointType == 'none')
{
this.pointType = 'source';
this.setPoint(this.model.addPoint(30, 30));
}
else if (this.pointType == 'source')
{
this.sourcePoint = this.canvas.finalizePoint(this.sourcePoint);
this.pointType = 'target';
this.setPoint(this.model.addPoint(this.sourcePoint.x, this.sourcePoint.y));
this.createLine();
}
else
{
this.targetPoint = this.canvas.finalizePoint(this.targetPoint);
if (this.sourcePoint == this.targetPoint)
{
this.model.deleteLine(this.line);
}
this.finalize();
}
};
Grid.Action.LineDash = function(grid)
{
Grid.Action.LineDash.superclass.constructor.call(this, grid);
};
YAHOO.lang.extend(Grid.Action.LineDash, Grid.Action.Line);
Grid.Action.LineDash.prototype.createLine = function()
{
this.line = this.model.addLine(this.sourcePoint, this.targetPoint, 'none', 'dashed');
};

// FILE: action.arrow.js (c794903f) 3/7/2014 11:24:06 AM

Grid.Action.ArrowSingle = function(grid)
{
Grid.Action.ArrowSingle.superclass.constructor.call(this, grid);
};
YAHOO.lang.extend(Grid.Action.ArrowSingle, Grid.Action.Line);
Grid.Action.ArrowSingle.prototype.createLine = function()
{
this.line = this.model.addLine(this.sourcePoint, this.targetPoint, 'forward');
};
Grid.Action.ArrowDouble = function(grid)
{
Grid.Action.ArrowDouble.superclass.constructor.call(this, grid);
};
YAHOO.lang.extend(Grid.Action.ArrowDouble, Grid.Action.Line);
Grid.Action.ArrowDouble.prototype.createLine = function()
{
this.line = this.model.addLine(this.sourcePoint, this.targetPoint, 'both');
};

// FILE: action.delete.js (5ec81a89) 3/7/2014 11:24:06 AM

Grid.Action.Delete = function(grid)
{
Grid.Action.Delete.superclass.constructor.call(this, grid);
this.deletedPoint = null;
};
YAHOO.lang.extend(Grid.Action.Delete, Grid.Action.Base);
Grid.Action.Delete.prototype.onMouseEvent = function(evt)
{
if (evt.name == 'mouseup')
{
var selected = this.canvas.getFocused();
if (selected)
{
var type = selected.getType();
switch(type)
{
case 'point': this.model.deletePoint(selected); break;
case 'canvasimage': this.model.deleteImage(selected); break;
case 'circle': this.model.deleteEntity(selected); break;
}
this.finalize();
}
else
{
var targetEntity = this.model.getEntity(evt.target.id);
if (targetEntity && targetEntity.getType() == 'line')
{
this.model.deleteLine(targetEntity);
}
}
}
if (evt.name == 'mouseup' || evt.name == 'dragend') this.finalize();
};
Grid.Action.Delete.prototype.onKeyEvent = function(evt)
{
var selected = this.canvas.getFocused();
if (selected)
{
var type = selected.getType();
switch (type)
{
case 'point': this.model.deletePoint(selected); break;
case 'canvasimage': this.model.deleteImage(selected); break;
}
this.finalize();
}
};

// FILE: action.circle.js (3b572cf1) 3/7/2014 11:24:06 AM

Grid.Action.Circle = function(grid)
{
Grid.Action.Circle.superclass.constructor.call(this, grid);
this.createdCircle = null;
};
YAHOO.lang.extend(Grid.Action.Circle, Grid.Action.Base);
Grid.Action.Circle.prototype.create = function(x, y)
{
var circle = this.model.createCircle(x, y, 10);
this.model.addCircle(circle);
return circle;
};
Grid.Action.Circle.prototype.dispose = function () {
this.createdCircle.snap();
this.createdCircle = null;
};
Grid.Action.Circle.prototype.onMouseEvent = function(evt)
{
var x = evt.currentPosition.x,
y = evt.currentPosition.y;
if (evt.name == 'mousedown')
{
var entity = this.model.getEntity(evt.target.id);
if (entity && entity.getType() == 'circle')
{
this.createdCircle = entity;
}
else
{
this.createdCircle = this.create(x, y);
}
if (this.createdCircle == null) this.finalize();
}
if (evt.name == 'drag') {
var radius = evt.currentPosition.x - evt.clickedPosition.x;
this.createdCircle.radius = (radius < 10) ? this.createdCircle.radius : radius;
this.createdCircle.update();
}
if (evt.name == 'mouseup' || evt.name == 'dragend')
{
this.finalize();
}
};
Grid.Action.Circle.prototype.onKeyEvent = function(evt)
{
if (!this.createdPoint)
{
this.createdPoint = this.create(30, 30);
this.createdPoint.snapToGrid();
}
else
{
this.finalize();
}
};

// FILE: toolbar.js (8f38bc0f) 3/7/2014 11:24:07 AM

Grid.Toolbar = function(grid)
{
this.grid = grid;
this.view = grid.view;
this._buttonHash = {};
this._buttons = [];
};
Grid.Toolbar.prototype.init = function()
{
var buttonNames = ['move', 'delete', 'point', 'connect', 'arrow', 'arrw2', 'dash', 'circle'];
var grid = this.grid;
for (var i = 0; i < buttonNames.length; i++)
{
var buttonName = buttonNames[i];
var button = null;
switch (buttonName)
{
case 'move': button = new Grid.Toolbar.Button.Circle(this, buttonName); break;
default: button = new Grid.Toolbar.Button(this, buttonName); break;
}
button.hide();
this._buttons.push(button);
this._buttonHash[buttonName] = button;
(function (button) {
var buttonGroup = button.getGroup();
Grid.Utils.addMouseListener(buttonGroup, 'mousedown', function () {
if (!grid.isReadOnly()) {
grid.setMode(button.name);
}
}, false);
})(button);
}
};
Grid.Toolbar.prototype.getButton = function(buttonName) { return this._buttonHash[buttonName]; };
Grid.Toolbar.prototype.getButtons = function() { return this._buttons; };
Grid.Toolbar.prototype.getVisibleButtons = function()
{
var visibleButtons = [];
for (var i = 0; i < this._buttons.length; i++)
{
var button = this._buttons[i];
if (button.isVisible()) visibleButtons.push(button);
}
return visibleButtons;
};
Grid.Toolbar.prototype.resetButtons = function()
{
for (var i = 0; i < this._buttons.length; i++)
{
var button = this._buttons[i];
button.hide();
}
};
Grid.Toolbar.prototype.enableButtons = function(buttonNames)
{
this.resetButtons();
for (var i = 0; i < buttonNames.length; i++) {
var button = this._buttonHash[buttonNames[i]];
button.show();
}
var spacing = 5;
var x = spacing;
var y = 2;
for (var i = 0; i < this._buttons.length; i++) {
var button = this._buttons[i];
if (!button.isVisible()) continue;
var buttonGroup = button.getGroup();
this.view.setAttributes(buttonGroup,
{
'transform': 'translate(' + x + ', ' + y + ')'
});
x = x + button.width + spacing;
}
};
Grid.Toolbar.prototype.processKeyEvent = function(evt)
{
if (evt.key == 'enter')
{
this.grid.setArea('canvas');
return;
}
if (evt.key != 'left' && evt.key != 'right') return;
var selectedButton = this.getButton(this.grid.getMode());
var visibleButtons = this.getVisibleButtons();
if (visibleButtons.length == 0) return;
for (var i = 0; i < visibleButtons.length; i++)
{
var button = visibleButtons[i];
if (button == selectedButton)
{
if (evt.key == 'left')
{
if (i == 0) selectedButton = visibleButtons[visibleButtons.length - 1];
else selectedButton = visibleButtons[i - 1];
}
else if (evt.key == 'right')
{
if (i == (visibleButtons.length - 1)) selectedButton = visibleButtons[0];
else selectedButton = visibleButtons[i + 1];
}
break;
}
}
this.grid.setMode(selectedButton.name);
};
Grid.Action.registerAction('move', Grid.Action.Move);
Grid.Action.registerAction('delete', Grid.Action.Delete);
Grid.Action.registerAction('point', Grid.Action.Point);
Grid.Action.registerAction('connect', Grid.Action.Line);
Grid.Action.registerAction('arrow', Grid.Action.ArrowSingle);
Grid.Action.registerAction('arrw2', Grid.Action.ArrowDouble);
Grid.Action.registerAction('dash', Grid.Action.LineDash);
Grid.Action.registerAction('circle', Grid.Action.Circle);

// FILE: toolbar.button.js (90ecf603) 3/7/2014 11:24:07 AM

Grid.Toolbar.Button = function(toolbar, name)
{
this.name = name;
this.width = 100;
this.toolbar = toolbar;
this.grid = toolbar.grid;
this.view = toolbar.view;
this._visible = true;
this._state = Grid.Toolbar.Button.State.Up;
this._iconFillElements = [];
this._iconStrokeElements = [];
this._init();
};
Grid.Toolbar.Button.State =
{
Up: 0,
Selected: 1,
Over: 2,
SelectedOver: 3
};
Grid.Toolbar.Button.prototype._init = function()
{
var buttonGroup = this.getGroup();
for (var i = 0; i < buttonGroup.childNodes.length; i++)
{
var element = buttonGroup.childNodes[i];
if (element.nodeType == 1)
{
if (element.getAttribute('fill') == '#ffffff') this._iconFillElements.push(element);
if (element.getAttribute('stroke') == '#ffffff') this._iconStrokeElements.push(element);
}
if (typeof window.Messages == 'object' && element.nodeName == 'text')
{
var key = "GridSVG.Label.button_"+element.textContent.replace(" ","_");
var alternateLabel = window.Messages.get(key);
if(alternateLabel != key) {
element.textContent = alternateLabel;
}
}
}
};
Grid.Toolbar.Button.prototype.getGroup = function()
{
return this.view.getElementById('button_' + this.name);
};
Grid.Toolbar.Button.prototype.getContainer = function()
{
var buttonGroup = this.getGroup();
var path = null;
for (var i = 0; i < buttonGroup.childNodes.length; i++)
{
var node = buttonGroup.childNodes[i];
if (node.nodeName == 'path')
{
path = node;
break;
}
}
return path;
};
Grid.Toolbar.Button.prototype.show = function()
{
var buttonGroup = this.getGroup();
buttonGroup.style.display = '';
this._visible = true;
};
Grid.Toolbar.Button.prototype.hide = function()
{
var buttonGroup = this.getGroup();
buttonGroup.style.display = 'none';
this._visible = false;
};
Grid.Toolbar.Button.prototype.isVisible = function() { return this._visible; };
Grid.Toolbar.Button.prototype._setIconColor = function(color)
{
for (var i = 0; i < this._iconFillElements.length; i++)
{
var element = this._iconFillElements[i];
element.setAttribute('fill', color);
}
for (var i = 0; i < this._iconStrokeElements.length; i++)
{
var element = this._iconStrokeElements[i];
element.setAttribute('stroke', color);
}
};
Grid.Toolbar.Button.prototype.deselect = function()
{
this._state = Grid.Toolbar.Button.State.Up;
this._setIconColor('#ffffff');
var container = this.getContainer();
container.setAttribute('fill', 'url(#buttons_background_up)');
};
Grid.Toolbar.Button.prototype.select = function()
{
this._state = Grid.Toolbar.Button.State.Selected;
this._setIconColor('#1f5181');
var container = this.getContainer();
container.setAttribute('fill', 'url(#buttons_background_selected)');
};
Grid.Toolbar.Button.Circle = function(toolbar, name)
{
Grid.Toolbar.Button.Circle.superclass.constructor.call(this, toolbar, name);
this.width = 18;
};
Lang.extend(Grid.Toolbar.Button.Circle, Grid.Toolbar.Button);
Grid.Toolbar.Button.Circle.prototype.getContainer = function()
{
var buttonGroup = this.getGroup();
var circle = null;
for (var i = 0; i < buttonGroup.childNodes.length; i++)
{
var node = buttonGroup.childNodes[i];
if (node.nodeName == 'circle')
{
circle = node;
break;
}
}
return circle;
};

// FILE: palette.js (63a68ea5) 3/7/2014 11:24:07 AM

Grid.Palette = function(grid)
{
this.grid = grid;
this.view = grid.view;
this.model = grid.model;
this.canvas = grid.canvas;
this._selectedImage = null;
this.moving = false;
if (Grid.Utils.hasSVGWeb())
{
ErrorHandler.wrapFunctions(this, ['processMouseEvent', 'subscribeToModelEvents']);
}
};
Grid.Palette.prototype.clearMoving = function()
{
this.moving = false;
var imageID = this._selectedImage.getID();
var cloneID = imageID + '_clone';
this.view.removeElement(cloneID);
this.grid.setModeHint();
};
Grid.Palette.prototype.getSelected = function() { return this._selectedImage; };
Grid.Palette.prototype.hasSelected = function () { return this._selectedImage != null; };
Grid.Palette.prototype.setSelected = function(paletteImage)
{
if (this.moving) this.clearMoving();
if (this._selectedImage && this._selectedImage == paletteImage) return false;
if (this._selectedImage)
{
var id = this._selectedImage.getID() + '_border';
this.view.deselectPaletteImage();
logger.debug('palette unselected: ' + id);
}
this._selectedImage = paletteImage || null;
if (paletteImage)
{
var id = paletteImage.getID();
this.view.selectPaletteImage(id);
logger.debug('palette selected: ' + id);
this.grid.setMode('move');
this.grid.canvas.clearFocused();
}
return true;
};
Grid.Palette.prototype.clearSelected = function()
{
return this.setSelected(null);
};
Grid.Palette.prototype.processMouseEvent = function(evt)
{
if (!this.moving && evt.name == 'mousedown')
{
if ((evt.target.id == 'panup') || (evt.target.id == 'pandown'))
{
if (evt.target.id == 'panup') {
this.grid.view._updatePaletteImgIndex(true);
} else {
this.grid.view._updatePaletteImgIndex(false);
}
return;
}
if (evt.target.nodeName == 'image' && evt.target.id.indexOf('paletteimage_') != -1)
{
this.setSelected(this.model.getEntity(evt.target.id));
}
else
{
this.clearSelected();
}
}
var paletteImage = this.getSelected();
if (paletteImage == null) return;
var imageID = paletteImage.getID();
var cloneID = imageID + '_clone';
var gridX = evt.currentPosition.x - Math.round(paletteImage.width / 2);
var gridY = evt.currentPosition.y - paletteImage.height;
if (!this.moving && (evt.name == 'mousedown' || evt.name == 'dragbegin'))
{
this.moving = true;
this.view.clonePaletteImage(imageID, cloneID);
this.view.movePaletteImage(cloneID, gridX, gridY);
this.grid.setHint('DraggingObject');
}
else if (this.moving && (evt.name == 'mousemove' || evt.name == 'drag'))
{
this.view.movePaletteImage(cloneID, gridX, gridY);
}
else if (this.moving && (evt.name == 'mousedown' || evt.name == 'dragend'))
{
this.clearMoving();
this.clearSelected();
var canvasPosition = this.view.translateElement('groupCanvas', evt.raw.clientX, evt.raw.clientY);
if (canvasPosition && canvasPosition.x > 0 && canvasPosition.y > 0)
{
var image = this.model.addImage(paletteImage.name, canvasPosition.x, canvasPosition.y);
this.grid.canvas.finalizeImage(image);
this.grid.setArea('canvas');
}
}
};
Grid.Palette.prototype.processKeyEvent = function(evt)
{
var selected = this.getSelected();
var paletteImages = this.model.getPaletteImages();
if (evt.key == 'space')
{
var image = this.model.addImage(selected.name, 0, 0);
this.grid.canvas.finalizeImage(image);
this.grid.canvas.setFocused(image);
this.grid.setArea('canvas');
this.grid.setMode('move');
this.clearSelected();
this.grid.canvas.processKeyEvent(evt);
}
if (selected == null && (evt.key == 'up' || evt.key == 'down'))
{
this.setSelected(paletteImages[0]);
return;
}
if (evt.key == 'up' || evt.key == 'down')
{
if (paletteImages.length == 0) return;
var paletteIndex = -1;
for (var i = 0; i < paletteImages.length; i++)
{
if (paletteImages[i] == selected)
{
paletteIndex = i;
break;
}
}
if (evt.key == 'down')
{
if (paletteIndex < paletteImages.length - 1)
{
this.setSelected(paletteImages[paletteIndex + 1]);
}
else
{
this.setSelected(paletteImages[0]);
}
}
if (evt.key == 'up')
{
if (paletteIndex == 0)
{
this.setSelected(paletteImages[paletteImages.length - 1]);
}
else
{
this.setSelected(paletteImages[paletteIndex - 1]);
}
}
}
};
Grid.Palette.prototype.subscribeToModelEvents = function()
{
var palette = this;
var view = this.view;
var question = this.model;
this.model.subscribe('onAdd', function(entity)
{
var id = entity.getID();
if (entity instanceof Grid.Model.PaletteImage)
{
view.createPaletteImage(id, entity.width, entity.height, entity.url);
}
});
this.model.subscribe('onDelete', function(entity)
{
var id = entity.getID();
if (entity instanceof Grid.Model.PaletteImage)
{
view.removePaletteImage(id);
}
});
};

// FILE: canvas.js (b03ca385) 3/7/2014 11:24:06 AM

Grid.Canvas = function(grid)
{
this.grid = grid;
this.view = grid.view;
this.model = grid.model;
this._currentHover = null;
this._currentFocus = null;
this._currentAction = null;
if (Grid.Utils.hasSVGWeb())
{
ErrorHandler.wrapFunctions(this,
[
'finalizePoint', 'finalizeLines', 'processMouseEvent', 'processKeyEvent', 'subscribeToModelEvents'
]);
}
this.init();
};
YAHOO.lang.augmentProto(Grid.Canvas, EventLazyProvider);
Grid.Canvas.prototype.init = function()
{
var canvas = this;
var view = this.view;
var onEntityEvent = function(name, entity)
{
logger.debug('EVENT - {name} ({id})', { name: name, id: entity.getID() });
entity.updateElement(view);
};
this.subscribe('onHover', function(entity) { onEntityEvent('onHover', entity); });
this.subscribe('onHoverOut', function(entity) { onEntityEvent('onHoverOut', entity); });
this.subscribe('onFocus', function(entity) { onEntityEvent('onFocus', entity); });
this.subscribe('onFocusOut', function(entity) { onEntityEvent('onFocusOut', entity); });
this.subscribe('onActionStart', function(action)
{
var mode = this.grid.getMode();
var focusedEntity = canvas.getFocused();
if (mode == 'move' && focusedEntity != null)
{
if (focusedEntity.isSelected()) focusedEntity.deselect();
else focusedEntity.select();
}
});
};
Grid.Canvas.prototype.getHovering = function() { return this._currentHover; };
Grid.Canvas.prototype.clearHovering = function()
{
if (this._currentHover == null) return false;
var entity = this._currentHover;
this._currentHover = null;
entity.setHovering(false);
this.fireLazy('onHoverOut', entity);
if (entity.isFocusable() === Grid.Model.Focusable.Auto) this.clearFocused(entity);
return true;
};
Grid.Canvas.prototype.setHovering = function(entity)
{
if (this._currentHover == entity) return false;
this.clearHovering();
if (entity == null) return false;
if (!entity.isHoverable()) return false;
if (this.performingAction()) return false;
var allowHover = this.fireLazy('onBeforeHover', entity);
if (allowHover)
{
this._currentHover = entity;
entity.setHovering(true);
this.fireLazy('onHover', entity);
if (entity.isFocusable() === Grid.Model.Focusable.Auto) this.setFocused(entity);
}
return allowHover;
};
Grid.Canvas.prototype.getFocused = function() { return this._currentFocus; };
Grid.Canvas.prototype.clearFocused = function(entity)
{
if (this._currentFocus == null) return false;
if (entity != null && entity != this._currentFocus) return false;
entity = this._currentFocus;
this._currentFocus = null;
entity.setFocused(false);
this.fireLazy('onFocusOut', entity);
return true;
};
Grid.Canvas.prototype.setFocused = function(entity)
{
if (entity == this._currentFocus) return false;
this.clearFocused();
if (entity == null) return false;
if (this.grid.palette.moving == true) return false;
if (!entity.isFocusable()) return false;
var allowFocus = this.fireLazy('onBeforeFocus', entity);
if (allowFocus)
{
this._currentFocus = entity;
entity.setFocused(true);
this.fireLazy('onFocus', entity);
}
return allowFocus;
};
Grid.Canvas.prototype.performingAction = function() { return (this._currentAction != null); };
Grid.Canvas.prototype.startAction = function()
{
if (this._currentAction != null) return false;
var focusedEntity = this.getFocused();
if (focusedEntity != null && focusedEntity.isMoveable())
{
this.clearHovering();
}
var mode = this.grid.getMode();
var actionClass = Grid.Action.actions[mode];
if (actionClass == null) return false;
this._currentAction = new actionClass(this.grid);
this.fireLazy('onActionStart', this._currentAction);
return true;
};
Grid.Canvas.prototype.stopAction = function()
{
if (this._currentAction == null) return false;
if (!this._currentAction.isCompleted()) this._currentAction.finalize();
this.grid.setModeHint();
var action = this._currentAction;
this._currentAction = null;
this.fireLazy('onActionEnd', action);
return true;
};
Grid.Canvas.prototype.finalizePoint = function(point)
{
var lines = point.getLines();
point.snap();
var intersectedPoints = point.getIntersections();
if (intersectedPoints.length == 0)
{
this.finalizeLines(lines);
return point;
}
var mergePoint = intersectedPoints[0];
point.moveLines(mergePoint);
if (point == this.getFocused()) this.setFocused(mergePoint);
this.model.deletePoint(point);
this.finalizeLines(mergePoint.getLines());
return mergePoint;
};
Grid.Canvas.prototype.finalizeLines = function(pointLines)
{
if (this._currentAction instanceof Grid.Action.Line && this._currentAction.targetPoint == null) return;
var toleranceParallel = 10;
var toleranceDistance = 4;
for (var i = 0; i < pointLines.length; i++)
{
var pointLine = pointLines[i];
var lines = this.model.getLinesByDir(pointLine.dirType);
for (var j = 0; j < lines.length; j++)
{
var line = lines[j];
if (pointLine == line) continue;
var isParallel = pointLine.isParallelTo(line, toleranceParallel);
if (!isParallel) continue;
var distance = pointLine.distanceFrom(line);
if (distance > toleranceDistance) continue;
var newLine = pointLine.getLongestLine(line);
this.model.deleteLine(line);
this.model.deleteLine(pointLine);
var mergedLine = this.model.addLine(newLine.source, newLine.target, pointLine.dirType, pointLine.style);
if (line.source.getLines().length == 0) this.model.deletePoint(line.source);
if (line.target.getLines().length == 0) this.model.deletePoint(line.target);
if (pointLine.source.getLines().length == 0) this.model.deletePoint(pointLine.source);
if (pointLine.target.getLines().length == 0) this.model.deletePoint(pointLine.target);
var mergedLines = [];
mergedLines.push(mergedLine);
this.finalizeLines(mergedLines);
return;
}
}
};
Grid.Canvas.prototype.finalizeImage = function(image)
{
image.snap();
};
Grid.Canvas.prototype.processMouseEvent = function(evt)
{
this._checkForMouseHover(evt);
this._checkForMouseFocus(evt);
this._processMouseAction(evt);
};
Grid.Canvas.prototype._checkForMouseHover = function(evt)
{
if (evt.name != 'mousemove' || this.performingAction()) return;
if (evt.target == null || evt.target.id == null) return;
var entity = this.model.getEntity(evt.target.id);
if (entity && entity.isHoverable()) this.setHovering(entity);
else this.clearHovering();
};
Grid.Canvas.prototype._checkForMouseFocus = function(evt)
{
if (evt.name != 'mousedown') return;
if (evt.target == null) return;
var entity = this.model.getEntity(evt.target.id);
if (entity && entity.isFocusable()) this.setFocused(entity);
else this.clearFocused();
};
Grid.Canvas.prototype._processMouseAction = function(evt                  )
{
var mode = this.grid.getMode();
if (this._currentAction == null)
{
if (evt.name != 'mousedown') return;
this.startAction();
}
try
{
this._currentAction.onMouseEvent(evt);
}
catch (ex)
{
this._currentAction = null;
throw ex;
}
if (this._currentAction != null && this._currentAction.isCompleted()) this.stopAction();
};
Grid.Canvas.prototype.getFocusableObjects = function(typeFilter)
{
var focusableEntities = [];
var entities = this.model.getEntities();
for (var i = 0; i < entities.length; i++)
{
var entity = entities[i];
if ((typeof typeFilter != 'function' || entity instanceof typeFilter) && entity.isFocusable())
{
focusableEntities.push(entities[i]);
}
}
return focusableEntities;
};
Grid.Canvas.prototype.processKeyEvent = function(evt)
{
var focusedObject = this.getFocused();
if (evt.key == 'esc')
{
this.clearFocused();
this.stopAction();
}
if (evt.key == 'enter' && this._currentAction == null)
{
var objects;
if (this.grid.getMode() == 'move' || this.grid.getMode() == 'delete')
{
objects = this.getFocusableObjects(Grid.Model.Base);
}
else
{
objects = this.getFocusableObjects(Grid.Model.Point);
}
var nextObject = this._nextObjectInFocusableOrder(focusedObject, objects);
if (focusedObject != nextObject)
{
this.stopAction();
}
this.setFocused(nextObject);
return;
};
if (evt.key == 'space')
{
this._processKeyAction('keydown', evt);
};
if (this._currentAction == null) return;
var moveKey = (!evt.dom.ctrlKey && (evt.key == 'left' || evt.key == 'right' || evt.key == 'up' || evt.key == 'down'));
if (focusedObject && moveKey)
{
var x = focusedObject.x,
y = focusedObject.y;
var moveSize = evt.dom.shiftKey ? 1 : 10;
if (evt.key == 'left') focusedObject.moveLeft(moveSize);
if (evt.key == 'right') focusedObject.moveRight(moveSize);
if (evt.key == 'up') focusedObject.moveUp(moveSize);
if (evt.key == 'down') focusedObject.moveDown(moveSize);
}
};
Grid.Canvas.prototype._processKeyAction = function(name, evt)
{
var mode = this.grid.getMode();
if (this._currentAction == null) this.startAction();
try
{
this._currentAction.onKeyEvent(evt);
}
catch(ex)
{
this._currentAction.finalize();
this._currentAction = null;
throw ex;
}
if (this._currentAction.isCompleted())
{
this._currentAction = null;
logger.debug('Action - {mode} completed', { mode: mode });
}
};
Grid.Canvas.prototype._firstObjectInFocusableOrder = function(positions)
{
var firstPosition = null;
for (var i = 0; i < positions.length; i++)
{
var existingPosition = positions[i];
if (firstPosition == null)
{
firstPosition = existingPosition;
}
else if (existingPosition.y < firstPosition.y || (existingPosition.y == firstPosition.y && existingPosition.x < firstPosition.x))
{
firstPosition = existingPosition;
}
}
return firstPosition;
};
Grid.Canvas.prototype._nextObjectInFocusableOrder = function(currentPosition, positions)
{
if (currentPosition == null) return this._firstObjectInFocusableOrder(positions);
var nextPosition = null;
for (var i = 0; i < positions.length; i++)
{
var existingPosition = positions[i];
if (existingPosition.y < currentPosition.y || (existingPosition.y == currentPosition.y && existingPosition.x <= currentPosition.x))
{
continue;
}
if (nextPosition == null)
{
nextPosition = existingPosition;
}
else if (existingPosition.y < nextPosition.y || (existingPosition.y == nextPosition.y && existingPosition.x < nextPosition.x))
{
nextPosition = existingPosition;
}
}
if (nextPosition == null) nextPosition = this._firstObjectInFocusableOrder(positions);
return nextPosition;
};
Grid.Canvas.prototype.reorderImages = function()
{
var imageSorter = function(imageA, imageB)
{
var sizeA = imageA.getSize();
var sizeB = imageB.getSize();
return sizeA > sizeB ? -1 : sizeA < sizeB ? 1 : 0;
};
var images = this.model.getImages();
images.sort(imageSorter);
for (var i = 0; i < images.length; i++)
{
var image = images[i];
this.view.bringToFront(image.getID());
}
};
Grid.Canvas.prototype.subscribeToModelEvents = function()
{
var canvas = this;
var view = this.view;
this.model.subscribe('onAdd', function(entity)
{
entity.createElement(view);
entity.updateElement(view);
if (entity instanceof Grid.Model.Point) canvas.setFocused(entity);
if (entity instanceof Grid.Model.Image) canvas.reorderImages();
});
this.model.subscribe('onDelete', function(entity)
{
canvas.clearHovering();
canvas.clearFocused(entity);
entity.removeElement(view);
});
this.model.subscribe('onMove', function(entity) { entity.moveElement(view); });
this.model.subscribe('onUpdate', function(entity) { entity.updateElement(view); });
};

// FILE: importexport.js (d0daf786) 3/7/2014 11:24:06 AM

Grid.ImportExport = function(gquestion)
{
var gridquestion = gquestion;
var answerSpaceXml;
this.isStudentResponseValid = function()
{
if (answerSpaceXml == null) return false;
var xmlobject = Grid.ImportExport.parseFromString(answerSpaceXml);
var originalquestion = new Grid.Model();
originalquestion._paletteimages = gridquestion._paletteimages;
var imageLoader = new Grid.ImportExport.ImageLoader();
Grid.ImportExport.loadHotspots(xmlobject, originalquestion, imageLoader);
var presetAnswerList = xmlobject.getElementsByTagName("PreSetAnswerPart");
if ((presetAnswerList) && (presetAnswerList[0]) && (presetAnswerList[0].childNodes[0]))
{
var presetAnswerXml = Grid.ImportExport.serializeToString(presetAnswerList[0]);
this.loadAnswer(presetAnswerXml, originalquestion);
}
if (!pointsEqual(originalquestion.getPoints(), gridquestion.getPoints())) return true;
if (!edgesEqual(originalquestion.getLines(), gridquestion.getLines())) return true;
if (!imagesEqual(originalquestion.getImages(), gridquestion.getImages())) return true;
if (!arrowEqual(originalquestion.getLinesByDir("forward"), gridquestion.getLinesByDir("forward"))) return true;
if (!doubleArrowEqual(originalquestion.getLinesByDir("both"), gridquestion.getLinesByDir("both"))) return true;
var regions = gridquestion.getRegions();
for (var i = 0; i < regions.length; i++)
{
var originalRegion = originalquestion.getRegion(regions[i].name);
if (originalRegion) {
if (regions[i].isSelected() != originalRegion.isSelected()) return true;
}
}
return false;
function pointsEqual(points1, points2)
{
if (points1.length != points2.length) return false;
if (points1.length == 0) return true;
for (var i = 0; i < points1.length; i++)
{
var found = false;
for (var j = 0; j < points2.length; j++)
{
if ((points1[i].x == points2[j].x) && (points1[i].y == points2[j].y)) found = true;
}
if (!found) return false;
}
return true;
}
function edgesEqual(edges1, edges2)
{
if (edges1.length != edges2.length) return false;
if (edges1.length == 0) return true;
for (var i = 0; i < edges1.length; i++)
{
var found = false;
for (var j = 0; j < edges2.length; j++)
{
if (((edges1[i].source.x == edges2[j].source.x) && (edges1[i].source.y == edges2[j].source.y)
&& (edges1[i].target.x == edges2[j].target.x) && (edges1[i].target.y == edges2[j].target.y)) ||
((edges1[i].source.x == edges2[j].target.x) && (edges1[i].source.y == edges2[j].target.y)
&& (edges1[i].target.x == edges2[j].source.x) && (edges1[i].target.y == edges2[j].source.y))
) found = true;
}
if (!found) return false;
}
return true;
}
function imagesEqual(images1, images2)
{
if (images1.length != images2.length) return false;
if (images1.length == 0) return true;
for (var i = 0; i < images1.length; i++)
{
var found = false;
for (var j = 0; j < images2.length; j++)
{
if ((images1[i].name == images2[j].name) && (images1[i].x == images2[j].x)
&& (images1[i].y == images2[j].y)) found = true;
}
if (!found) return false;
}
return true;
}
function arrowEqual(arrows1, arrows2)
{
if (arrows1.length != arrows2.length) return false;
if (arrows1.length == 0) return true;
for (var i = 0; i < arrows1.length; i++)
{
var found = false;
for (var j = 0; j < arrows2.length; j++)
{
if (((arrows1[i].source.x == arrows2[j].source.x) && (arrows1[i].source.y == arrows2[j].source.y)
&& (arrows1[i].target.x == arrows2[j].target.x) && (arrows1[i].target.y == arrows2[j].target.y)))
found = true;
}
if (!found) return false;
}
return true;
}
function doubleArrowEqual(da1, da2)
{
return edgesEqual(da1, da2);
}
};
this.getAnswerXml = function()
{
function getSnapPoints(xmlDoc, QuestionPartNode)
{
var SnapPointNode = xmlDoc.createElement('SnapPoint');
var snapPoints = gridquestion.getSnapPoints();
var str = "";
for (var i = 0; i < snapPoints.length; i++)
{
if (i == 0) str = snapPoints[0].snapRadius + "@";
str += snapPoints[i].x + "," + snapPoints[i].y;
if (i != snapPoints.length - 1) str += ";";
}
var textNode = xmlDoc.createTextNode(str);
SnapPointNode.appendChild(textNode);
QuestionPartNode.appendChild(SnapPointNode);
}
function getTerminatedEdgeObjects(xmlDoc, ObjectSetNode)
{
var arrows = gridquestion.getLinesByDir("forward");
for (var i = 0; i < arrows.length; i++)
{
var tNode = xmlDoc.createElement('TerminatedEdgeObject');
var sourceXY = arrows[i].source.x + ',' + translateCoordinate(arrows[i].source.y);
var targetXY = arrows[i].target.x + ',' + translateCoordinate(arrows[i].target.y);
var str = "(" + sourceXY + "),(" + targetXY + "),Type-1";
var textNode = xmlDoc.createTextNode(str);
tNode.appendChild(textNode);
ObjectSetNode.appendChild(tNode);
}
var doubleArrows = gridquestion.getLinesByDir("both");
for (var i = 0; i < doubleArrows.length; i++)
{
var tNode = xmlDoc.createElement('TerminatedEdgeObject');
var sourceXY = doubleArrows[i].source.x + ',' + translateCoordinate(doubleArrows[i].source.y);
var targetXY = doubleArrows[i].target.x + ',' + translateCoordinate(doubleArrows[i].target.y);
var str = "(" + sourceXY + "),(" + targetXY + "),Type-2";
var textNode = xmlDoc.createTextNode(str);
tNode.appendChild(textNode);
ObjectSetNode.appendChild(tNode);
}
}
function createAtomicObject(xmlDoc, ObjectSetNode)
{
var images = gridquestion.getImages();
for (var i = 0; i < images.length; i++)
{
var AtomicObjectNode = xmlDoc.createElement('AtomicObject');
var pointXY = images[i].x + "," + translateCoordinate(images[i].y);
var str = "{" + images[i].name + "(" + pointXY + ")}";
var TextNode = xmlDoc.createTextNode(str);
AtomicObjectNode.appendChild(TextNode);
ObjectSetNode.appendChild(AtomicObjectNode);
}
}
function createRegionGroupObjects(xmlDoc, ObjectSetNode)
{
var regionGroupsList = gridquestion.getRegionGroups();
for (var i = 0; i < regionGroupsList.length; i++)
{
var regionGroupObj = regionGroupsList[i];
var regionGroupNode = xmlDoc.createElement('RegionGroupObject');
regionGroupNode.setAttribute('name', regionGroupObj.name);
regionGroupNode.setAttribute('numselected', regionGroupObj.getSelectedRegions().length);
var regionsList = regionGroupObj.getRegions();
for (var j = 0; j < regionsList.length; j++)
{
var regionObj = regionsList[j];
var regionNode = xmlDoc.createElement('RegionObject');
regionNode.setAttribute('name', regionObj.name);
regionNode.setAttribute('isselected', regionObj.isSelected().toString());
regionGroupNode.appendChild(regionNode);
}
ObjectSetNode.appendChild(regionGroupNode);
}
}
function createPointObject(xmlDoc, ObjectSetNode, points)
{
if (!(points)) return;
for (var i = 0; i < points.length; i++)
{
var ObjectNode = xmlDoc.createElement('Object');
var PointVectorNode = xmlDoc.createElement('PointVector');
var EdgeVectorNode = xmlDoc.createElement('EdgeVector');
var LabelListNode = xmlDoc.createElement('LabelList');
var ValueListNode = xmlDoc.createElement('ValueList');
var pointStr = "{(" + points[i].x + ',' + translateCoordinate(points[i].y) + ")}";
var PointTextNode = xmlDoc.createTextNode(pointStr);
PointVectorNode.appendChild(PointTextNode);
var edgeStr = " {} ";
var EdgeTextNode = xmlDoc.createTextNode(edgeStr);
EdgeVectorNode.appendChild(EdgeTextNode);
var labelStr = " {} ";
var LabelTextNode = xmlDoc.createTextNode(labelStr);
LabelListNode.appendChild(LabelTextNode);
var valueStr = " {} ";
var ValueTextNode = xmlDoc.createTextNode(valueStr);
ValueListNode.appendChild(ValueTextNode);
ObjectNode.appendChild(PointVectorNode);
ObjectNode.appendChild(EdgeVectorNode);
ObjectNode.appendChild(LabelListNode);
ObjectNode.appendChild(ValueListNode);
ObjectSetNode.appendChild(ObjectNode);
}
}
function createConnectedLinesObj(xmlDoc, ObjectSetNode, thisWorkingLines)
{
var ObjectNode = xmlDoc.createElement('Object');
var PointVectorNode = xmlDoc.createElement('PointVector');
var EdgeVectorNode = xmlDoc.createElement('EdgeVector');
var LabelListNode = xmlDoc.createElement('LabelList');
var ValueListNode = xmlDoc.createElement('ValueList');
var pointsStr = "{";
var linesStr = "{";
var previousLeftPoint = "";
var linePoints = [];
for (var i = 0; i < thisWorkingLines.length; i++)
{
var sourceXY = thisWorkingLines[i].source.x + ',' + translateCoordinate(thisWorkingLines[i].source.y);
var targetXY = thisWorkingLines[i].target.x + ',' + translateCoordinate(thisWorkingLines[i].target.y);
linesStr += " {(" + sourceXY + '),(' + targetXY + ")}";
if (i == 0)
{
linePoints.push(sourceXY);
linePoints.push(targetXY);
} else
{
if (!findExistingItem(linePoints, sourceXY)) linePoints.push(sourceXY);
if (!findExistingItem(linePoints, targetXY)) linePoints.push(targetXY);
}
}
for (var i = 0; i < linePoints.length; i++)
{
pointsStr += "(" + linePoints[i] + ")";
}
pointsStr += "}";
var PointVectorTextNode = xmlDoc.createTextNode(pointsStr);
PointVectorNode.appendChild(PointVectorTextNode);
linesStr += "}";
var EdgeVectorTextNode = xmlDoc.createTextNode(linesStr);
EdgeVectorNode.appendChild(EdgeVectorTextNode);
var labelStr = " {} ";
var LabelTextNode = xmlDoc.createTextNode(labelStr);
LabelListNode.appendChild(LabelTextNode);
var valueStr = " {} ";
var ValueTextNode = xmlDoc.createTextNode(valueStr);
ValueListNode.appendChild(ValueTextNode);
ObjectNode.appendChild(PointVectorNode);
ObjectNode.appendChild(EdgeVectorNode);
ObjectNode.appendChild(LabelListNode);
ObjectNode.appendChild(ValueListNode);
ObjectSetNode.appendChild(ObjectNode);
}
function findExistingItem(array, item)
{
for (var i = 0; i < array.length; i++)
{
if (item == array[i]) return true;
}
return false;
}
function addLinePointsToQueue(pointQueue, line)
{
var rtnPointQueue = pointQueue;
if (!pointExistsInQueue(pointQueue, line.source)) rtnPointQueue.push(line.source);
if (!pointExistsInQueue(pointQueue, line.target)) rtnPointQueue.push(line.target);
return rtnPointQueue;
}
function pointExistsInQueue(pointQueue, point)
{
for (var i = 0; i < pointQueue.length; i++)
{
if (point == pointQueue[i]) return true;
}
return false;
}
function getNewLinesConnectedToPoint(remainingLines, workingLines, pointQueue, point)
{
var newLines = [];
for (var i = 0; i < remainingLines.length; i++)
{
if ((remainingLines[i].source == point) || (remainingLines[i].target == point))
{
var found = false;
for (var j = 0; j < workingLines.length; j++)
{
if (workingLines[j] == remainingLines[i])
{
found = true;
break;
}
}
if (!found) newLines.push(remainingLines[i]);
}
}
return newLines;
}
function getRemainingLines(remainingLines, thisWorkingLines)
{
var rLines = [];
for (var i = 0; i < remainingLines.length; i++)
{
var found = false;
for (var j = 0; j < thisWorkingLines.length; j++)
{
if (remainingLines[i] == thisWorkingLines[j])
{
found = true;
break;
}
}
if (!found) rLines.push(remainingLines[i]);
}
return rLines;
}
function identifyObjects(xmlDoc, ObjectSetNode)
{
var lines = gridquestion.getLinesByDir("none");
var points = gridquestion.getPoints();
var remainingLines = gridquestion.getLinesByDir("none");
while (remainingLines.length > 0)
{
var thisWorkingLines = [];
var thisPointQueue = [];
thisWorkingLines.push(remainingLines[0]);
var newQueue = addLinePointsToQueue(thisPointQueue, remainingLines[0]);
thisPointQueue = newQueue;
while ((thisPointQueue) && (thisPointQueue.length > 0))
{
var newPoint = thisPointQueue.shift();
var newLines = getNewLinesConnectedToPoint(remainingLines, thisWorkingLines, thisPointQueue, newPoint);
if (newLines)
{
for (var i = 0; i < newLines.length; i++)
{
thisWorkingLines.push(newLines[i]);
addLinePointsToQueue(thisPointQueue, newLines[i]);
}
}
}
var rLines = getRemainingLines(remainingLines, thisWorkingLines);
remainingLines = rLines;
if (thisWorkingLines.length > 0)
{
createConnectedLinesObj(xmlDoc, ObjectSetNode, thisWorkingLines);
}
}
var iPoints = getIsolatedPoints();
if (iPoints.length > 0) createPointObject(xmlDoc, ObjectSetNode, iPoints);
createAtomicObject(xmlDoc, ObjectSetNode);
createRegionGroupObjects(xmlDoc, ObjectSetNode);
}
function getIsolatedPoints()
{
var lines = gridquestion.getLines();
var points = gridquestion.getPoints();
var iPoints = [];
for (var i = 0; i < points.length; i++)
{
var found = false;
for (var j = 0; j < lines.length; j++)
{
if ((points[i] == lines[j].source) || (points[i] == lines[j].target))
{
found = true;
break;
}
}
if (!found) iPoints.push(points[i]);
}
return iPoints;
}
function getIndent(depth)
{
var str = "";
for (var i = 0; i < depth * 3; i++)
{
str += " ";
}
return str;
}
function getIndentedText(xNode, depth)
{
var alignedText = '';
if (xNode.nodeType == 3)
{
if (xNode.nodeValue)
return (alignedText + xNode.nodeValue);
else
return (alignedText);
}
alignedText = getIndent(depth) + '<' + xNode.nodeName + '>';
var length = alignedText.length;
for (var i = 0; i < xNode.childNodes.length; i++)
{
if (xNode.childNodes[i].nodeType == 3)
alignedText += getIndentedText(xNode.childNodes[i], depth + 1);
else
alignedText += '\n' + getIndentedText(xNode.childNodes[i], depth + 1);
}
var trimedText = alignedText.replace(/^\s+|\s+$/g, "");
if ((trimedText.charAt(trimedText.length - 1) == '}') || (xNode.nodeName == 'TerminatedEdgeObject') || (alignedText.length == length))
{
return (alignedText + '</' + xNode.nodeName + '>');
} else
{
return (alignedText + '\n' + getIndent(depth) + '</' + xNode.nodeName + '>');
}
}
var xmlDoc = Grid.ImportExport.parseFromString("<root></root>");
var AnswerSetNode = xmlDoc.createElement('AnswerSet');
var QuestionNode = xmlDoc.createElement('Question');
QuestionNode.setAttribute('id', gridquestion.id);
AnswerSetNode.appendChild(QuestionNode);
var QuestionPartNode = xmlDoc.createElement('QuestionPart');
QuestionPartNode.setAttribute('id', 1);
QuestionNode.appendChild(QuestionPartNode);
var ObjectSetNode = xmlDoc.createElement('ObjectSet');
QuestionPartNode.appendChild(ObjectSetNode);
identifyObjects(xmlDoc, ObjectSetNode);
var TerminatedEdgeObjectNode = xmlDoc.createElement('TerminatedEdgeObject');
getTerminatedEdgeObjects(xmlDoc, ObjectSetNode);
getSnapPoints(xmlDoc, QuestionPartNode);
Grid.ImportExport.writeShapes(QuestionPartNode, gridquestion);
var currentTime = new Date();
var month = currentTime.getMonth() + 1;
var day = currentTime.getDate();
var year = currentTime.getFullYear() + '';
var hours = currentTime.getHours();
var minutes = currentTime.getMinutes();
var APM = 'AM';
if (hours > 11) APM = 'PM';
var timeInfo = month + '/' + day + '/' + year.substring(2, 4) + '  ' + hours + ':' + minutes + ' ' + APM;
var header =
'<?xml version="1.0" encoding="UTF-8"?>\n' +
'<!-- MACHINE GENERATED ' + timeInfo + '. DO NOT EDIT -->\n' +
'<!DOCTYPE AnswerSet [\n' +
'<!ELEMENT AnswerSet (Question+)>\n' +
'<!ELEMENT AtomicObject (#PCDATA)>\n' +
'<!ELEMENT EdgeVector (#PCDATA)>\n' +
'<!ELEMENT GridImageTestPoints (TestPoint*)>\n' +
'<!ELEMENT LabelList (#PCDATA)>\n' +
'<!ELEMENT Object (PointVector,EdgeVector,LabelList,ValueList)>\n' +
'<!ELEMENT ObjectSet (Object,AtomicObject+)>\n' +
'<!ELEMENT PointVector (#PCDATA)>\n' +
'<!ELEMENT Question (QuestionPart)>\n' +
'<!ATTLIST Question id NMTOKEN #REQUIRED>\n' +
'<!ELEMENT QuestionPart (LabelList,GridImageTestPoints,ObjectSet)>\n' +
'<!ATTLIST QuestionPart id NMTOKEN #REQUIRED>\n' +
'<!ELEMENT TestPoint (#PCDATA)>\n' +
'<!ELEMENT ValueList (#PCDATA)>\n' +
']>\n';
if (typeof XMLSerializer != 'undefined')
{
var serializer = new XMLSerializer();
var answerXml = serializer.serializeToString(AnswerSetNode);
return (header + answerXml);
}
else if (AnswerSetNode.xml)
{
return (header + AnswerSetNode.xml);
}
else
{
throw Error('This browser does not support serializing XML nodes');
}
};
var parseImageFiles = function(questionXml)
{
var getTextContent = function(node)
{
if (node && node.childNodes && node.childNodes.length)
return node.childNodes[0].nodeValue;
return null;
};
var imageFiles = [];
var xmlDoc = Grid.ImportExport.parseFromString(questionXml);
var imageNodes = xmlDoc.getElementsByTagName('FileSpec');
Grid.ImportExport.eachNode(imageNodes, function(imageNode)
{
var imageFile = getTextContent(imageNode);
if (imageFiles.indexOf(imageFile) == -1) imageFiles.push(imageFile);
});
imageNodes = xmlDoc.getElementsByTagName('Image');
Grid.ImportExport.eachNode(imageNodes, function(imageNode)
{
var imageFile = imageNode.getAttribute('src');
if (imageFiles.indexOf(imageFile) == -1) imageFiles.push(imageFile);
});
return imageFiles;
};
this.loadItem = function(questionXml, callbackCreated, callbackFailure)
{
var imageFiles = parseImageFiles(questionXml);
var imageLoader = new Grid.ImportExport.ImageLoader();
if (imageFiles.length == 0)
{
this.loadItem2(questionXml, callbackCreated, imageLoader);
return;
}
for (var i = 0; i < imageFiles.length; i++)
{
var url = Grid.ImportExport.resolveUrl(imageFiles[i]);
imageLoader.addImage(url);
}
var self = this;
imageLoader.load(function()
{
var imageErrors = imageLoader.getErrors();
if (imageErrors.length == 0)
{
self.loadItem2.call(self, questionXml, callbackCreated, imageLoader);
}
else
{
callbackFailure('Error loading DOM images', imageErrors);
}
});
};
this.loadItem2 = function(questionXml, callback, imageLoader)
{
answerSpaceXml = questionXml;
function removeQuotes(str)
{
var first = str.indexOf('"');
if (first == -1) return str;
str = str.substring(first + 1);
var second = str.lastIndexOf('"');
if (second == -1) return str;
return str.substring(0, second);
}
function addBackgroundImage(bkgNode)
{
var node = bkgNode.firstChild;
var fileSpec = "";
var position = "";
while (node)
{
if (node.nodeName == "FileSpec")
{
fileSpec = removeQuotes(node.childNodes[0].nodeValue);
}
else if (node.nodeName == "Position")
{
position = removeQuotes(node.childNodes[0].nodeValue);
}
if ((fileSpec != "") && (position != ""))
{
var xy = position.split(',');
var url = Grid.ImportExport.resolveUrl(fileSpec);
var htmlImage = imageLoader.getImage(url);
if (htmlImage != null)
{
gridquestion.addBackgroundImage(htmlImage.src, xy[0] * 1, xy[1] * 1, htmlImage.width, htmlImage.height);
}
return;
}
node = node.nextSibling;
}
}
function addPalleteImage(palleteNode)
{
var node = palleteNode.firstChild;
var labelName = "";
var fileName = "";
while (node)
{
if (node.nodeName == "FileSpec")
{
fileName = removeQuotes(node.childNodes[0].nodeValue);
}
else if (node.nodeName == "Label")
{
labelName = removeQuotes(node.childNodes[0].nodeValue);
labelName = YAHOO.lang.trim(labelName);
}
if ((fileName != "") && (labelName != ""))
{
var url = Grid.ImportExport.resolveUrl(fileName);
var htmlImage = imageLoader.getImage(url);
if (htmlImage != null)
{
gridquestion.addPaletteImage(labelName, htmlImage.src, htmlImage.width, htmlImage.height);
}
return;
}
node = node.nextSibling;
}
}
gridquestion.clearQuestion();
var xmlobject = Grid.ImportExport.parseFromString(questionXml);
Grid.ImportExport.loadOptions(xmlobject, gridquestion);
var backgroundImageList = xmlobject.getElementsByTagName("ImageSpec");
if ((backgroundImageList) && (backgroundImageList[0]) && (backgroundImageList[0].childNodes[0]))
{
for (var i = 0; i < backgroundImageList.length; i++)
{
addBackgroundImage(backgroundImageList[i]);
}
}
var palleteImageList = xmlobject.getElementsByTagName("IconSpec");
if ((palleteImageList) && (palleteImageList[0]) && (palleteImageList[0].childNodes[0]))
{
for (var i = 0; i < palleteImageList.length; i++)
{
addPalleteImage(palleteImageList[i]);
}
}
Grid.ImportExport.loadHotspots(xmlobject, gridquestion, imageLoader);
var presetAnswerList = xmlobject.getElementsByTagName("PreSetAnswerPart");
if ((presetAnswerList) && (presetAnswerList[0]) && (presetAnswerList[0].childNodes[0]))
{
this.loadAnswer(Grid.ImportExport.serializeToString(presetAnswerList[0]));
}
if (gridquestion.getPaletteImages().length > 0 &&
gridquestion.getPoints().length == 0 &&
gridquestion.getImages().length == 0) {
gridquestion.options.showPalette = true;
} else {
gridquestion.options.showPalette = false;
}
if (typeof callback == 'function') callback();
};
this.loadAnswer = function(response, gridq)
{
function addSnapPoint(snapPoint, gridq)
{
if (snapPoint.childNodes.length == 0) return;
var snapStr = snapPoint.childNodes[0].nodeValue;
var first = snapStr.indexOf("@");
var snapRadius = parseInt(snapStr.substring(0, first));
snapStr = snapStr.substring(first + 1) + ";";
var index = snapStr.indexOf(";");
while (index != -1)
{
var pntStr = snapStr.substring(0, index);
var indexComma = pntStr.indexOf(",");
var x = parseInt(pntStr.substring(0, indexComma));
var y = parseInt(pntStr.substring(indexComma + 1));
if (gridq == null) gridquestion.addSnapPoint(x, y, snapRadius);
else gridq.addSnapPoint(x, y, snapRadius);
snapStr = snapStr.substring(index + 1);
index = snapStr.indexOf(";");
}
}
function addAtomicObj(obj, gridq)
{
var atomicStr = obj.childNodes[0].nodeValue;
var first = atomicStr.indexOf("{");
var second = atomicStr.indexOf("(");
var third = atomicStr.indexOf(")");
var labelName = atomicStr.substring(first + 1, second);
var pntStr = atomicStr.substring(second + 1, third);
var indexComma = pntStr.indexOf(",");
var x = parseInt(pntStr.substring(0, indexComma));
var y = parseInt(pntStr.substring(indexComma + 1));
if (gridq == null)
gridquestion.addImage(YAHOO.lang.trim(labelName), x, translateCoordinate(y));
else
gridq.addImage(YAHOO.lang.trim(labelName), x, translateCoordinate(y));
}
function addTerminatedEdgeObj(obj, gridq)
{
var arrowStr = obj.childNodes[0].nodeValue;
var index = arrowStr.indexOf(",Type-");
var type = arrowStr.substring(index + 6);
var dirType = "both";
if (type == "1") dirType = "forward";
parseSingleLine(arrowStr.substring(0, index), dirType, gridq);
}
function addObj(obj, gridq)
{
var node = obj.firstChild;
while (node)
{
if (node.nodeName == "PointVector")
{
parsePointVectorString(node.childNodes[0].nodeValue, gridq);
}
else if (node.nodeName == "EdgeVector")
{
parseEdgeVectorString(node.childNodes[0].nodeValue, gridq);
}
node = node.nextSibling;
}
}
function parsePointVectorString(pointsStr, gridq)
{
var indexLeft = pointsStr.indexOf("(");
var indexRight = pointsStr.indexOf(")");
while ((indexLeft != -1) && (indexRight != -1))
{
var pntStr = pointsStr.substring(indexLeft + 1, indexRight);
pointsStr = pointsStr.substring(indexRight + 1);
var indexComma = pntStr.indexOf(",");
var x = parseInt(pntStr.substring(0, indexComma));
var y = parseInt(pntStr.substring(indexComma + 1));
if (gridq == null)
gridquestion.addPoint(x, translateCoordinate(y));
else
{
gridq.addPoint(x, translateCoordinate(y));
}
indexLeft = pointsStr.indexOf("(");
indexRight = pointsStr.indexOf(")");
}
}
function parseEdgeVectorString(edgesStr, gridq)
{
var firstLeft = edgesStr.indexOf("{");
var lastRight = edgesStr.lastIndexOf("}");
edgesStr = edgesStr.substring(firstLeft + 1, lastRight);
var indexLeft = edgesStr.indexOf("{");
var indexRight = edgesStr.indexOf("}");
while ((indexLeft != -1) && (indexRight != -1))
{
var eStr = edgesStr.substring(indexLeft + 1, indexRight);
parseSingleLine(eStr, "none", gridq);
edgesStr = edgesStr.substring(indexRight + 1);
indexLeft = edgesStr.indexOf("{");
indexRight = edgesStr.indexOf("}");
}
}
function parseSingleLine(eStr, dirType, gridq)
{
var indexLeft = eStr.indexOf("(");
var indexRight = eStr.indexOf(")");
var pntStr = eStr.substring(indexLeft + 1, indexRight);
var indexComma = pntStr.indexOf(",");
var x = parseInt(pntStr.substring(0, indexComma));
var y = parseInt(pntStr.substring(indexComma + 1));
var point1;
if (gridq == null)
{
if (dirType != "none")
point1 = gridquestion.addPoint(x, translateCoordinate(y));
else
point1 = getExistingPoint(x, translateCoordinate(y), gridq);
} else
{
if (dirType != "none")
point1 = gridq.addPoint(x, translateCoordinate(y));
else
point1 = getExistingPoint(x, translateCoordinate(y), gridq);
}
pntStr = eStr.substring(indexRight + 1);
indexLeft = pntStr.indexOf("(");
indexRight = pntStr.indexOf(")");
pntStr = pntStr.substring(indexLeft + 1, indexRight);
indexComma = pntStr.indexOf(",");
x = parseInt(pntStr.substring(0, indexComma));
y = parseInt(pntStr.substring(indexComma + 1));
var point2;
if (gridq == null)
{
if (dirType != "none")
point2 = gridquestion.addPoint(x, translateCoordinate(y));
else
point2 = getExistingPoint(x, translateCoordinate(y), gridq);
if ((point1) && (point2))
{
gridquestion.addLine(point1, point2, dirType);
}
}
else
{
if (dirType != "none")
point2 = gridq.addPoint(x, translateCoordinate(y));
else
point2 = getExistingPoint(x, translateCoordinate(y), gridq);
if ((point1) && (point2))
{
gridq.addLine(point1, point2, dirType);
}
}
}
function getExistingPoint(x, y, gridq)
{
var points;
if (gridq == null)
points = gridquestion.getPoints();
else
points = gridq.getPoints();
for (var i = 0; i < points.length; i++)
{
if ((points[i].x == x) && (points[i].y == y))
return points[i];
}
return null;
}
if (gridq == null) gridquestion.clearResponse();
else gridq.clearResponse();
var xmlobject = Grid.ImportExport.parseFromString(response);
var objectList = xmlobject.getElementsByTagName("Object");
if ((objectList) && (objectList[0]) && (objectList[0].childNodes[0]))
{
for (var i = 0; i < objectList.length; i++)
{
addObj(objectList[i], gridq);
}
}
var atomicObjList = xmlobject.getElementsByTagName("AtomicObject");
if ((atomicObjList) && (atomicObjList[0]) && (atomicObjList[0].childNodes[0]))
{
for (var i = 0; i < atomicObjList.length; i++)
{
addAtomicObj(atomicObjList[i], gridq);
}
}
var terminatedEdgeList = xmlobject.getElementsByTagName("TerminatedEdgeObject");
if ((terminatedEdgeList) && (terminatedEdgeList[0]) && (terminatedEdgeList[0].childNodes[0]))
{
for (var i = 0; i < terminatedEdgeList.length; i++)
{
addTerminatedEdgeObj(terminatedEdgeList[i], gridq);
}
}
var snapPointList = xmlobject.getElementsByTagName("SnapPoint");
if ((snapPointList) && (snapPointList[0]) && (snapPointList[0].childNodes[0]))
{
for (var i = 0; i < snapPointList.length; i++)
{
addSnapPoint(snapPointList[i], gridq);
}
}
var model = ((gridq != null) ? gridq : gridquestion);
Grid.ImportExport.loadRegionGroupObjects(xmlobject, model);
Grid.ImportExport.loadShapes(xmlobject, model);
if (gridq == null) gridquestion.importing = true;
};
function translateCoordinate(y)
{
return (gridquestion.options.canvasHeight - y);
}
};
Grid.ImportExport.parseFromString = function(text)
{
var xmlDoc;
if (window.DOMParser) {
xmlDoc = (new window.DOMParser()).parseFromString(text, "text/xml");
} else {
xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
xmlDoc.async = "false";
xmlDoc.validateOnParse = "false";
xmlDoc.loadXML(text);
}
var errorMsg = null;
if (xmlDoc.parseError && xmlDoc.parseError.errorCode != 0) {
errorMsg = "XML Parsing Error: " + xmlDoc.parseError.reason
+ " at line " + xmlDoc.parseError.line
+ " at position " + xmlDoc.parseError.linepos;
} else {
if (xmlDoc.documentElement) {
if (xmlDoc.documentElement.nodeName == "parsererror") {
errorMsg = xmlDoc.documentElement.childNodes[0].nodeValue;
}
} else {
errorMsg = "XML Parsing Error";
}
}
if (errorMsg) {
throw new Error(errorMsg);
}
return xmlDoc;
};
Grid.ImportExport.serializeToString = function(node)
{
return node.xml || (new XMLSerializer()).serializeToString(node);
};
Grid.ImportExport.eachNode = function(nodeList, func)
{
var nodes = [];
for (var i = 0; i < nodeList.length; i++)
{
var node = nodeList[i] || nodeList.item(i);
nodes.push(node);
}
YAHOO.util.Dom.batch(nodes, func);
};
Grid.ImportExport.resolveUrl = function(url)
{
url = url.replace(/&amp;/g, '&');
url = url.split('&').join('&amp;').split('<').join('&lt;').split('"').join('&quot;');
var el = document.createElement('div');
el.innerHTML = '<a href="' + url + '">x</a>';
return el.firstChild.href;
};
Grid.ImportExport.getFilename = function(path)
{
return path.substr(path.lastIndexOf('/') + 1);
};
Grid.ImportExport.ImageLoader = function()
{
this._requests = [];
this._completedCount = 0;
this._completedCallback = null;
this.getRequests = function() { return this._requests; };
this.addImage = function(url, callback, label)
{
var request = { url: url, callback: callback, image: null, label: label };
this._requests.push(request);
};
this.getImage = function(url)
{
for (var i = 0; i < this._requests.length; i++)
{
var request = this._requests[i];
if (request.url == url) return request.image;
}
return null;
};
this.isCompleted = function()
{
return (this._completedCount == this._requests.length);
};
this.getErrors = function()
{
var imageErrors = [];
for (var i = 0; i < this._requests.length; i++)
{
var request = this._requests[i];
if (request.image.state != 1)
{
imageErrors.push(request.image);
}
}
return imageErrors;
};
this.load = function(callback)
{
this._completedCallback = callback;
for (var i = 0; i < this._requests.length; i++)
{
var request = this._requests[i];
this._requestImage(request);
}
};
this._requestImage = function(request)
{
var self = this;
request.image = new Image();
request.image.state = 0;
request.image.name = request.label;
var completed = function()
{
if (typeof (request.callback) == 'function')
{
request.callback(request.image);
}
self._requestCompleted();
};
request.image.onload = function()
{
request.image.state = 1;
completed();
};
request.image.onerror = function()
{
request.image.state = -1;
completed();
};
request.image.onabort = function()
{
request.image.state = -1;
completed();
};
request.image.src = request.url;
};
this._requestCompleted = function()
{
this._completedCount++;
if (this._completedCount == this._requests.length && typeof (this._completedCallback) == 'function')
{
var images = [];
for (var i = 0; i < this._requests.length; i++)
{
images.push(this._requests[i].image);
}
this._completedCallback(images);
}
};
};
String.prototype.startsWith = function(str)
{return (this.match("^"+str)==str);
};

// FILE: importexport.options.js (0a545402) 3/7/2014 11:24:06 AM

Grid.ImportExport.removeQuotes = function(str) {
var first = str.indexOf('"');
if (first == -1) return str;
str = str.substring(first + 1);
var second = str.lastIndexOf('"');
if (second == -1) return str;
return str.substring(0, second);
};
Grid.ImportExport.hasElementValue = function(xml, id) {
var el = xml.getElementsByTagName(id);
return (el && el[0] && el[0].childNodes[0]);
};
Grid.ImportExport.getElementString = function(xml, id) {
var el = xml.getElementsByTagName(id);
if (el && el[0] && el[0].childNodes[0]) {
return this.removeQuotes(el[0].childNodes[0].nodeValue);
}
return null;
};
Grid.ImportExport.getElementBool = function(xml, id) {
var value = Grid.ImportExport.getElementString(xml, id);
return (value && value === 'true');
};
Grid.ImportExport.getElementInt = function(xml, id) {
var value = Grid.ImportExport.getElementString(xml, id);
return (value) ? parseInt(value) : 0;
};
Grid.ImportExport.loadOptions = function(gridXml, model) {
var options = model.options;
if (this.hasElementValue(gridXml, 'UpdateLayout')) {
options.updateLayout = this.getElementBool(gridXml, 'UpdateLayout');
}
if (this.hasElementValue(gridXml, 'ContainerPaddingTop')) {
options.containerPaddingTop = this.getElementInt(gridXml, 'ContainerPaddingTop');
}
if (this.hasElementValue(gridXml, 'ContainerPaddingRight')) {
options.containerPaddingRight = this.getElementInt(gridXml, 'ContainerPaddingRight');
}
if (this.hasElementValue(gridXml, 'ContainerPaddingBottom')) {
options.containerPaddingBottom = this.getElementInt(gridXml, 'ContainerPaddingBottom');
}
if (this.hasElementValue(gridXml, 'ContainerPaddingLeft')) {
options.containerPaddingLeft = this.getElementInt(gridXml, 'ContainerPaddingLeft');
}
if (this.hasElementValue(gridXml, 'PaletteWidth')) {
options.paletteWidth = this.getElementInt(gridXml, 'PaletteWidth');
}
if (this.hasElementValue(gridXml, 'PaletteGutter')) {
options.paletteGutter = this.getElementInt(gridXml, 'PaletteGutter');
}
var centerImageNode = gridXml.getElementsByTagName("CenterImage");
if ((centerImageNode) && (centerImageNode[0]) && (centerImageNode[0].childNodes[0])) {
options.paletteCenter = (centerImageNode[0].childNodes[0].nodeValue == 'true') ? true : false;
}
var scaleImageNode = gridXml.getElementsByTagName("ScaleImage");
if ((scaleImageNode) && (scaleImageNode[0]) && (scaleImageNode[0].childNodes[0])) {
options.paletteScale = (scaleImageNode[0].childNodes[0].nodeValue == 'true') ? true : false;
}
if (this.hasElementValue(gridXml, 'ShowToolbar')) {
options.showToolbar = this.getElementBool(gridXml, 'ShowToolbar');
}
if (this.hasElementValue(gridXml, 'ToolbarHeight')) {
options.toolbarHeight = this.getElementInt(gridXml, 'ToolbarHeight');
}
if (this.hasElementValue(gridXml, 'ToolbarGutter')) {
options.toolbarGutter = this.getElementInt(gridXml, 'ToolbarGutter');
}
var buttonNode = gridXml.getElementsByTagName("ShowButtons");
if ((buttonNode) && (buttonNode[0]) && (buttonNode[0].childNodes[0]) && (buttonNode[0].childNodes[0].nodeValue)) {
var buttons = this.removeQuotes(buttonNode[0].childNodes[0].nodeValue).split(",");
for (var i = 0; i < buttons.length; i++) {
options.addButton(buttons[i]);
}
}
if (this.hasElementValue(gridXml, 'CanvasWidth')) {
options.canvasWidth = this.getElementInt(gridXml, 'CanvasWidth');
}
if (this.hasElementValue(gridXml, 'CanvasWidthExt')) {
options.canvasWidthExt = this.getElementInt(gridXml, 'CanvasWidthExt');
}
if (this.hasElementValue(gridXml, 'CanvasHeight')) {
options.canvasHeight = this.getElementInt(gridXml, 'CanvasHeight');
}
if (this.hasElementValue(gridXml, 'CanvasHeightExt')) {
options.canvasHeightExt = this.getElementInt(gridXml, 'CanvasHeightExt');
}
if (this.hasElementValue(gridXml, 'CanvasBorderOffset')) {
options.canvasBorderOffset = this.getElementInt(gridXml, 'CanvasBorderOffset');
}
if (this.hasElementValue(gridXml, 'ProperLineGeometry')) {
options.properLineGeometry = this.getElementBool(gridXml, 'ProperLineGeometry');
}
var selectionToleranceNode = gridXml.getElementsByTagName("SelectionTolerance");
if ((selectionToleranceNode) && (selectionToleranceNode[0]) && (selectionToleranceNode[0].childNodes[0])) {
options.selectionTolerance = parseInt(this.removeQuotes(selectionToleranceNode[0].childNodes[0].nodeValue));
}
var gridSpacingNode = gridXml.getElementsByTagName("GridSpacing");
if ((gridSpacingNode) && (gridSpacingNode[0]) && (gridSpacingNode[0].childNodes[0])) {
var spacingStr = gridSpacingNode[0].childNodes[0].nodeValue;
spacingStr = this.removeQuotes(spacingStr.replace(/^\s+|\s+$/g, ""));
var strSplit = spacingStr.split(",");
options.gridSpacing = parseInt(strSplit[0].replace(/^\s+|\s+$/g, ""));
if (strSplit[1].replace(/^\s+|\s+$/g, "") == "Y") options.snapToGrid = true;
else options.snapToGrid = false;
}
var gridColorNode = gridXml.getElementsByTagName("GridColor");
if ((gridColorNode) && (gridColorNode[0]) && (gridColorNode[0].childNodes[0])) {
options.gridColor = this.removeQuotes(gridColorNode[0].childNodes[0].nodeValue);
options.showGridLines = (options.gridColor != 'None');
}
if (this.hasElementValue(gridXml, 'ShowFeedback')) {
options.showFeedback = this.getElementBool(gridXml, 'ShowFeedback');
}
if (this.hasElementValue(gridXml, 'FeedbackHeight')) {
options.feedbackHeight = this.getElementInt(gridXml, 'FeedbackHeight');
}
if (this.hasElementValue(gridXml, 'FeedbackGutter')) {
options.feedbackGutter = this.getElementInt(gridXml, 'FeedbackGutter');
}
};

// FILE: importexport.hotspot.js (80746697) 3/7/2014 11:24:06 AM

Grid.ImportExport.parseRegion = function(regionNode)
{
var region =
{
name: regionNode.getAttribute('name'),
shape: regionNode.getAttribute('shape'),
coords: regionNode.getAttribute('coords'),
events: []
};
var eventNodes = regionNode.getElementsByTagName('Event');
Grid.ImportExport.eachNode(eventNodes, function(eventNode)
{
var regionEvent =
{
name: eventNode.getAttribute('name'),
styles: {},
image: null,
label: null
};
var stylesNode = eventNode.getElementsByTagName('Styles');
if (stylesNode.length == 1)
{
Grid.ImportExport.eachNode(stylesNode[0].attributes, function(styleAttrib)
{
regionEvent.styles[styleAttrib.name] = styleAttrib.value;
});
}
var imageNode = eventNode.getElementsByTagName('Image');
if (imageNode.length == 1)
{
imageNode = imageNode[0];
regionEvent.image =
{
src: imageNode.getAttribute('src'),
x: imageNode.getAttribute('x') * 1,
y: imageNode.getAttribute('y') * 1
};
}
var labelNode = eventNode.getElementsByTagName('Label');
if (labelNode.length == 1)
{
labelNode = labelNode[0];
regionEvent.label =
{
text: labelNode.getAttribute('text'),
x: labelNode.getAttribute('x') * 1,
y: labelNode.getAttribute('y') * 1
};
}
region.events.push(regionEvent);
});
return region;
};
Grid.ImportExport.parseRegionGroup = function(regionGroupNode)
{
var regionGroup =
{
name: regionGroupNode.getAttribute('name'),
min: regionGroupNode.getAttribute('min') * 1,
max: regionGroupNode.getAttribute('max') * 1,
includes: []
};
var regionNodes = regionGroupNode.getElementsByTagName('Region');
Grid.ImportExport.eachNode(regionNodes, function(regionNode)
{
var regionName = regionNode.getAttribute('name');
regionGroup.includes.push(regionName);
});
var includeNodes = regionGroupNode.getElementsByTagName('Include');
Grid.ImportExport.eachNode(includeNodes, function(includeNode)
{
var regionName = includeNode.getAttribute('region');
regionGroup.includes.push(regionName);
});
return regionGroup;
};
Grid.ImportExport.loadHotspots = function(xmlobject, model, imageLoader)
{
var hotspots = { regions: [], groups: [] };
var regionNodes = xmlobject.getElementsByTagName("Region");
Grid.ImportExport.eachNode(regionNodes, function(regionNode)
{
var regionJson = Grid.ImportExport.parseRegion(regionNode);
hotspots.regions.push(regionJson);
});
var regionGroupNodes = xmlobject.getElementsByTagName("RegionGroup");
Grid.ImportExport.eachNode(regionGroupNodes, function(regionGroupNode)
{
var groupJson = Grid.ImportExport.parseRegionGroup(regionGroupNode);
hotspots.groups.push(groupJson);
});
Grid.ImportExport.eachNode(hotspots.regions, function(regionJson)
{
var region = model.createRegion(regionJson.name, regionJson.shape, regionJson.coords);
if (region == null) return;
Grid.ImportExport.eachNode(regionJson.events, function(eventJson)
{
var event = region.createEvent(eventJson.name);
event.setStyles(eventJson.styles);
if (eventJson.label != null)
{
event.setLabel(eventJson.label.x, eventJson.label.y, eventJson.label.text);
}
if (eventJson.image != null)
{
var url = Grid.ImportExport.resolveUrl(eventJson.image.src);
var htmlImage = imageLoader.getImage(url);
if (htmlImage != null)
{
event.setImage(url, eventJson.image.x, eventJson.image.y, htmlImage.width, htmlImage.height);
}
}
});
region.update();
});
Grid.ImportExport.eachNode(hotspots.groups, function(groupJson)
{
var regionGroup = model.createRegionGroup(groupJson.name, groupJson.min, groupJson.max);
for (var i = 0; i < groupJson.includes.length; i++)
{
var region = model.getRegion(groupJson.includes[i]);
if (region != null) regionGroup.addRegion(region);
}
});
};
Grid.ImportExport.parseRegionGroupObjects = function(xmlobject)
{
var regionObjects = [];
var regionObjNodes = xmlobject.getElementsByTagName("RegionObject");
Grid.ImportExport.eachNode(regionObjNodes, function(regionObjNode)
{
var regionObject =
{
name: regionObjNode.getAttribute('name'),
selected: (regionObjNode.getAttribute('isselected') == 'true')
};
regionObjects.push(regionObject);
});
return regionObjects;
};
Grid.ImportExport.loadRegionGroupObjects = function(xmlobject, model)
{
var regionObjects = Grid.ImportExport.parseRegionGroupObjects(xmlobject);
for (var i = 0; i < regionObjects.length; i++)
{
var regionObject = regionObjects[i];
var region = model.getRegion(regionObject.name);
if (region != null)
{
if (regionObject.selected) region.select();
else region.deselect();
}
}
};
Grid.ImportExport.getRegionGroupsXmlString = function(model)
{
var xmlDoc = Grid.ImportExport.getRegionGroupsXmlDoc(model);
return Grid.ImportExport.serializeToString(xmlDoc);
};
Grid.ImportExport.getRegionGroupsXmlDoc = function(model)
{
var xmlDoc = Grid.ImportExport.parseFromString('<HotSpots></HotSpots>');
var appendEvent = function(event, parentNode)
{
var eventNode = xmlDoc.createElement('Event');
eventNode.setAttribute('name', event.name);
var styles = event.getStyles();
var stylesNode = xmlDoc.createElement('Styles');
for (var styleName in styles)
{
var styleValue = styles[styleName];
stylesNode.setAttribute(styleName, styleValue);
}
eventNode.appendChild(stylesNode);
var image = event.getImage();
if (image != null)
{
var imageNode = xmlDoc.createElement('Image');
imageNode.setAttribute('src', image.url);
imageNode.setAttribute('x', image.x);
imageNode.setAttribute('y', image.y);
eventNode.appendChild(imageNode);
}
var label = event.getLabel();
if (label != null)
{
var labelNode = xmlDoc.createElement('Label');
labelNode.setAttribute('text', label.text);
labelNode.setAttribute('x', label.x);
labelNode.setAttribute('y', label.y);
eventNode.appendChild(labelNode);
}
parentNode.appendChild(eventNode);
};
var appendRegion = function(region, parentNode)
{
var regionNode = xmlDoc.createElement('Region');
var shapeName = region.getType();
var shapeCoords = region.getCoords();
regionNode.setAttribute('name', region.name);
regionNode.setAttribute('shape', shapeName);
regionNode.setAttribute('coords', shapeCoords);
var events = region.getEvents();
for (var i = 0; i < events.length; i++)
{
appendEvent(events[i], regionNode);
}
parentNode.appendChild(regionNode);
};
var appendRegionGroup = function(regionGroup, parentNode)
{
var regionGroupNode = xmlDoc.createElement('RegionGroup');
regionGroupNode.setAttribute('name', regionGroup.name);
regionGroupNode.setAttribute('min', regionGroup.min);
regionGroupNode.setAttribute('max', regionGroup.max);
var regions = regionGroup.getRegions();
for (var i = 0; i < regions.length; i++)
{
var region = regions[i];
var includeNode = xmlDoc.createElement('Include');
includeNode.setAttribute('region', region.name);
regionGroupNode.appendChild(includeNode);
}
parentNode.appendChild(regionGroupNode);
};
var regions = model.getRegions();
var regionsNode = xmlDoc.createElement('Regions');
xmlDoc.documentElement.appendChild(regionsNode);
for (var i = 0; i < regions.length; i++)
{
appendRegion(regions[i], regionsNode);
}
var regionGroups = model.getRegionGroups();
var regionGroupsNode = xmlDoc.createElement('RegionGroups');
xmlDoc.documentElement.appendChild(regionGroupsNode);
for (var i = 0; i < regionGroups.length; i++)
{
appendRegionGroup(regionGroups[i], regionGroupsNode);
}
return xmlDoc;
};

// FILE: importexport.shapes.js (c4542add) 3/7/2014 11:24:06 AM

Grid.ImportExport.translateCoordinate = function(model, y)
{
return (model.options.canvasHeight - y);
};
Grid.ImportExport.writeShapes = function(rootNode, model) {
var xmlDoc = rootNode.ownerDocument;
var circles = model.getCircles();
if (circles && circles.length > 0) {
var circlesNode = this.createCirclesElement(xmlDoc, circles);
rootNode.appendChild(circlesNode);
}
var lines = model.getLines();
if (lines && lines.length > 0) {
var linesNode = this.createLinesElement(xmlDoc, lines);
rootNode.appendChild(linesNode);
}
};
Grid.ImportExport.createCirclesElement = function(xmlDoc, circles) {
var circlesNode = xmlDoc.createElement('Circles');
for (var i = 0; i < circles.length; i++) {
var circle = circles[i];
var circleNode = xmlDoc.createElement('Circle');
circleNode.setAttribute('x', circle.x);
circleNode.setAttribute('y', circle.y);
circleNode.setAttribute('r', circle.radius);
circlesNode.appendChild(circleNode);
}
return circlesNode;
};
Grid.ImportExport.createLinesElement = function(xmlDoc, lines) {
var linesNode = xmlDoc.createElement('Lines');
for (var i = 0; i < lines.length; i++) {
var line = lines[i];
var lineNode = xmlDoc.createElement('Line');
lineNode.setAttribute('sourceX', line.source.x);
lineNode.setAttribute('sourceY', line.source.y);
lineNode.setAttribute('targetX', line.target.x);
lineNode.setAttribute('targetY', line.target.y);
lineNode.setAttribute('dir', line.dirType);
lineNode.setAttribute('style', line.style);
linesNode.appendChild(lineNode);
}
return linesNode;
};
Grid.ImportExport.loadShapes = function(xmlDoc, model) {
var circlesNode = xmlDoc.getElementsByTagName('Circles')[0];
if (circlesNode) this.loadCircles(circlesNode, model);
var linesNode = xmlDoc.getElementsByTagName('Lines')[0];
if (linesNode) this.loadLines(linesNode, model);
};
Grid.ImportExport.loadCircles = function(circlesNode, model) {
var circleList = circlesNode.getElementsByTagName('Circle');
for (var i = 0; i < circleList.length; i++) {
var circleNode = circleList[i];
var x = parseInt(circleNode.getAttribute('x'));
var y = parseInt(circleNode.getAttribute('y'));
var r = parseInt(circleNode.getAttribute('r'));
var circle = model.createCircle(x, y, r);
model.addCircle(circle);
}
};
Grid.ImportExport.loadLines = function(linesNode, model) {
var lineList = linesNode.getElementsByTagName('Line');
var lines = model.getLines();
for (var i = 0; i < lineList.length; i++) {
var lineNode = lineList[i];
var sourceX = parseInt(lineNode.getAttribute('sourceX'));
var sourceY = parseInt(lineNode.getAttribute('sourceY'));
var targetX = parseInt(lineNode.getAttribute('targetX'));
var targetY = parseInt(lineNode.getAttribute('targetY'));
var dir = lineNode.getAttribute('dir');
var style = lineNode.getAttribute('style');
if (style != 'dashed') continue;
for (var j = 0; j < lines.length; j++) {
var line = lines[j];
if (sourceX == line.source.x &&
sourceY == line.source.y &&
targetX == line.target.x &&
targetY == line.target.y &&
dir == line.dirType) {
line.style = style;
line.update();
}
}
}
};

// FILE: ImportExport.qti.js (17d76a6f) 3/7/2014 11:24:06 AM

Grid.QtiImportExport = function(model) {
var gridquestion = model;
var answerSpaceXml;
var defaultEvents = [
{
name: "select",
styles: {
'fill': "white",
'fill-opacity': "0",
'stroke': "red",
'stroke-dasharray': "",
'stroke-opacity': "",
'stroke-width': "6"
},
image: null,
label: null
},
{
name: "hover",
styles: {
'fill': "white",
'fill-opacity': "0",
'stroke': "blue",
'stroke-dasharray': "",
'stroke-opacity': "",
'stroke-width': "4"
},
image: null,
label: null
}
];
this._importexport = new Grid.ImportExport(model);
this.loadItem = function(qtiXmlStr, callbackCreated, callbackFailure) {
var imageFiles = parseImageFiles(qtiXmlStr);
var imageLoader = new Grid.ImportExport.ImageLoader();
if (imageFiles.length == 0) {
loadItem2(qtiXmlStr, callbackCreated, imageLoader, imageFiles);
return;
}
for (var i = 0; i < imageFiles.length; i++) {
var url = Grid.ImportExport.resolveUrl(imageFiles[i].url);
imageLoader.addImage(url);
}
var self = this;
imageLoader.load(function() {
var imageErrors = imageLoader.getErrors();
if (imageErrors.length == 0) {
loadItem2.call(self, qtiXmlStr, callbackCreated, imageLoader, imageFiles);
} else {
callbackFailure('Error loading DOM images', imageErrors);
}
});
};
this.loadAnswer = function(response, gridq) {
this._importexport.loadAnswer.call(this, response, gridq);
};
this.getAnswerXml = function() {
this._importexport.getAnswerXml.call(this);
};
this.isStudentResponseValid = function() {
this._importexport.isStudentResponseValid.call(this);
};
var parseImageFiles = function(qtiXmlStr) {
var imageFiles = [];
var xmlDoc = Grid.ImportExport.parseFromString(qtiXmlStr);
var nodes = xmlDoc.getElementsByTagName('object');
Grid.ImportExport.eachNode(nodes, function(node) {
var nodeType = node.getAttribute('type');
if (nodeType.indexOf('image') != -1) {
var imageFile = {
url: node.getAttribute('data'),
height: node.getAttribute('height'),
width: node.getAttribute('width')
};
if (imageFiles.indexOf(imageFile) == -1) {
imageFiles.push(imageFile);
}
}
});
return imageFiles;
};
var addBackgroundImage = function(imageFiles, imageLoader) {
for (var i = 0; i < imageFiles.length; i++) {
var img = imageFiles[i];
var url = Grid.ImportExport.resolveUrl(img.url);
var htmlImage = imageLoader.getImage(url);
if ((htmlImage != null) && (img.height != null) && (img.width != null)) {
gridquestion.addBackgroundImage(htmlImage.src, 0, 0, htmlImage.width, htmlImage.height);
}
}
};
var parseHotspotChoice = function(regionNode) {
var region = {
name: regionNode.getAttribute('identifier'),
shape: regionNode.getAttribute('shape'),
coords: regionNode.getAttribute('coords'),
events: defaultEvents
};
return region;
};
var loadHotspots = function(xmlDoc, localModel, imageLoader) {
var hotspots = [];
var qtiObject = xmlDoc.getElementsByTagName('hotspotInteraction')[0];
var minChoices = qtiObject.getAttribute('minChoices');
var maxChoices = qtiObject.getAttribute('maxChoices');
var regionGroup = localModel.createRegionGroup('All', minChoices, maxChoices);
var regionNodes = xmlDoc.getElementsByTagName('hotspotChoice');
Grid.ImportExport.eachNode(regionNodes, function(regionNode) {
var regionJson = parseHotspotChoice(regionNode);
hotspots.push(regionJson);
});
Grid.ImportExport.eachNode(hotspots, function(regionJson) {
var region = localModel.createRegion(regionJson.name, regionJson.shape, regionJson.coords);
if (region == null) return;
regionGroup.addRegion(region);
if (regionJson.events == null) regionJson.events = defaultEvents;
Grid.ImportExport.eachNode(regionJson.events, function(eventJson) {
var event = region.createEvent(eventJson.name);
event.setStyles(eventJson.styles);
if (eventJson.label != null) {
event.setLabel(eventJson.label.x, eventJson.label.y, eventJson.label.text);
}
if (eventJson.image != null) {
var url = Grid.ImportExport.resolveUrl(eventJson.image.src);
var htmlImage = imageLoader.getImage(url);
if (htmlImage != null) {
event.setImage(url, eventJson.image.x, eventJson.image.y, htmlImage.width, htmlImage.height);
}
}
});
region.update();
});
};
var loadItem2 = function(qtiXmlStr, callback, imageLoader, imageFiles) {
answerSpaceXml = qtiXmlStr;
var xmlDoc = Grid.ImportExport.parseFromString(qtiXmlStr);
addBackgroundImage(imageFiles, imageLoader);
loadHotspots(xmlDoc, gridquestion, imageLoader);
if (typeof callback == 'function') callback();
};
};

// FILE: module_grid.js (8031dd07) 3/7/2014 11:24:06 AM

(function() {
function isGrid(item) {
return item.isResponseType('grid');
}
function isQTI(item) {
return item.isResponseType('hotspot');
}
ContentManager.onItemEvent('rendered', function(page, item) {
if (!isGrid(item)) return;
try {
Grid.Utils.loadImageFiles(page, item.gridAnswerSpace);
} catch(ex) {
TDS.Diagnostics.report(ex);
}
});
ContentManager.onItemEvent('loaded', function(page, item)
{
if (isGrid(item) || isQTI(item)) {
process(page, item);
}
});
function process(page, item) {
var doc = page.getDoc();
var gridContainer = doc.getElementById('GridContainer_' + item.position);
var gridStatus = doc.getElementById('StudentGrid_' + item.position + '_Status');
if (gridContainer == null) return;
var gridSvg = ContentManager.resolveBaseUrl('Scripts/Grid2/grid.svg');
var grid = new Grid(gridContainer, gridSvg);
if (isQTI(item)) {
ContentManager.QTI.loadStem(item);
grid.importexport = new Grid.QtiImportExport(grid.model);
};
item.grid = grid;
YUD.addClass(gridContainer, 'loading');
grid.allowTab = false;
grid.isReadOnly = item.isReadOnly;
var GridComponent = function(panelName)
{
this.id = panelName;
this.getXY = function() { return [0, 0]; };
this.focus = function()
{
grid.setArea(panelName);
Util.Dom.focus(grid.ui._svgWin);
};
this.blur = function()
{
grid.setArea(null);
if (!Util.Browser.isIE()) {
Util.Dom.blur(grid.ui._svgWin);
}
};
this.toString = function() { return panelName; };
};
var gridComponents = {};
gridComponents['canvas'] = new GridComponent('canvas');
gridComponents['palette'] = new GridComponent('palette');
gridComponents['toolbar'] = new GridComponent('toolbar');
grid.subscribe('onStateChange', function(gridEvt) {
if (gridStatus != null) gridStatus.innerHTML = gridEvt.name;
if (gridEvt.state == GridState.Ready) {
ContentManager.addKeyEvents(grid.ui._svgRoot);
if (typeof (KeyManager) == 'object') {
KeyManager.attachListener(grid.ui._svgRoot);
}
setTimeout(function() {
var gridResponse = null;
if (typeof (window.TestShell) == 'object' &&
typeof (window.TestShell.PageManager) == 'object') {
var response = window.TestShell.PageManager.getResponse(item.position);
gridResponse = response.getLastValue();
} else {
gridResponse = item.value;
}
if (Grid.QtiImportExport && grid.importexport instanceof Grid.QtiImportExport) {
grid.loadXml(item.qti.xml, gridResponse);
} else {
grid.loadXml(item.gridAnswerSpace, gridResponse);
}
}, 0);
}
if (gridEvt.state == GridState.Loaded) {
YUD.removeClass(gridContainer, 'loading');
if (grid.question.options.showPalette) item.addComponent(gridComponents['palette']);
if (grid.question.options.showButtons.length > 0) item.addComponent(gridComponents['toolbar']);
item.addComponent(gridComponents['canvas']);
var zoomInfo = page.getZoom();
var zoomFactor = (zoomInfo == null) ? 1 : zoomInfo.levels[zoomInfo.currentLevel].factor;
setTimeout(function() {
grid.ui.zoom(zoomFactor);
}, 0);
if (page.isShowing()) {
grid.ui._fixOffset();
}
}
if (gridEvt.state == GridState.Error) {
YUD.removeClass(gridContainer, 'loading');
YUD.addClass(gridContainer, 'failed');
if (grid.ui && grid.ui._svgObject) {
YUD.setStyle(grid.ui._svgObject, 'display', 'none');
}
}
ContentManager.log('GRID ' + item.position + ': STATE - ' + gridEvt.name);
});
grid.subscribe('onModeChange', function(gridEvt) {
ContentManager.log('GRID ' + item.position + ': MODE - ' + gridEvt.name);
});
grid.subscribe('onAreaChange', function(gridEvt) {
if (gridEvt.name != null) {
item.setActive(gridEvt);
item.setActiveComponent(gridComponents[gridEvt.name]);
}
ContentManager.log('GRID ' + item.position + ': AREA - ' + gridEvt.name);
});
if (typeof TDS.Diagnostics == 'object') {
grid.subscribe('onStateChange', function(gridEvt) {
if (gridEvt.state == GridState.Created) {
TDS.Diagnostics.addErrorHandler(grid.view._svgWin);
}
});
grid.subscribe('onError', function(evt) {
if (evt.exception) {
TDS.Diagnostics.report(evt.exception);
}
});
}
grid.init();
}
ContentManager.onItemEvent('show', function(page, item) {
if (!item.grid) return;
var grid = item.grid;
if (!grid.ui._svgObject) return;
grid.ui._fixOffset();
});
ContentManager.onItemEvent('zoom', function(page, item) {
if (item.grid) {
item.grid.ui.zoom(page.getZoomFactor());
}
});
})();
(function() {
var getter = function(item, response) {
var grid = (item.grid || item.grid2);
if (grid) {
response.value = grid.getResponseXml();
response.isValid = grid.isValid();
response.isSelected = response.isValid;
}
};
var setter = function(item, value) {
if (item && item.grid) {
item.grid.importexport.loadAnswer(value);
}
};
ContentManager.registerResponseHandler('grid', getter, setter);
})();
if (typeof (Grid.Utils) == 'undefined') Grid.Utils = {};
Grid.Utils.parseImageFiles = function(questionXml)
{
var eachNode = function(nodeList, func)
{
var nodes = [];
for (var i = 0; i < nodeList.length; i++)
{
nodes.push(nodeList[i] || nodeList.item(i));
}
YAHOO.util.Dom.batch(nodes, func);
};
var getTextContent = function(node)
{
if (node && node.childNodes && node.childNodes.length)
return node.childNodes[0].nodeValue;
return null;
};
var imageFiles = [];
var xmlDoc = Util.Xml.parseFromString(questionXml);
var imageNodes = xmlDoc.getElementsByTagName('FileSpec');
eachNode(imageNodes, function(imageNode)
{
var imageFile = getTextContent(imageNode);
if (imageFiles.indexOf(imageFile) == -1) imageFiles.push(imageFile);
});
imageNodes = xmlDoc.getElementsByTagName('Image');
eachNode(imageNodes, function(imageNode)
{
var imageFile = imageNode.getAttribute('src');
if (imageFiles.indexOf(imageFile) == -1) imageFiles.push(imageFile);
});
return imageFiles;
};
Grid.Utils.loadImageFiles = function(page, questionXml)
{
var imageFiles = Grid.Utils.parseImageFiles(questionXml);
for (var i = 0; i < imageFiles.length; i++)
{
var imageFile = imageFiles[i];
var imageUrl = Grid.ImportExport.resolveUrl(imageFile);
var img = new Image();
page.addImage(img);
img.src = imageUrl;
}
};

// FILE: drawing.js (dc06287d) 3/7/2014 11:24:13 AM

function createLine(x1, y1, x2, y2)
{
var line = document.createElement('a');
if (YAHOO.env.ua.ie > 0 && YAHOO.env.ua.ie < 9) {
line.className = 'line ieline';
} else {
line.className = 'line';
}
updateLine(line, x1, y1, x2, y2);
return line;
}
function updateLine(line, x1, y1, x2, y2)
{
if (x2 < x1)
{
var temp = x1;
x1 = x2;
x2 = temp;
temp = y1;
y1 = y2;
y2 = temp;
}
var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
line.style.width = length + 'px';
if (YAHOO.env.ua.ie > 0 && YAHOO.env.ua.ie < 9)
{
line.style.top = (y2 > y1) ? y1 + 'px' : y2 + 'px';
line.style.left = x1 + 'px';
var nCos = (x2 - x1) / length;
var nSin = (y2 - y1) / length;
line.style.filter = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod=\'auto expand\', M11=' + nCos + ', M12=' + (-1 * nSin) + ', M21=' + nSin + ', M22=' + nCos + ')';
}
else
{
var angle = Math.atan((y2 - y1) / (x2 - x1));
line.style.top = y1 + 0.5 * length * Math.sin(angle) + 'px';
line.style.left = x1 - 0.5 * length * (1 - Math.cos(angle)) + 'px';
var property = getTransformProperty(line);
line.style[property] = 'rotate(' + angle + 'rad)';
}
return line;
}
function getTransformProperty(element) {
var properties = [
'transform',
'WebkitTransform',
'msTransform',
'MozTransform',
'OTransform'
];
var p;
while (p = properties.shift()) {
if (typeof element.style[p] != 'undefined') {
return p;
}
}
return false;
}

// FILE: mi.html.js (e2ef65cd) 7/23/2014 4:30:37 PM

MatchItem = (typeof (MatchItem) == "undefined") ? {} : MatchItem;
MatchItem.ListHtmlGenerator = function (discriminator) {
var getDivId = function (str) { return (discriminator ? discriminator + str : str); };
var self = this;
this.cellFactory = MatchItem.ListCellHtml.Create;
var lineUl = document.createElement('ul');
this.tabbableSpans = [];
var choiceItems = [];
this.getClickableHeader = function(choiceItem) {
return choiceItem.elementContainer;
};
this.createHeaderElement = function (choiceItem, scope) {
choiceItem.elementContainer = document.createElement('li');
var divId = getDivId('li-' + choiceItem.identifier + '-' + scope);
choiceItem.elementContainer.setAttribute('id', divId);
choiceItem.element = document.createElement('div');
YUD.setAttribute(choiceItem.element, 'tabindex', '0');
YUD.addClass(choiceItem.element, 'innerContainer');
choiceItem.element.innerHTML = choiceItem.value;
choiceItem.elementContainer.appendChild(choiceItem.element);
choiceItem.lineUl = lineUl;
this.tabbableSpans.push(choiceItem.elementContainer);
choiceItems[divId] = choiceItem;
};
this.createTableHeaderRows = function (prompt) {
self.headerDiv = document.createElement('div');
YUD.addClass(self.headerDiv, 'matchItemLines');
YUD.setAttribute(self.headerDiv, 'id', getDivId('matchItemLinesId'));
self.headerRow = document.createElement('ul');
YUD.addClass(self.headerRow, 'matchColumn matchFirstColumn');
self.headerColumn = document.createElement('ul');
YUD.addClass(self.headerColumn, 'matchColumn matchSecondColumn');
YUD.addClass(lineUl, 'matchConnections');
self.headerDiv.appendChild(self.headerRow);
self.headerDiv.appendChild(self.headerColumn);
self.headerDiv.appendChild(lineUl);
};
this.addColumnToHeaderRow = function (column) {
self.headerColumn.appendChild(column.elementContainer);
};
this.createTable = function (table, captionText) {
var caption = document.createElement('div');
Util.Dom.setTextContent(caption, captionText);
table.appendChild(self.headerDiv);
};
this.attachRowToTable = function (row) {
self.headerRow.appendChild(row.elementContainer);
};
this.setSelected = function (val, choiceItem) {
if (val) {
YUD.addClass(choiceItem.elementContainer, 'matchSelected');
} else {
YUD.removeClass(choiceItem.elementContainer, 'matchSelected');
}
};
this.setHeaderCallback = function (choiceItem, func) {
YUE.addListener(choiceItem.element, 'click', function (evt) {
func(choiceItem);
});
};
this.setItemChecked = function (header, val) {
if (val) {
YUD.addClass(header.elementContainer, 'matchMade');
} else {
YUD.removeClass(header.elementContainer, 'matchMade');
}
};
};
MatchItem.TableHtmlGenerator = function (discriminator) {
var self = this;
this.cellFactory = MatchItem.TableCellHtml.Create;
this.getClickableHeader = function (choiceItem) {
return null;
};
this.createHeaderElement = function (choiceItem, scope) {
choiceItem.element = document.createElement('th');
choiceItem.element.setAttribute('scope', scope);
choiceItem.element.innerHTML= choiceItem.value;
if (scope == 'row') {
choiceItem.elementContainer = document.createElement('tr');
choiceItem.elementContainer.appendChild(choiceItem.element);
}
};
this.createTableHeaderRows = function (prompt) {
self.headerRow = document.createElement('tr');
self.promptCell = document.createElement('td');
self.promptCell.innerHTML = prompt;
YUD.addClass(self.promptCell, 'matchItem_cellSpacer');
self.headerRow.appendChild(self.promptCell);
};
this.addColumnToHeaderRow = function (column) {
self.headerRow.appendChild(column.element);
};
this.setSelected = function (val, choiceItem) {
};
this.setHeaderCallback = function (choiceItem) {
};
this.createTable = function (parentDiv, captionText) {
var table = document.createElement('table');
var thead = document.createElement('THEAD');
self.tbody = document.createElement('TBODY');
var caption = document.createElement('caption');
Util.Dom.setTextContent(caption, captionText);
thead.appendChild(self.headerRow);
table.appendChild(caption);
table.appendChild(thead);
table.appendChild(self.tbody);
parentDiv.appendChild(table);
};
this.setItemChecked = function(header,val) {
};
this.attachRowToTable = function (row) {
self.tbody.appendChild(row.elementContainer);
};
};
MatchItem.TableCellHtml = function (id, label, discriminator) {
var cellElement;
var checkboxElement;
var getDivId = function (str) { return (discriminator ? discriminator + str : str); };
this.getCheckbox = function () { return checkboxElement; };
cellElement = document.createElement('td');
checkboxElement = document.createElement('input');
checkboxElement.type = 'checkbox';
var lelem = document.createElement('label');
lelem.setAttribute('for', id);
lelem.innerHTML = label;
var spanNodes = lelem.getElementsByTagName('span');
var spanNodesToRemove = [];
var spanNode;
for (var spanIndex = 0; spanIndex < spanNodes.length; ++spanIndex) {
spanNode = spanNodes[spanIndex];
if (spanNode.hasAttribute('data-tag-boundary')) {
var spanAttrValue = spanNode.getAttribute('data-tag-boundary');
if (spanAttrValue === 'start' || spanAttrValue === 'end') {
spanNodesToRemove.push(spanNode);
}
}
}
for (var removeIndex = 0; removeIndex < spanNodesToRemove.length; ++removeIndex) {
spanNode = spanNodesToRemove[removeIndex];
spanNode.parentNode.removeChild(spanNode);
}
var par = lelem.getElementsByTagName('p');
while (par != null && par.length > 0) {
var p = par[0];
var span = document.createElement('span');
span.innerHTML = p.innerHTML;
p.parentNode.replaceChild(span,p);
par = lelem.getElementsByTagName('p');
}
cellElement.appendChild(checkboxElement);
cellElement.appendChild(lelem);
YUD.setAttribute(checkboxElement, 'id', id);
this.attachToRow = function (rowElement) {
rowElement.appendChild(cellElement);
};
this.isChecked = function () {
return checkboxElement.checked;
};
this.setChecked = function (val) {
checkboxElement.checked = val;
var td = checkboxElement.parentNode;
if (val)
YUD.addClass(td, 'matchItem_cellChecked');
else
YUD.removeClass(td, 'matchItem_cellChecked');
};
var listenerFuncs = [];
this.addClickListener = function (func) {
listenerFuncs.push(func);
};
YUE.addListener(checkboxElement, 'click', function (ev) {
var cancelEvent = false;
for (var i = 0; i < listenerFuncs.length; ++i) {
if (!listenerFuncs[i](ev)) {
cancelEvent = true;
}
}
if (cancelEvent) {
ev.preventDefault();
} else {
var td = checkboxElement.parentNode;
if (checkboxElement.checked) {
YUD.addClass(td, 'matchItem_cellChecked');
} else {
YUD.removeClass(td, 'matchItem_cellChecked');
}
}
});
};
MatchItem.ListCellHtml = function (id, label, parentCell, discriminator) {
var cellElement;
var line;
cellElement = document.createElement('li');
this.attachToRow = function (rowElement) {
};
this.isChecked = function () {
return line != null;
};
this.getCheckbox = function () { return null; };
this.setChecked = function (val, parentSelected) {
if (val == false) {
if (line) {
cellElement.parentNode.removeChild(cellElement);
line.parentNode.removeChild(line);
line = null;
}
} else {
if (line == null) {
var row = parentCell.getRowItem().elementContainer;
var column = parentCell.getColumnItem().elementContainer;
if (row.offsetLeft > column.offsetLeft) {
var rrr = row;
row = column;
column = rrr;
}
var container = parentCell.getRowItem().lineUl;
var r1 = YUD.getRegion(row);
var r2 = YUD.getRegion(column);
var x1 = row.offsetLeft;
var y1 = row.offsetTop;
var x2 = column.offsetLeft;
var y2 = column.offsetTop;
x1 += r1.width;
y1 += r1.height / 2;
y2 += r2.height / 2;
line = createLine(x1, y1,
x2, y2);
Util.Dom.setTextContent(line, label);
container.appendChild(cellElement);
cellElement.appendChild(line);
}
if (parentSelected)
YUD.addClass(line, 'matchParentSelected');
else
YUD.removeClass(line, 'matchParentSelected');
}
};
var listenerFuncs = [];
this.addClickListener = function (func) {
listenerFuncs.push(func);
};
};
MatchItem.TableCellHtml.Create = function(id, label,parentCell,discriminator) {
return new MatchItem.TableCellHtml(id, label, parentCell, discriminator);
};
MatchItem.ListCellHtml.Create = function (id, label, parentCell, discriminator) {
return new MatchItem.ListCellHtml(id, label, parentCell, discriminator);
};

// FILE: mi.cell.js (591ab427) 7/23/2014 4:30:37 PM

MatchItem = (typeof (MatchItem) == "undefined") ? {} : MatchItem;
MatchItem.Cell = function (id, rowIndex, colIndex, matrix, cellFactory) {
var row = rowIndex;
var column = colIndex;
this.getRow = function () { return row; };
this.getColumn = function () { return column; };
this.getRowItem = function () { return matrix.getRow(row); };
this.getColumnItem = function () { return matrix.getColumn(column); };
this.getCheckbox = function() { return presentation.getCheckbox(); };
var labelText = matrix.getRow(row).value + ' and ' + matrix.getColumn(column).value;
var presentation = cellFactory(id, labelText, this);
var onCheckFuncs = [];
this.onCheck = function (func) {
onCheckFuncs.push(func);
};
this.attachToRow = function (rowElement) {
presentation.attachToRow(rowElement);
};
this.isChecked = function () {
return presentation.isChecked();
};
this.setChecked = function (val, parentSelected) {
presentation.setChecked(val, parentSelected);
checked = val;
};
this.redraw = function () {
if (checked) {
self.setChecked(false);
self.setChecked(true);
}
};
this.erase = function () {
if (checked) {
presentation.setChecked(false);
}
};
var checked = false;
var self = this;
presentation.addClickListener(function (ev) {
if (matrix.isReadOnly()) {
return false;
} else {
if (checked == true) {
self.setChecked(false);
}
for (var i = 0; i < onCheckFuncs.length; ++i) {
onCheckFuncs[i](self);
}
}
return true;
});
return this;
};

// FILE: mi.parse.js (a95f4894) 3/7/2014 11:24:13 AM

MatchItem = (typeof (MatchItem) == "undefined") ? {} : MatchItem;
MatchItem.Parse = function (id) {
this.mid = id;
this.createFromFile = function (xmlUrl) {
var xmlhttp;
if ((typeof (window.XMLHttpRequest) == "function") ||
(typeof (window.XMLHttpRequest) == "object")) {
xmlhttp = new XMLHttpRequest();
}
else {
xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
}
xmlhttp.open("GET", xmlUrl, false);
xmlhttp.send();
var xmlDoc = xmlhttp.responseText;
return this.createFromXml(xmlDoc);
};
this.createFromXml = function (xmlDoc) {
var nodes = Util.Xml.parseFromString(xmlDoc);
var spanNodes = nodes.getElementsByTagName('span');
for (var spanIndex = 0; spanIndex < spanNodes.length; ++spanIndex) {
var spanNode = spanNodes[spanIndex];
if ((spanNode.childNodes.length === 0) && spanNode.hasAttribute('data-tag-boundary')) {
var spanAttrValue = spanNode.getAttribute('data-tag-boundary');
if (spanAttrValue === 'start' || spanAttrValue === 'end') {
spanNode.appendChild(document.createTextNode(''));
}
}
}
var docElement = nodes.documentElement;
var choiceXml;
if (docElement.tagName == 'matchInteraction') {
choiceXml = docElement;
} else {
var matchInteraction = docElement.getElementsByTagName('matchInteraction');
if ((matchInteraction == null) || matchInteraction.length != 1) {
return;
}
choiceXml = matchInteraction[0];
}
var readContent = function (choice) {
var rv = '';
for (var k = 0; k < choice.childNodes.length; ++k) {
if (choice.childNodes[k].nodeType == 1) {
rv = rv + Util.Xml.serializeToString(choice.childNodes[k]);
} else if (choice.childNodes[k].nodeType == 3) {
rv = rv + Util.Dom.getTextContent(choice.childNodes[k]);
}
}
return rv;
};
var processItemSet = function (choices) {
var itemAr = [];
var choiceItems = choices.getElementsByTagName('simpleAssociableChoice');
for (var j = 0; j < choiceItems.length; ++j) {
var choice = choiceItems[j];
var choiceItem = {
identifier: choice.getAttribute('identifier'),
matchMax: choice.getAttribute('matchMax'),
content: readContent(choice)
};
itemAr.push(choiceItem);
}
return itemAr;
};
this.maxAssociations = parseInt(choiceXml.getAttribute('maxAssociations'));
this.title = choiceXml.getAttribute('title');
this.forceTable = choiceXml.getAttribute('forceTable');
this.responseId = choiceXml.getAttribute('responseIdentifier');
this.shuffle = (choiceXml.getAttribute('shuffle') === 'true');
var choiceSets = choiceXml.getElementsByTagName('simpleMatchSet');
var promptNodes = choiceXml.getElementsByTagName('prompt');
this.prompt = (promptNodes && promptNodes.length > 0) ? Util.Dom.getTextContent(promptNodes[0]) : '';
this.rows = processItemSet(choiceSets[0]);
this.columns = processItemSet(choiceSets[1]);
};
};

// FILE: mi.matrix.js (b545f5a5) 7/23/2014 4:30:37 PM

MatchItem.PermutationArray = function (size, shuffle) {
var ar = [];
for (var i = 0; i < size; ++i) {
ar.push(i);
if (shuffle && (i > 0)) {
var ix = (Math.floor(Math.random() * (i + 1)));
var p = ar[i];
ar[i] = ar[ix];
ar[ix] = p;
}
}
return ar;
};
MatchItem.Matrix = function (parseResult, htmlGenerator, discriminator) {
var rowHeaders = [];
var columnHeaders = [];
var cells = [];
var onChangedFuncs = [];
var addComponentArray = [];
var keyEventHandlerArray = [];
var prompt = "";
if (parseResult.prompt != null) {
prompt = parseResult.prompt;
}
var maxAssociations = parseResult.maxAssociations;
var shuffle = parseResult.shuffle;
var title = parseResult.title;
var cs = parseResult.columns;
var rs = parseResult.rows;
this.responseId = parseResult.responseId;
var self = this;
this.onChanged = function (func) {
onChangedFuncs.push(func);
};
this.getRow = function (index) {
return rowHeaders[index];
};
this.getColumn = function (index) {
return columnHeaders[index];
};
this.getRowCount = function () {
return rowHeaders.length;
};
this.getColumnCount = function () {
return columnHeaders.length;
};
this.getCell = function (r, c) {
return cells[this.index(rowHeaders[r].identifier, columnHeaders[c].identifier)];
};
this.violatesMatchMax = function (cell) {
var column = columnHeaders[cell.getColumn()];
var row = rowHeaders[cell.getRow()];
var rmax = row.matchMax;
var cmax = column.matchMax;
var orow, ocol;
var changed = false;
if ((cmax) && self.checksInColumn(cell.getColumn()) > cmax) {
cell.setChecked(false);
if (cmax == 1) {
ocol = getOnlyCheckInColumn(cell.getColumn());
if (rmax == 1)
orow = getOnlyCheckInRow(cell.getRow());
cell.setChecked(true);
}
} else if ((rmax) && self.checksInRow(cell.getRow()) > rmax) {
cell.setChecked(false);
if (rmax == 1) {
orow = getOnlyCheckInRow(cell.getRow());
if (cmax == 1)
ocol = getOnlyCheckInColumn(cell.getColumn());
cell.setChecked(true);
}
} else if ((maxAssociations) && self.countAssociations() > maxAssociations) {
cell.setChecked(false);
} else {
for (var i = 0; i < onChangedFuncs.length; ++i) {
onChangedFuncs[i](self);
}
}
if (orow) {
orow.setChecked(false);
}
if (ocol) {
ocol.setChecked(false);
}
};
this.isResponseValid = function() {
var value = this.getResult();
return (value && value.length > 0);
};
this.getResponseXML = function() {
var value = this.getResult();
var xmlDoc = Util.Xml.createDocument('itemResponse');
var xmlEl = xmlDoc.documentElement;
var responseXML = xmlDoc.createElement('response');
responseXML.setAttribute('id', this.responseId);
xmlEl.appendChild(responseXML);
if (value && value.length > 0) {
for (var i = 0; i < value.length; i++) {
var valueXML = xmlDoc.createElement('value');
valueXML.textContent = value[i];
responseXML.appendChild(valueXML);
}
}
var xmlStr = Util.Xml.serializeToString(xmlDoc);
return xmlStr;
};
this.getResult = function () {
var result = [];
this.forEachCell(function (cell) {
if (cell.isChecked()) {
var str = rowHeaders[cell.getRow()].identifier +
' ' +
columnHeaders[cell.getColumn()].identifier;
result.push(str);
}
});
return result;
};
this.setResultXML = function (resultXML) {
var xmlDoc = Util.Xml.parseFromString(resultXML);
var docEl = xmlDoc.documentElement;
var values = docEl.getElementsByTagName('value');
var result = [];
if (values && values.length >0 ) {
for (var i = 0; i < values.length; i++) {
result.push(values[i].textContent);
}
}
this.setResult(result);
};
this.setResult = function (ar) {
var i;
this.forEachCell(function (cell) {
var row = rowHeaders[cell.getRow()];
var col = columnHeaders[cell.getColumn()];
cell.setChecked(false);
htmlGenerator.setItemChecked(row, false);
htmlGenerator.setItemChecked(col, false);
});
if (ar == null)
return;
this.forEachCell(function (cell) {
for (i = 0; i < ar.length; ++i) {
var ar2 = ar[i].split(' ');
var row = rowHeaders[cell.getRow()];
var col = columnHeaders[cell.getColumn()];
var rowid = row.identifier;
var colid = col.identifier;
if ((ar2[0] == rowid) && (ar2[1] == colid)) {
cell.setChecked(true);
htmlGenerator.setItemChecked(row, true);
htmlGenerator.setItemChecked(col, true);
}
}
});
};
this.forEachCell = function (func) {
for (var i = 0; i < this.getRowCount(); ++i) {
for (var j = 0; j < this.getColumnCount(); ++j) {
var cell = this.getCell(i, j);
func(cell);
}
}
};
this.forEachRow = function (func) {
for (var i = 0; i < self.getRowCount(); ++i) {
func(self.getRow(i));
}
};
this.forEachColumn = function (func) {
for (var j = 0; j < self.getColumnCount(); ++j) {
func(self.getColumn(j));
}
};
var handleHeaderClick = function (header) {
var iterator, otherIterator;
var selectedRow = null;
var selectedCol = null;
if (header.isSelected) {
htmlGenerator.setSelected(false, header);
header.isSelected = false;
updateParentSelected(header);
return;
}
if (header.scope == 'row') {
otherIterator = self.forEachColumn;
iterator = self.forEachRow;
selectedRow = header;
} else {
otherIterator = self.forEachRow;
iterator = self.forEachColumn;
selectedCol = header;
}
iterator(function (entity) {
if ((entity.identifier != header.identifier) &&
(entity.isSelected == true)) {
entity.isSelected = false;
htmlGenerator.setSelected(false, entity);
}
});
otherIterator(function (entity) {
if (entity.isSelected) {
if (selectedRow == null) {
selectedRow = entity;
} else {
selectedCol = entity;
}
}
});
if (selectedRow && selectedCol) {
self.forEachCell(function (cell) {
if ((cell.getRowItem().identifier == selectedRow.identifier) &&
(cell.getColumnItem().identifier == selectedCol.identifier)) {
selectedRow.isSelected = false;
htmlGenerator.setSelected(false, selectedRow);
selectedCol.isSelected = false;
htmlGenerator.setSelected(false, selectedCol);
if (cell.isChecked() == false) {
cell.setChecked(true);
self.violatesMatchMax(cell);
} else {
cell.setChecked(false);
}
}
});
} else {
header.isSelected = true;
htmlGenerator.setSelected(true, header);
}
updateParentSelected(header);
};
var updateParentSelected = function (header) {
self.forEachCell(function (cell) {
if (cell.isChecked() == true) {
if ((rowHeaders[cell.getRow()].isSelected == true) ||
(columnHeaders[cell.getColumn()].isSelected == true)) {
cell.setChecked(true, true);
} else {
cell.setChecked(true, false);
}
}
});
self.forEachRow(function (row) {
if (self.checksInRow(row.index) > 0) {
htmlGenerator.setItemChecked(row, true);
} else {
htmlGenerator.setItemChecked(row, false);
}
});
self.forEachColumn(function (column) {
if (self.checksInColumn(column.index) > 0) {
htmlGenerator.setItemChecked(column, true);
} else {
htmlGenerator.setItemChecked(column, false);
}
});
};
var addHeader = function (xHeader, scopeString) {
var choiceItem = {
identifier: xHeader.identifier,
matchMax: parseInt(xHeader.matchMax),
value: xHeader.content,
element: null,
elementContainer: null,
isSelected: false,
scope: scopeString
};
htmlGenerator.createHeaderElement(choiceItem, scopeString);
htmlGenerator.setHeaderCallback(choiceItem, handleHeaderClick);
return choiceItem;
};
var addColumn = function (xHeader) {
var acol = addHeader(xHeader, 'col');
acol.index = columnHeaders.length;
columnHeaders.push(acol);
};
var addRow = function (xHeader) {
var arow = addHeader(xHeader, 'row');
arow.index = rowHeaders.length;
rowHeaders.push(arow);
return arow;
};
this.index = function (rowid, colid) {
return parseResult.mid + '-' + rowid + '-' + colid;
};
var addCell = function (row, col) {
var identifier = self.index(rowHeaders[row].identifier, columnHeaders[col].identifier);
var tmpCell = new MatchItem.Cell('micell-' + identifier, row, col, self, htmlGenerator.cellFactory, discriminator);
cells[identifier] = tmpCell;
tmpCell.attachToRow(rowHeaders[row].elementContainer);
tmpCell.onCheck(self.violatesMatchMax);
};
this.checksInColumn = function (ix) {
var rv = 0;
this.forEachCell(function (cell) {
if ((cell.getColumn() == ix) && cell.isChecked())
++rv;
});
return rv;
};
var getOnlyCheckInColumn = function (ix) {
var rv = null;
self.forEachCell(function (cell) {
if ((cell.getColumn() == ix) && cell.isChecked() &&
(columnHeaders[cell.getColumn()].matchMax == 1))
rv = cell;
});
return rv;
};
var getOnlyCheckInRow = function (ix) {
var rv = null;
self.forEachCell(function (cell) {
if ((cell.getRow() == ix) && cell.isChecked() &&
(rowHeaders[cell.getRow()].matchMax == 1))
rv = cell;
});
return rv;
};
this.checksInRow = function (ix) {
var rv = 0;
this.forEachCell(function (cell) {
if ((cell.getRow() == ix) && cell.isChecked())
++rv;
});
return rv;
};
this.countAssociations = function () {
var rv = 0;
this.forEachCell(function (cell) {
if (cell.isChecked())
++rv;
});
return rv;
};
this.attachTable = function (table) {
htmlGenerator.createTable(table, title);
for (var i = 0; i < rowHeaders.length; ++i) {
htmlGenerator.attachRowToTable(rowHeaders[i]);
}
};
this.eraseChecks = function () {
this.forEachCell(function (cell) {
cell.erase();
});
};
this.reDrawChecks = function () {
window.setTimeout(function () {
self.forEachCell(function (cell) {
cell.redraw();
});
}, 1);
};
var getParentElement = function (choiceItem) {
return choiceItem.elementContainer ? choiceItem.elementContainer : choiceItem.element;
};
htmlGenerator.createTableHeaderRows(prompt);
var colperms = MatchItem.PermutationArray(cs.length, parseResult.shuffle);
for (var colix = 0; colix < cs.length; ++colix) {
addColumn(cs[colperms[colix]]);
htmlGenerator.addColumnToHeaderRow(columnHeaders[colix]);
}
var rowperms = MatchItem.PermutationArray(rs.length, shuffle);
for (var rowix = 0; rowix < rs.length; ++rowix) {
addRow(rs[rowperms[rowix]]);
for (colix = 0; colix < columnHeaders.length; ++colix) {
addCell(rowix, colix);
}
}
this.getComponentArray = function () {
return addComponentArray;
};
this.handleKeyEvent = function(spanId, evt) {
if (spanId) {
var handleEnterKey = keyEventHandlerArray[spanId];
if ((handleEnterKey) && (typeof handleEnterKey == "function")) {
handleEnterKey();
}
}
};
var headerNavIterator = function (iterator) {
iterator(function (entity) {
var span = htmlGenerator.getClickableHeader(entity);
if ((span != null) && (span.id)) {
addComponentArray.push(span);
keyEventHandlerArray[span.id] = function () {
handleHeaderClick(entity);
};
}
});
};
headerNavIterator(this.forEachRow);
headerNavIterator(this.forEachColumn);
this.forEachCell(function (cell) {
var checkbox = cell.getCheckbox();
if ((checkbox) && (checkbox.id)) {
addComponentArray.push(checkbox);
keyEventHandlerArray[checkbox.id] = function() {
cell.setChecked(!(cell.isChecked()));
self.violatesMatchMax(cell);
};
}
});
};
MatchItem.Matrix.prototype.isReadOnly = function () { return false; };

// FILE: mi.render.js (337c68b2) 3/7/2014 11:24:13 AM


// FILE: module_matchitem.js (2ac78a6c) 7/23/2014 4:30:36 PM

MatchItem = (typeof (MatchItem) == "undefined") ? {} : MatchItem;
ContentManager.onItemEvent('available', function (page, item) {
if (item.isResponseType('MatchItem') || item.isResponseType('TableMatch')) {
ContentManager.log("MatchItem: processing " + item.getID());
var parseResult = new MatchItem.Parse(item.itemKey);
var qtiXml = (item.qti) ? item.qti.xml : item.rendererSpec;
if (qtiXml == null) return;
parseResult.createFromXml(qtiXml);
var presentation;
if (item.isResponseType('TableMatch') || ContentManager.isAccessibilityEnabled()) {
presentation = new MatchItem.TableHtmlGenerator(item.position);
} else {
presentation = new MatchItem.ListHtmlGenerator(item.position);
}
var discriminator = item.position;
var m1 = new MatchItem.Matrix(parseResult, presentation, discriminator);
m1.isReadOnly = item.isReadOnly;
var componentArray = m1.getComponentArray();
for (var i = 0; i < componentArray.length; ++i) {
item.addComponent(componentArray[i]);
}
var pageDoc = page.getDoc();
var div = pageDoc.getElementById('MatchContainer_' + item.position);
if (div) {
div.innerHTML = '';
YUD.removeClass(div, 'loading');
m1.attachTable(div);
item.MatchItem = m1;
var onresize = window.onresize;
YUE.on(page.getWin(), 'scroll', function () {
if (onresize != null)
onresize();
if (item.isVisible())
m1.reDrawChecks();
});
if (item.value != null) {
m1.setResultXML(item.value);
}
}
}
});
ContentManager.onItemEvent('keyevent', function (page, item, evt) {
if (!item.MatchItem) return;
if (evt.type != 'keydown') return;
if (evt.ctrlKey || evt.altKey) return;
var matches = item.MatchItem;
if (evt.key == 'Enter') {
if (ContentManager.isReadOnly()) return;
evt.stopPropagation();
var matchId = item.getActiveComponent().id;
if (matchId) matches.handleKeyEvent(matchId, evt);
}
});
ContentManager.onItemEvent('zoom', function (page, item) {
if (item.MatchItem != null) {
item.MatchItem.reDrawChecks();
}
});
ContentManager.onItemEvent('show', function (page, item) {
if (item.MatchItem != null) {
item.MatchItem.reDrawChecks();
}
});
(function () {
var getter = function (item, response) {
response.value = item.MatchItem.getResponseXML();
response.isValid = item.MatchItem.isResponseValid();
response.isSelected = response.isValid;
response.isAvailable = true;
};
var setter = function (item, value) {
item.MatchItem.setResultXML(value);
};
ContentManager.registerResponseHandler('MatchItem', getter, setter);
ContentManager.registerResponseHandler('TableMatch', getter, setter);
})();

// FILE: PiObject.js (ea38953b) 3/7/2014 11:24:11 AM

PiObject = function(o){
this.properties = [];
var values = {};
this.length = this.properties.length;
this.listeners = {};
this.filters = {};
this.globalListeners = [];
this.globalFilters = [];
var uuid = null;
var uid = -1;
this.getUUID = function() {
if (uuid == null) {
var my = {};
my.date = new Date();
my.uuid = [];
my.uuid.push(my.date.getFullYear().toString());
my.uuid.push(my.date.getMonth().toString());
my.uuid.push(my.date.getDate().toString());
my.uuid.push(my.date.getTime().toString());
uuid = my.uuid.join("");
}
return uuid;
}
this.getLength = function() {
return this.properties.length;
}
this.getProperty = function(index) {
if (index.constructor != Number)
return index.replace(/^\s*(\S*)\s*$/,'$1');
else if (index >= 0 && index < this.getLength())
return this.properties[index];
else
return '';
}
this.getIndex = function(propertyName) {
if (propertyName.constructor != Number) {
for (var i=0; i < this.getLength(); i++)
if (this.properties[i] == propertyName)
return i;
}
var num = parseInt(propertyName);
if (propertyName == num && num >= 0 && num < this.getLength())
return num;
else
return -1;
}
this.getPropertyList = function(propertyName) {
if (propertyName) {
var value;
var propertyList = [];
for (var i=0; i<this.properties.length; i++) {
value = values[this.properties[i]];
if (value instanceof PiObject)
propertyList.push( value.get(propertyName).toString() );
else if (value instanceof Object)
propertyList.push( value[propertyName] || '' );
else
propertyList.push('');
}
return propertyList.join();
}
else {
return this.properties.join();
}
}
this.get = function(property) {
var my = {};
property = this.getProperty(property);
if (typeof values[property] != "undefined")
my.result = values[property]
else
my.result = "";
my.filters = this.filters[property] || [];
my.filters = my.filters.concat(this.globalFilters);
for (var i=0; i < my.filters.length; i++) {
my.returnVariable = my.filters[i].method.call(my.filters[i].scope,this,property,my.result);
if (my.returnVariable != undefined)
my.result = my.returnVariable;
}
return my.result;
}
this.exists = function(property) {
property = this.getProperty(property);
if (property.length && this.getIndex(property) >= 0)
return true;
else
return false;
}
this.set = function(propertyName,value) {
var o = {};
if (propertyName != undefined) {
if (propertyName.constructor == Object)
o = propertyName;
else
o[this.getProperty(propertyName)] = value;
}
var my = {};
for (my.name in o) {
my.index = my.name;
if (my.name.constructor == Number)
my.name = this.getProperty(my.name);
my.oldValue = values[my.name] || "";
if (this.getIndex(my.index) < 0) {
uid++;
this.properties.push(my.name);
this.length = this.properties.length;
}
my.newValue = o[my.name];
values[my.name] = my.newValue;
my.listeners = this.listeners[my.name] || [];
my.listeners = my.listeners.concat(this.globalListeners);
for (var i=0; i < my.listeners.length; i++) {
my.result = my.listeners[i].method.call(my.listeners[i].scope,this,my.index,my.oldValue,my.newValue);
if (my.result != undefined && my.result != my.newValue) {
my.newValue = my.result;
values[my.name] = my.newValue;
}
}
}
if (propertyName != undefined && propertyName.constructor != Object)
return this.get(my.name);
else
return this;
}
this.insertAt = function(i) {
var my = {};
var o = {};
my.index = this.getIndex(i);
for (var i=1; i < arguments.length; i++) {
my.prop = (++uid).toString();
if (my.index >= 0)
this.properties.splice(my.index++,0,my.prop);
else
this.properties.push(my.prop);
this.length = this.properties.length;
o[my.prop] = arguments[i];
}
return this.set(o);
}
this.add = function() {
var my = {};
var o = {};
for (var i=0; i < arguments.length; i++) {
my.prop = (++uid).toString();
this.properties.push(my.prop);
this.length = this.properties.length;
o[my.prop] = arguments[i];
}
return this.set(o);
}
this.append = this.add;
this.move = function(oldName,newName) {
var my = {};
my.oldIndex = this.getIndex(oldName);
if (my.oldIndex < 0)
throw "index does not exist";
if (my.oldIndex < -this.properties.length || my.oldIndex > this.properties.length)
throw "index does not exist";
my.newIndex = this.getIndex(newName);
if (my.newIndex < 0) {
if (typeof(oldName) == "string")
my.newIndex = my.oldIndex;
else
my.newIndex = this.properties.length;
}
if (my.oldIndex != my.newIndex) {
my.prop = this.properties.splice(my.oldIndex,1)[0];
if (my.newIndex < 0)
my.newIndex++;
if (my.newIndex >= this.properties.length)
this.properties.push(my.prop);
else
this.properties.splice(my.newIndex,0,my.prop);
}
if (typeof(oldName) == "string" && typeof(newName) == "string") {
this.remove(newName);
this.properties[this.getIndex(oldName)] = newName;
values[newName] = values[oldName];
delete values[oldName];
}
return this;
}
this.remove = function() {
var my = {};
var o = {};
for (var i=0; i < arguments.length; i++) {
my.prop = this.getProperty(arguments[i]);
if (values[my.prop] != undefined)
o[my.prop] = "";
}
this.set(o);
for (my.prop in o) {
my.index = this.getIndex(my.prop);
if (values[my.prop].length == 0) {
delete values[my.prop];
this.properties.splice(my.index,1);
this.length = this.properties.length;
}
}
return this;
}
this.deleteIt = this.remove;
this.removeAll = function() {
for (var i=0; i < this.length; i++) {
this.set(i,"");
}
for (var i in values)
delete values[i];
delete this.properties;
this.properties = [];
this.length=this.properties.length;
return this;
}
this.deleteAll = this.removeAll
var addFunction = function(type,action,property,scope,method,applyToExisting) {
var my = {};
if (typeof(property) == "string")
property = property.split(",");
if (property == undefined || property.constructor != Array) {
applyToExisting = method;
method = scope;
scope = property;
property = [""];
}
if (typeof(scope) == "function") {
applyToExisting = method;
method = scope;
scope = this;
}
else if (typeof(method) == "string") {
method = scope[method];
}
if (applyToExisting == undefined || typeof(applyToExisting) != "boolean")
applyToExisting = true;
if (typeof(scope) != "object")
throw("The scope parameter supplied to the " + action + type + "() function was not of type 'object'.");
if (typeof(method) != "function")
throw("The method parameter supplied to the " + action + type + "() function was not of type 'function'.");
if (property.constructor != Array)
throw("The property parameter supplied to the " + action + type + "() function must be either of type 'string' or 'array'.");
if (typeof(applyToExisting) != "boolean")
throw("The applyToExisting parameter supplied to the " + action + type + "() function was not of type 'boolean'.");
for (my.index=0; my.index<property.length; my.index++) {
my.property = this.getProperty(property[my.index]);
if (my.property.length) {
if (type == "Listener") {
if (action == "add")
this.listeners[my.property] = this.listeners[my.property] || [];
my.functions = this.listeners[my.property];
} else {
if (action == "add")
this.filters[my.property] = this.filters[my.property] || [];
my.functions = this.filters[my.property];
}
} else {
if (type == "Listener")
my.functions = this.globalListeners;
else
my.functions = this.globalFilters
}
if (my.functions != undefined) {
my.alreadyExists = false;
for (var i=my.functions.length-1; i >= 0; i--) {
if (my.functions[i].method == method && my.functions[i].scope === scope) {
if (action == "add")
my.alreadyExists = true;
else if (action == "remove")
my.functions.splice(i,1);
break;
}
}
if (action == "add" && !my.alreadyExists) {
my.functions.push({
'property':my.property,
'scope':scope,
'method':method,
'applyToExisting':applyToExisting
});
if (type == "Listener" && applyToExisting) {
if (my.property.length)
my.properties = [my.property];
else
my.properties = this.properties;
for (var i=0; i < my.properties.length; i++) {
if (values[my.properties[i]] != undefined) {
my.result = method.call(scope,this,my.properties[i],"",values[my.properties[i]]);
if (my.result != undefined)
values[my.properties[i]] = my.result;
}
}
}
}
}
}
return this;
}
this.addListener = function(property,scope,method,applyToExisting) {
return addFunction.call(this,"Listener","add",property,scope,method,applyToExisting);
}
this.removeListener = function(property,scope,method) {
return addFunction.call(this,"Listener","remove",property,scope,method);
}
this.addFilter = function(property,scope,method) {
return addFunction.call(this,"Filter","add",property,scope,method);
}
this.removeFilter = function(property,scope,method) {
return addFunction.call(this,"Filter","remove",property,scope,method);
}
this.each = function(scope,method) {
if (typeof(scope) == "function") {
method = scope;
scope = this;
}
else if (typeof(method) == "string") {
method = scope[method];
}
if (typeof(scope) != "object")
throw("The scope parameter supplied to the each() function was not of type 'object'.");
if (typeof(method) != "function")
throw("The method parameter supplied to the each() function was not of type 'function'.");
var propertyList = this.getPropertyList().split(',');
for (var i=0; i<propertyList.length; i++) {
if (typeof(values[propertyList[i]]) != "undefined") {
var result = method.call(scope,this,propertyList[i],values[propertyList[i]]);
if (result != undefined) {
return result;
}
}
}
}
this.init(o);
this.destroy = function() {
delete this.properties;
for (var prop in values)
delete values[prop];
delete this.length;
for (var prop in this.listeners)
for (var i in this.listeners[prop])
delete this.listeners[prop][i];
delete this.listeners;
for (var prop in this.filters)
for (var i in this.filters[prop])
delete this.filters[prop][i];
delete this.filters;
for (var i in this.globalListeners)
delete this.globalListeners[i];
delete this.globalListeners;
for (var i in this.globalFilters)
delete this.globalFilters[i];
delete this.globalFilters;
}
this.getValues = function(){
var copy = {};
for (var prop in values)
copy[prop] = values[prop];
return copy;
}
};
PiObject.prototype.init = function(o) {
if (o instanceof Array)
this.add.apply(this,o);
else
this.set.apply(this,arguments);
}
Pi = PiObject;
Pi.extend=function(constructor) {
var parent = this;
constructor = constructor || function(){
parent.prototype.constructor.apply(this,arguments);
};
constructor.parent = parent.prototype;
constructor.extend = PiObject.extend;
constructor.prototype = new parent();
constructor.prototype.constructor = constructor;
return constructor;
}

// FILE: Set.js (55dec090) 3/7/2014 11:24:13 AM

if (typeof(MeasurementTool) == "undefined") {
MeasurementTool = {};
}
MeasurementTool.Set = PiObject.extend();
MeasurementTool.Set.prototype.init = function (config) {
config = this.set('config', config || {});
this.addListener('config', this.defaultConfig);
MeasurementTool.Set.parent.init.apply(this, arguments);
if (!this.exists('children')) {
var children = this.set('children', new PiObject());
} else {
var children = this.get('children');
}
this.addListener('children', this.initCollection);
children.addListener(this, this.transformChildren, false);
if (!this.exists('transforms')) {
var transforms = this.set('transforms', new PiObject());
} else {
var transforms = this.get('transforms');
}
transforms.addListener(this, this.defineTransform);
transforms.addListener(this, this.transform);
this.addFilter('transform', this.getTransform);
this.addFilter('transforms', this.getPosition);
this.addFilter('transforms', this.getRotation);
this.addFilter('dragHandleAttributes', this.getDragHandleAttributes);
this.addListener('canvas', this.addSet);
this.addFilter('offset', this.getOffset);
this.addListener('scale', this.setScale);
this.addListener('visibility', this.setVisibility);
this.addListener('visibility', this.resetTransforms);
};
MeasurementTool.Set.prototype.defaultConfig = function (object, property, oldConfig, newConfig) {
this.removeListener(property, this.defaultConfig);
newConfig = typeof(newConfig) == "object" ? newConfig : {};
};
MeasurementTool.Set.prototype.initCollection = function (object, property, oldValue, newValue) {
if (newValue != '') {
if (newValue.constructor == Array || newValue.constructor == Object) {
return new PiObject(newValue);
}
}
};
MeasurementTool.Set.prototype.setVisibility = function (object, property, oldValue, newValue) {
if (this.exists('set')) {
if (this.get('visibility') == 'hidden') {
this.get('set').hide();
} else {
this.get('set').show();
}
}
};
MeasurementTool.Set.prototype.resetTransforms = function (object, property, oldValue, newValue) {
if (newValue == 'hidden') {
this.get('transforms').removeAll();
this.transform();
this.setVisibility(this, 'visibility', '', this.get('visibility'));
}
};
MeasurementTool.Set.prototype.setScale = function (object, property, oldValue, newValue) {
if (oldValue != "" && newValue == "") {
this.get('transforms').remove('scale');
}
if (newValue != "") {
this.get('transforms').set('scale', { scale: newValue });
}
};
MeasurementTool.Set.prototype.defineTransform = function (transforms, index, oldTransform, newTransform) {
if (newTransform != "") {
switch (index) {
case 'rotation':
newTransform.type = newTransform.type || 'r';
break;
case 'translation':
newTransform.type = newTransform.type || 't';
break;
case 'scale':
newTransform.type = newTransform.type || 's';
break;
}
switch (newTransform.type) {
case 'r':
case 'R':
case 'rotate':
case 'rotation':
if (typeof(newTransform) != "object") {
newTransform = {
type: 'r',
angle: +newTransform
};
}
newTransform.svg = newTransform.type.charAt(0);
newTransform.type = 'rotation';
newTransform.css = "rotate";
newTransform.angle = newTransform.angle || 0;
newTransform.x = typeof(newTransform.x) != "undefined" ? newTransform.x : (this.exists('center') ? +this.get('center').x : this.exists('width') ? this.get('width') / 2 : 0);
newTransform.y = typeof(newTransform.y) != "undefined" ? newTransform.y : (this.exists('center') ? +this.get('center').y : this.exists('height') ? this.get('height') / 2 : 0);
newTransform.h = Math.sqrt(Math.pow(newTransform.x, 2) + Math.pow(newTransform.y, 2));
break;
case 't':
case 'T':
case 'translate':
case 'translation':
newTransform.svg = newTransform.type.charAt(0);
newTransform.type = 'translation';
newTransform.css = "translate";
newTransform.x = typeof(newTransform.x) != "undefined" ? newTransform.x : 0;
newTransform.y = typeof(newTransform.y) != "undefined" ? newTransform.y : 0;
break;
case 's':
case 'S':
case 'scale':
newTransform.svg = newTransform.type.charAt(0);
newTransform.type = 'scale';
newTransform.css = 'scale';
newTransform.scale = typeof(newTransform.scale) != "undefined" ? newTransform.scale : 1;
break;
}
}
};
MeasurementTool.Set.prototype.getPosition = function(object, property, transforms) {
if (!transforms.exists('translation')) {
transforms.set('translation', {
x: this.exists('x') ? this.get('x') : this.exists('width') && this.exists('canvas') ? this.get('canvas').get('width') / 2 - this.get('width') / 2 : 0,
y: this.exists('y') ? this.get('y') : this.exists('height') && this.exists('canvas') ? this.get('canvas').get('height') / 2 - this.get('height') / 2 : 0
});
}
};
MeasurementTool.Set.prototype.getRotation = function (object, property, transforms) {
if (!transforms.exists('rotation')) {
transforms.set('rotation', {
angle: this.get('rotation')
});
}
};
MeasurementTool.Set.prototype.getDragHandleAttributes = function (object, property, value) {
this.removeFilter(property, this.getDragHandleAttributes);
if (value == "") {
return this.set(property, {
stroke: 'none',
fill: '#00F',
'fill-opacity': 0
});
}
};
MeasurementTool.Set.prototype.addSet = function (object, property, oldCanvas, newCanvas) {
if (!this.exists('set')) {
this.set('set', (newCanvas instanceof PiObject) ? newCanvas.get('canvas').set() : newCanvas.set());
this.transform();
this.setVisibility(this, 'visibility', '', this.get('visibility'));
}
};
MeasurementTool.Set.prototype.getOffset = function (object, property, offset) {
if (this.exists('canvas')) {
return this.get('canvas').get('offset');
}
};
MeasurementTool.Set.prototype.getTransform = function (object, property, transform) {
var result = [];
var translation = [];
var transforms = this.get('transforms');
transforms.each(function(transforms, index, transform) {
if (transform != "") {
switch (transform.type) {
case 'rotation':
result.push([transform.svg, transform.angle, transform.x, transform.y].join(" "));
break;
case 'translation':
result.push([transform.svg, transform.x, transform.y].join(" "));
break;
case 'scale':
result.push([transform.svg, transform.scale].join(" "));
}
}
});
return result.join(" ");
};
MeasurementTool.Set.prototype.transformChildren = function(children, index, oldChild, newChild) {
if (oldChild != "") {
if (oldChild instanceof PiObject) {
oldChild.removeFilter('transform', this, this.addParentTransform);
}
}
if (newChild != "") {
if (newChild instanceof PiObject) {
newChild.addFilter('transform', this, this.addParentTransform);
}
}
};
MeasurementTool.Set.prototype.addParentTransform = function(child, property, transform) {
return [this.get('transform'), transform].join(" ");
};
MeasurementTool.Set.prototype.transform = function(transforms, index, oldTransform, newTransform) {
if (this.exists('set')) {
var set = this.get('set');
if (set.transform) {
set.transform(this.get('transform'));
}
this.get('children').each(function(children, index, child) {
if (child.transform) {
child.transform();
}
});
}
};
MeasurementTool.Set.prototype.translation = (function() {
var start;
return {
'drag': function(dx, dy, x, y) {
this.get('transforms').set('translation', {
x: start.x + dx,
y: start.y + dy
});
},
'start': function(x, y, event) {
start = this.get('transforms').get('translation');
},
'stop': function(x, y, event) {}
};
})();
MeasurementTool.Set.prototype.rotation = (function() {
var last;
return {
'drag': function(dx, dy, canvasX, canvasY) {
var offset = this.get('offset');
var transforms = this.get('transforms');
var translation = transforms.get('translation');
var rotation = transforms.get('rotation');
var current = Raphael.angle(canvasX, canvasY, offset.x + rotation.x + translation.x, offset.y + rotation.y + translation.y);
var delta = current - last;
if (delta < -180) {
delta += 360;
} else if (delta > 180) {
delta -= 360;
}
last = current;
rotation.angle += delta;
transforms.set('rotation', rotation);
return;
},
'start': function(canvasX, canvasY, event) {
var offset = this.get('offset');
var transforms = this.get('transforms');
var translation = transforms.get('translation');
var rotation = transforms.get('rotation');
last = Raphael.angle(canvasX, canvasY, offset.x + rotation.x + translation.x, offset.y + rotation.y + translation.y);
},
'stop': function(x, y, event) {}
};
})();

// FILE: Canvas.js (890ff3d4) 5/2/2014 12:55:58 PM

if (typeof(MeasurementTool) == "undefined") {
MeasurementTool = {};
}
MeasurementTool.Canvas = MeasurementTool.Set.extend();
MeasurementTool.Canvas.prototype.init = function(config) {
if (typeof config == 'undefined') {
return;
}
config = config || {};
config.window = config.window || window;
MeasurementTool.Canvas.parent.init.apply(this, arguments);
this.addListener('window', this.initRaphael);
this.addFilter('node', this.createNode);
this.addListener('node', this.initNode);
};
MeasurementTool.Canvas.prototype.defaultConfig = function(object, property, oldConfig, newConfig) {
MeasurementTool.Canvas.parent.defaultConfig.apply(this, arguments);
newConfig.width = newConfig.width || 620;
newConfig.height = newConfig.height || 420;
newConfig.r = newConfig.r || 0;
newConfig.stroke = newConfig.stroke || 'none';
newConfig.fill = newConfig.fill || 'none';
newConfig.scale = newConfig.scale || 1;
};
MeasurementTool.Canvas.prototype.initRaphael = function(object, property, oldWindow, newWindow) {
Raphael.setWindow(newWindow);
};
MeasurementTool.Canvas.prototype.createNode = function(object, property, node) {
var doc = this.get('window').document;
if (doc.body) {
this.removeFilter(property, this.createNode);
if (node == "") {
node = doc.createElement('div');
node.id = this.get('id');
node.className = this.get('classname');
var parent = this.exists('parent') ? this.get('parent') : doc.body;
var box = parent.getBoundingClientRect();
var width = this.get('width');
var height = this.get('height');
parent.appendChild(node);
node.style.cssText = [
'width:' + width,
'height:' + height
].join(';');
if (!this.exists('x')) {
this.set('x', box.left + box.width / 2 - width / 2);
}
if (!this.exists('y')) {
this.set('y', box.top + box.height / 2 - height / 2);
}
node.style.visibility = this.exists('visibility') ? this.get('visibility') : 'visible';
this.set('node', node);
}
}
};
MeasurementTool.Canvas.prototype.initNode = function(object, property, oldNode, newNode) {
if (typeof (newNode) == "string") {
newNode = Raphael._g.doc.getElementById(this.set('id', newNode));
} else {
this.set('id', newNode.id);
}
if (newNode.ownerDocument && newNode.ownerDocument != Raphael._g.doc && newNode.ownerDocument.defaultView) {
Raphael.setWindow(newNode.ownerDocument.defaultView);
}
if (newNode.childNodes) {
while (newNode.hasChildNodes()) {
if (newNode.firstChild.tagName == "IMG") {
var src = newNode.firstChild.src;
if (src.charAt(0) != '/' && src.indexOf('://') == -1) {
var href = window.document.location.href;
var last = href.split('/').pop();
if (last.indexOf('.')) {
var dir = href.substr(0, href.length - last.length);
} else {
var dir = href;
}
if (dir.charAt(dir.length - 1) != '/') {
dir += '/';
}
src = dir + src;
}
var img = {
type: 'image',
src: src,
width: this.get('width'),
height: this.get('height'),
x: 0,
y: 0
};
for (var i = 0; i < newNode.firstChild.attributes.length; i++) {
switch (newNode.firstChild.attributes[i].name) {
case 'width':
var value = +newNode.firstChild.attributes[i].value;
if (value) {
img.width = value;
img.x = (this.get('width') - value) / 2;
}
break;
case 'height':
var value = +newNode.firstChild.attributes[i].value;
if (value) {
img.height = value;
img.y = (this.get('height') - value) / 2;
}
break;
}
}
}
newNode.removeChild(newNode.firstChild);
}
}
this.set('raphael', Raphael);
this.set('canvas', Raphael(
newNode,
this.get('width'),
this.get('height')
));
this.addListener('r', this.outline, false);
this.addListener('stroke', this.outline, false);
this.addListener('fill', this.outline, false);
this.outline();
if (img) {
this.get('children').insertAt(0, img);
}
this.addFilter('transformProperty', this.getTransformProperty);
this.addFilter('transformMatrix', this.getTransformMatrix);
this.get('children').addListener(this, this.initChildren);
this.addListener('x', this.moveNode);
this.addListener('y', this.moveNode);
return newNode;
};
MeasurementTool.Canvas.prototype.moveNode = function(object, property, oldValue, newValue) {
if (this.exists('node')) {
switch (property) {
case 'x':
this.get('node').style.left = newValue + 'px';
break;
case 'y':
this.get('node').style.top = newValue + 'px';
break;
}
}
};
MeasurementTool.Canvas.prototype.resetTransforms = function(object, property, oldValue, newValue) {
MeasurementTool.Canvas.parent.resetTransforms.apply(this, arguments);
};
MeasurementTool.Canvas.prototype.getPosition = function(object, property, transforms) {
if (!transforms.exists('translation')) {
transforms.set('translation', { x: 0, y: 0 });
}
};
MeasurementTool.Canvas.prototype.getOffset = function(object, property, offset) {
if (this.exists('node')) {
var node = this.get('node'),
height = this.get('height'),
width = this.get('width'),
box = node.getBoundingClientRect();
offset = getOffset(node, this.get('raphael'));
if (box.height != height || box.width != width) {
var translation = this.get('transformMatrix');
offset.x = offset.x + (box.right - box.left) / 2 - width / 2 - translation.e;
offset.y = offset.y + (box.bottom - box.top) / 2 - height / 2 - translation.f;
}
return offset;
}
function getOffset(elem, raphael) {
var thisbox = elem.getBoundingClientRect(),
doc = elem.ownerDocument,
body = doc.body,
docElem = doc.documentElement,
clientTop = docElem.clientTop || body.clientTop || 0,
clientLeft = docElem.clientLeft || body.clientLeft || 0,
top = thisbox.top + (raphael._g.win.pageYOffset || docElem.scrollTop || body.scrollTop) - clientTop,
left = thisbox.left + (raphael._g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;
return {
y: top,
x: left
};
};
};
MeasurementTool.Canvas.prototype.setVisibility = function(object, property, oldValue, newValue) {
if (this.exists('node')) {
this.get('node').style['visibility'] = this.get('visibility');
}
};
MeasurementTool.Canvas.prototype.getTransformProperty = function(object, property, value) {
var node = this.get('node');
var properties = [
'transform',
'WebkitTransform',
'msTransform',
'MozTransform',
'OTransform',
'filters'
];
for (var i = 0; i < properties.length; i++) {
value = properties[i];
if (typeof(node.style[value]) != 'undefined') {
break;
}
}
if (value != 'filters' || typeof(document.body.filters) != "undefined") {
this.removeFilter(property, this.getTransformProperty);
return this.set(property, value);
}
};
MeasurementTool.Canvas.prototype.getTransformMatrix = function(object, property, value) {
value = Raphael.matrix(1, 0, 0, 1, 0, 0);
this.get('transforms').each(this, function(transforms, index, transform) {
if (transform != "") {
var current = value.split();
}
switch (transform.type) {
case 'rotation':
if (transform.angle % 360) {
var raphael = this.get('raphael');
var scale = this.get('scale');
var delta = {
x: (transform.x - this.get('width') / 2) * scale,
y: (transform.y - this.get('height') / 2) * scale
};
delta.h = Math.sqrt(Math.pow(delta.x, 2) + Math.pow(delta.y, 2));
delta.angle = raphael.rad(raphael.angle(transform.x, transform.y, this.get('width') / 2, this.get('height') / 2) + transform.angle);
value.translate(delta.x - delta.h * Math.cos(delta.angle), delta.y - delta.h * Math.sin(delta.angle));
}
value.rotate(transform.angle);
break;
case 'translation':
value.translate(transform.x, transform.y);
break;
case 'scale':
value.scale(transform.scale);
break;
}
});
return value;
};
MeasurementTool.Canvas.prototype.transform = function(transforms, index, oldTransform, newTransform) {
if (this.exists('node') && this.exists('canvas')) {
var node = this.get('node');
var transforms = this.get('transforms');
var property = this.get('transformProperty');
var matrix = this.get('transformMatrix');
if (this.exists('scale')) {
var scale = this.get('scale');
var canvas = this.get('canvas').canvas;
canvas.setAttribute('width', scale * this.get('width'));
canvas.setAttribute('height', scale * this.get('height'));
this.get('children').each(function(children, index, child) {
if (child.transform) {
child.transform();
}
});
}
if (property == "filters") {
var filter = node.filters.item('DXImageTransform.Microsoft.Matrix');
filter.M11 = matrix[0][0];
filter.M12 = matrix[0][1];
filter.M21 = matrix[1][0];
filter.M22 = matrix[1][1];
} else if (node.style[property] != null) {
node.style[property] = matrix.toString();
}
}
};
MeasurementTool.Canvas.prototype.initChildren = function(object, property, oldChild, newChild) {
if (oldChild != newChild) {
if (oldChild != '') {
if (oldChild instanceof MeasurementTool.Set) {
oldChild.remove('canvas');
} else {
oldChild.remove();
}
}
if (newChild != '') {
var newRaphaelObject;
if (newChild instanceof MeasurementTool.Set) {
newRaphaelObject = newChild.set({
'canvas': this
}).get('set');
}
else if (!newChild.paper) {
newRaphaelObject = this.get('canvas').add(
(newChild.constructor == Array) ? newChild : [newChild]
);
}
this.get('set').push(newRaphaelObject);
}
}
};
MeasurementTool.Canvas.prototype.outline = function(object, property, oldValue, newValue) {
if (this.exists('outline')) {
var outline = this.get('outline');
outline[property] = newValue;
this.get('children').set(0, outline);
} else {
var config = this.get('config');
config.type = 'rect';
this.get('children').insertAt(0, this.set('outline', config));
}
};
MeasurementTool.Canvas.prototype.translation = (function() {
var start;
return {
'drag': function (dx, dy, x, y) {
var newX = start.x + dx,
newY = start.y + dy,
toolHeight = this.get('height') / 2,
toolWidth = this.get('width') / 2;
if(newX + toolWidth <= this.get('rightBoundary') &&
newY + toolHeight <= this.get('bottomBoundary') &&
newX + toolWidth >= 0 &&
newY + toolHeight >= 0) {
this.set('x', newX);
this.set('y', newY);
}
},
'start': function(x, y, event) {
start = {
x: this.get('x'),
y: this.get('y')
};
},
'stop': function(x, y, event) {}
};
})();

// FILE: StraightLine.js (551fe062) 5/2/2014 12:55:58 PM

if (typeof(MeasurementTool) == "undefined") {
MeasurementTool = {};
}
MeasurementTool.StraightLine = MeasurementTool.Set.extend();
MeasurementTool.StraightLine.prototype.init = function(config) {
MeasurementTool.StraightLine.parent.init.apply(this, arguments);
this.set('lines', new PiObject()).addListener(MeasurementTool.StraightLine.prototype.removeLine);
this.addListener('set', this.addPencil);
this.transform();
};
MeasurementTool.StraightLine.prototype.defaultConfig = function(object, property, oldConfig, newConfig) {
newConfig.width = newConfig.width || 18;
newConfig.height = newConfig.height || 62;
newConfig.origin = {
x: newConfig.width / 2,
y: newConfig.height
};
MeasurementTool.StraightLine.parent.defaultConfig.apply(this, arguments);
};
MeasurementTool.StraightLine.prototype.setVisibility = function(object, property, oldValue, newValue) {
if (this.exists('canvas')) {
var canvasHolder = this.get('canvas').get('canvas'),
canvas = canvasHolder.canvas;
var moveStraightLine = function (event) {
var offset = canvas.getBoundingClientRect(),
zoomFactor = straightline.get('zoomFactor');
if (canvasHolder.bottom.node) {
offset = canvasHolder.bottom.node.getBoundingClientRect();
}
straightline.get('transforms').set('translation', {
x: (event.clientX - offset.left) / zoomFactor - (15 * zoomFactor),  // The 15 is so that even after rotation, the object is still positioned under the mouse.  CAUTION: This is especially important in Firefox 3.5, which handles rotated objects slightly differently than later versions of Firefox!
y: (event.clientY - offset.top - straightline.get('height')) / zoomFactor + (5 * zoomFactor)    // The 5 is to give the mouse some padding so we don't see the cursor flutter so much.
});
};
if (newValue == 'hidden') {
canvas.style.cursor = 'inherit';
canvas.removeEventListener('mousemove', moveStraightLine, false);
if ('ontouchstart' in window) {
canvas.removeEventListener('mousedown', moveStraightLine, false);
}
this.get('set').hide();
} else {
var straightline = this;
straightline.addMouseListener(canvas, 'mousemove', moveStraightLine);
if ('ontouchstart' in window) {
straightline.addMouseListener(canvas, 'mousedown', moveStraightLine);
}
straightline.get('set').show();
canvas.style.cursor = 'none';
}
}
};
MeasurementTool.StraightLine.prototype.addMouseListener = function (target, name, fn) {
var touchScreen = 'ontouchstart' in window;
var touchEvents = {
'mousedown': 'touchstart',
'mouseup': 'touchend',
'mousemove': 'touchmove'
};
var mouseEvents = {
'mousedown': 'mousedown',
'mouseup': 'mouseup',
'mousemove': 'mousemove'
};
var getWindowsNTVersion = function () {
var matches = navigator.userAgent.match(/Windows NT (\d+\.\d+)/);
var value;
if (matches && matches[1]) {
value = parseFloat(matches[1]);
}
return value || 0;
};
var supportsTouchAndMouse = function () {
return (touchScreen && getWindowsNTVersion() >= 6.1);
};
var normalizeTouchEvent = function (evt) {
if (evt.changedTouches) {
var touches = evt.changedTouches;
for (var i = 0, ii = touches.length; i < ii; i++) {
if (touches[i].target == evt.target) {
var oldevt = evt;
evt = touches[i];
evt.preventDefault = function () {
return oldevt.preventDefault();
};
evt.stopPropagation = function () {
return oldevt.stopPropagation();
};
return evt;
}
}
}
return evt;
};
var touchAndMouse = supportsTouchAndMouse();
var eventName, altEventName;
if (touchScreen) {
eventName = (touchEvents[name] || name);
if (touchAndMouse) {
altEventName = (mouseEvents[name] || name);
}
} else {
eventName = (mouseEvents[name] || name);
}
var processEvent = function (evt) {
if (touchAndMouse) {
evt.preventDefault();
}
if (touchScreen) {
evt = normalizeTouchEvent(evt);
}
fn(evt);
};
if (eventName) {
target.addEventListener(eventName, processEvent, false);
if (altEventName) {
target.addEventListener(altEventName, processEvent, false);
}
}
};
MeasurementTool.StraightLine.prototype.getRotation = function(object, property, transforms) {
var origin = this.get('origin');
if (!transforms.exists('rotation')) {
transforms.set('rotation', {
type: 'rotation',
angle: 30,
x: origin.x,
y: origin.y
});
}
MeasurementTool.StraightLine.parent.getRotation.apply(this, arguments);
};
MeasurementTool.StraightLine.prototype.addPencil = function (object, property, oldSet, newSet) {
var canvas = this.get('canvas').get('canvas');
var width = this.get('width');
var height = this.get('height');
var start, click, line;
newSet.push(
this.get('children').set('pencil',
canvas.set([
canvas.rect(0, 0, 18, 20, 7).attr({
'fill': '#DB4652',
'stroke-miterlimit': '10',
'stroke': '#C1272D'
}),
canvas.rect(0, 17, 18, 32).attr({
'fill': '#FBB03B'
}),
canvas.rect(5.5, 17.5, 9, 32).attr({
'fill': '#F2B96D',
'stroke': '#D68A25',
'stroke-miterlimit': '10'
}),
canvas.rect(0.5, 8.5, 17, 5).attr({
'fill': '#E6E6E6',
'stroke': '#B3B3B3',
'stroke-miterlimit': '10'
}),
canvas.rect(0.5, 12.5, 17, 5).attr({
'fill': '#E6E6E6',
'stroke': '#B3B3B3',
'stroke-miterlimit': '10'
}),
canvas.path('M0,49 l9,13 l9,-13 Z').attr({
'fill': '#C7B299'
}),
canvas.path('M6,58 l6,0 l-3,4 z').attr({
'fill': '#000'
}),
canvas.rect(0, 0, width, height).attr(this.get('dragHandleAttributes'))
]).drag(
function(dx, dy, canvasX, canvasY) {
var origin = this.get('origin');
var translation = this.get('transforms').get('translation');
var path = [
'M',
start.x,
start.y,
'L',
origin.x + translation.x,
origin.y + translation.y
].join(" ");
if (!line) {
this.get('lines').add(line = canvas.path(path));
} else {
line.attr('path', path);
}
},
function(canvasX, canvasY, event) {
var origin = this.get('origin');
var translation = this.get('transforms').get('translation');
start = {
x: origin.x + translation.x,
y: origin.y + translation.y
};
},
function(event) {
if (line) {
line = null;
}
},
this,
this,
this
)
)
);
};
MeasurementTool.StraightLine.prototype.removeLine = function(arcs, index, oldLine, newLine) {
if (oldLine != "") {
oldLine.remove();
}
};

// FILE: Ruler.js (07e3e369) 5/2/2014 12:55:58 PM

if (typeof(MeasurementTool) == "undefined") {
MeasurementTool = {};
}
MeasurementTool.Ruler = MeasurementTool.Canvas.extend();
MeasurementTool.Ruler.prototype.init = function (config) {
MeasurementTool.Ruler.parent.init.apply(this, arguments);
this.addListener('set', this.addOutline);
this.addListener('set', this.addTickMarks);
this.addListener('set', this.addLabel);
this.addListener('set', this.addDragHandles);
this.addListener('set', this.adjustPosition);
this.get('node');
this.transform();
};
MeasurementTool.Ruler.prototype.defaultConfig = function (object, property, oldConfig, newConfig) {
newConfig.origin = newConfig.origin || { x: 0, y: 0 };
newConfig.stroke = newConfig.stroke || '#000';
newConfig['font-size'] = newConfig['font-size'] || '10pt';
newConfig['line-height'] = parseInt(newConfig['font-size']);
newConfig.type = newConfig.type || 'rect';
newConfig.cursor = newConfig.cursor || 'move';
newConfig.thickness = newConfig.thickness || newConfig.height || 5 * newConfig['line-height'];
newConfig.height = newConfig.height || newConfig.thickness;
if (newConfig.length) {
newConfig.width = newConfig.length;
} else if (newConfig.parent) {
newConfig.width = newConfig.parent.offsetWidth * 0.60;
} else {
newConfig.width = 400;
}
MeasurementTool.Ruler.parent.defaultConfig.apply(this, arguments);
};
MeasurementTool.Ruler.prototype.getRotation = function(object, property, transforms) {
MeasurementTool.Ruler.parent.getRotation.apply(this, arguments);
if (!transforms.exists('left_rotation')) {
transforms.set('left_rotation', {
type: 'rotation',
angle: 0,
x: this.get('width'),
y: 0
});
}
if (!transforms.exists('right_rotation')) {
transforms.set('right_rotation', {
type: 'rotation',
angle: 0,
x: 0,
y: 0
});
}
};
MeasurementTool.Ruler.prototype.addOutline = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas');
this.get('children').set('outline',
canvas.rect(0, 0, this.get('width'), this.get('height')).attr({
stroke: this.get('stroke')
})
);
};
MeasurementTool.Ruler.prototype.adjustPosition = function () {
var rulerLeft = (window.innerWidth - this.get('canvas').width) / 2,
rulerTop = (window.innerHeight - this.get('canvas').height) / 2;
this.moveNode(this.get('node'), 'x', 0, rulerLeft);
this.moveNode(this.get('node'), 'y', 0, rulerTop);
this.set('x', rulerLeft);
this.set('y', rulerTop);
};
MeasurementTool.Ruler.prototype.addTickMarks = function (object, property, oldSet, newSet) {
var canvas = this.get('canvas');
var config = this.get('config');
var system = this.get('system');
var tickmarks = canvas.set();
config.max = Math.ceil(config.max) || 10;
config.min = Math.floor(config.min) || 0;
var widest = (Math.abs(config.max) > Math.abs(config.min)) ? Math.abs(config.max) : Math.abs(config.min);
var span = config.max - config.min;
var temp = canvas.text(10, 10, widest + 'W').attr({ opacity: 0 });
var scale = Math.ceil((temp[0].getComputedTextLength() * (span + 1)) / config.width);
var width = config.width / (span / scale);
var lineHeight = config['line-height'];
var subscale;
temp.remove();
var origin = this.get('origin');
if (origin.y >= config.height) {
lineHeight = -lineHeight;
}
var labelY = origin.y + lineHeight * 5 / 2;
if (system!=null && system.toLowerCase() == 'metric') {
if (scale <= 2) {
subscale = 2;
} else if (scale > 2 && scale <= 5) {
scale = 5;
subscale = 5;
} else {
scale = Math.ceil(scale / 10) * 10;
while (scale < (span - 10) && span % scale) {
scale += 10;
}
subscale = 10;
}
width = config.width / (span / scale);
} else {
subscale = Math.min(4, scale);
}
for (var i = 0, label, x, half; config.min + i * scale <= config.max; i++) {
line = canvas.path("M" + (width * i) + "," + origin.y + "v" + (lineHeight * 2));
tickmarks.push(line);
if (scale == 1) {
if (system!=null && system.toLowerCase() == 'metric') {
for (var j = 1; j < 10; j++) {
x = width * i + j * width / 10;
h = 1.5;
if (j % 5) {
h -= 0.5;
}
if (x < config.width) {
tickmarks.push(canvas.path("M" + x + "," + origin.y + "v" + (lineHeight * h)));
}
}
} else {
for (var j = 1; j < 8; j++) {
x = width * i + j * width / 8;
h = 2;
if (j % 8) {
h -= 0.5;
}
if (j % 4) {
h -= 0.5;
}
if (j % 2) {
h -= 0.5;
}
if (x < config.width) {
tickmarks.push(canvas.path("M" + x + "," + origin.y + "v" + (lineHeight * h)));
}
}
}
} else {
for (var j = 1; j < subscale; j++) {
x = width * i + j * width / subscale;
if (x < config.width) {
tickmarks.push(canvas.path("M" + x + "," + origin.y + "v" + (lineHeight * 3 / 2)));
}
}
}
label = canvas.text(width * i, labelY, config.min + scale * i);
x = parseInt(label.attr('x'));
half = label[0].getComputedTextLength() / 2;
if ((x - half) < 0)
{
label.attr('x', half + config['line-height'] / 4);
} else if ((x + half) > config.width)
{
label.attr('x', config.width - half - config['line-height'] / 4);
}
tickmarks.push(label);
}
this.get('children').set('tickmarksR', tickmarks);
};
MeasurementTool.Ruler.prototype.addDragHandles = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas');
var config = this.get('config');
var children = this.get('children');
var y = this.get('origin').y;
if (y >= config.height - config.thickness) {
y = config.height - config.thickness;
}
children.add(
canvas.rect(
0,
y,
config.width,
config.thickness
).attr(this.get('dragHandleAttributes')).attr({
"cursor": "move"
}).drag(
this.translation.drag,
this.translation.start,
this.translation.stop,
this,
this,
this
)
),
children.add(
canvas.set([
canvas.rect(
0,
y,
config.thickness,
config.thickness
).attr(this.get('dragHandleAttributes'))
]).attr({
"cursor": "rotate"
}).drag(
function(dx, dy, canvasX, canvasY) {
this.rotation.drag.apply(this, arguments);
},
function(canvasX, canvasY, event) {
this.rotation.start.apply(this, arguments);
},
function(canvasX, canvasY, event) {
this.rotation.start.apply(this, arguments);
},
this,
this,
this
)
),
children.add(
canvas.set([
canvas.rect(
(config.width - config.thickness),
y,
config.thickness,
config.thickness
).attr(this.get('dragHandleAttributes'))
]).attr({
"cursor": "rotate"
}).drag(
function(dx, dy, canvasX, canvasY) {
this.rotation.drag.apply(this, arguments);
},
function(canvasX, canvasY, event) {
this.rotation.start.apply(this, arguments);
},
function(canvasX, canvasY, event) {
this.rotation.start.apply(this, arguments);
},
this,
this,
this
)
);
};
MeasurementTool.Ruler.prototype.addLabel = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas');
if (this.exists('label')) {
this.get('children').set('label', canvas.text(
this.get('width') / 2, // x
this.get('height') - this.get('line-height'),
this.get('label')
));
}
};

// FILE: Protractor.js (55c08245) 5/2/2014 12:55:58 PM

if (typeof(MeasurementTool) == "undefined")
MeasurementTool = {};
MeasurementTool.Protractor = MeasurementTool.Ruler.extend();
MeasurementTool.Protractor.prototype.init = function(config) {
MeasurementTool.Protractor.parent.init.apply(this, arguments);
this.addListener('set', this.adjustPosition);
};
MeasurementTool.Protractor.prototype.defaultConfig = function(object, property, oldConfig, newConfig) {
newConfig.min = newConfig.min || -5;
newConfig.max = newConfig.max || 5;
MeasurementTool.Protractor.parent.defaultConfig.apply(this, arguments);
newConfig.thickness = newConfig.height;
newConfig.height = newConfig.width / 2 + newConfig.thickness;
newConfig.origin = {
x: newConfig.width / 2,
y: newConfig.width / 2
}
newConfig.outline = newConfig.stroke;
delete newConfig.stroke;
};
MeasurementTool.Protractor.prototype.getRotation = function(object, property, transforms) {
var width = this.get('width');
var origin = this.get('origin');
if (!transforms.exists('rotation'))
transforms.set('rotation', {
type: 'rotation',
angle: 0,
x: origin.x,
y: origin.y
});
MeasurementTool.Ruler.parent.getRotation.apply(this, arguments);
};
MeasurementTool.Protractor.prototype.adjustPosition = function () {
var protractorLeft = (window.innerWidth - this.get('canvas').width) / 2,
protractorTop = (window.innerHeight - this.get('canvas').height) / 2;
this.moveNode(this.get('node'), 'x', 0, protractorLeft);
this.moveNode(this.get('node'), 'y', 0, protractorTop);
this.set('x', protractorLeft);
this.set('y', protractorTop);
};
MeasurementTool.Protractor.prototype.addOutline = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas');
var width = +this.get('width');
var height = +this.get('height');
var thickness = +this.get('thickness');
var stroke = this.get('outline');
var outer = {
radius: width / 2,
top: 0,
bottom: height - thickness,
left: 0,
right: width
};
var inner = {
radius: outer.radius - thickness,
bottom: height - thickness,
left: outer.left + thickness,
right: outer.right - thickness
};
var outline = canvas.set([
canvas.rect(0, width / 2, width, thickness).attr({
stroke: stroke
}),
canvas.path([
"M",
0, width / 2, //start coordinates
"A",
outer.radius, outer.radius,
0,
1,
1,
outer.right, outer.bottom,
"Z"
].join(" ")).attr({
stroke: stroke
})
]);
this.set('outline', outline);
newSet.push(this.get('children').set('outline', outline));
};
MeasurementTool.Protractor.prototype.addTickMarks = function(object, property, oldSet, newSet) {
MeasurementTool.Protractor.parent.addTickMarks.apply(this, arguments);
var canvas = this.get('canvas');
var raphael = this.get('raphael');
var config = this.get('config');
var tickmarks = canvas.set();
var center = {
x: config.width / 2,
y: config.width / 2
}
var offset = {};
var path;
for (var a = 1; a < 180; a++) {
offset.angle = raphael.rad(-a);
offset.x = config.width / 2 * Math.cos(offset.angle);
offset.y = config.width / 2 * Math.sin(offset.angle);
path = [];
if (a % 10 == 0) {
path.push(
"M",
center.x + 0.10 * offset.x,
center.y + 0.10 * offset.y,
"L",
center.x + 0.70 * offset.x,
center.y + 0.70 * offset.y,
"M",
center.x + 0.90 * offset.x,
center.y + 0.90 * offset.y,
"L",
center.x + offset.x,
center.y + offset.y
);
tickmarks.push(canvas.text(center.x + 0.75 * offset.x, center.y + 0.75 * offset.y, a).transform('R' + (-a + 90)));
tickmarks.push(canvas.text(center.x + 0.85 * offset.x, center.y + 0.85 * offset.y, 180 - a).transform('R' + (-a + 90)));
} else if (a % 5 == 0) {
path.push(
"M",
center.x + 0.95 * offset.x,
center.y + 0.95 * offset.y,
"L",
center.x + offset.x,
center.y + offset.y
);
} else {
path.push(
"M",
center.x + 0.975 * offset.x,
center.y + 0.975 * offset.y,
"L",
center.x + offset.x,
center.y + offset.y
);
}
tickmarks.push(
canvas.path(path.join(" ")).attr({
stroke: config.outline
})
);
}
newSet.push(this.get('children').set('tickmarks', tickmarks));
};
MeasurementTool.Protractor.prototype.addDragHandles = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas');
var width = +this.get('width');
var height = +this.get('height');
var thickness = +this.get('thickness');
var config = this.get('config');
var children = this.get('children');
var outer = {
left: 0,
right: width,
top: 0,
bottom: height - thickness,
radius: width / 2
};
newSet.push(
children.set('rotate',
canvas.set([
canvas.rect(outer.left, outer.bottom, 2 * outer.radius, thickness),
canvas.path([
"M",
outer.left, outer.bottom,
"A",
outer.radius, outer.radius,
0,
0,
1,
outer.right, outer.bottom,
"Z"
].join(" "))
]).attr(this.get('dragHandleAttributes')).attr({
cursor: 'rotate'
}).drag(
this.rotation.drag,
this.rotation.start,
this.rotation.stop,
this,
this,
this
)
)
);
var inner = {
left: thickness,
right: width - thickness,
top: 0,
bottom: height - thickness,
radius: width / 2 - thickness
};
newSet.push(
children.set('drag',
canvas.set([
canvas.rect(inner.left, inner.bottom, 2 * inner.radius, thickness),
canvas.path([
"M",
inner.left, inner.bottom,
"A",
inner.radius, inner.radius,
0,
0,
1,
inner.right, inner.bottom,
"Z"
].join(" "))
]).attr(this.get('dragHandleAttributes')).attr({
"cursor": "move"
}).drag(
this.translation.drag,
this.translation.start,
this.translation.stop,
this,
this,
this
)
)
);
};

// FILE: Compass.js (2096fe5d) 3/7/2014 11:24:13 AM

if (typeof(MeasurementTool) == "undefined") {
MeasurementTool = {};
}
MeasurementTool.Compass = MeasurementTool.Set.extend();
MeasurementTool.Compass.prototype.init = function(config) {
MeasurementTool.Compass.parent.init.apply(this, arguments);
this.set('arcs', new PiObject()).addListener(MeasurementTool.Compass.prototype.removeArc);
this.addListener('set', this.addPivotArm);
this.addListener('set', this.addPencilArm);
this.addListener('set', this.addPencil);
this.addListener('set', this.addHandle);
};
MeasurementTool.Compass.prototype.defaultConfig = function(object, property, oldConfig, newConfig) {
newConfig.angle = newConfig.angle || 0;
newConfig.radius = newConfig.radius || 16;
newConfig.width = newConfig.width || 32;
newConfig.height = newConfig.height || 220;
newConfig.center = { x: 8, y: 220 };
newConfig.joint = { x: 24, y: 67 };
MeasurementTool.Compass.parent.defaultConfig.apply(this, arguments);
};
MeasurementTool.Compass.prototype.setVisibility = function(object, property, oldValue, newValue) {
if (newValue == 'hidden') {
this.set({
'angle': 0,
'radius': 16
}).get('children').each(function(children, index, child) {
child.get('transforms').remove('translation', 'rotation');
});
}
MeasurementTool.Compass.parent.setVisibility.apply(this, arguments);
};
MeasurementTool.Compass.prototype.addHandle = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas').get('canvas');
newSet.push(
this.get('children').set('handle',
new MeasurementTool.Set({
set: canvas.set([
canvas.rect(13.5, 20, 5, 10).attr({
"fill": "#808285",
"stroke": "#6D6E71",
"stroke-miterlimit": "10"
}),
canvas.rect(11, 0, 10, 20).attr({
"fill": "#D1D3D4",
"stroke": "#808285",
"stroke-miterlimit": "10"
}),
canvas.rect(0, 25, 32, 50, 6).attr({
"fill": "#808285",
"stroke": "#6D6E71",
"stroke-miterlimit": "10"
}),
canvas.path("M12.5,44 l7,0 l3,6 l-3,6 l-7,0 l-3,-6 z").attr({
"fill": "#F1F2F2",
"stroke": "#BCBEC0",
"stroke-miterlimit": "10"
}),
canvas.circle(16, 50, 2.33).attr({
"fill": "#F1F2F2",
"stroke": "#BCBEC0",
"stroke-miterlimit": "10"
})
]).attr({
"cursor": "move"
}).drag(this.rotation.drag, this.rotation.start, this.rotation.stop, this, this, this)
})
).get('set')
);
};
MeasurementTool.Compass.prototype.addPivotArm = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas').get('canvas');
newSet.push(
this.get('children').set('pivot_arm',
new MeasurementTool.Set({
rotation: 0,
center: { x: 8, y: 220 },
set: canvas.set([
canvas.path("M7,205 l2,0 l-1,15 z").attr({
"fill": "none",
"stroke": "#BCBEC0",
"stroke-miterlimit": "10"
}),
canvas.rect(3, 65, 10, 140).attr({
"fill": "#D1D3D4",
"stroke": "#808285",
"stroke-miterlimit": "10"
}),
canvas.circle(8, 195, 7).attr({
"fill": "#F1F2F2",
"stroke": "#BCBEC0",
"stroke-miterlimit": "10"
}),
canvas.circle(8, 195, 2.5).attr({
"fill": "#F1F2F2",
"stroke": "#BCBEC0",
"stroke-miterlimit": "10"
}),
canvas.rect(-3, 65, 22, 155).attr(this.get('dragHandleAttributes'))
]).attr({
"cursor": "move"
}).drag(
function(dx, dy, canvasX, canvasY) {
this.translation.drag.apply(this, arguments);
},
function(canvasX, canvasY, event) {
this.translation.start.apply(this, arguments);
},
function(canvasX, canvasY, event) {
this.translation.stop.apply(this, arguments);
},
this,
this,
this
)
})
).get('set')
);
};
MeasurementTool.Compass.prototype.addPencilArm = function(object, property, oldSet, newSet) {
var start;
var canvas = this.get('canvas').get('canvas');
newSet.push(
this.get('children').set('pencil_arm',
new MeasurementTool.Set({
rotation: 0,
center: { x: 24, y: 67 },
set: canvas.set([
canvas.rect(19, 65, 10, 100).attr({
"fill": "#D1D3D4",
"stroke": "#808285",
"stroke-miterlimit": "10"
}),
canvas.rect(13, 65, 22, 100).attr(this.get('dragHandleAttributes'))
]).attr({
"cursor": "e-resize"
}).drag(
function(dx, dy, canvasX, canvasY) {
my = {};
my.offset = this.get('offset');
my.children = this.get('children');
my.transforms = this.get('transforms');
my.translation = my.transforms.get('translation');
my.rotation = my.transforms.get('rotation');
my.P1 = my.children.get('pivot_arm').get('transforms').get('rotation');
my.P2 = my.children.get('pencil_arm').get('transforms').get('rotation');
my.triangle = this.set('mouse', { x: canvasX, y: canvasY });
my.triangle.gap = 16 + 5;
if (my.triangle.dx < 0) {
my.triangle.gap = -my.triangle.gap;
}
my.triangle.h1 = start.h1;
my.triangle.h2 = start.h2;
my.LIMIT = my.triangle.h3 + my.triangle.h1 + Math.abs(my.triangle.gap);
if (my.triangle.dx < -my.LIMIT) {
my.triangle.dx = -my.LIMIT;
} else if (my.triangle.dx > my.LIMIT) {
my.triangle.dx = my.LIMIT;
}
var a = 0.25 - Math.pow(my.triangle.h3 / my.triangle.h2, 2);
var b = Math.abs(my.triangle.dx - my.triangle.gap) / 2;
var c = Math.pow(Math.abs(my.triangle.dx - my.triangle.gap), 2) / 4;
my.triangle.x2 = (-b - Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
if (my.triangle.x2 < 0) {
my.triangle.x2 = (-b + Math.sqrt(Math.pow(b, 2) - 4 * a * c)) / (2 * a);
}
if (my.triangle.dx < 0) {
my.triangle.x2 = -my.triangle.x2;
}
my.triangle.x3 = (my.triangle.dx - my.triangle.gap + my.triangle.x2) / 2;
my.triangle.A = Math.acos(my.triangle.x3 / my.triangle.h3);
my.triangle.y3 = my.triangle.h3 * Math.sin(my.triangle.A);
my.triangle.dy = my.triangle.h3 - my.triangle.y3;
my.pivot_angle = this.set('angle', 90 - Raphael.deg(my.triangle.A));
this.set('radius', 2 * my.triangle.x3 + (my.triangle.dx >= 0 ? 16 : -16));
my.children.get('pivot_arm').get('transforms').set({
'rotation': {
angle: my.pivot_angle,
x: my.P1.x,
y: my.P1.y
}
});
my.children.get('handle').get('transforms').set({
'translation': {
x: (my.triangle.dx < 0) ? my.triangle.x3 - 16 : my.triangle.x3,
y: my.triangle.dy
}
});
my.children.get('pencil_arm').get('transforms').set({
'rotation': {
angle: -my.pivot_angle,
x: my.P2.x,
y: my.P2.y
},
'translation': {
x: (my.triangle.dx < 0) ? my.triangle.x3 - 32 : my.triangle.x3,
y: my.triangle.dy
}
});
my.children.get('pencil').get('transforms').set({
'rotation': {
angle: -my.pivot_angle,
x: my.P2.x,
y: my.P2.y
},
'translation': {
x: (my.triangle.dx < 0) ? my.triangle.x3 - 32 : my.triangle.x3,
y: my.triangle.dy
}
});
if (Math.abs(my.triangle.dx) > Math.abs(my.triangle.gap)) {
if (my.triangle.x2 == 0) {
my.triangle.y2 = my.triangle.h2;
} else {
my.triangle.y2 = my.triangle.x2 * Math.tan(my.triangle.A);
}
my.delta = {
angle: Raphael.rad((start.rotation.angle - (my.triangle.dx < 0 ? 180 : 0)) % 360) - Math.atan(Math.abs(my.triangle.y2) / my.triangle.dx),
h: Math.sqrt(Math.pow(my.triangle.y2, 2) + Math.pow(my.triangle.dx, 2))
};
my.delta.x = my.offset.x + my.translation.x + start.rotation.x + my.delta.h * Math.cos(my.delta.angle);
my.delta.y = my.offset.y + my.translation.y + start.rotation.y + my.delta.h * Math.sin(my.delta.angle);
my.delta.rotation = Raphael.angle(canvasX, canvasY, my.delta.x, my.delta.y, my.offset.x + start.rotation.x + my.translation.x, my.offset.y + start.rotation.y + my.translation.y);
my.rotation.angle = start.rotation.angle + my.delta.rotation;
}
my.transforms.set('rotation', my.rotation);
var angle = my.rotation.angle + my.pivot_angle;
angle = (my.triangle.dx >= 0) ? angle % 360 : (angle - 90) % 360;
angle = (angle >= 0) ? angle : (angle + 360);
if (angle >= 0 && angle <= 90) {
var cursor = "e-resize";
} else if (angle > 90 && angle < 180) {
var cursor = "s-resize";
} else if (angle >= 180 && angle <= 270) {
var cursor = "w-resize";
} else if (angle > 270 && angle < 360) {
var cursor = "n-resize";
}
my.children.get('pencil_arm').get('set').attr({
"cursor": cursor
});
},
function(canvasX, canvasY, event) {
this.addListener('mouse', this.setMouse);
start = this.set('mouse', { x: canvasX, y: canvasY });
},
function(canvasX, canvasY, event) {
this.removeListener('mouse', this.setMouse);
},
this,
this,
null
)
})
).get('set')
);
};
MeasurementTool.Compass.prototype.setMouse = function (object, property, oldMouse, newMouse) {
var offset = this.get('offset');
var transforms = this.get('transforms');
var translation = transforms.get('translation');
var rotation = transforms.get('rotation');
var pivot = Raphael.rad(90 - this.get('children').get('pivot_arm').get('transforms').get('rotation').angle);
newMouse.rotation = rotation;
newMouse.dAngle = Raphael.rad(Raphael.angle(newMouse.x, newMouse.y, offset.x + rotation.x + translation.x, offset.y + rotation.y + translation.y) - (rotation.angle || 360));
if (newMouse.x < offset.x + rotation.x + translation.x) {
newMouse.dAngle = -newMouse.dAngle;
}
newMouse.dh = Math.sqrt(Math.pow(newMouse.x - (offset.x + rotation.x + translation.x), 2) + Math.pow((offset.y + rotation.y + translation.y) - newMouse.y, 2));
newMouse.dx = newMouse.dh * Math.cos(newMouse.dAngle);
newMouse.dy = newMouse.dh * Math.sin(newMouse.dAngle);
newMouse.y2 = newMouse.dy;
newMouse.h2 = Math.abs(newMouse.y2 / Math.sin(pivot)); // length of arm below start position
newMouse.x2 = Math.abs(newMouse.y2 / Math.tan(pivot));
newMouse.h3 = 153;
newMouse.h1 = newMouse.h3 - newMouse.h2;
};
MeasurementTool.Compass.prototype.addPencil = function(object, property, oldSet, newSet) {
var canvas = this.get('canvas').get('canvas');
var arc;
newSet.push(
this.get('children').set('pencil',
new MeasurementTool.Set({
rotation: 0,
center: { x: 24, y: 67 },
set: canvas.set([
canvas.rect(23.5, 205, 1, 15).attr({
"fill": "none",
"stroke": "#231F20",
"stroke-miterlimit": "10"
}),
canvas.rect(23, 165, 2, 12).attr({
"fill": "#D1D3D4",
"stroke": "#808285",
"stroke-miterlimit": "10"
}),
canvas.rect(20.5, 177, 7, 10).attr({
"fill": "#D1D3D4",
"stroke": "#808285",
"stroke-miterlimit": "10"
}),
canvas.rect(22.5, 187, 3.5, 3).attr({
"fill": "#D1D3D4",
"stroke": "#808285",
"stroke-miterlimit": "10"
}),
canvas.path("M22,190 l4,0 l-1,15 l-2,0 l-1,-15").attr({
"fill": "#D1D3D4",
"stroke": "#808285",
"stroke-miterlimit": "10"
}),
canvas.rect(13, 165, 22, 55).attr(this.get('dragHandleAttributes'))
]).drag(
function(dx, dy, canvasX, canvasY) {
this.rotation.drag.apply(this, arguments);
var radius = this.get('radius');
var angle = this.get('transforms').get('rotation').angle - (radius < 0 ? 180 : 0);
var start = arc.get('start');
var end = arc.get('end');
if (angle < start) {
arc.set('start', angle);
} else if (angle > end) {
arc.set('end', angle);
}
},
function(canvasX, canvasY, event) {
this.rotation.start.apply(this, arguments);
var radius = this.get('radius');
var transforms = this.get('transforms');
var translation = transforms.get('translation');
var rotation = transforms.get('rotation');
var angle = rotation.angle - (radius < 0 ? 180 : 0);
this.get('arcs').add(arc = new MeasurementTool.Arc({
canvas: this.get('canvas'),
center: { x: rotation.x + translation.x, y: rotation.y + translation.y },
radius: Math.abs(radius),
start: angle,
end: angle
}));
},
null,
this,
this,
null
)
})
).get('set')
);
};
MeasurementTool.Compass.prototype.removeArc = function(arcs, index, oldArc, newArc) {
if (oldArc != "") {
oldArc.get('node').remove();
oldArc.destroy();
}
};

// FILE: Arc.js (06d3e87f) 3/7/2014 11:24:13 AM

if (typeof(MeasurementTool) == "undefined") {
MeasurementTool = {};
}
MeasurementTool.Arc = PiObject.extend();
MeasurementTool.Arc.prototype.init = function(config) {
config = config || {};
config.radius = Math.abs(config.radius);
config['stroke-width'] = config['stroke-width'] || 13;
MeasurementTool.Arc.parent.init.apply(this, arguments);
this.addListener('radius', this.positiveRadius, false);
this.addListener('canvas', this.addCanvas);
};
MeasurementTool.Arc.prototype.positiveRadius = function (object, property, oldValue, newValue) {
if (newValue < 0) {
return Math.abs(newValue);
}
};
MeasurementTool.Arc.prototype.addCanvas = function (object, property, oldCanvas, newCanvas) {
this.addListener('center', this.render, false);
this.addListener('start', this.render, false);
this.addListener('end', this.render, false);
this.render();
};
MeasurementTool.Arc.prototype.render = function (object, property, oldValue, newValue) {
if (property == "node") {
return;
}
var large_arc_flag,
sweep_flag = this.get('direction'),
center = this.get('center'),
radius = this.get('radius'),
start = this.get('start'),
end = this.get('end');
if (sweep_flag == "") {
if (start < end) {
sweep_flag = "1";
}
else if (start > end) {
sweep_flag = "0";
}
if (sweep_flag != "") {
this.set('direction', sweep_flag);
} else {
sweep_flag = "0";
}
}
if (Math.abs(end - start) >= 180) {
large_arc_flag = 1;
} else {
large_arc_flag = 0;
}
if (this.exists('node')) {
this.get('node').remove();
}
if (Math.abs(end - start) >= 360) {
var node = this.get('canvas').get('canvas').circle(center.x, center.y, radius);
} else {
start = parseInt(start) * Math.PI / 180.0;
start = [center.x + radius * Math.cos(start), center.y + radius * Math.sin(start)].join(',');
end = parseInt(end) * Math.PI / 180.0;
end = [center.x + radius * Math.cos(end), center.y + radius * Math.sin(end)].join(',');
var path = [
"M",
start,
"A",
[radius, radius].join(','),
"0",
[large_arc_flag, sweep_flag].join(','),
end
].join(' ');
var node = this.get('canvas').get('canvas').path(path);
}
node.attr(this.get('config'));
this.set('node', node);
};

// FILE: module_mt.js (03b58ea9) 7/23/2014 4:30:36 PM

(function(CM) {
if (typeof Raphael != 'function') {
return;
}
if (typeof MeasurementTool != 'object') {
return;
}
function MT_setVisibility(value) {
var toolContainer = this.get('canvas').canvas && Util.Browser.isIOS() && Util.Browser.getIOSVersion() < 7 ? this.get('canvas').canvas.parentNode : null;
if (value == 'hidden' || this.get('visibility') == 'visible') {
if (toolContainer) {
YUD.addClass(toolContainer, 'hideMeasuring');
}
return this.set('visibility', 'hidden');
} else {
if (toolContainer) {
YUD.removeClass(toolContainer, 'hideMeasuring');
}
return this.set('visibility', 'visible');
}
};
TDS.MT_toggleRuler = function (event, page) {
if (!page.ruler) {
return false;
}
var zoomFactor = page.getZoomFactor();
if (MT_setVisibility.call(page.ruler) == 'visible') {
page.ruler.setScale(0, 0, 0, zoomFactor);
this.className = 'on';
} else {
this.className = 'off';
}
return true;
};
TDS.MT_toggleProtractor = function (event, page) {
if (!page.protractor) {
return false;
}
var zoomFactor = page.getZoomFactor();
if (MT_setVisibility.call(page.protractor) == 'visible') {
page.protractor.setScale(0, 0, 0, zoomFactor);
this.className = 'on';
} else {
this.className = 'off';
}
return true;
};
function MTApplication(arg) {
var page = arg.page,
imgItem = arg.imgItem,
mtIndex = arg.mtIndex,
lineEnabled = arg.lineEnabled,
compassEnabled = arg.compassEnabled,
zoomFactor = arg.zoomFactor;
var mtContainer = imgItem.parentNode.parentNode,
mtElem = imgItem.parentNode;
var dataMTConfigWidth = YUD.getAttribute(imgItem, 'data-mt-config-width') || 500,
dataMTConfigHeight = YUD.getAttribute(imgItem, 'data-mt-config-height') || 300;
this.dataMTConfigWidth = dataMTConfigWidth;
this.dataMTConfigHeight = dataMTConfigHeight;
var imgSrc = YUD.getAttribute(imgItem, 'src');
var toolID = page.id + "_" + mtIndex;
var toolBox = [];
var doc = page.getDoc();
var imgElem = doc.createElement('img'),
imgParents = doc.createElement('div'),
buttonContainer = doc.createElement('div'),
measuringElem = doc.createElement('div');
if (lineEnabled) {
var lineButton = doc.createElement('button');
lineButton.setAttribute('id', 'ToggleStraightLine_' + toolID);
YUD.addClass(lineButton, 'measure_straight off');
YUE.addListener(lineButton, 'click', function (e) {
YUE.stopEvent(e);
if (compassEnabled) {
MT_setVisibility.call(page.mt[mtIndex].compass, 'hidden');
compassButton.className = 'measure_compass off';
}
var lineToolStatus = MT_setVisibility.call(page.mt[mtIndex].line);
if (lineToolStatus == 'visible') {
this.className = 'measure_straight on';
} else {
this.className = 'measure_straight off';
}
});
buttonContainer.appendChild(lineButton);
var line_mt = new MeasurementTool.StraightLine({
visibility: 'hidden'
});
line_mt.set('zoomFactor', zoomFactor);
toolBox.push(line_mt);
this.line = line_mt;
}
if (compassEnabled) {
var compassButton = doc.createElement('button');
compassButton.setAttribute('id', 'ToggleCompass_' + toolID);
YUD.addClass(compassButton, 'measure_compass off');
YUE.addListener(compassButton, 'click', function (e) {
YUE.stopEvent(e);
if (lineEnabled) {
MT_setVisibility.call(page.mt[mtIndex].line, 'hidden');
lineButton.className = 'measure_straight off';
}
var compassToolStatus = MT_setVisibility.call(page.mt[mtIndex].compass);
if (compassToolStatus == 'visible') {
this.className = 'measure_compass on';
} else {
this.className = 'measure_compass off';
}
});
buttonContainer.appendChild(compassButton);
var compass_mt = new MeasurementTool.Compass({
visibility: 'hidden'
});
toolBox.push(compass_mt);
this.compass = compass_mt;
}
if (lineEnabled || compassEnabled) {
var resetButton = doc.createElement('button');
resetButton.setAttribute('id', 'RestCanvas_' + toolID);
YUD.addClass(resetButton, 'measure_reset off');
YUE.addListener(resetButton, 'click', function (e) {
YUE.stopEvent(e);
if (lineEnabled) {
MT_setVisibility.call(page.mt[mtIndex].line, 'hidden');
lineButton.className = 'measure_straight off';
page.mt[mtIndex].line.get('lines').removeAll();
}
if (compassEnabled) {
MT_setVisibility.call(page.mt[mtIndex].compass, 'hidden');
compassButton.className = 'measure_compass off';
page.mt[mtIndex].compass.get('arcs').removeAll();
}
});
buttonContainer.appendChild(resetButton);
}
imgElem.setAttribute('src', imgSrc);
imgElem.setAttribute('alt', 'line segments');
imgParents.setAttribute('id', 'measurement_' + toolID);
YUD.setStyle(imgParents, 'width', dataMTConfigWidth + 'px');
YUD.setStyle(imgParents, 'height', dataMTConfigHeight + 'px');
YUD.addClass(imgParents, 'contextArea illustrationContainer');
YUD.addClass(buttonContainer, 'tools_measure');
YUD.addClass(measuringElem, 'measuring');
imgParents.appendChild(imgElem);
measuringElem.appendChild(imgParents);
measuringElem.appendChild(buttonContainer);
mtContainer.replaceChild(measuringElem, mtElem);
var s_canvas = new MeasurementTool.Canvas({
node: imgParents,
width: dataMTConfigWidth,
height: dataMTConfigHeight,
r: 20,
children: new PiObject(toolBox)
});
var canvasStyle = s_canvas.get('canvas').canvas.style;
canvasStyle.removeProperty('left');
canvasStyle.removeProperty('top');
this.canvas = s_canvas;
var zoomMt = function (zoomfacor) {
var curCanvas = this.canvas,
curSvgElem = curCanvas.get('canvas').canvas;
var zoomCtnWidth = dataMTConfigWidth * zoomfacor,
zoomCtnHeight = dataMTConfigHeight * zoomfacor;
if (this.line) {
this.line.set('zoomFactor', zoomfacor);
}
if (curCanvas) {
curCanvas.get('canvas').setViewBox(0, 0, dataMTConfigWidth, dataMTConfigHeight);
YUD.setStyle(imgParents, 'width', zoomCtnWidth + 'px');
YUD.setStyle(imgParents, 'height', zoomCtnHeight + 'px');
YUD.setAttribute(curSvgElem, 'width', zoomCtnWidth);
YUD.setAttribute(curSvgElem, 'height', zoomCtnHeight);
}
};
this.zoomMt = zoomMt;
}
CM.onPageEvent('available', function(page) {
var pageEl = page.getElement(),
doc = page.getDoc(),
ruler = null,
protractor = null,
zoomFactor = page.getZoomFactor(),
imgElements = Util.Array.slice(pageEl.getElementsByTagName('img')),
mtIndex = 0,
rightBoundary = doc.body.clientWidth,
bottomBoundary = doc.body.clientHeight - doc.getElementById('topBar').clientHeight;
page.mt = [];
YUD.batch(imgElements, function (imgItem) {
var rulerEnabled = YUD.getAttribute(imgItem, 'data-mt-ruler-enabled'),
protractorEnabled = YUD.getAttribute(imgItem, 'data-mt-protractor-enabled'),
lineEnabled = YUD.getAttribute(imgItem, 'data-mt-line-enabled'),
compassEnabled = YUD.getAttribute(imgItem, 'data-mt-compass-enabled'),
pageScaleToolClassName = Util.Browser.isIOS() && Util.Browser.getIOSVersion() < 7 ? 'mtPageScaleTools hideMeasuring' : 'mtPageScaleTools';
if (rulerEnabled && ruler == null) {
var rulerMin = YUD.getAttribute(imgItem, 'data-mt-ruler-min');
var rulerMax = YUD.getAttribute(imgItem, 'data-mt-ruler-max');
var rulerSystem = YUD.getAttribute(imgItem, 'data-mt-ruler-system');
var rulerLabel = YUD.getAttribute(imgItem, 'data-mt-ruler-label');
ruler = new MeasurementTool.Ruler({
id: 'Ruler_' + page.id,
parent: pageEl,
visibility: 'hidden',
classname: pageScaleToolClassName,
min: rulerMin,
max: rulerMax,
system: rulerSystem,
label: rulerLabel
});
ruler.set('rightBoundary', rightBoundary);
ruler.set('bottomBoundary', bottomBoundary);
page.ruler = ruler;
page.MT_toggleRuler = TDS.MT_toggleRuler;
}
if (protractorEnabled && protractor == null) {
var protractorSystem = YUD.getAttribute(imgItem, 'data-mt-protractor-system');
var protractorLabel = YUD.getAttribute(imgItem, 'data-mt-protractor-label');
protractor = new MeasurementTool.Protractor({
id: 'Protractor_' + page.id,
parent: pageEl,
visibility: 'hidden',
classname: pageScaleToolClassName,
system: protractorSystem,
label: protractorLabel
});
protractor.set('rightBoundary', rightBoundary);
protractor.set('bottomBoundary', bottomBoundary);
page.protractor = protractor;
page.MT_toggleProtractor = TDS.MT_toggleProtractor;
}
if (lineEnabled || compassEnabled) {
var mtArg = {
'page': page,
'imgItem': imgItem,
'mtIndex': mtIndex,
'lineEnabled': lineEnabled,
'compassEnabled': compassEnabled,
'zoomFactor': zoomFactor
};
page.mt[mtIndex] = new MTApplication(mtArg);
mtIndex++;
}
}, this, true);
});
CM.onPageEvent('show', function (page) {
if (!page.ruler && !page.protractor) {
return;
}
var accProps = TDS.getAccommodationProperties();
if (accProps && accProps.hasReverseContrast()) {
var color = '#808080';
if (page.ruler) {
var rulerEls = page.ruler.get('children');
rulerEls.get('tickmarksR').forEach(function (element) {
element.attr('stroke', color);
});
rulerEls.get('outline').attr('stroke', color);
rulerEls.get('label').attr('stroke', color);
}
if (page.protractor) {
var protractorEls = page.protractor.get('children');
protractorEls.get('tickmarksR').forEach(function (element) {
element.attr('stroke', color);
});
protractorEls.get('tickmarks').forEach(function (element) {
element.attr('stroke', color);
});
protractorEls.get('outline').forEach(function (element) {
element.attr('stroke', color);
});
protractorEls.get('label').attr('stroke', color);
}
}
});
CM.onPageEvent('zoom', function(page, item) {
if (!page.mt && !page.ruler && !page.protractor) {
return;
}
var zoomFactor = page.getZoomFactor();
if (page.mt) {
for (var i = 0; i < page.mt.length; i++) {
var curMt = page.mt[i];
curMt.zoomMt(zoomFactor);
}
}
if (page.ruler) {
page.ruler.setScale(0, 0, 0, zoomFactor);
}
if (page.protractor) {
page.protractor.setScale(0, 0, 0, zoomFactor);
}
});
CM.onPageEvent('hide', function (page) {
if (page.ruler && page.ruler.get('visibility') == 'visible') {
page.ruler.set('visibility', 'hidden');
}
if (page.protractor && page.protractor.get('visibility') == 'visible') {
page.protractor.set('visibility', 'hidden');
}
});
})(ContentManager);

// FILE: config.js (bd4daff2) 3/7/2014 11:24:06 AM

if(!window.console){
window.console = {
log: function(){},
error: function(){},
warn: function(){},
info: function(){}
};
}
if(!Function.prototype.bind){
Function.prototype.bind = function (oThis){
if(typeof this !== "function"){
throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
}
var aArgs = Array.prototype.slice.call(arguments, 1),
fToBind = this,
fNOP = function (){},
fBound = function (){
return fToBind.apply(this instanceof fNOP && oThis
? this
: oThis,
aArgs.concat(Array.prototype.slice.call(arguments)));
};
fNOP.prototype = this.prototype;
fBound.prototype = new fNOP();
return fBound;
};
}
if(!String.prototype.trim){
String.prototype.trim = function(){
return this.replace(/^\s+|\s+$/g,"");
}
}
(function(){
if(!window.MathJax){return;}
MathJax.Editor        = MathJax.Editor || {};
MathJax.Editor.Config = MathJax.Editor.Config || {};
MathJax.Editor.Config.DEBUG = true;
MathJax.Editor.Config.Rows = MathJax.Editor.Config.Rows || {};
MathJax.Editor.Config.Tabs = MathJax.Editor.Config.Tabs || {};
MathJax.Editor.Config.HistoryLength = 10;
MathJax.Editor.Config.PlaceHold    = '\\Box';
MathJax.Editor.Config.StarReplace = MathJax.Editor.Config.StarReplace || function (editorContext) {
var starBtn = {};
if (editorContext) {
if (typeof (editorContext.WIDGET.CONTENT.getActiveBtns()["*"]) == 'object') {
starBtn = editorContext.WIDGET.CONTENT.getActiveBtns()["*"];
}
else if (editorContext && typeof (editorContext.WIDGET.CONTENT.getActiveBtns()["times"]) == 'object') {
starBtn = editorContext.WIDGET.CONTENT.getActiveBtns()["times"];
}
}
if (starBtn.value)
return starBtn.value;
else if (starBtn.key)
return starBtn.key;
else
return '\*';
};
MathJax.Editor.Config.TeXEntryMode = {
None: 'None',
Allow:  'Allow',
Vim: 'Vim'
};
MathJax.Editor.Config.TeXEntryDefault = MathJax.Editor.Config.TeXEntryMode.Allow;
MathJax.Editor.Config.RestrictKeysToContent = false;
MathJax.Editor.Config.Navigation = true;
MathJax.Editor.Config.DefaultTextBoxPx = 5;
MathJax.Editor.Config.FontSizePx = 10;
MathJax.Editor.Config.Scale      = 150;
MathJax.Editor.Config.MaxCharacterLimit = 100;
MathJax.Editor.Config.EditModes = MathJax.Editor.Config.EditModes || {
DEFAULT: 'INSERT',
INSERT:  'INSERT',
APPEND:  'APPEND',
UNSHIFT: 'UNSHIFT',
REPLACE: 'REPLACE'
};
MathJax.Editor.Config.EditCls = MathJax.Editor.Config.EditCls || {
INSERT : 'mje_insert_select',
REPLACE: 'mje_replace_select'
};
MathJax.Editor.Config.Label = MathJax.Editor.Config.Label || {
Next: '←',
Prev: '→',
Undo: 'Undo',
Redo: 'Redo',
Delete: 'Delete',
None: 'None'
};
MathJax.Editor.Config.MagicDisabled      = false;
MathJax.Editor.Config.SanitizeTeXEnabled = true;
MathJax.Editor.Config.sanitizeTeX = MathJax.Editor.Config.sanitizeTeX || function(initialText){
if(typeof initialText != 'string') return;
var text = initialText.trim();
if(text.match(/^\^/)) {text = '\\PH' + text;}
if(text.match(/\^$/)) {text = text + '\\PH';}
if(text.match(/^_/))  {text = '\\PH' + text;}
if(text.match(/_$/))  {text = text + '\\PH';}
if(text.match(/\*/)) { text = text.replace(/\*/, MathJax.Editor.Config.StarReplace(this)); }
text = text.replace(/\<=/, '\\le ');
text = text.replace(/=\</, '\\le ');
text = text.replace(/\</, '\\lt ');
text = text.replace(/\>=/, '\\ge ');
text = text.replace(/=\>/, '\\ge ');
text = text.replace(/\>/,  '\\gt ');
text = !text.match('left') ? text.replace(/\(/, '\\left(') : text;
text = !text.match('right') ? text.replace(/\)/, '\\right)') : text;
text = text.replace(/\\left\(\\right\)/, '\\left(\\Box\\right)');
if(text == '\\lvert\\Box\\rvert'){text = '\\left|\\Box\\right|';}
return text;
};
MathJax.Editor.Config.Lookup = null;
MathJax.Editor.Config.getLookup = function(){
if(MathJax.Editor.Config.Lookup == null){
MathJax.Editor.Config.Lookup = {};
var lookups = [
MathJax.InputJax.TeX.Definitions.mathchar0mi,
MathJax.InputJax.TeX.Definitions.mathchar0mo,
MathJax.InputJax.TeX.Definitions.mathchar7,
MathJax.InputJax.TeX.Definitions.macros,
MathJax.InputJax.TeX.Definitions.delimiter
];
var uni  = null;
var look = null;
var hex  = null;
for(var i in lookups){
look = lookups[i];
for (var k in look){
uni = look[k];
if(typeof uni != 'string'){
uni = uni[0];
}
hex = uni;
if(hex && hex.length == 4){
hex = '"\\u' + hex +'"';
try{ uni = eval(hex); }catch(e){uni = k;}
} else {
if(hex == 'NamedFn'  || hex == 'NamedOp'){
uni =  '\\'+ k + '(\\PH)';
}else{
uni = k;
}
}
MathJax.Editor.Config.Lookup[k] = uni;
}
}
}
return MathJax.Editor.Config.Lookup;
};
MathJax.Editor.Config.getMathVal = function(val, ph){
if(typeof val == 'string'){
var look = MathJax.Editor.Config.getLookup();
val = (val || '').trim();
if(look[val]){
val = val && val.length > 1 && !val.match(/\\/) ? "\\" + val : val;
}
} else {
console.warn('Non string value in getMathVal', val);
val += '';
}
return val;
};
MathJax.Editor.Config.getUnicode = function(k, ph){
if(!k || k.isParsed){
return k;
}
var value = k.value;
var ret = {key: k.key || k, text: k.text || (!k.css ? (k.key || k) : '')};
var hex = null;
var uni = null;
var lookups = MathJax.Editor.Config.getLookup();
var key = k.key || k;
if(!k.value && lookups[key]){
hex = lookups[key];
if(hex){
ret.text = k.text || hex;
if(ph){
ret.text = ret.text.replace(/\(\\PH\)/g, '');
ret.text = ret.text.replace('\\', '');
}
if(hex.length > 1){
value = hex;
}
}
}
if(value == '' || value == null || typeof value == 'undefined'){
value = MathJax.Editor.Config.getMathVal(k.key || k);
}
ret.value    = value.replace(/\\PH/g, ph || '');
ret.keyCode  = k.keyCode;
ret.isParsed = true;
return ret;
};
})();

// FILE: content.js (dd85bf8c) 7/23/2014 4:30:36 PM

(function(){
if(!window.MathJax){return;}
var greek = {
title: 'Greek',
type: 'row',
items: [
'alpha',
'beta',
'gamma',
'delta',
'epsilon',
'zeta',
'eta',
'theta',
'iota',
'kappa',
'lambda',
'mu',
'nu',
'xi',
'omicron',
'pi',
'rho',
'sigma',
'tau',
'upsilon',
'phi',
'chi',
'psi'
]
};
var trig = {
title: 'Trigonometry',
type: 'row',
items: [
'sin',
'cos',
'tan',
'arcsin',
'arccos',
'arctan'
]
};
var numbers = {
title: 'Numbers',
type: 'grid',
cols: 3,
items: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
'.',
{key: 'fraction', text: 'fraction', value: '\\frac{\\PH}{\\PH}', css: 'mathjax_editor_button_fraction'}
]
};
var numbersminus = {
title: 'Numbers',
type: 'grid',
cols: 3,
items: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '-']
};
var numpad = {
title: 'Number Pad',
type: 'numpad',
items: [
'7', '8', '9', '4', '5', '6', '1', '2', '3', '0', '.'
]
};
var decimalnumbers = {
title: 'Numbers',
type: 'grid',
cols: 3,
items: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.']
};
var operations = {
title: 'Operations_After_Grade_6',
type: 'row',
items: [
'+', '-', {key: '*', text: '*'}, 'div'
]
};
var operations_muldot = {
title: 'OperationsWithCDot',
type: 'row',
items: [
'+', '-', { key: '*', value: '\\bullet', css: 'mje_button_dot'                            }, 'div']
};
var operations_calc = {
title: 'Operations',
type: 'row',
items: [
'+',
'-',
{key: '*', text: '*'},
'div',
{key: 'nrt',    value: '\\sqrt[\\PH]{\\PH}',      css: 'mathjax_editor_button_nrt'},
{key: 'fraction',   value: '\\frac{\\PH}{\\PH}',  css: 'mathjax_editor_button_fraction'},
{key: 'intV',   value: '\\int_\\PH^\\PH \\PH',    css: 'mathjax_editor_button_intergal_vals',  text:eval('"\\u222B"')},
{key: 'sub',    value: '\\PH_\\PH',               css: 'mathjax_editor_button_sub'},
{key: 'sup',     value: '\\PH^\\PH',              css: 'mathjax_editor_button_sup'}
]
};
var operation_simple = {
title: 'Operations',
type: 'row',
items: ['+', '-', 'times', 'div']
};
var signs_basic = {
title: 'Signs',
type: 'row',
items: ['lt', '=', 'gt']
};
var signs = {
title: 'Signs',
type: 'row',
items: ['lt', 'le', '=', 'ge', 'gt']
};
var basic_variables = {
title: 'Variables',
type: 'row',
items: [
'x',
'y'
]
};
var variables = {
title: 'Variables',
type: 'row',
items: [
'f',
'n',
'x',
'y',
{ key: 'sub', value: '\\PH_{\\PH}' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: '( )', value: '(\\PH)' }]
};
var fractions = {
title: 'Fractions',
type: 'row',
items: [
{key: 'fraction', value: '\\frac{\\PH}{\\PH}'}
]
};
var calc = {
title: 'Calculus',
type: 'row',
items: [
{ key: 'subsup', value: '\\PH_{\\PH}^{\\PH}', css: '' },
]
};
var other = {
title: 'Other',
type: 'row',
items: [
{ key: '| |', value: '\\lvert\\PH\\rvert', css: '' },
{ key: '( )', value: '(\\PH)' }
]
};
var functions = {
title: 'Functions',
type: 'grid',
cols: 2,
items: [
'(', ')',
'sin', 'cos',
'tan', {key: 'e^x', value: 'e^{\\PH}', text: 'e^exp'},
'ln',  'log',
{key: 'n!', value: '\\PH!', text: 'n!'},
{key: 'FBoxes', value: '\\frac{\\PH}{\\PH}', text: 'fraction'},
{key: 'x^y', text: 'x^y', value: 'x^y'}, {key: 'x^2', value: 'x^2', text: 'x^2'},
{key: 'x^3', text: 'x^3', value: 'x^3'}, 'pi',
'abs'
]
};
var row3_sbac4 = {
title: 'Other',
type: 'row',
items: [
{ key: '( )', value: '(\\PH)' }
]
};
var row3_sbac5 = {
title: 'Other',
type: 'row',
items: [
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' }
]
};
var row3_sbac6 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' }
]
};
var row3_sbac7 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
"pi"
]
};
var row3_sbac8 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
"pi"
]
};
var row3_sbac10 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: 'sub', value: '\\PH_\\PH'},
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
"pi",
"i"
]
};
var row3_utah3 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: '( )', value: '(\\PH)' }
]
};
var row3_utah4 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: '( )', value: '(\\PH)' }
]
};
var row3_utah5 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' }
]
};
var row3_utah6 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
]
};
var row3_utah7 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
"pi"
]
};
var row3_utah8 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
"pi"
]
};
var row3_utahsm1 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: 'sub', value: '\\PH_\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
"pi"
]
};
var row3_utahsm2 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: 'sub', value: '\\PH_\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
"pi",
"i"
]
};
var row3_utahsm3 = {
title: 'Other',
type: 'row',
items: [
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sup', value: '\\PH^\\PH' },
{ key: 'sub', value: '\\PH_\\PH' },
{ key: '( )', value: '(\\PH)' },
{ key: '| |', value: '\\lvert\\PH\\rvert' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
"pi",
"i"
]
};
var numbers_utahlpn1 = {
title: 'Numbers',
type: 'grid',
cols: 3,
items: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.'
, { key: 'n!', value: '\\PH!', text: 'n!' }]
};
var row1_utahlpn1 = {
title: 'Other',
type: 'row',
items: [
'div',
'ne', 'lt', 'le', '=', 'ge', 'gt',
{ key: 'pm', value: '\pm', text: eval('"\\u00b1"') },
{ key: 'infty', value: '\infty', text: eval('"\\u221e"') }
]
};
var row2_utahlpn1 = {
title: 'Other',
type: 'row',
items: [
'times',
{ key: '( )', value: '(\\PH)' },
{ key: 'abs', value: '\\lvert\\PH\\rvert', text: '| |' },
{ key: 'sub', value: '\\PH_\\PH' },
{ key: 'sup', value: '\\PH^\\PH' }
]
};
var row3_utahlpn1 = {
title: 'Other',
type: 'row',
items: [
'-',
{ key: 'fraction', value: '\\frac{\\PH}{\\PH}' },
{ key: 'sqrt', value: '\\sqrt{\\PH}' },
{ key: 'nrt', value: '\\sqrt[\\PH]{\\PH}' },
{ key: 'sum', value: '\sum', text: eval('"\\u2211"') },
{ key: 'intV', value: '\\int_\\PH^\\PH \\PH', css: 'mathjax_editor_button_intergal_vals', text: eval('"\\u222B"') }
]
};
var row4_utahlpn1 = {
title: 'Other',
type: 'row',
items: [
'+',
'sin',
'cos',
'tan',
'arcsin',
'arccos',
'arctan', 'ln', 'log'
]
};
var greek_utahlpn1 = {
title: 'Greek',
type: 'grid',
cols: 8,
items: [
'alpha',
'beta',
'gamma',
'delta',
'epsilon',
'zeta',
'eta',
'theta',
'iota',
'kappa',
'lambda',
'mu',
'nu',
'xi',
'omicron',
'pi',
'rho',
'sigma',
'tau',
'upsilon',
'phi',
'chi',
'psi'
]
};
MathJax.Editor.Config.Common = [
{key: 'Box',    value: '\\Box',                text: eval('"\\u2610"')},
{key: 'int',    value: '\\int\\PH',            text: eval('"\\u222B"')},
{key: 'abs',    value: '\\lvert\\PH\\rvert',   text: '| |'},
{key: 'sqrt',   value: '\\sqrt\\PH',           text: eval('"\\u221A"')},
{key: 'nrt',    value: '\\sqrt[\\PH]{\\PH}',      css: 'mathjax_editor_button_nrt'},
{key: 'fraction',   value: '\\frac{\\PH}{\\PH}',  css: 'mathjax_editor_button_fraction'},
{key: 'intV',   value: '\\int_\\PH^\\PH \\PH',    css: 'mathjax_editor_button_intergal_vals',  text:eval('"\\u222B"')},
{key: 'sub',    value: '\\PH_\\PH',               css: 'mathjax_editor_button_sub'},
{key: 'sup',     value: '\\PH^\\PH',              css: 'mathjax_editor_button_sup'},
{key: 'subsup', value: '\\PH_\\PH^\\PH',          css: 'mathjax_editor_button_subsup'}
];
MathJax.Editor.Config.Rows = {
Numbers: numbers,
NumPad: numpad,
Signs: signs,
Functions: functions,
Other: other,
Operations: operations,
SimpleOperation: operation_simple,
OperationsWithCDot: operations_muldot,
Greek: greek,
Trigonometry: trig,
Algebra: basic_variables,
Fraction: fractions
};
MathJax.Editor.Config.Tabs = {
Order: ['Numbers', 'Basic', 'Algebra', 'Calculus', 'SBAC3', 'SBAC4', 'SBAC5', 'SBAC6', 'SBAC7', 'SBAC8', 'SBAC9', 'SBAC10', 'SBAC11', 'Utah3', 'Utah4', 'Utah5', 'Utah6', 'Utah7', 'Utah8', 'UtahSM1', 'UtahSM2', 'UtahSM3', 'UtahLPN1', 'UtahLPN2'],
Numbers: {
title: 'Numbers',
rows: [
numbers
]
},
Basic: {
title: 'Basic',
rows: [numbers, operation_simple, signs_basic, fractions]
},
Algebra: {
title: 'Algebra',
rows: [
numbers,
basic_variables,
operations,
signs,
other
]
},
Calculus: {
title: 'Calculus',
rows: [
numbers,
variables,
operations_calc,
signs,
trig
]
},
SBAC3: {
title: 'SBAC3',
rows: [numbers, operation_simple, signs_basic, row3_sbac4]
},
SBAC4: {
title: 'SBAC4',
rows: [numbers, operation_simple, signs_basic, row3_sbac4]
},
SBAC5: {
title: 'SBAC5',
rows: [numbers, operation_simple, signs_basic, row3_sbac5]
},
SBAC6: {
title: 'SBAC6',
rows: [numbersminus, operations, signs_basic, row3_sbac6]
},
SBAC7: {
title: 'SBAC7',
rows: [numbersminus, operations, signs, row3_sbac7]
},
SBAC8: {
title: 'SBAC8',
rows: [numbersminus, operations, signs, row3_sbac8]
},
SBAC9: {
title: 'SBAC9',
rows: [numbersminus, operations, signs, row3_sbac8]
},
SBAC10: {
title: 'SBAC10',
rows: [numbersminus, operations, signs, row3_sbac10]
},
SBAC11: {
title: 'SBAC11',
rows: [numbersminus, operations, signs, row3_sbac10, trig]
},
Utah3: {
title: 'Utah3',
rows: [decimalnumbers, operation_simple, signs_basic, row3_utah3]
},
Utah4: {
title: 'Utah4',
rows: [decimalnumbers, operation_simple, signs_basic, row3_utah4]
},
Utah5: {
title: 'Utah5',
rows: [decimalnumbers, operation_simple, signs_basic, row3_utah5]
},
Utah6: {
title: 'Utah6',
rows: [numbersminus, operations_muldot, signs_basic, row3_utah6]
},
Utah7: {
title: 'Utah7',
rows: [numbersminus, operations_muldot, signs, row3_utah7]
},
Utah8: {
title: 'Utah8',
rows: [numbersminus, operations_muldot, signs, row3_utah8]
},
UtahSM1: {
title: 'UtahSM1',
rows: [numbersminus, operations_muldot, signs, row3_utahsm1]
},
UtahSM2: {
title: 'UtahSM2',
rows: [numbersminus, operations_muldot, signs, row3_utahsm2, trig]
},
UtahSM3: {
title: 'UtahSM3',
rows: [numbersminus, operations_muldot, signs, row3_utahsm3, trig]
},
UtahLPN1: {
title: 'Math',
rows: [numbers_utahlpn1, row1_utahlpn1, row2_utahlpn1, row3_utahlpn1, row4_utahlpn1]
},
UtahLPN2: {
title: 'Greek Alphabet',
rows: [greek_utahlpn1]
}
};
})();

// FILE: editor.js (510c909a) 7/23/2014 4:30:36 PM

(function(HUB, AJAX, CONFIG){
if(!window.MathJax){return;}
HUB.Queue(
["Require", AJAX, "[MathJax]/extensions/tex2jax.js"],
["Require", AJAX, "[MathJax]/jax/input/TeX/jax.js"],
["Require", AJAX, "[MathJax]/extensions/mml2jax.js"],
["Require", AJAX, "[MathJax]/jax/input/MathML/jax.js"]
);
MathJax.Editor = MathJax.Editor || {};
var H = MathJax.HTML;
var BASE = MathJax.Object.Subclass({
multiCls: function(cls){
cls = typeof cls == 'string' ? cls.trim().split(' ') : cls;
cls = [].concat(cls);
var ret = {};
for(var i = 0; i < cls.length; ++i){
ret[cls[i]] = true;
}
return ret;
},
stopEvt: function(evt){
evt = evt || window.event;
if(evt){
evt.stopPropagation ? evt.stopPropagation() : evt.cancelBubble = true;
evt.preventDefault  ? evt.preventDefault() : evt.returnValue = false;
}
},
reCombo: function(multiCls){
var str = '';
for (k in multiCls){
if(multiCls[k]){
str = str + " " + k;
}
}
return str;
},
hasCls: function(idOrDom, cls){
var el = typeof idOrDom == 'string' ? document.getElementById(idOrDom) : idOrDom;
if(el && cls){
if(el.className && el.className.match(cls)) {
return true;
}
}
},
addCls: function(idOrDom, cls){
if(!idOrDom || !cls) return;
var elems      = [].concat(idOrDom);
for (k in elems){
var add = true;
var el  = elems[k];
var multiCheck = this.multiCls(cls);
typeof el == 'string' ? el = document.getElementById(idOrDom) : el;
if(!el){
console.warn("Could not find a node for: ", el);
continue;
}
var check = (el.className || '').trim().split(" ");
for (var i = 0; i < check.length; ++i){
multiCheck[check[i]] = false;
}
var add = this.reCombo(multiCheck);
if(add){
check.push(add);
el.className = check.join(" ");
}
}
},
removeCls: function(idOrDom, cls){
if(!idOrDom || !cls){ return; }
var elems      = [].concat(idOrDom);
var multiCheck = this.multiCls(cls);
for (k in elems){
var el  = elems[k];
typeof el == 'string' ? el = document.getElementById(idOrDom) : el;
if(!el || !el.className){
continue;
}
var check = (el.className || '').trim().split(" ");
for (var i = 0; i < check.length; ++i){
if(multiCheck[check[i]]){  check[i] = ''; }
}
var f = check.join(" ");
el.className = f;
}
}
});
var COMP = BASE.Subclass({
Init: function(w){
this.setWidget(w);
},
setWidget: function(w){
this.WIDGET = w;
if(!w) return;
this.CFG    = w.CFG;
},
getWidget: function(){
return this.WIDGET;
},
getEdit: function(){
return this.WIDGET ? this.WIDGET.getEdit() : null;
},
getEq: function(){
var edit = this.getEdit();
if(edit){
return MathJax.Hub.getAllJax(edit.contentId)[0];
}else{
console.error("Unknown equation for this", this, edit ? edit.contentId : null);
}
},
getEqRoot: function(){
var eq = this.getEq();
if(eq) return eq.root;
}
});
MathJax.Editor.Comp = COMP;
MathJax.Editor.Store = {};
MathJax.Editor.Store.Widgets = {};
MathJax.Editor.Store.set = function(widgetId, widget){
MathJax.Editor.Store.Widgets[widgetId] = widget;
if(widget == null && widgetId){
delete MathJax.Editor.Store.Widgets[widgetId];
}
};
MathJax.Editor.Store.get = function(widgetId){
return MathJax.Editor.Store.Widgets[widgetId];
};
MathJax.Editor.Store.query = function(q){
q = q || {};
var match = [];
for (widgetId in MathJax.Editor.Store.Widgets){
var widget = MathJax.Editor.Store.Widgets[widgetId];
for (key in q){
var val = q[key];
if(widget && widget.CFG && widget.CFG[key] == val){
match.push(widget);
}
}
}
return match;
};
MathJax.Editor.Store.remove = function (widgetId) {
var widget = MathJax.Editor.Store.Widgets[widgetId];
if(widget)
delete MathJax.Editor.Store.Widgets[widgetId];
};
var KPH  = null;
var KEYS = COMP.Subclass({
$className: 'MathJax.Editor.KeyPressHandler',
CODES: {
ctrlKey:{
82: [function(w, edit, nE){nE && edit.redo(); }],
90: [function(w, edit, nE){nE && edit.undo(); }],
67: [function(w, edit, nE){KPH.copy(w);}],
86: [function(w, edit, nE){KPH.paste(w);}],
27: [function(w, edit, nE){KPH.sleep(null);}]
},
altKey:{
72: [function(w, edit, nE){w.CONTENT.prevBtn();}],
74: [function(w, edit, nE){w.CONTENT.prevTab();}],
76: [function(w, edit, nE){w.CONTENT.nextBtn();}],
75: [function(w, edit, nE){w.CONTENT.nextTab();}]
},
shiftKey: {
37: [function(w, edit, nE){w.CONTENT.prevBtn();}],
38: [function(w, edit, nE){w.CONTENT.prevTab();}],
39: [function(w, edit, nE){w.CONTENT.nextBtn();}],
40: [function(w, edit, nE){w.CONTENT.nextTab();}]
},
13: [function(w, edit, nE){!nE && edit.updateMath(null, edit.inputField.value); }],
32: [function(w, edit, nE){!nE && edit.updateMath(null, edit.inputField.value); }],
37: [function(w, edit, nE){nE && edit.leftQ(); }],
38: [function(w, edit, nE){nE && w.prevEdit(); }],
39: [function(w, edit, nE){nE && edit.rightQ(); }],
40: [function(w, edit, nE){nE && w.nextEdit(); }],
8:  [function(w, edit, nE){nE && edit.remove(); }],
46: [function(w, edit, nE){nE && edit.remove(); }],
17: null,
18: null,
27: [function(w, edit, nE){edit.esc(); }],
73: [function(w, edit, nE){edit.vimEditable(CONFIG.EditModes.INSERT,  nE); }],
82: [function(w, edit, nE){edit.vimEditable(CONFIG.EditModes.REPLACE, nE);}],
65: [function(w, edit, nE){edit.vimEditable(CONFIG.EditModes.APPEND,  nE);}],
191: [function(w, edit, nE){edit.makeFraction(null, edit.grabValue(edit));}],
111: [function(w, edit, nE){edit.makeFraction(null, edit.grabValue(edit));}]
},
copy: function(w){
this._cpyBuf = w && w.getEdit() ? w.getEdit().toMathML() : null;
},
paste: function(w){
if(this._cpyBuf){
console.log("About to try and paste this.", this._cpyBuf);
}
},
getSetCallStack: function(keyCode, op){
if(typeof keyCode == 'undefined') return;
var addTo = this.CODES;
if(op){
addTo = (this.CODES[op] = (this.CODES[op] || {}));
}
if(!addTo[keyCode] && getSet){
addTo[keyCode] = [];
}
return addTo;
},
getCallStack: function(keyCode, op){
if(typeof keyCode == 'undefined') return;
var addTo = this.CODES;
if(op && addTo[op]){
addTo = addTo[op];
}
return addTo[keyCode];
},
addEvt: function(keyCode, func, op                          ){
var add = this.getSetCallStack(keyCode, op, true);
if(typeof func == 'function' && add) {
add[keyCode].push(func);
} else{
console.error('Invalid function or keyCode provided (keyCode, func, op)', keyCode, func, op);
}
},
replaceEvts: function(keyCode, func, op){
var rep = this.getSetCallStack(keyCode, op, true);
if(rep && typeof func == 'function'){
rep[keyCode] = [func];
}else{
console.error('Could not replace the events with (keyCode, func, op)', keyCode, func, op);
}
},
removeEvts: function(keyCode, op){
var rm = this.getCallStack(keyCode, op);
if(rm){
rm[keyCode] = null;
}
},
runEvents: function(evt, keyCode, op, w, edit){
w    = w    || this.getWidget();
edit = edit || this.getEdit();
var run = this.getCallStack(keyCode, op);
if(!w || !edit || !run) return;
var nE  = !edit.isTextEntered();
for (var i in run){
var func = run[i];
if(typeof func == 'function'){
func(w, edit, nE, evt);
}
}
evt.stopPropagation ? evt.stopPropagation() : evt.cancelBubble = true;
evt.preventDefault  && evt.preventDefault();
},
keyup: function (evt) {
try {
evt = evt || window.event;
var w = this.getWidget();
if (w && !w.CFG.noKeyboard) {
var op = evt.ctrlKey ? 'ctrlKey' : null;
op = evt.shiftKey ? 'shiftKey' : op;
op = evt.altKey ? 'altKey' : op;
if (op != null) {
this.runEvents(evt, evt.keyCode, op, w);
}
else if (w.CFG.checkEditorCharLimit()) {
this.runEvents(evt, evt.keyCode, op, w);
}
else {
w.getEdit().undo();
}
}
} catch (e) {
console.error("Failed to handle a key event (evt, e)", e);
}
},
enableInputField: function(widget, domNode, mn, mode){
this.listen(widget);
try{
var edit = widget.getEdit();
if(typeof domNode == 'string'){
domNode = document.getElementById(domNode);
}
mode = mode || edit.editMode;
var textNode = this.getInputField(domNode, mn, mode);
if(!edit.isTeXEntryEnabled()){
textNode.readOnly = true;
this.addCls(textNode, 'mje_read_only'); this.removeCls(textNode, 'mje_allow_edit');
}else{
textNode.readOnly = false;
this.removeCls(textNode, 'mje_read_only'); this.addCls(textNode, 'mje_allow_edit');
}
if(mode == CONFIG.EditModes.UNSHIFT){
domNode = document.getElementById(widget.getEdit().htmlId);
domNode.insertBefore(textNode, domNode.firstChild)
}else if(mode == CONFIG.EditModes.APPEND){
domNode = document.getElementById(edit.htmlId);
domNode.appendChild(textNode);
}else if(mn && edit.getUtil().isCloseBounding(mn)){
domNode.parentNode.insertBefore(textNode, domNode);
}else{
domNode.parentNode.insertBefore(textNode, domNode.nextSibling);
}
edit.inputField = textNode;
this.removeCls(textNode, 'hidden');
if(mn && edit.getUtil().isBox(mn)){
this.addCls(textNode, 'mje_box_input');
}else{
this.removeCls(textNode, 'mje_box_input');
}
this.handleDeviceFocus(textNode)
return textNode;
}catch(e){
console.error("Failed to get the replacement field.", e);
}
},
handleDeviceFocus: function(textNode){
if(this.CFG.isMobile) {
}
else {
setTimeout(function (textNode) { textNode.focus(); }.bind(this, textNode), 1);
}
},
getInputField: function(domNode, mn, mode){
var edit = this.getEdit();
if(!edit) return;
var id       = "MathEditorField-" + edit.id;
var textNode = document.getElementById(id);
if(!textNode){
textNode = H.Element("input", {
style: {}, type: 'text', id: id, className: 'mje_cursor_field'
});
}
if(mn){
if(!mode || mode != CONFIG.EditModes.APPEND){
textNode.value   = '';
}
textNode.onclick = function(w, evt){
evt = evt || window.event;
evt.stopPropagation ? evt.stopPropagation() : evt.cancelBubble = true;
KPH.listen(w);
}.bind(this, this.getWidget());
textNode.onkeyup = (function(textNode, domNode, mn, kp){
try{
kp = kp || window.event;
if((kp.keyCode == 8 || kp.keyCode == 46) && textNode.prev && textNode.prev.length == 1){
this.stopEvt(kp);
}
this.nodeResize(textNode);
textNode.prev = textNode.value;
}catch(e){
console.error("Failed to update the document width.", e);
}
}).bind(this, textNode, domNode, mn);
if(typeof edit.CFG.restrictKeys == 'function'){
textNode.onkeypress = edit.CFG.restrictKeys.bind(edit);
}
}
this.nodeResize(textNode);
return textNode;
},
nodeResize: function (textNode) {
if(!textNode){ return; }
var val = textNode.value;
var len = this.CFG.FontSizePx || 10;
if(val && val.length){
len = parseInt(this.CFG.DefaultTextBoxPx) + len*val.length;
}
len = Math.ceil(len) + 'px';
textNode.style.width  = len;
},
listen: function(w, target){
if(!w) return;
var prevW = this.getWidget();
if(prevW && prevW != w) {
prevW.unfocus();
}
try{
target = target || window.document;
this.sleep(this.getWidget());
this.setWidget(w);
if (!this.listener) {
this.listener = this.keyup.bind(this);
if (target.addEventListener) {
target.addEventListener('keyup', this.listener, false);
} else if (target.attachEvent) {
target.attachEvent('onkeyup', this.listener, false);
}
}
this.addCls(w.CFG.containerId, 'mje_selected_widget');
}catch(e){
console.error("Failed to listen to the key up events.", e);
}
},
sleep: function(w, target){
try{
w = w || this.getWidget();
target = target || window.document;
if (this.listener) {
if (target.addEventListener) {
target.removeEventListener('keyup', this.listener, false);
} else if (target.attachEvent) {
target.detachEvent('onkeyup', this.listener, false);
}
}
this.setWidget(null);
this.listener = null;
if(w){
this.removeCls(w.CFG.containerId, 'mje_selected_widget');
}
}catch(e){
console.error("Failed to detach to the key up events.", e);
}
},
bindUnfocus: function(){
if(!this._bodyClick){
this._bodyClick = function(){
var w = this.getWidget();
if(w){
w.unfocus();
}
}.bind(this);
document.body.onclick = this._bodyClick;
}
}
});
KPH = new KEYS();
MathJax.Editor.KeyPressHandler = KPH;
var UTIL = COMP.Subclass({
$className: 'MathJax.Editor.Util',
BasicTypes: {mn: true, mo: true, mi: true, chars: true, entity: true},
BasicInsertTypes: {mn: true, mo: true, mi: true, chars: true, texatom: true,  entity: true},
NoSelection: {texatom: true, math: true, chars: true, mstyle: true},
LegalReplace: {
mi: {mi: true, mn: true, mo: true, mrow: true,  entity: true},
mn: {mi: true, mn: true, mo: true, mrow: true,  entity: true},
mo: {mi: true, mn: true, mo: true, mrow: true,  entity: true},
mrow: {mi: true, mo: true, mn: true, mrow: true,  entity: true},
msubsup: {mrow: true}
},
InsertRules: {
},
parseTeX: function(text, parent){
if(text == null || text == "" || text == " "){
return;
}
if(text.match(/^<math/)){
console.error("Found mathML in place of TeX");
}
text = text.replace(/\\PH/g, this.CFG.placeHold);
text = CONFIG.getMathVal(text);
var m = this.getParserTeX().Parse(text).mml();
MathJax.ElementJax.mml(m);
m.parent = parent;
return m;
},
removeMath: function(node){
if(node && node.parent && node.type != 'mstyle' && node.type != 'math'){
var index = this.findSpanIndex(node.parent, node.spanID);
return this.removeMathAt(node.parent, index, 1);
}
},
removeMathAt: function(mn, position, count){
if(mn && mn.data && mn.data.length){
position = !isNaN(position) ? position : mn.data.length - 1;
var kill = mn.data[position];
if(kill && kill.type != 'mstyle' && kill.type != 'math'){
mn.data.splice(position, count || 1);
return kill;
}
}
},
getContainer: function(mn){
if(!mn){return;}
if(mn.type == 'mrow'){
var p = mn.parent;
if(p.type == 'texatom'){
p = p.parent;
return p;
}else if(p.type == 'mrow'){
return p;
}
}
return mn;
},
isValue: function(mn, hex, unicode){
var type = mn ? mn.type : null;
if(!type || this.BasicTypes[type]) {
if(typeof mn == 'string' && (mn == hex || mn == unicode)) return true;
if(mn && mn.data && mn.data.length == 1) return this.isValue(mn.data[0], hex, unicode);
}
return false;
},
isBox: function(mn){
return this.isValue(mn, "#x25FB", "◻");
},
isContainer: function(mn){
if(mn && mn.type == 'mrow'){
return true;
}
return false;
},
isNumeric: function(mn){
if(mn && mn.type == 'mn'){
return true;
}
},
isDot: function(mn){
return this.isValue(mn, '#x002e',  '.');
},
isFunction: function(node){
if(typeof node == 'string' && node == "#x2061") return true;
if(node && node.data && node.data.length == 1) return this.isFunction(node.data[0]);
return false;
},
getValue: function(mn){
if(!mn){return;}
var str = null;
if(mn && this.BasicTypes[mn.type] && mn.data[0]){
str = mn.data[0].toString();
}else if(mn.type == 'chars'){
str = mn.toString();
}else if(typeof mn == 'string'){
str = mn;
}
return str;
},
isCloseBounding: function(mn){
var str = this.isBounding(mn);
if(str == ')' || str == '|'){
if(this.findSpanIndex(mn.parent, mn.spanID) == mn.parent.data.length-1){
return str;
}
}
},
isOpenBounding: function(mn){
var str = this.isBounding(mn);
if(str == '(' || str == '|'){
if(this.findSpanIndex(mn.parent, mn.spanID) == 0){
return str;
}
}
},
isBounding: function(mn){
var str = this.getValue(mn);
if(str == '|' || str == '(' || str == ')'){
return str;
}
return null;
},
isBounded: function(mn){
if(mn && mn.type == 'mrow' && this.isBounding(mn.data[0])){
return true;
}
return false;
},
isEmpty: function(mn, emptinessIsRelative){
mn = mn || this.getEqRoot();
var matchFunc = function(emptinessIsRelative, mn, types){
if(emptinessIsRelative && mn && mn.type != 'mrow' && this.isComplex(mn)){
return true;
}
if(mn && types[mn.type] && !(this.isBox(mn) || this.isBounding(mn))){
return true;
}
return false;
}.bind(this, emptinessIsRelative ? true : false);
if(emptinessIsRelative && !matchFunc(mn, this.BasicTypes)){
return false;
}
return this.dfs(mn, this.BasicTypes, matchFunc) ? false : true;
},
isRoot: function(node){
if(node && (node.type == 'mstyle' || node.type == 'math')){
return true;
}
return false;
},
isComplex: function(mn, types){
if(!mn) return false;
types = types || this.BasicTypes;
var match = function(types, mn){
if(mn && typeof mn != 'string' && (!types[mn.type] || mn.type == null)){
return true;
}
return false;
}.bind(this, types);
if(!types[mn.type]){
return true;
}else{
var isComplex = this.dfs(mn, {}, match);
return isComplex ? true : false;
}
},
findSpanIndex: function(p, spanID){
for (var i = 0; i < p.data.length; ++i){
if(p.data[i] && p.data[i].spanID == spanID){
return i;
}
}
return null;
},
bubble: function(ref, match, matchFunc, pathResult){
if(!ref) return;
match      = match      || this.BasicTypes;
pathResult = pathResult || {};
matchFunc  = matchFunc  || this.matched;
if(!pathResult.match && (matchFunc(ref, match) || this.isRoot(ref))){
pathResult.match = ref;
}
if(!pathResult.match){
pathResult.path = ref;
this.bubble(ref.parent, match, matchFunc, pathResult);
}
return pathResult;
},
depth: function(){
var eq    = this.getEq();
var match = {suffer: true};
this.dfs(eq.root, {no_match_ever: 'thing'}, null, match);
return match && match.depth ? match.depth : 0;
},
getCommonParent: function(nodes){
if(!nodes || !nodes.length) return;
var ids = [];
var mn = null;
for(var i = 0; i < nodes.length; ++i){
mn = nodes[i];
if(mn && mn.spanID){
ids.push(mn.spanID);
}
}
return this.bubble(nodes[0], ids, this.contains.bind(this));
},
contains: function(mn, ids, searchResult){
var search = searchResult || {containsALL: true};
if(!ids || !mn) return search;
if(typeof ids == 'string' || typeof ids == 'number'){
search[ids] = false;
}else if(ids.indexOf && ids.length){
for(var i=0; i < ids.length; ++i){
search[ids[i]] = false;
}
}
var matchFunc = function(search, mn){
if(mn && search[mn.spanID] === false){
search[mn.spanID] = true;
}
}.bind(this, search);
matchFunc(mn);
this.dfs(mn, {}, matchFunc);
for(var k in search){
if(!search[k]){
search.containsALL = false;
}
}
return search.containsALL;
},
dfs: function(ref, match, matchFunc, pathResult, rI, depth){
return this.dfsL(ref, match, matchFunc, pathResult, rI, depth);
},
dfsR: function(ref, match, matchFunc, pathResult, rI, depth){
pathResult = pathResult || {};
matchFunc  = matchFunc  || this.matchedNoParen.bind(this);
depth = depth || 1;
if(ref && ref.data){
rI = !isNaN(rI) && rI!=null && rI < ref.data.length && rI >=0 ? rI : 0;
mn = null;
for (var i = rI; i < ref.data.length; ++i){
if(pathResult.node){ break; };
mn = ref.data[i];
if(matchFunc(mn, match)){
pathResult.node = ref.data[i];
return pathResult.node;
} else if(!pathResult.node){
this.dfsR(mn, match, matchFunc, pathResult, null, ++depth);
depth--;
}
}
}
if(!pathResult.depth || pathResult.depth < depth) pathResult.depth = depth;
return pathResult.node;
},
dfsL: function(ref, match, matchFunc, pathResult, rI, depth){
depth = depth || 1;
pathResult = pathResult || {};
matchFunc  = matchFunc  || this.matchedNoParen.bind(this);
if(ref && ref.data){
rI = !isNaN(rI) && rI != null && rI < ref.data.length ? rI : ref.data.length-1;
var mn = null;
for (var i = rI; i >= 0; --i){
if(pathResult.node){ break; };
mn = ref.data[i];
if(matchFunc(mn, match)){
pathResult.node = mn;
return pathResult.node;
} else if(!pathResult.node){
this.dfsL(mn, match, matchFunc, pathResult, null, ++depth);
depth--;
}
}
}
if(!pathResult.depth || pathResult.depth < depth) pathResult.depth = depth;
return pathResult.node;
},
exclude: function(mn, match){
if(!match[mn.type]){
return true;
}
},
matchedNoParen: function(ref, match){
if(!this.isBounding(ref)){
return this.matched(ref, match);
}
},
matched: function(ref, match){
if(!ref) return false;
var truth = true;
match = match || {};
for (key in match){
if(key && typeof match[key] == 'string'){
var m = {};
m[match[key]] = true;
match[key]    = m;
}
if(match[key] && !match[key][ref[key]]){
truth = false;
break;
}
}
return truth;
},
getParserTeX: function(){
return this.parser || MathJax.InputJax.TeX;
},
parenTypes: {msubsup: true, mrow: true},
addParensInComplexMrows: function(mn, doAdd){
if(!mn) return;
var base = mn;
this.dfs(base, this.parenTypes, function(mn, types){
if(mn && mn.parent && types[mn.parent.type]){
if(mn.type == 'mrow' && mn.parent.type == 'mrow'){
return;
}
if(mn.type == 'texatom'){
var sub = mn.data[0];
if(sub && sub.type == 'mrow'){
mn = sub;
}
}
if(mn.type == 'mrow' && !mn.open && !mn.close){
if(!mn.spanID){mn.spanID='ADD_PARENS';}
this.addParensToMrow(mn);
if(mn.spanID == 'ADD_PARENS'){mn.spanID=null;}
}
}
}.bind(this));
},
addParensToMrow: function(mn){
var p      = mn.parent;
var fenced = this.parseTeX('\\left( \\right)', p);
var index  = this.findSpanIndex(p, mn.spanID);
p.data[index] = fenced;
this.mergeNodes(fenced, mn);
},
createMrow: function(parent, elems){
var row = this.parseTeX('mrow');
row.data = [];
row.parent = parent;
if (elems){
row.data = row.data.concat(elems);
for(var i =0; i < row.data.length; ++i){
row.data[i].parent=row;
}
}
return row;
},
mergeNodes: function(match, ins, index){
if(match && ins && match.data){
index = index || 0;
if(ins.type == 'mrow' && ins.open){
ins.parent = match;
match.data.splice(index+1, 0, ins);
}else if(ins && ins.data){
for(k in ins.data){
var d = ins.data[k];
d.parent = match;
match.data.splice(++index,0, d);
}
}
}
return match;
},
complexInsert: function(match, path, to, ins){
CONFIG.DEBUG && console.log("The node is complex.", 'match: ', match, 'type: ', match.type, 'path: ', path, 'to: ', to, 'ins: ', ins);
if(!match || !ins) return;
try{
if(this.isComplex(to) && match.type != 'mrow'){
var m = this.bubble(match, {type: {mrow: true}});
if(m && m.match){
match = m.match;
path  = m.path ? m.path : path;
}
}
if(match.type != 'mrow'){
if(ins.type != 'mrow'){
ins = this.createMrow(match, ins);
}
}
var index = path ? this.findSpanIndex(match, path.spanID) : null;
if(!this.isComplex(to) && ins.type == 'mrow'){
if(match != to && match.type != 'mrow'){
this.removeMath(to);
ins.data.unshift(to);
to.parent = ins;
index--;
}
}
ins = this.basicInsert(match, path, to, ins, index);
}catch(e){
console.error("Failed to properly handle a complex insert (this, e, match, path, to, ins) ",
this, e, match, path, to, ins
);
}
return ins;
},
basicInsert: function(match, path, to, ins, index){
CONFIG.DEBUG && console.log("Basic insert of match", match, " path", path, " to ", to, " ins ", ins, " index ", index);
if(!match || !ins) return;
if(path){
var index = !isNaN(index) && index != null ? index : this.findSpanIndex(match, path.spanID);
if(match.type == 'mrow' && ins.type =='mrow'){
this.mergeNodes(match, ins, index);
}else if(index != null){
ins.parent = match;
match.data.splice(index+1, 0, ins);
}
}else if(match.type == 'mstyle' || match.type == 'math'){
match.data[0].Append(ins);
}else if(match.type == 'mrow' && ins.type == 'mrow'){
var index = null;
if(match.parent.type == 'mrow'){
index = this.findSpanIndex(match.parent, match.spanID);
match = match.parent;
}
this.mergeNodes(match, ins, index);
}else if(match.type == 'mrow' && this.isBounding(match.data[0])){
var p     = this.getContainer(match);
var index = this.findSpanIndex(p, match.spanID);
if(index != null){
ins.parent = p;
p.data.splice(index+1, 0, ins);
}else{
match.Append(ins);
}
}else{
match.Append(ins);
}
},
Insert: function(match, path, to, ins){
if(!match) return;
if (typeof this.InsertRules[match.type] == 'function'){
var func = this.InsertRules[match.type];
func(match, path, to, ins);
}else if(!this.BasicTypes[match.type]){
this.complexInsert(match, path, to, ins);
}else{
this.basicInsert(match, path, to, ins);
}
},
findLegalParent: function(ref, type, types){
var legal = types || {type: this.LegalReplace[type]};
var into = this.bubble(ref, legal);
return into;
},
getLegalSelection: function(targetNode){
var mn = null;
if(targetNode && targetNode.id){
mn = this.findNode(targetNode.id);
if(this.isBounding(mn)){
mn = mn.parent;
}
}
return mn;
},
findActualTarget: function(idOrDom){
var target = (typeof idOrDom == 'string') ? document.getElementById(idOrDom) : idOrDom;
if(!target){
return false;
}
while (target && !target.id){
target = target.parentNode
}
return target;
},
findNode: function(spanId){
if(!spanId || !spanId.match){
console.error("You told me to find a node but didn't provide an id.", spanId);
return;
}
var maths = this.getEq();
var id  = spanId.match(/\d+/);
if(id && id.length){
id = id[0];
}
return this.dfs(maths.root, {spanID: id}, this.matched);
}
});
var EDIT = COMP.Subclass({
$className: 'MathJax.Editor.Edit',
Init: function(w){
this.WIDGET = w;
this.CFG    = w.CFG;
this.cursor  = null;
this.updateCb  = [];
this.ALLOW_HISTORY  = true;
this.historyArr     = [];
this.historyPointer = -1;
this.inputField = null;
},
getEq: function(){
return MathJax.Hub.getAllJax(this.contentId)[0];
},
searchIn: {
mn: true,
mo: true,
mi: true
},
setEditMode: function(m){
this.editMode        = CONFIG.EditModes[m] || CONFIG.EditModes.DEFAULT;
this.defaultEditMode = this.editMode;
if(this.editMode == CONFIG.EditModes.REPLACE){
this.toggleEditMode = CONFIG.EditModes.INSERT;
} else {
this.toggleEditMode = CONFIG.EditModes.REPLACE;
}
if(this.isEmpty(null, true)){
this.editMode = CONFIG.APPEND;
}
},
getEditMode: function(){
return this.editMode;
},
setEditCls: function(clsHash){
this.clsForEdit = clsHash || CONFIG.EditCls;
},
getClsForEditMode: function(mode){
if(!this.clsForEdit){
this.setEditCls(null);
}
return this.clsForEdit[mode || this.editMode];
},
insertPending: function(cb){
var val = this.grabValue();
if(val){
this.updateMath(null, val, null, cb);
}
},
grabValue: function(edit){
if(this.inputField){
var val = this.inputField.value;
this.inputField.value = '';
KPH.nodeResize(this.inputField);
return val;
}
},
isTextEntered: function(){
if(this.isTeXEntryEnabled() && this.inputField){
var f = this.inputField;
if(f){
var val = f.value + '';
if(val.length > 0){
return true;
}
}
}
return false;
},
isTeXEntryEnabled: function(){
return this.CFG.isTeXEntryEnabled();
},
sanitizeTeX: function(initialText){
if(this.CFG.SanitizeTeXEnabled){
if(typeof this.CFG.sanitizeTeX == 'function'){
return this.CFG.sanitizeTeX(initialText);
}
}
return initialText;
},
magicHandler: function(p, mn){
var util = this.getUtil();
var guess =  this.guessTheDesiredCursor(p);
if(mn && util.isBox(guess)){
guess.spanID = guess.spanID || "FAKE_MAGIC_SPAN_ID";
this.replace(guess, mn);
this.setCursor(this.guessTheDesiredCursor(p));
if(guess.spanID == "FAKE_MAGIC_SPAN_ID"){
guess.spanID = null;
}
if(mn.spanID == 'MAGIC_NUMBER'){
mn.spanID = null;
}
return mn;
}
},
confirmEditMode: function(mn, text, magic, eM){
var util = this.getUtil();
if(!mn && util.isEmpty(null, true)){
eM = CONFIG.EditModes.APPEND;
} else if(mn && util.isBox(mn) &&
this.editMode !== CONFIG.EditModes.APPEND &&
this.editMode != CONFIG.EditModes.UNSHIFT){
eM = CONFIG.EditModes.REPLACE;
} else if(magic){
eM = CONFIG.EditModes.REPLACE;
} else if(!eM){
eM = this.getEditMode();
}
return eM;
},
queueUpdate: function(mn, text, eM, cb){
try{
mn = mn || this.getCursor();
var util  = this.getUtil();
var newMn = util.parseTeX(this.sanitizeTeX(text));
eM = eM || this.isEmpty(null, true) ? CONFIG.EditModes.APPEND : this.editMode;
var magic = this.isMagic(mn, newMn, eM);
if(magic){
mn = this.selectNumbers(mn);
}
eM = this.confirmEditMode(mn, newMn, magic, eM);
CONFIG.DEBUG && console.log("Edit mode given math.", eM, newMn);
if(eM == 'INSERT'){
mn = mn || this.getCursor();
mn = this.handleClosedBounding(mn);
this.insert(mn, newMn);
}else if(eM == 'APPEND'){
this.append(newMn);
}else if(eM == 'UNSHIFT'){
this.unshift(newMn);
}else{
var rep = this.replace(mn, newMn, null, magic);
if(magic){
newMn = this.magicHandler(newMn, mn);
}
}
util.addParensInComplexMrows(this.getBaseMrow(), this.allowRemove.bind(this));
if(magic){
this.Update(cb);
}else{
this.UpdateGuessCb(newMn, cb);
}
}catch(e){
console.error("Failed to update the math (mn, newMn, e)", mn, newMn, e);
}
},
updateMath: function(mn, text, eM, cb){
this.setTempMrow(null);
MathJax.Hub.Queue(this.queueUpdate.bind(this, mn, text, eM, cb));
},
toMathML: function(){
var eq = this.getEq();
if(eq && eq.root){
this.revertTempMrow();
return eq.root.toMathML();
}else{
console.error("No equetion present in this editor", this);
}
},
history: function(mml){
if(!this.ALLOW_HISTORY) return;
this.historyArr[++this.historyPointer] = mml;
if(this.historyArr.length > CONFIG.HistoryLength){
this.historyArr.shift();
this.historyPointer = this.historyArr.length - 1;
}
},
updateMathML: function(mmlString){
if(mmlString){
this.ALLOW_HISTORY = false;
try {
if(!MathJax.InputJax.MathML.ParseXML){
MathJax.InputJax.MathML.ParseXML = MathJax.InputJax.MathML.createParser();
}
var parsed = MathJax.InputJax.MathML.Parse(mmlString);
if(parsed){
var mml = MathJax.ElementJax.mml(parsed.mml);
var eq = this.getEq();
eq.root = mml.root;
this.UpdateGuessCb(null, function() { this.ALLOW_HISTORY = true}.bind(this));
}
}catch(e){
console.error("Failed to parse (mmlString, mml, e)", mmlString, mml, e);
}
}
},
undo: function(cb){
if(this.historyPointer > 0){
this.historyPointer--;
var mml = this.historyArr[this.historyPointer];
MathJax.Hub.Queue(this.updateMathML.bind(this, mml));
return mml;
}
},
redo: function(cb){
if(this.historyPointer < (this.historyArr.length - 1)){
this.historyPointer++;
var mml = this.historyArr[this.historyPointer];
MathJax.Hub.Queue(this.updateMathML.bind(this, mml));
return mml;
}
},
getFormInput: function(){
var inputId = this.CFG.getFormInputId(this);
if(!inputId){return;}
var input = document.getElementById(inputId);
if(!input){
input = H.addElement(document.getElementById(this.rowId), 'input', {
type: 'text', className: 'hidden', id: inputId, name: inputId
});
}
return input;
},
setInput: function(dom){
if(!dom) return;
this.input = dom;
},
updateInput: function(mml){
var input = this.getFormInput();
if(input){
mml = typeof mml != 'undefined' ? mml : this.toMathML();
if(mml){
input.value = mml
this.history(mml);
}
}
},
addUpdateCb: function(cb){
if(typeof cb != 'function') return;
this.updateCb.push(cb);
},
runUpdateCb: function(){
for (var i = 0; i < this.updateCb.length; ++i){
this.updateCb[i]();
}
},
setLabel: function(label){
if(!this._labelDom && label){
this._labelDom = H.Element('span', {className: 'mje_label_span'});
var d = document.getElementById(this.rowId);
if (d) {
d.insertBefore(this._labelDom, d.firstChild);
}
}
if(this._labelDom){
this._labelDom.innerHTML = label;
if(label != null && label != ''){
this.addCls(this.rowId, 'mje_row_has_label');
}else{
this.removeCls(this.rowId, 'mje_row_has_label');
}
}
return this._labelDom;
},
htmlHack: function(id){
if(this.htmlId != this.CFG.contentId){
var d = document.getElementById(this.htmlId);
if(d){
d.parentNode.removeChild(d);
}
}
},
UpdateGuessCb: function(mn, cb){
this.Update(function(mn){
var guess = this.guessTheDesiredCursor(mn);
this.setCursor(guess || this.getLast());
this.makeEditable();
if(typeof cb == 'function') cb(mn);
}.bind(this, mn, cb));
},
Update: function(cb){
MathJax.Hub.Queue(
this.htmlHack.bind(this),
["Update", this.getEq()],
this.runUpdateCb.bind(this)
);
if(typeof cb == 'function'){
MathJax.Hub.Queue(cb);
}
},
getParserTeX: function(){
return this.parser || MathJax.InputJax.TeX;
},
setUtil: function(util){
this.UTIL = util;
},
getUtil: function(){
return this.UTIL;
},
left: function(c, search, force){
search = typeof search == 'function' ? search : this.allowSelection.bind(this);
try{
var possible = null;
var eM       = this.editMode;
this.editMode = this.defaultEditMode;
if(!force && eM == CONFIG.EditModes.APPEND){
if(search(this.getLast())){
this.makeEditable(this.getLast());
return;
}
}
c = c || this.getCursor();
if(!c || !this.allowRemove(c) || eM == CONFIG.EditModes.UNSHIFT){
this.enableUnshiftMode();
return;
}
var util  = this.getUtil();
var index = util.findSpanIndex(c.parent, c.spanID);
if(index > 0){
for (var i = index-1; i >= 0; --i){
if(possible = c.parent.data[i]){
if(!util.isBounding(possible)){
break;
}
}
}
if(possible && !this.searchIn[possible.type]){
possible = util.dfsL(possible, {type: this.searchIn}) || possible;
}else if(util.isBounding(possible) && !util.isOpenBounding(possible)){
possible = c.parent;
}
}else{
possible = c.parent;
}
if(possible && (search(possible) || util.isOpenBounding(possible))){
this.makeEditable(possible);
}else{
this.left(c.parent, search);
}
}catch(e){
console.error("Failed to move left (c, search, e)", c, search, e);
}
},
leftQ: function(c, search, count){
count = count || 1;
this.insertPending();
for(var i =0; i<count; ++i){
MathJax.Hub.Queue(this.left.bind(this, c, search));
}
},
right: function(c, search, force){
search = typeof search == 'function' ? search : this.allowSelection.bind(this);
try{
var possible = null;
var eM       = this.editMode;
this.editMode = this.defaultEditMode;
if(!force && eM == CONFIG.EditModes.UNSHIFT){
if(search(this.getFirst())){
this.makeEditable(this.getFirst());
return;
}
}
c = c || this.getCursor();
if(!c || !this.allowRemove(c) || eM == CONFIG.EditModes.APPEND){
this.enableAppendMode();
return;
}
var util  = this.getUtil();
var index = util.findSpanIndex(c.parent, c.spanID);
if(index < c.parent.data.length - 1){
for (var i = index+1; i < c.parent.data.length; ++i){
if(possible = c.parent.data[i]){
if(!util.isBounding(possible)){
break;
}
}
}
if(possible && !this.searchIn[possible.type]){
possible = util.dfsR(possible, {type: this.searchIn}) || possible;
}else if(util.isBounding(possible) && !util.isCloseBounding(possible)){
possible = c.parent;
}
}else{
possible = c.parent;
}
if(possible && (search(possible) || util.isCloseBounding(possible))){
this.makeEditable(possible);
}else{
this.right(c.parent, search);
}
}
catch(e){
console.error("Failed to move to the right (c, search, e)", c, search, e);
}
},
rightQ: function(c, search, count){
count = count || 1;
this.insertPending();
for(var i=0; i<count; ++i){
MathJax.Hub.Queue(this.right.bind(this, c, search));
}
},
allowSelection: function(mn){
if(!mn) return false;
if(mn.type == 'texatom' || this.getUtil().isBounding(mn)) return false;
if(this.allowRemove(mn)){
return true;
}
return false;
},
emptyEqCheck: function(){
try{
if(this.getUtil().isEmpty()){
var mn = this.getLast();
if(!mn || !this.allowRemove(mn)){
this.enableAppendMode();
}
}
} catch (e){
console.error('Empty equation check.', e);
}
},
enableUnshiftMode: function(){
this.editMode = CONFIG.EditModes.UNSHIFT;
KPH.enableInputField(
this.getWidget(),
this.CFG.contentId,
this.getBaseMrow(),
this.editMode
);
this.removeHighlight();
this.setCursor(this.getFirst());
},
enableAppendMode: function(){
this.editMode = CONFIG.EditModes.APPEND;
KPH.enableInputField(this.getWidget(), this.CFG.contentId, this.getBaseMrow(), this.editMode);
this.removeHighlight();
this.setCursor(this.getLast());
},
isEmpty: function(mn, emptinessIsRelative){
return this.getUtil().isEmpty(mn || this.getEqRoot(), emptinessIsRelative);
},
getBaseMrow: function(root){
var mn = this.getStyleRow(root);
if(mn && (mn.type == 'mstyle' || mn.type == 'math')){
var mr = mn.data[0];
if(mr && mr.type == 'mrow'){
mn = mr;
}
if(mn.data[0] && mn.data[0].type == 'texatom'){
mr = mn.data[0].data[0];
if(mr && mr.type == 'mrow'){
mn = mr;
}
}
}
return mn;
},
getStyleRow: function(root){
root     = root || this.getEqRoot();
var row  = this.getUtil().dfs(root, {type: {mstyle: true}}) || root;
return row;
},
guessTheDesiredCursor: function(mn){
if(!mn) return;
var util  = this.getUtil();
var found = null;
if(util.isBox(mn)){
found = mn;
}else{
found = util.dfsR(mn, {}, util.isBox.bind(util));
}
if(!found){
if(this.searchIn[mn.type]){
found = mn;
}else{
found = util.dfsL(mn, {type: this.searchIn});
}
}
return found;
},
revertTempMrow: function(){
if(this.REVERT_ROW_HELL){
var mn = this.REVERT_ROW_HELL;
var p = mn.parent;
mn.magic  = true;
mn.spanID = 'MAGIC_TEMP_MROW';
var index = this.getUtil().findSpanIndex(p, mn.spanID);
mn.spanID = null;
p.data.splice(index, 1);
for(var i=0; i < mn.data.length; ++i){
var into = mn.data[i];
into.parent = p;
p.data.splice(index+i, 0, into);
}
this.REVERT_ROW_HELL = null;
}
},
setTempMrow: function(mn){
this.REVERT_ROW_HELL = mn;
},
selectRowRange: function(start, end, p){
var mrow = this.makeRowRange(start, end, p);
if(mrow){
this.Update(function(mrow, isTempMrow){
this.makeEditable(mrow, this.defaultEditMode);
if(!isTempMrow){
this.setTempMrow(mrow);
}
}.bind(this, mrow, mrow.spanID));
}
},
handleClosedBounding: function(mn){
var util = this.getUtil();
if(mn && util.isCloseBounding(mn)){
if(mn.spanID){
var index = util.findSpanIndex(mn.parent, mn.spanID);
mn = mn.parent.data[index-1];
}else{
mn = this.left();
}
this.setCursor(mn);
}
return mn;
},
selectNumbers: function(mn){
var util = this.getUtil();
var alreadyDot = util.isDot(mn);
if(!mn || !(util.isNumeric(mn) || alreadyDot)){
return mn;
}
var p = mn.parent;
if(!p || p.type != 'mrow'){
return mn;
}
var rightIndex = util.findSpanIndex(p, mn.spanID);
var leftIndex  = rightIndex;
for(var i = rightIndex-1; i >=0; --i){
var sib = p.data[i];
if(util.isNumeric(sib)){
leftIndex = i;
}else if(util.isDot(sib) && !alreadyDot){
alreadyDot = true;
leftIndex = i;
}else{
break;
}
}
CONFIG.DEBUG && console.log("Cannot create a select number because", leftIndex, rightIndex);
if(leftIndex < rightIndex){
var mrow = this.makeRowRange(p.data[leftIndex], p.data[rightIndex], p);
if(mrow && !mrow.spanID){
mrow.spanID = "MAGIC_NUMBER";
}
return mrow || mn;
}
return mn;
},
isMagic: function(mn, newMn, eM){
var util = this.getUtil();
if(this.CFG.MagicDisabled){
return false;
}
if(eM == CONFIG.EditModes.APPEND || eM == CONFIG.EditModes.UNSHIFT) return false;
if(!mn || util.isBox(mn) || !this.allowRemove(mn) || (!util.isDot(mn) && mn.type =='mo')){
if(!util.isComplex(mn.parent) || !this.allowRemove(mn.parent)){
return false;
}
if(util.isBounding(mn)){
return false;
}
}
if(newMn){
var guess =  this.guessTheDesiredCursor(newMn);
if(util.isBox(guess)) {
if(mn && mn.type == 'mrow' && newMn.type == 'mrow'){
if(!(typeof mn.spanID == 'string' && mn.spanID.match('MAGIC'))){
return false;
}
}
return true;
}
}
return false;
},
makeRowRange: function(start, end, p){
var util = this.getUtil();
var sIndex = null;
var eIndex = null;
var test = null;
for(var i = 0; i < p.data.length; ++i){
test = p.data[i];
if(sIndex === null && util.contains(test, start.spanID)){
sIndex = i;
}else if(eIndex === null && util.contains(test, end.spanID)){
eIndex = i;
}
}
if(this.allowRemove(p) && p.type == 'mrow' && ((eIndex+1  - sIndex) == p.data.length)){
return p;
}else{
var prune = p.data.splice(sIndex, (eIndex+1) - sIndex);
var mrow = util.createMrow(p, prune);
p.data.splice(sIndex, 0, mrow);
return mrow;
}
},
setCursor: function(MathNode){
this.cursor = MathNode;
},
getCursor: function(){
try{
if(!this.cursor){
this.cursor = this.getLast();
}
}catch(e){
console.error("Could not get the last element for this math eq.", e);
}
return this.cursor;
},
esc: function(){
if(this.CFG.TeXEntryInit != 'Vim') return;
if(this.inputField){
this.inputField.value = '';
this.addCls(this.inputField, 'hidden');
this.CFG.TeXEntryMode = CONFIG.TeXEntryMode.None;
}
},
vimEditable: function(mode, nE){
if(this.CFG.TeXEntryInit != 'Vim') return;
if(this.CFG.TeXEntryMode != CONFIG.TeXEntryMode.None && !nE) return;
this.CFG.TeXEntryMode = CONFIG.TeXEntryMode.Allow;
if(mode == CONFIG.EditModes.INSERT){
this.left();
} else if(mode == CONFIG.EditModes.APPEND){
mode = CONFIG.EditModes.INSERT;
}
this.editMode = mode;
this.makeEditable(this.getCursor(), mode);
},
makeEditable: function(mn, mode){
return this.makeEditableQ(mn, mode);
},
makeEditableQ: function(mn, mode){
mn = mn || this.getCursor();
if(!this.allowSelection(mn)){
mn = this.guessTheDesiredCursor(mn) || this.getLast();
}
if(!mn){ return; }
var dom = document.getElementById("MathJax-Span-" + mn.spanID);
if(!dom){
mn  = this.getFirst();
dom = document.getElementById("MathJax-Span-" + mn.spanID);
}
if(dom && this.highlight(dom, mode, mn)){
this.setCursor(mn);
return KPH.enableInputField(this.getWidget(), dom, mn, mode);
}
},
removeHighlight: function(target){
if(!this.highlightCls){
this.highlightCls = [];
for(k in CONFIG.EditCls){
this.highlightCls.push(CONFIG.EditCls[k]);
}
}
this.removeCls(target || this.lastTarget, this.highlightCls);
},
toggleEdit: function(toggle){
if(this.CFG.allowClickToggle && toggle != null && this.editMode == this.defaultEditMode){
this.editMode = this.toggleEditMode;
return;
}
this.editMode = this.defaultEditMode;
},
checkEditMode: function(target){
this.toggleEdit((this.lastTarget && this.lastTarget.id == target.id) ? true : null);
},
highlight: function(target, mode, mn){
var util = this.getUtil();
this.removeHighlight();
if(!util.isBounding(mn)){
this.addCls(target, this.getClsForEditMode(mode));
}
if(this.getUtil().isBox(mn)) {
this.addCls(target, 'mje_box_selection');
}
this.lastTarget = target;
return true;
},
getFirst: function(mn){
var util   = this.getUtil();
var c      = mn || this.getBaseMrow() || this.getEqRoot();
var ret = util.dfsR(c, {type: this.searchIn});
if(ret){
c = ret;
}
return c;
},
getLast: function(mn){
var util   = this.getUtil();
var c      = mn || this.getBaseMrow() || this.getEqRoot();
var ret    = util.dfs(c, {type: this.searchIn});
if(ret){
c = ret;
}
return c;
},
unshift: function(text){
var util = this.getUtil();
if(typeof text == 'string'){
text = util.parseTeX(text);
}
if(!text) return;
var s = this.getBaseMrow();
if(s.type == 'mrow' && text.type == 'mrow'){
util.mergeNodes(s, text, -1);
}else{
text.parent = s;
s.data.unshift(text);
}
this.setCursor(this.guessTheDesiredCursor(text) || this.getFirst());
this.editMode = this.defaultEditMode;
},
append: function(text){
var util = this.getUtil();
if(typeof text == 'string'){
text = util.parseTeX(text);
}
if(!text) return;
var s = this.getBaseMrow();
if(s.type == 'mrow' && text.type == 'mrow'){
text = util.mergeNodes(s, text, s.data.length);
}else{
text.parent = s;
s.Append(text);
}
this.setCursor(this.guessTheDesiredCursor(text), this.getLast());
this.editMode = this.defaultEditMode;
},
makeFraction: function(mn, input){
if(!this.CFG.isKeyEnabled('/')) return;
input = input ? input.replace(/\//, '') : '';
if(!input && (this.editMode == CONFIG.EditModes.UNSHIFT || this.editMode == CONFIG.EditModes.APPEND)){
input = '\\PH';
}
var frac = input ? "\\frac{" + input +  "}{\\PH}" : "\\frac{\\PH}{\\PH}";
var util = this.getUtil();
this.updateMath(mn, frac);
},
clear: function(){
if(this.getEq()){
this.getBaseMrow().data = [];
this.Update(this.emptyEqCheck.bind(this));
}
},
insert: function(to, ins){
try{
if(typeof ins == 'string'){
ins = this.getUtil().parseTeX(ins);
}
var util    = this.getUtil();
var r       = util.bubble(to, util.BasicTypes, util.exclude);
if(!r.match) {
console.error("Failed to insert into a node (into, insert, e)", to, ins, e);
return;
}
util.Insert(r.match, r.path, to, ins);
this.setCursor(this.guessTheDesiredCursor(ins) || ins);
}catch(e){
console.error("Failed to insert into a node (into, insert, e)", to, ins, e);
}
},
replace: function(mn, repWith, r, magic){
if(!mn){ console.error("Failed to find the math node to actually replace.", evt); return; }
CONFIG.DEBUG && console.log("replace function: (mn, repWith, r, magic)", mn, repWith, r, magic);
try{
var util = this.getUtil();
if(typeof repWith == 'string'){
repWith   = util.parseTeX(repWith);
}
if(!repWith){ return; }
if(mn.parent.type != 'mrow' && util.isComplex(repWith) && repWith.type != 'mrow'){
repWith = util.createMrow(null, repWith);
}
r = r || util.findLegalParent(mn, repWith.type);
if(r.match){
var p = null;
var repIndex = null;
if(r.match.spanID == mn.spanID){
p = r.match.parent;
if(util.isComplex(p) && p.type != 'mrow' && repWith.type != 'mrow' && util.isComplex(repWith)){
repWith = util.createMrow(p, repWith);
}else if(magic && util.isComplex(p) && p.type != 'mrow' && util.isEmpty(repWith)){
repWith = util.createMrow(p, repWith);
}else{
repWith.parent = p;
}
repIndex = util.findSpanIndex(p, r.match.spanID);
if(!this.allowRemove(p) && repWith.type == 'mrow' && magic){
util.mergeNodes(p, repWith, repIndex);
}else{
if(repWith.type == 'mrow' && p.type == 'mrow'){
util.mergeNodes(p, repWith, repIndex);
}else{
p.data.splice(repIndex, 0, repWith);
}
}
}else{
p = r.match;
repWith.parent = p;
if(r.path){
repIndex = util.findSpanIndex(p, r.path.spanID);
p.data.splice(repIndex, 0, repWith);
} else {
p.Append(repWith);
}
}
util.removeMath(mn);
var curse = this.guessTheDesiredCursor(repWith) || repWith;
this.setCursor(curse);
} else {
console.error("Failed to find a valid parent node to insert into.");
}
}catch(e){
console.error("Failed to replace the item.", repWith, e);
}
return repWith;
},
allowRemove: function(mn){
if(!mn) return;
var br = this.getBaseMrow();
return mn && mn.spanID > br.spanID;
},
removeEmpty: function(p, node){
var util = this.getUtil();
if(!p || util.isRoot(p)) return;
if(util.isEmpty(p) && this.allowRemove(p)){
if(util.isContainer(p) && !util.isBox(node) ){
return this.replace(p, '\\Box');
}else{
this.removeQueue(p);
}
}
return null;
},
sanitizeRemove: function(curse){
if(!curse) return null;
var util = this.getUtil();
if(!(util.isComplex(curse.parent) && util.isContainer(curse) && !util.isEmpty(curse))){
var p = util.getContainer(curse);
if(this.allowRemove(p)){
curse = p;
}
}
if(this.allowRemove(curse) && util.isContainer(curse)){
if (!util.isEmpty(curse)) {
this.setCursor(this.replace(curse, "\\Box"));
return null;
}
}
if(curse && !util.isContainer(curse.parent)){
var p = curse.parent;
if(this.allowRemove(p)){
if(util.isEmpty(p)){
var r = util.bubble(p, util.BasicInsertTypes, util.exclude);
curse = r ? r.match : null;
}else if(util.isBox(curse)){
curse = p;
}else {
if(util.isComplex(p) && util.isContainer(curse)){
curse = p;
}
this.setCursor(this.replace(curse, "\\Box"));
curse = null;
}
}
}
return curse;
},
removeQueue:  function(curse, cb){
try{
var util = this.getUtil();
curse = curse || this.getCursor();
if(!this.allowRemove(curse)){
return;
}
if(util.isBounding(curse) && !this.isEmpty(curse.parent)){
return;
}
curse = this.sanitizeRemove(curse);
if(this.allowRemove(curse)){
this.left(curse, null, true);
var p   = curse.parent;
var kia = util.removeMath(curse);
if(p.data && util.isFunction(p.data[0])){
this.remove(p.data[0]);
}
if(kia && kia.spanID != p.spanID){
var empty = this.removeEmpty(p, kia);
if(empty){
this.editMode = this.defaultEditMode;
this.setCursor(empty);
}
}
}
cb = cb || this.emptyEqCheck.bind(this);
this.Update(cb);
}catch(e){
console.error("Failed to remove this node (curse, e)", curse,  e);
}
},
remove: function(curse, cb){
this.setTempMrow(null);
MathJax.Hub.Queue(this.removeQueue.bind(this, curse, cb));
}
});
var MOUSE = COMP.Subclass({
$className: 'MathJax.Editor.Mouse',
Init: function(widget){
this.setWidget(widget);
},
selectMathNodes: function(start, end, cb){
if(!start || !end || (start.spanID == end.spanID)) return;
var ed   = this.getWidget().getEdit();
ed.revertTempMrow();
var util   = ed.getUtil();
var common = util.getCommonParent([start, end]);
if(!common || !common.match){
console.error("ERROR in common parent bubble selection logic.", end, start);
return;
}
var p = common.match;
ed.editMode = ed.defaultEditMode;
if(ed.allowRemove(p) && util.isComplex(p) && p.type != 'mrow'){
ed.makeEditable(p, ed.defaultEditMode);
}else if(ed.allowRemove(p) && (p == start || p == end)){
ed.makeEditable(p, ed.defaultEditMode);
}else{
ed.selectRowRange(start, end, p);
}
typeof cb == 'function' && MathJax.Hub.Queue(cb);
},
onmouseup: function(edit, cb){
if(!window.rangy) return;
var rng = rangy.getSelection().getAllRanges();
if(!rng || !rng.length) return;
rng = rng[0];
var start = rng.startContainer;
var end   = rng.endContainer;
if(!start || !end) return;
var w    = this.getWidget();
w.focusEdit(edit);
var ed   = edit;
var util = ed.getUtil();
start = util.getLegalSelection(util.findActualTarget(start));
end   = util.getLegalSelection(util.findActualTarget(end));
if(!start || !end || (start == end)) return;
start = !util.isRoot(start) ? start : ed.getFirst();
end   = !util.isRoot(end)   ? end   : ed.getLast();
this.selectMathNodes(start, end, cb);
},
bindToDom: function(edit){
try{
var htmlId = edit.htmlId;
var node = document.getElementById(htmlId);
var w = this.getWidget();
var self = this;
if(node){
if (!edit.mouseUp) {
edit.mouseUp = this.onmouseup.bind(this, edit);
} else {
if (node.removeEventListener) {
node.removeEventListener('mouseup', edit.mouseUp, false);
} else if (node.detachEvent) {
node.detachEvent('onmouseup', edit.mouseUp, false);
}
}
if (node.addEventListener) {
node.addEventListener('mouseup', edit.mouseUp, false);
} else if (node.attachEvent) {
node.attachEvent('onmouseup', edit.mouseUp, false);
}
$('#' + edit.rowId).unbind('click').bind('click', function (evt) {
try {
w.focusEdit(edit, true);
KPH.listen(w);
MathJax.Hub.Queue(self.selectEditor.bind(self, w, edit, evt));
} catch (e) {
console.error("Failed to handle the click event.", e);
}
});
} else {
console.error("Failed to find this content element to bind the mouse (this, htmlId)", this, htmlId);
}
}catch(e){
console.error('Failed to setup a click event (this, e)', this, e);
}
},
selectEditor: function(w, edit, evt){
var target = evt.srcElement || evt.target;
var util   = edit.getUtil();
target = util.findActualTarget(target);
edit.checkEditMode(target);
var mn = util.getLegalSelection(target);
if(!mn || (mn.type == 'math' || mn.type == 'mstyle')){
edit.enableAppendMode();
}else{
CONFIG.DEBUG && console.log("Select Editor, making mn editable.", w, mn);
KPH.enableInputField(w, target, mn, edit.getEditMode());
edit.makeEditable(mn);
}
},
click: function(edit, evt){
try{
evt = evt || window.event;
if(!evt){ return; };
this.stopEvt(evt);
var w = this.getWidget();
w.focusEdit(edit, true);
KPH.listen(w);
MathJax.Hub.Queue(this.selectEditor.bind(this, w, edit, evt));
}catch(e){
console.error("Failed to handle the click event.", e);
}
}
});
var NAVIGATION = COMP.Subclass({
$className: 'MathJax.Editor.Navigation',
build: function(){
var pId = this.CFG.tabContainerId || this.CFG.containerId
var d   = document.getElementById(pId);
if(!d) return;
var nav = document.getElementById(this.CFG.navigationId);
if(!nav && d){
nav = H.Element('div', {className: 'mje_nav'});
d.insertBefore(nav, d.firstChild);
}
var w = this.getWidget();
var e = this.getEdit();
if(nav && e){
var next= H.addElement(nav, 'button', {type: 'button', className: 'mje_nav_next'}, CONFIG.Label.Next);
next.onclick = function(evt){
this.stopEvt(evt || window.event);
KPH.listen(w); w.getEdit().leftQ();
}.bind(this);
var prev =  H.addElement(nav, 'button', {type: 'button', className: 'mje_nav_prev'}, CONFIG.Label.Prev);
prev.onclick = function(evt){
this.stopEvt(evt || window.event);
KPH.listen(w); w.getEdit().rightQ();
}.bind(this);
var undo =  H.addElement(nav, 'button', {type: 'button', className: 'mje_nav_undo'}, CONFIG.Label.Undo);
undo.onclick = function(evt){
this.stopEvt(evt || window.event);
KPH.listen(w); w.getEdit().undo();
}.bind(this);
var redo =  H.addElement(nav, 'button', {type: 'button', className: 'mje_nav_redo'}, CONFIG.Label.Redo);
redo.onclick = function(evt){
this.stopEvt(evt || window.event);
KPH.listen(w); w.getEdit().redo();
}.bind(this);
var del = H.addElement(nav, 'button', {type: 'button', className: 'mje_nav_del'}, CONFIG.Label.Delete);
del.onclick = function(evt){
this.stopEvt(evt || window.event);
KPH.listen(w); w.getEdit().remove();
}.bind(this);
}
}
});
var CONTENT = COMP.Subclass({
Init: function(w){
this.setWidget(w);
this.selectedTabId = null;
this.initConfig();
this.buildCb = [];
},
addBuildCb: function(cb, runAtOnce){
if(typeof cb == 'function') {
this.buildCb.push(cb);
if(runAtOnce) cb();
}
},
runBuildCb: function(){
for(k in this.buildCb){
var cb = this.buildCb[k];
try{
if(typeof cb == 'function') cb(this);
}catch(e){
console.error("Failed to run build callbacks", this, e);
}
}
},
initConfig: function(){
this.tabs = [];
this.tabContent = [];
this.tabBtns = {};
this.btnsActive = {};
this.selectedBtnIndex = null;
},
TAB_ID: {
id: 0
},
setUtil: function(util){
this.UTIL = util;
},
getUtil: function(){
return this.UTIL;
},
nextBtn: function(){
var index = this.findBtnIndex();
var tabBtns = this.tabBtns[this.selectedTabIndex] || [];
if(index+1 < tabBtns.length){
this.selectBtn(null, tabBtns[index+1]);
}
},
prevBtn: function(){
var index = this.findBtnIndex();
var tabBtns = this.tabBtns[this.selectedTabIndex] || [];
if(index-1 >= 0 && tabBtns.length){
this.selectBtn(null, tabBtns[index-1]);
}
},
findBtnIndex: function(tabIndex, btnId){
tabIndex = tabIndex || this.selectedTabIndex || 0;
btnId    = btnId    || this.selectedBtnDom ? this.selectedBtnDom.id : null;
if(btnId == null){
return -1;
}
var tabBtns = this.tabBtns[tabIndex] || [];
for(var i in tabBtns){
if(tabBtns[i].id == btnId){
return parseInt(i);
}
}
return 0;
},
nextTab: function(){
if(!this.tabs.length){ return; }
var index = this.findTabIndex(this.selectedTabId);
if(index != null && index+1 < this.tabs.length){
index++;
this.selectTab(this.tabs[index], this.tabContent[index]);
}
},
prevTab: function(){
if(!this.tabs.length){ return; }
var index = this.findTabIndex(this.selectedTabId);
if(index > 0){
index--;
this.selectTab(this.tabs[index], this.tabContent[index]);
}
},
findTabIndex: function(id){
for (var i = 0; i < this.tabs.length; ++i){
if(this.tabs[i].id == id) return i;
}
return null;
},
rebuild: function(config){
config = config || this.CFG.tabConfig;
this.initConfig();
var d   = document.getElementById("Controls_" + this.CFG.containerId);
if(d){
d.parentNode.removeChild(d);
}
this.build(config);
},
build: function(tabConfig){
var d = document.getElementById(this.CFG.tabContainerId);
if(!d){
d = H.Element('div', {id: this.CFG.tabContainerId, className: 'mje_controls_parent no-highlight'});
this.getWidget().getContainerDom().appendChild(d);
}
if(!d) return;
tabConfig     = tabConfig       || CONFIG.Tabs;
var tabNames  = tabConfig.Order || CONFIG.Tabs.Order || [];
var controls = H.Element('div', {id: "Controls_" + this.CFG.containerId, className: 'mje_controls'});
var tabs     = H.addElement(controls, 'div', {id: "Controls_Tabs_"    + this.CFG.containerId, className: 'mje_controls_tabs'});
var content  = H.addElement(controls, 'div', {id: "Controls_Content_" + this.CFG.containerId, className: 'mje_controls_content'});
for (i in tabNames){
var key    = tabNames[i];
var config = tabConfig[key] || CONFIG.Tabs[key];
if(config){
var cp = JSON.parse(JSON.stringify(config));
this.addTab(cp, key,  tabs, content, i);
} else {
console.warn("A Tab name was passed in (", key, ") that is not in the config: ", tabConfig);
}
}
var index = this.findTabIndex(this.selectedTabId) || 0;
this.selectTab(this.tabs[index], this.tabContent[index]);
if(this.tabs.length == 1){
this.addCls(tabs, 'mje_single_tab');
}
d.appendChild(controls);
this.runBuildCb();
},
addTab: function(config, key, tabs, content, i){
if(!config) return;
key          = key          || config.title;
config.rows  = config.rows  ? [].concat(config.rows) : [{items: []}];
config.title = config.title || key || 'New Tab';
tabs         = tabs    || document.getElementById("Controls_Tabs_"    + this.CFG.containerId);
content      = content || document.getElementById("Controls_Content_" + this.CFG.containerId);
var c = this.createContent(config, i);
content.appendChild(c);
this.tabContent.push(c);
var t = this.createTab(config.title, i, c);
tabs.appendChild(t);
this.tabs.push(t);
this.CFG.tabConfig[key] = config;
var order = this.CFG.tabConfig.Order;
var found = false;
for(var i in order){
if(order[i] == key) found = true;
}
if(!found){
order.splice(i+1, 0, key);
}
},
getSelectedTabIndex: function(){
if(!this.CFG.tabContent){return;}
for(var i=0; i<this.CFG.tabContent.length; ++i){
var tab = this.CFG.tabContent[i];
if(this.hasClass(tab, 'mje_selected_tab')){
return i;
}
}
return null;
},
addBtn: function(btnCfg, tabIndex, rowIndex, btnPos){
tabIndex = (!isNaN(tabIndex) || tabIndex === null) ? tabIndex : this.getSelectedTabIndex();
if(btnCfg && this.CFG.tabConfig){
var row = this.getRowCfg(rowIndex, tabIndex);
if(row && row.items){
var index = !isNaN(btnPos) ? btnPos : this.selectedBtnIndex;
if(isNaN(index) || index == null){
index = row.items.length;
}
row.items.splice(index, 0, btnCfg);
}
}
},
removeBtn: function(btnIndex, rowIndex, tabIndex){
btnIndex = !isNaN(btnIndex) ? btnIndex : this.selectedBtnIndex;
var rows = this.getRowCfg(rowIndex, tabIndex);
if(rows && rows.items && btnIndex < rows.items.length && btnIndex >= 0){
rows.items.splice(btnIndex, 1);
if(rows.items.length == 0){
this.removeRow(rowIndex);
}
}
this.rebuild();
},
getTabCfg: function(tabIndex){
tabIndex = !isNaN(tabIndex) ? tabIndex : this.findTabIndex(this.selectedTabId);
if(!isNaN(tabIndex)){
var key  = this.CFG.tabConfig.Order[tabIndex];
return this.CFG.tabConfig[key];
}
},
getRowCfg: function(rowIndex, tabIndex){
rowIndex = (rowIndex != null && !isNaN(rowIndex)) ? rowIndex : this.selectedRowIndex;
var cfg = this.getTabCfg(tabIndex);
if(cfg && !isNaN(rowIndex)){
return cfg.rows[rowIndex];
}
},
addRow: function(rowCfg, index, tabIndex){
var tCfg = this.getTabCfg(tabIndex);
if(tCfg){
if(isNaN(index) || index == null){
index = this.selectedRowIndex || 0;
}
tCfg.rows.splice(index, 0, rowCfg);
}
this.rebuild();
},
removeRow: function(index, tabIndex){
var tCfg = this.getTabCfg(tabIndex);
if(tCfg){
index = !isNaN(index) ? index : this.selectedRowIndex;
tCfg.rows.splice(index, 1);
}
this.rebuild();
},
removeTab: function(index, evt){
if(isNaN(index) || index == null){
index = this.findTabIndex(this.selectedTabId);
this.selectedTabId = null;
}
if(this.CFG.tabConfig && this.CFG.tabConfig.Order){
var key = this.CFG.tabConfig.Order[index];
this.CFG.tabConfig.Order.splice(index, 1);
if(this.CFG.tabConfig[key]){
delete this.CFG.tabConfig[key];
}
}
this.stopEvt(evt);
this.rebuild();
},
createTab: function(text, index, content){
var id = "Controls_Tabs_" + this.CFG.containerId + "_" + index;
var el = H.Element('div', {className: "editor_controls_tabs_el", id: id}, text);
el.onclick = this.selectTab.bind(this, el, content)
return el;
},
getRowId: function(containerId, tabIndex, rowIndex){
containerId = containerId || this.CFG.containerId;
return 'Controls_Content_Row_' + this.CFG.containerId + '_' + tabIndex + '_' + rowIndex;
},
getContentId: function(id, tabIndex){
id = id || this.CFG.containerId;
return 'Controls_Content_' + id + '_' + tabIndex;
},
createContent: function(cfg, tabIndex, title){
var div = H.Element('div',
{className: "mje_controls_content_el hidden " +
"mje_controls_content_" + (cfg.title ? cfg.title : tabIndex),
id: this.getContentId(tabIndex)
}
);
var rows = cfg && cfg.rows ? [].concat(cfg.rows) : null;
var btns = [];
for (var i = 0; i < rows.length; ++i){
var row  = rows[i];
if(!row) continue;
var container = H.Element('div', {
className: 'mje_controls_content_row ' +
'mje_row_' + (row.title ? row.title : i),
id: this.getRowId(cfg.containerId, tabIndex, i)
});
container.onclick = this.selectRow.bind(this, i, container.id);
var type  = row.type;
if(type == 'grid'){
btns = btns.concat(this.gridRow(row, container, i));
}else if(type == 'numpad'){
btns = btns.concat(this.numPad(row, container, i));
} else {
btns = btns.concat(this.simpleRow(row, container, i));
}
if (type == 'grid' || type == 'numpad') {
div.insertBefore(container, div.firstChild);
} else {
div.appendChild(container);
}
}
this.tabBtns[tabIndex] = btns;
return div;
},
getBtnId: function(container, btnIndex){
if(typeof container == 'string'){
return container + '_btn_' + btnIndex;
}else if (container && container.id){
return container.id + '_btn_' + btnIndex;
}
},
simpleRow: function(row, container, rowIndex, func, cb){
if(!row || !container) return;
var btns = [];
var items    = row.items ? [].concat(row.items) : ['empty'];
if(row.title){
H.addElement(container, 'span', {className: 'mje_simple_row_title'}, row.title);
}
for (var i in items){
if(!items[i]) continue;
var item = items[i];
var btn  = this.getMathBtn(item, row, cb, this.getBtnId(container, i));
btn.onclick = this.selectBtn.bind(this, i, btn, rowIndex, btn.onclick);
container.appendChild(btn);
btns.push(btn);
}
this.addCls(container, 'mje_simple_row');
return btns;
},
apdNum: function(btn, proc, cb){
if(typeof cb == 'function') cb(btn, proc);
},
enterNumpad: function(input){
console.warn("Need to enforce only numbers for this thing.");
var e = this.getEdit();
if(input && input.value && input.value.length){
e.updateMath(null, input.value);
}
input.value = '';
},
numPad: function(row, container, rowIndex, func, cb){
row.click = row.click || this.apdNum;
func      = func || this[row.func] ||  this.enterNumpad;
var inp = H.Element('input', {
className: 'mje_numpad_input',
type: 'text',
id: container.id + 'numpad_input' + rowIndex
});
var cb = function(inp, btn, proc){
inp.value += proc.value;
}.bind(this, inp);
var ret = H.Element('button', {type: 'button', className: 'matchjax_editor_button_ret'}, 'R');
ret.onclick = func.bind(this, inp);
var btns = this.gridRow(row, container, rowIndex, null, cb);
btns.push(ret);
container.appendChild(inp);
container.appendChild(ret);
this.addCls(container, 'mje_numpad_row');
return btns;
},
gridRow: function(row, container, rowIndex, func, cb){
if(!row || !container) return;
if(row.title){
H.addElement(container, 'span', {className: 'mje_grid_row_title'}, row.title);
}
var btns  = [];
var items = row.items || ['empty'];
var cols  = row.cols || 3;
var cnt   = 0;
var span  = H.Element('span', {className: 'mje_button_grid_row'});
var func  = func || this.selectBtn;
for (var i in items){
var item = row.items[i];
var btn = this.getMathBtn(item, row, cb, this.getBtnId(container, i));
btn.onclick =  func.bind(this, i, btn, rowIndex, btn.onclick);
span.appendChild(btn);
btns.push(btn);
if((++cnt) >= cols){
container.appendChild(span);
span  = H.Element('span', {className: 'mje_button_grid_row'});
cnt = 0;
}
}
if(cnt != 0){
container.appendChild(span);
}
this.addCls(container, 'mje_grid_row');
return btns;
},
getActiveBtns: function(){
return this.btnsActive;
},
regHacks: {
fraction: '/', frac: '/',
lt: '<', le: '<', ge: '>', gt: '>',
sub: '_', sup: '^', subsup: '^',
times: '*',
bullet: '*',
'| |': true,
'( )': true
},
regBtn: function(conf){
if(!conf || !conf.key) return;
var key = conf.key;
this.btnsActive[key + ''] = conf;
var rhack = this.regHacks[key];
if(rhack) {
if(key == 'fraction' || key == 'frac'){
this.btnsActive['/'] = true;
}else if(key == '| |'){
this.btnsActive['|'] = true;
} else if(key == '( )'){
this.btnsActive['('] = true;
this.btnsActive[')'] = true;
} else if(key == 'subsup'){
this.btnsActive['_'] = true;
this.btnsActive['^'] = true;
}
this.btnsActive[rhack] = true;
}
},
getMathBtn: function(conf, rowCfg, cb, id){
if(!conf) return;
var proc = !conf.isParsed ? CONFIG.getUnicode(conf, this.CFG.placeHold) : conf;
var btn  = H.Element(
'button',
{id: id,
type: 'button',
className: (conf.css || '') + " mje_button " + " mje_button_" + proc.key
},
proc.text || '\u00a0'
);
var click = conf.click || rowCfg.click || this[rowCfg.func] || this.btnClick;
click = click.bind(this, btn, proc, cb);
btn.onclick = click;
this.regBtn(proc);
return btn;
},
apdClick: function(btn, proc){
try{
var e = this.getEdit();
var field = e.makeEditable(null, CONFIG.EditModes.APPEND);
if(field){
if(proc.value){
var val = (field.value || '').concat(proc.value);
field.focus();
field.value = val;
}
field.onkeyup({keyCode: proc.keyCode});
}
}catch(e){
console.error("Failed to handle a button click append.", e);
}
},
btnClick: function (btn, proc, cb, evt) {
try {
this.stopEvt(evt || window.event);
var w = this.getWidget();
var ed = this.getEdit();
if (w.CFG.checkEditorCharLimit()) {
if (ed.isTextEntered()) {
ed.updateMath(null, CONFIG.getMathVal(e.inputField.value));
}
ed.updateMath(null, proc.value, null, cb);
}
return false;
} catch (e) {
console.error("Failed to insert into the Editor.", e, proc);
}
},
selectBtn: function(btnIndex, dom, rowIndex, func){
if(this.CFG.configure){
if(this.selectedBtnDom){
this.removeCls(this.selectedBtnDom, 'mje_row_btn_selected');
}
this.addCls(dom, 'mje_row_btn_selected');
}
this.selectedBtnIndex = btnIndex;
this.selectedBtnDom   = dom;
this.buttonRowIndex   = rowIndex;
if(dom){
dom.focus();
}
if(func){
func();
}
},
selectRow: function(index, containerId){
if(this.CFG.configure){
if(this.currentRowId){
this.removeCls(this.currentRowId, 'mje_selected_row');
}
this.addCls(containerId, 'mje_selected_row');
}
this.selectedRowIndex = index;
this.currentRowId     = containerId;
if(this.buttonRowIndex != index){
this.selectBtn(null);
}
},
selectTab: function(t, content){
this.removeCls(this.tabs, 'mje_selected_tab');
this.addCls(this.tabContent, 'hidden');
this.addCls(t, 'mje_selected_tab');
this.removeCls(content, 'hidden');
this.selectRow(this.selectedRowIndex || 0, this.currentRowId);
if(t){
this.selectedTabIndex = this.findTabIndex(t.id);
this.selectedTabId    = t.id;
this.selectedTab      = t;
}
}
});
var CONFIGURE = COMP.Subclass({
$className: 'MathJax.Editor.Configure',
Init: function(w, init, id){
init = this.parseKeys(init);
this.setWidget(w);
this.id = id;
this.navigation      = (typeof init.navigation != 'undefined') ? init.navigation : CONFIG.Navigation;
this.containerId     = init.containerId    || "Eq-Container-"   + id;
this.tabContainerId  = init.tabContainerId || init.tabs    ? "Eq-Controls-"     + id : null;
this.navigationId    = init.navigationId   || this.navigation ? "Eq-Editor-Nav" + id : null;
this.TeX       = init.TeX    && init.TeX.length    ? [].concat(init.TeX) : null;
this.mathML    = init.mathML && init.mathML.length ? [].concat(init.mathML) : null;
this.contentId = init.contentId ? [].concat(init.contentId) : null;
this.tabConfig = this.validateTabs(init.tabConfig);
this.placeHold = init.placeHold || CONFIG.PlaceHold;
this.TeXEntryMode = CONFIG.TeXEntryMode[init.TeXEntryMode] || CONFIG.TeXEntryDefault;
this.TeXEntryInit = this.TeXEntryMode;
this.SanitizeTeXEnabled = typeof init.SanitizeTeXEnabled == 'boolean' ?  init.SanitizeTeXEnabled : CONFIG.SanitizeTeXEnabled;
this.sanitizeTeX        = typeof init.sanitizeTeX == 'function ' ? init.sanitizeTeX :  CONFIG.sanitizeTeX;
this.DefaultTextBoxPx = init.DefaultTextBoxPx || CONFIG.DefaultTextBoxPx;
this.isMobile = this.isMobileBrowser();
this.MagicDisabled = init.MagicDisabled || MathJax.Editor.Config.MagicDisabled;
if(typeof init.editorLabels == 'string'){
this.editorLabels = [init.editorLabels];
}else{
this.editorLabels = init.editorLabels || [];
}
if(typeof init.restrictKeys == 'function'){
this.restrictKeys = typeof init.restrictKeys == 'function' ? init.restrictKeys : null;
}else if(init.RestrictKeysToContent){
this.restrictKeys          = this.restrictToContentKeys.bind(this);
this.RestrictKeysToContent = true;
}else if(CONFIG.RestrictKeysToContent){
this.restrictKeys          = this.restrictToContentKeys.bind(this);
}
},
checkEditorCharLimit: function () {
var edit = this.getWidget().getEdit();
var numOfCharacters = YAHOO.util.Dom.getElementsByClassName('mn', 'span', edit.htmlId).length + YAHOO.util.Dom.getElementsByClassName('mo', 'span', edit.htmlId).length;
var maxCharacters = CONFIG.MaxCharacterLimit;
if (numOfCharacters <= maxCharacters)
return true;
return false;
},
isMobileBrowser: function(){
var isMobile = false;
if(navigator && navigator.userAgent && typeof navigator.userAgent == 'string'){
var ua = navigator.userAgent;
if(ua.match(/iPad/i) || ua.match(/iPhone/) || ua.match(/Android/i)){
isMobile = true;
}
}
if(isMobile){
this.DefaultTextBoxPx *= 3;
}
return isMobile;
},
fontTest: function(){
var d = null;
try{
d  = this.getWidget().getContainerDom();
if(d){
var el = H.addElement(d, 'span', {
className: 'mje_cursor_field  mje_allow_edit',
style: {width: 'auto', height: 'auto', position: 'absolute'}},
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+=/-%^'
);
this.FontSizePx = (el.clientWidth / 58) || CONFIG.FontSizePx;
this.FontSizePx = this.FontSizePx * (CONFIG.Scale / 100);
this.FontSizeHt =  el.clientHeight;
return this.FontSizePx;
}
}catch(e){
console.error('Failed to determine the font size', e);
}finally{
try{
d && d.removeChild && d.removeChild(el);
}catch(e){
console.error("Failed to remove the font test (dom, e)", d, e);
}
}
},
validateTabs: function(tabConfig){
if(tabConfig){
if(typeof tabConfig.Order == 'string'){
tabConfig.Order = [tabConfig.Order];
}
var order = tabConfig.Order;
for(var k in order){
var cfg = tabConfig[order[k]];
if(cfg && cfg.rows){
cfg.rows = [].concat(cfg.rows);
}
}
return tabConfig;
}else{
return JSON.parse(JSON.stringify(CONFIG.Tabs));
}
},
getFormInputId: function(edit){
if(!edit) return;
return this.containerId + '_input_' + edit.id;
},
parseKeys: function(init){
init = init || {};
for(var k in init){
if(!this[k]) this[k]=init[k];
}
if(typeof init.TeX == 'string'){
init.TeX = [init.TeX];
}
var TeX = init.TeX || [];
for(var i in TeX){
if(typeof TeX[i] == 'string') TeX[i] = TeX[i].replace(/\\PH/g, this.placeHold);
}
this.TeX = TeX;
return init;
},
isTeXEntryEnabled: function(){
if(this.TeXEntryMode == 'Allow'){
return true;
}
return false;
},
getNextEditId: function(){
this.editId = this.editId || 0;
return 'Eq-Editor-' + this.containerId + "-" + (++this.editId);
},
isKeyEnabled: function(key){
var content = this.getWidget().CONTENT;
if(!content) return true;
var lookup  = content.getActiveBtns();
if(!lookup) return true;
if(lookup[key]){
return key;
}
return false;
},
restrictToContentKeys: function(evt){
evt = evt || window.event;
if(!evt) return;
if(!evt.charCode) return;
var key = this.isKeyEnabled(String.fromCharCode(evt.charCode));
if(key == '/'){
this.stopEvt(evt);
return;
}
if(typeof key == 'boolean'){
if(!key){
this.stopEvt(evt);
return;
}
}else if(key && !key.match(/\<|\>/)){
if(key == '(' || key == ')'){
key = '(\\Box)';
}else if(key == '|'){
key = '\\lvert\\Box\\rvert';
}else{
var target = evt.target;
if(target && target.value != null){
key = target.value + key;
}
}
this.getWidget().getEdit().updateMath(null, key);
this.stopEvt(evt);
}
},
cleanTabConfig: function(tabCfg){
if(!tabCfg) return;
var stdCfg  = CONFIG.Tabs;
for(var k in tabCfg){
if(k != 'Order' && stdCfg[k]){
if(JSON.stringify(tabCfg[k]) == JSON.stringify(stdCfg[k])){
delete tabCfg[k];
}else{
console.warn("You are not using the defaults for this tab: tabCfg != stdCfg", k);
}
}
}
return tabCfg;
}
});
var WIDGET = BASE.Subclass({
$className: 'MathJax.Editor.Widget',
sequence: {
id: 0
},
Init: function(init){
this.id  = ++this.sequence.id;
this.CFG = this.unserialize(init, this.id);
if(!this.CFG.NO_BUILD){
this.build();
}
MathJax.Editor.Store.set(this.id, this);
},
getEdit: function(){
return this.edit;
},
setEdit: function(edit){
this.edit = edit;
return this.edit;
},
getEditIndex: function(){
var index = 0;
var editors = this.getEditors();
var edit    = this.getEdit();
if(edit){
for(var i =0; i< editors.length; ++i){
if(editors[i].id == edit.id){
return i;
}
}
}
return index;
},
nextEdit: function(){
var index   = this.getEditIndex();
var editors = this.getEditors();
if(++index < editors.length){
this.focusEdit(editors[index]);
}
},
prevEdit: function(){
var index   = this.getEditIndex();
var editors = this.getEditors();
if(--index >= 0){
this.focusEdit(editors[index]);
}
},
focusEdit: function(setEdit, noEditable){
var editors = this.getEditors() || [];
var edit = null;
for(var i =0; i < editors.length; ++i){
try{
edit = editors[i];
edit.removeHighlight();
edit.revertTempMrow();
edit.insertPending();
if(edit.inputField){
this.addCls(edit.inputField, 'hidden');
}
}catch(e){
console.error("Failed to focus an editor.", e, edit);
}
}
if(setEdit && setEdit.$className == 'MathJax.Editor.Edit'){
this.setEdit(setEdit);
var ln = setEdit.getCursor()  || setEdit.getLast();
var em = setEdit.isEmpty(null, true) ? CONFIG.EditModes.APPEND : setEdit.editMode;
if(!noEditable){
setEdit.makeEditable(ln, em);
}
}
},
getContentLabel: function(){
return this.label;
},
getContainerDom: function(){
if(!this.containerDom){
var c = document.getElementById(this.CFG.containerId);
if(!c){
c = H.Element("div", {id: this.CFG.containerId, className: "mje_container" });
document.body.appendChild(c);
} else {
this.addCls(c, "mje_container");
}
this.containerDom = c;
}
return this.containerDom;
},
buildEditors: function(dom){
var editors = [];
if(this.CFG.contentId){
for(var i in this.CFG.contentId){
editors.push(this.createEditor(this.CFG.contentId[i], null, null, dom));
}
}else if(this.CFG.mathML){
for(var i in this.CFG.mathML){
editors.push(this.createEditor(this.CFG.getNextEditId(), this.CFG.mathML[i], 'math/mml', dom));
}
}else if(this.CFG.TeX){
for(var i in this.CFG.TeX){
editors.push(this.createEditor(this.CFG.getNextEditId(), this.CFG.TeX[i], 'math/tex', dom));
}
}else{
editors.push(this.createEditor(this.CFG.getNextEditId(), null, 'math/tex', dom));
}
return editors;
},
removeEditor: function(edit){
if(!edit) return;
edit && edit.getEq() ? edit.getEq().Remove() : null;
this.setEdit(null);
delete edit;
},
removeEditorObj: function(edit, btn){
var eArr  = this.getEditors();
var index = null;
for(var i in eArr){
var ed = eArr[i];
if(ed.id == edit.id){
index = i;
}
}
if(index!= null){
eArr.splice(index, 1);
this.rebuild(index);
}else{
console.error("Failed to find this editor to remove.", edit);
}
},
addEditor: function(id, content, type, dom, cb){
id      = id  || this.CFG.getNextEditId();
dom     = dom || this.getContainerDom();
var beforeDom = this.CFG.tabContainerId ? document.getElementById(this.CFG.tabContainerId) : null;
var edit = this.createEditor(id, content, type, dom, beforeDom);
this.getEditors().push(edit);
MathJax.Hub.Queue(["Typeset", MathJax.Hub, edit.contentId]);
MathJax.Hub.Queue(this.connectEditor.bind(this, edit, cb));
return edit;
},
createEditor: function(id, content, type, dom, beforeDom){
var edit = new EDIT(this);
edit.contentId = id;
edit.htmlId    = id;
edit.id        = id;
edit.rowId     = id + '-Row';
var d   = document.getElementById(id);
if(!d){
var row = H.Element('div', {className: 'mje_editor_row', id: edit.rowId});
if(beforeDom) {
dom.insertBefore(row, beforeDom);
}else{
dom.appendChild(row);
}
var mathJaxWrapper = H.Element('div', { className: 'mathJax_blockContainer', id: edit.id + '-mathJaxblockContainer' });
row.appendChild(mathJaxWrapper);
if(content && type=='math/mml'){
d = H.addElement(mathJaxWrapper, "script", { id: id, type: 'math/mml' }, content || '');
} else {
d = H.addElement(mathJaxWrapper, "script", { id: id, type: 'math/tex' }, content || "\\displaystyle {}");
}
}
if(d && d.type){
edit.htmlId = id + "-Frame";
}
return edit;
},
getEditors: function(){
return this.editors;
},
setEditors: function(editors){
this.editors = editors;
},
build: function(){
var editors = this.buildEditors(this.getContainerDom());
for(var i in editors){
var edit = editors[i];
MathJax.Hub.Queue(["Typeset", MathJax.Hub, edit.contentId]);
}
this.setEditors(editors);
MathJax.Hub.Queue(this.connectPipes.bind(this));
},
bindClick: function(){
var d = document.getElementById(this.CFG.containerId);
if(d){
d.onclick = this.focus.bind(this);
try{
KPH.bindUnfocus();
}catch(e){
console.error("Failed to bind unfocus.", e);
}
}
},
connectPipes: function(args){
if(!this.UTIL){
this.UTIL  = this.UTIL  || new UTIL(this);
this.MOUSE = this.MOUSE || new MOUSE(this);
this.setContentLabel(this.CFG.contentLabel);
this.bindClick();
if(this.CFG.configure && MathJax.Editor.Tools){
this.TOOLS = new MathJax.Editor.Tools(this);
}
var editors = this.getEditors();
var edit    = null;
for (var i=0; i<editors.length;++i){
edit = editors[i];
var lText = this.CFG.editorLabels[i];
this.connectEditor(edit, null, this.CFG.editorLabels[i]);
}
this.setEdit(editors[0]);
if(this.CFG.tabs && this.CFG.tabContainerId){
this.CONTENT = this.CONTENT || new CONTENT(this);
this.CONTENT.setUtil(this.UTIL);
this.CONTENT.build(this.CFG.tabConfig);
}
if(this.CFG.navigationId){
this.NAVIGATION = this.NAVIGATION || new NAVIGATION(this);
this.NAVIGATION.build();
}
if(this.TOOLS){
this.TOOLS.setContent(this.CONTENT);
this.TOOLS.build();
}
if(typeof this.CFG.cb == 'function'){
this.CFG.cb(this);
}
this.CFG.fontTest();
}
},
connectEditor: function(edit, cb, label){
this.setEdit(edit);
edit.setUtil(this.UTIL);
edit.setEditMode(this.CFG.editMode);
edit.updateInput();
edit.addUpdateCb(edit.makeEditable.bind(edit));
edit.addUpdateCb(edit.updateInput.bind(edit));
edit.addUpdateCb(this.MOUSE.bindToDom.bind(this.MOUSE, edit));
edit.setLabel(label);
this.MOUSE.bindToDom(edit);
if(this.TOOLS){
this.TOOLS.createTools(edit, label);
}
if(typeof cb == 'function'){
cb(edit);
}
},
focus: function(evt){
evt = evt || window.event;
if(evt){
this.stopEvt(evt);
}
this.focusEdit(this.getEdit());
KPH.listen(this);
},
unfocus: function(){
this.focusEdit(null);
KPH.sleep();
},
setContentLabel: function(label){
var d = document.getElementById(this.CFG.containerId);
if(label && d){
this.CFG.contentLabel = label;
var labelId = 'Eq-Label-' + this.CFG.containerId;
var labelDom = document.getElementById(labelId);
if(!labelDom){
labelDom = H.Element('div', {className: 'mje_class_label no-highlight', id: labelId});
d.insertBefore(labelDom, d.firstChild);
}
labelDom.innerHTML = label;
}
},
toMathML: function(){
var mathML  = [];
var editors = this.getEditors();
if(editors && editors.length){
for (var i in editors){
var eq = editors[i].getEq();
if(eq){
mathML.push(editors[i].toMathML());
}
}
}
return mathML;
},
serialize: function(){
var data = {};
for (k in this.CFG){
var val =  this.CFG[k];
if(typeof val != 'function' && !(typeof val == 'object' && val && val.CFG)){
data[k] = val;
}
}
data.tabConfig = this.CFG.cleanTabConfig(data.tabConfig);
data.mathML    = this.toMathML();
delete data['$className'];
return data;
},
serializeSettings: function(){
var conf  = this.serialize() || {};
for(k in conf){
if(k && (k.match('Id') || k == 'id')){
conf[k] = ''; delete conf[k];
}else if (typeof conf[k] == 'undefined' || conf[k] === '' || typeof conf[k] == 'function'){
delete conf[k];
}
}
conf.configure = false;
conf = JSON.parse(JSON.stringify(conf));
return conf;
},
updateEditors: function(mathMLArr){
if(!mathMLArr) return;
if(typeof mathMLArr == 'string'){
mathMLArr = [mathMLArr];
}
var editors = this.getEditors();
for(var m in mathMLArr){
var mathML = mathMLArr[m];
if(m < editors.length){
editors[m].updateMathML(mathML);
}else{
this.addEditor(null, mathML, 'math/mml');
}
}
},
unserialize: function(data, id){
data = data || {};
if(typeof data == 'string'){
try{
data = JSON.parse(data);
}catch(e){
console.error("Invalid initialization config (data, id, e)", data, id, e);
data = {};
}
}
this.id = data.id || id;
return new CONFIGURE(this, data || {}, this.id);
},
rebuild: function(focusIndex){
var conf = JSON.parse(JSON.stringify(this.serialize()));
if(!isNaN(focusIndex) && focusIndex != null){
conf.cb = function(focusIndex, w) {
var editors = w.getEditors();
if(focusIndex-1 >=0){
w.focusEdit(editors[focusIndex-1]);
}else if(editors.length){
w.focusEdit(editors[editors.length -1]);
}
}.bind(null, focusIndex);
}
this.remove();
return new MathJax.Editor.Widget(conf);
},
remove: function(){
MathJax.Editor.Store.set(this.id, null);
var editors = this.getEditors();
for(var i in editors){
var ed = editors[i];
this.removeEditor(ed);
}
this.cleanDom(this.CFG.tabContainerId);
this.cleanDom(this.CFG.navigationId);
var cl = document.getElementById(this.CFG.containerId);
if(cl){
cl.innerHTML = '';
}
this.cleanDom(this.CFG.configureId);
},
isEmpty: function(){
var check   = true;
var editors = this.getEditors();
if(editors){
for(var i in editors){
var edit = editors[i];
if(!edit.isEmpty()){
check = false;
}
}
}
return check;
},
getImage: function(userCb){
if(typeof userCb != 'function'){
console.error("You must provide a callback function to use this call.");
return;
}
var callback = function(userCb){
try{
var edit = this.getEdit();
var dom = document.getElementById(edit.htmlId);
var svg  = dom.firstChild;
dom.removeChild(svg);
var img = H.Element('img');
img.appendChild(svg);
userCb(img);
}catch(e){
console.error("Failed to create an image.", e);
}
MathJax.Hub.Queue(
["setRenderer",HUB,'HTML-CSS',"jax/mml"],
edit.Update.bind(edit)
);
}.bind(this, userCb);
MathJax.Hub.Queue(
["setRenderer",HUB,'SVG',"jax/mml"]
);
this.getEdit().Update(callback);
},
Update: function(cb){
var eds = this.getEditors() || [];
for(var i =0; i<eds.length; ++i){
eds[i] && eds[i].Update && eds[i].Update(cb);
}
},
cleanDom: function(id){
if(!id) return;
var d = document.getElementById(id);
if(d && d.parentNode){ d.parentNode.removeChild(d);}
},
clearAll: function(){
var editors = this.getEditors();
for(var i in editors){
editors[i].clear();
}
}
});
MathJax.Editor.Widget = WIDGET;
})(MathJax.Hub, MathJax.Ajax, MathJax.Editor.Config);

// FILE: xml2jsonv2.js (b810e78f) 5/2/2014 12:55:57 PM

function xml2jsonv2(xml, tab) {
var X = {
toObj: function(xml) {
var o = {};
if (xml.nodeType == 1) {
if (xml.attributes.length)
for (var i=0; i<xml.attributes.length; i++)
o["@"+xml.attributes[i].nodeName] = (xml.attributes[i].value||"").toString();
if (xml.firstChild) {
var textChild=0, cdataChild=0, hasElementChild=false;
for (var n=xml.firstChild; n; n=n.nextSibling) {
if (n.nodeType==1) hasElementChild = true;
else if (n.nodeType==3 && n.nodeValue.match(/[^ \f\n\r\t\v]/)) textChild++;
else if (n.nodeType==4) cdataChild++;
}
if (hasElementChild) {
if (textChild < 2 && cdataChild < 2) {
X.removeWhite(xml);
for (var n=xml.firstChild; n; n=n.nextSibling) {
if (n.nodeType == 3)
o["#text"] = X.escape(n.nodeValue);
else if (n.nodeType == 4)
o["#cdata"] = X.escape(n.nodeValue);
else if (n.nodeName in o) {
if (o[n.nodeName] instanceof Array)
o[n.nodeName][o[n.nodeName].length] = X.toObj(n);
else
o[n.nodeName] = [o[n.nodeName], X.toObj(n)];
}
else
o[n.nodeName] = X.toObj(n);
}
}
else {
if (!xml.attributes.length)
o = X.escape(X.innerXml(xml));
else
o["#text"] = X.escape(X.innerXml(xml));
}
}
else if (textChild) {
if (!xml.attributes.length)
o = X.escape(X.innerXml(xml));
else
o["#text"] = X.escape(X.innerXml(xml));
}
else if (cdataChild) {
if (cdataChild > 1)
o = X.escape(X.innerXml(xml));
else
for (var n=xml.firstChild; n; n=n.nextSibling)
o["#cdata"] = X.escape(n.nodeValue);
}
}
if (!xml.attributes.length && !xml.firstChild) o = null;
}
else if (xml.nodeType==9) {
o = X.toObj(xml.documentElement);
}
else
console.error("unhandled node type: ", xml.nodeType, xml);
return o;
},
toJson: function(o, name, ind) {
var json = name ? ("\""+name+"\"") : "";
if (o instanceof Array) {
for (var i=0,n=o.length; i<n; i++)
o[i] = X.toJson(o[i], "", ind+"\t");
json += (name?":[":"[") + (o.length > 1 ? ("\n"+ind+"\t"+o.join(",\n"+ind+"\t")+"\n"+ind) : o.join("")) + "]";
}
else if (o == null)
json += (name&&":") + "null";
else if (typeof(o) == "object") {
var arr = [];
for (var m in o)
arr[arr.length] = X.toJson(o[m], m, ind+"\t");
json += (name?":{":"{") + (arr.length > 1 ? ("\n"+ind+"\t"+arr.join(",\n"+ind+"\t")+"\n"+ind) : arr.join("")) + "}";
}
else if (typeof (o) == "string") {
if ((name.substr(0, 4) == "nmb_") || (name.substr(0, 4) == "bln_"))
json = (name && "\""+name.substr(4)+"\":") + o.toString();
else
json += (name && ":") + "\"" + o.toString() + "\"";
}
else
json += (name && ":") + o.toString();
return json;
},
innerXml: function(node) {
var s = ""
if ("innerHTML" in node)
s = node.innerHTML;
else {
var asXml = function(n) {
var s = "";
if (n.nodeType == 1) {
s += "<" + n.nodeName;
for (var i=0; i<n.attributes.length;i++)
s += " " + n.attributes[i].nodeName + "=\"" + (n.attributes[i].value||"").toString() + "\"";
if (n.firstChild) {
s += ">";
for (var c=n.firstChild; c; c=c.nextSibling)
s += asXml(c);
s += "</"+n.nodeName+">";
}
else
s += "/>";
}
else if (n.nodeType == 3)
s += n.nodeValue;
else if (n.nodeType == 4)
s += "<![CDATA[" + n.nodeValue + "]]>";
return s;
};
for (var c=node.firstChild; c; c=c.nextSibling)
s += asXml(c);
}
return s;
},
escape: function(txt) {
return txt.replace(/[\\]/g, "\\\\")
.replace(/[\"]/g, '\\"')
.replace(/[\n]/g, '\\n')
.replace(/[\r]/g, '\\r');
},
removeWhite: function(e) {
e.normalize();
for (var n = e.firstChild; n; ) {
if (n.nodeType == 3) {
if (!n.nodeValue.match(/[^ \f\n\r\t\v]/)) {
var nxt = n.nextSibling;
e.removeChild(n);
n = nxt;
}
else
n = n.nextSibling;
}
else if (n.nodeType == 1) {
X.removeWhite(n);
n = n.nextSibling;
}
else
n = n.nextSibling;
}
return e;
}
};
if (xml.nodeType == 9)
xml = xml.documentElement;
var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, "\t");
return "{\n" + tab + (tab ? json.replace(/\t/g, tab) : json.replace(/\t|\n/g, "")) + "\n}";
}
function parseXml(xml) {
var dom = null;
if (window.DOMParser) {
try {
dom = (new DOMParser()).parseFromString(xml, "text/xml");
}
catch (e) { dom = null; }
}
else if (window.ActiveXObject) {
try {
dom = new ActiveXObject('Microsoft.XMLDOM');
dom.async = false;
if (!dom.loadXML(xml)){
console.log("XML dom parsing error.", dom.parseError, 'source: ', xml);
}
}
catch (e) { dom = null; }
}
else{
console.error("Failed to load dom.", xml);
}
return dom;
}

// FILE: module_equation2.js (7192d0f9) 5/2/2014 12:55:57 PM

ContentManager.onItemEvent('available', function (page, item) {
if (!item.isResponseType('EquationEditor')) return;
if (ContentManager.isAccessibilityEnabled()) {
var textArea = HTML.TEXTAREA();
item.TextArea = textArea;
page.getDoc().getElementById('EquationEditor_' + item.position).appendChild(textArea);
if (item.value != null) item.setResponse(item.value);
return;
}
if(!MathJax.Editor.Config.SETUP){
MathJax.Editor.Config.DEBUG = false;
MathJax.Hub.Config({
showMathMenu: false,
"HTML-CSS": {
availableFonts: ["TeX"],
imageFont: null,
scale: MathJax.Editor.Config.Scale || 150
}
});
MathJax.Editor.Config.SETUP = true;
}
var content = EqEditor.parseXmlToJson(item);
if(typeof content.RestrictKeysToContent == 'undefined'){
content.RestrictKeysToContent = true;
content.TeXEntryMode = 'Allow';
}
content.navigation = true;
item.EquationEditor = new MathJax.Editor.Widget(content);
item.EquationEditor.addCls(content.containerId, 'no-highlight');
if (item.value != null) {
item.setResponse(item.value);
}
var eqComponent = {
id: 'EQ_' + item.position,
focus: function() { item.EquationEditor.focus(); },
blur: function() { item.EquationEditor.unfocus(); }
};
item.addComponent(eqComponent);
var eqContainer = item.EquationEditor.getContainerDom();
YUE.on(eqContainer, 'click', function() {
item.setActiveComponent(eqComponent);
});
});
ContentManager.onItemEvent('zoom', function(page, item){
if (!item.isResponseType('EquationEditor')) return;
if (item.EquationEditor) {
var eq = item.EquationEditor;
if(page._zoom && page._zoom.currentLevel){
var zoom = page._zoom.currentLevel;
if(!isNaN(zoom)) {
var scale = {0: 0.8, 1: 1.2, 2: 1.4, 3: 1.5, 4: 1.5};
MathJax.Hub.Config({
showMathMenu: false,
"HTML-CSS":{
scale: 150 * scale[zoom]
}
});
eq.CFG.fontTest();
var eds = eq.getEditors();
for(var i =0;i<eds.length;++i){
eds[i] && eds[i].Update && eds[i].Update();
}
}
}
eq.unfocus();
}
});
ContentManager.onItemEvent('keyevent', function(page, item, evt){
if (!item.isResponseType('EquationEditor')) return;
});
ContentManager.onPageEvent('loaded', function(page) {
var pageEl = page.getElement();
var unsupportedBrowser =
Util.Browser.isChrome() ||
Util.Browser.isIE();
var containsMathML = pageEl.getElementsByTagName("math").length > 0;
var typesetConditional =
pageEl &&
unsupportedBrowser &&
containsMathML;
if (typesetConditional) {
MathJax.Hub.Queue(['Typeset', MathJax.Hub, pageEl.id]);
}
});
(function() {
function cleanTextXml(xmlStr) {
xmlStr = xmlStr.replace('<![CDATA[', '');
xmlStr = xmlStr.replace(']]&gt;', '');
xmlStr = xmlStr.replace(']]>', '');
return xmlStr;
}
function createTextXml(text) {
var xmlDoc = Util.Xml.parseFromString('<response type="plaintext"></response>');
var textNode = xmlDoc.createTextNode(text);
xmlDoc.documentElement.appendChild(textNode);
return Util.Xml.serializeToString(xmlDoc);
}
function parseTextXml(xmlStr) {
xmlStr = cleanTextXml(xmlStr);
var xmlDoc = Util.Xml.parseFromString(xmlStr);
if (xmlDoc && xmlDoc.documentElement && xmlDoc.documentElement.childNodes[0]) {
return Util.Xml.getNodeText(xmlDoc.documentElement.childNodes[0]);
}
return null;
}
function getResponse(item, response) {
if (item.TextArea) {
var text = item.TextArea.value;
response.value = createTextXml(text);
response.isAvailable = true;
response.isValid = text.length > 0;
response.isSelected = response.isValid;
return;
}
try {
var eq = item.EquationEditor;
var ed = eq.getEdit();
if (ed) {
ed.insertPending();
}
var mArr = eq.toMathML();
var val = '<response>' + mArr.join('') + '</response>';
console.log("Get response is: ", val);
response.value = val;
response.isAvailable = true;
response.isSelected = !eq.isEmpty();
response.isValid = !eq.isEmpty();
} catch (e) {
console.error("Failed to get a response for the EQ item.", item.EquationEditor, e);
}
}
function setResponse(item, value) {
if (item.TextArea) {
if (value) {
var text = parseTextXml(value);
item.TextArea.value = text || '';
}
return;
}
try {
if (value) {
value = value.replace(/<response>/gm, '');
value = value.replace(/<\/response>/gm, '');
value = EqEditor.mathToArr(value);
var eq = item.EquationEditor;
var cb = eq.updateEditors.bind(eq, value);
MathJax.Hub.Queue(cb);
}
} catch (e) {
console.error("Faield to update the mathML with this value.", value, e);
}
}
ContentManager.registerResponseHandler('EquationEditor', getResponse, setResponse);
})();
if(!window.EqEditor){
EqEditor = {};
EqEditor.getMathMLArr = function(xmlStr){
var mathML = xmlStr.match(/<mathML>([\w\W]*)<\/mathML>/m);
if(mathML){
mathML = mathML[1];
}else{
return [];
}
mathML = mathML.replace(/<mathML>/gm, '');
mathML = mathML.replace(/<\/mathML>/gm, '');
return EqEditor.mathToArr(mathML);
};
EqEditor.mathToArr = function(mathML){
var fin  = [];
mathML = mathML.trim().split('</math>');
for(var m in mathML){
if(mathML[m]){
fin.push(mathML[m] + '</math>');
}
}
return fin;
};
EqEditor.parseBooleans  = function(content){
if(!content) return {};
for(var c in content){
if(content[c] === 'true') content[c]  = true;
if(content[c] === 'false') content[c] = false;
}
return content;
};
EqEditor.parseXmlToJson = function(item){
var content = {};
try{
var xmlStr = decodeURIComponent(item.rendererSpec);
if(xmlStr){
content        = JSON.parse(xml2jsonv2(parseXml(xmlStr), ''));
content        = content.editorconfig;
content.mathML = EqEditor.getMathMLArr(xmlStr);
content        = EqEditor.parseBooleans(content);
}
}catch(e){
console.error('Failed to parse the Eq rendererSpec', item.rendererSpec, e);
}
content.containerId = 'EquationEditor_' + item.position;
content.id = null;
return content;
};
}

// FILE: Interaction.js (7274aa93) 3/7/2014 11:24:07 AM

if (typeof TDS == 'undefined') var TDS = {};
TDS.Interaction = function(responseIdentifier, config)
{
this._responseIdentifier = responseIdentifier;
this._config = config || {};
};
YAHOO.lang.augmentProto(TDS.Interaction, YAHOO.util.EventProvider);
TDS.Interaction.prototype.getResponseIdentifier = function()
{
return this._responseIdentifier;
};
TDS.Interaction.prototype.init = function() { };
TDS.Interaction.prototype.validateResponse = function() { return false; };
TDS.Interaction.prototype.getResponse = function() { return null; };
TDS.Interaction.prototype.resetResponse = function() { };
TDS.Interaction.prototype.loadResponse = function(        ) { };
TDS.Interaction.parseIdentifier = function(el)
{
return YUD.getAttribute(el, 'data-its-identifier');
};
TDS.Interaction.compareOrder = function(obj1, obj2)
{
return Util.Dom.compareNodeOrder(obj1.getElement(), obj2.getElement());
};

// FILE: ChoiceInteraction.js (51710cb8) 3/7/2014 11:24:07 AM

TDS.ChoiceInteraction = function(responseIdentifier)
{
TDS.ChoiceInteraction.superclass.constructor.call(this, responseIdentifier);
this._choices = [];
};
YAHOO.lang.extend(TDS.ChoiceInteraction, TDS.Interaction);
TDS.ChoiceInteraction.prototype.getChoices = function() { return this._choices; };
TDS.ChoiceInteraction.prototype.getChoice = function(identifier)
{
for (var i = 0; i < this._choices.length; i++)
{
var choice = this._choices[i];
if (identifier == choice.getIdentifier()) return choice;
}
return null;
};
TDS.ChoiceInteraction.prototype.removeChoice = function(choice)
{
Util.Array.remove(this._choices, choice);
};
TDS.ChoiceInteraction.prototype.addChoice = function(choice)
{
this._choices.push(choice);
};

// FILE: Choice.js (05f6a22e) 3/7/2014 11:24:07 AM

TDS.Choice = function(identifier, element, config)
{
this._identifier = identifier || '';
this._element = element || null;
this._config = config || {};
this.init();
};
YAHOO.lang.augmentProto(TDS.Choice, YAHOO.util.EventProvider);
TDS.Choice.prototype.getIdentifier = function() { return this._identifier; };
TDS.Choice.prototype.getElement = function() { return this._element; };
TDS.Choice.prototype.getDoc = function()
{
var element = this.getElement();
return Util.Dom.getOwnerDocument(element);
};
TDS.Choice.prototype.getWin = function()
{
var elementDoc = this.getDoc();
return Util.Dom.getWindow(elementDoc);
};
TDS.Choice.prototype.getRegions = function() {
var choiceEl = this.getElement();
return Util.Dom.getElementRegions(choiceEl);
};
TDS.Choice.prototype.init = function() { };
TDS.Choice.prototype.toString = function()
{
return this.getIdentifier();
};

// FILE: SelectInteraction.js (231d6322) 5/2/2014 12:55:57 PM

TDS.SelectInteraction = function(responseIdentifier) {
TDS.SelectInteraction.superclass.constructor.call(this, responseIdentifier);
this._selectElements = [];
this._cardinalityLookup = new Util.Structs.Map();
};
YAHOO.lang.extend(TDS.SelectInteraction, TDS.ChoiceInteraction);
TDS.SelectInteraction.prototype.setCardinality = function (id, min, max) {
this._cardinalityLookup.set(id, {
id: id,
min: min,
max: max
});
};
TDS.SelectInteraction.prototype.getCardinality = function (id) {
return this._cardinalityLookup.get(id) || {
id: id,
min: 0,
max: 0
};
};
TDS.SelectInteraction.prototype.addChoice = function(choice) {
TDS.SelectInteraction.superclass.addChoice.call(this, choice);
choice.subscribe('beforeSelectEvent', this._validateSelection, choice, this);
};
TDS.SelectInteraction.prototype.removeChoice = function(choice) {
TDS.SelectInteraction.superclass.removeChoice.call(this, choice);
choice.unsubscribe('beforeSelectEvent', this._validateSelection, choice, this);
};
TDS.SelectInteraction.prototype.getSelectedChoices = function () {
return this.getChoices().filter(function(choice) {
return choice.isSelected();
});
};
TDS.SelectInteraction.prototype.getChoicesInGroup = function (id) {
return this.getChoices().filter(function (choice) {
return (id == choice.getGroupIdentifier());
});
};
TDS.SelectInteraction.prototype.getSelectedInGroup = function (id) {
return this.getSelectedChoices().filter(function (choice) {
return (id == choice.getGroupIdentifier());
});
};
TDS.SelectInteraction.prototype.getGroups = function () {
return Util.Array.uniqueList(this.getChoices().map(function(choice) {
return choice.getGroupIdentifier();
}));
};
TDS.SelectInteraction.prototype._validateSelection = function(id, choice) {
var groupId = choice.getGroupIdentifier();
var cardinality = this.getCardinality(groupId);
var choices = this.getSelectedInGroup(groupId);
if (cardinality.max == 1 && choices.length > 0) {
choices[0].deselect();
return true;
}
else if (cardinality.max > 0 &&
cardinality.max <= choices.length) {
return false;
}
return true;
};
TDS.SelectInteraction.prototype.validateResponse = function () {
var totalMin = 0,
totalSelected = 0;
var groupIds = this.getGroups();
for (var i = 0; i < groupIds.length; i ++) {
var groupId = groupIds[i];
var cardinality = this.getCardinality(groupId);
var choices = this.getSelectedInGroup(groupId);
if (choices.length < cardinality.min) {
return false;
}
totalMin += cardinality.min;
totalSelected += choices.length;
}
if (totalMin == 0 && totalSelected == 0) {
return false;
}
return true;
};
TDS.SelectInteraction.prototype.getResponseArray = function() {
var selectedIdentifiers = [];
var selectedChoices = this.getSelectedChoices();
for (var i = 0; i < selectedChoices.length; i++) {
var choice = selectedChoices[i];
selectedIdentifiers.push(choice.getIdentifier());
}
return selectedIdentifiers;
};
TDS.SelectInteraction.prototype.getResponseJson = function () {
var groupList = [];
var groupLookup = {};
var selectedChoices = this.getSelectedChoices();
Util.Array.each(selectedChoices, function(choice) {
var selectIdent = choice.getIdentifier();
var selectEl = choice.getElement();
var selectGroupIdent = YUD.getAttribute(selectEl, 'data-its-group') || '';
var selectGroup = groupLookup[selectGroupIdent];
if (selectGroup == null) {
selectGroup =
{
responses: [],
identifier: selectGroupIdent
};
groupLookup[selectGroupIdent] = selectGroup;
groupList.push(selectGroup);
}
selectGroup.responses.push(selectIdent);
});
return groupList;
};
TDS.SelectInteraction.prototype.createResponseQTI = function (xmlDoc) {
var xmlEl = xmlDoc.documentElement;
var groupsList = this.getResponseJson();
if (groupsList.length < 1) {
groupsList = this.getGroups();
}
var responseXML;
Util.Array.each(groupsList, function(groupJson) {
responseXML = xmlDoc.createElement('response');
xmlEl.appendChild(responseXML);
if (typeof groupJson == "object") {
responseXML.setAttribute('id', groupJson.identifier);
Util.Array.each(groupJson.responses, function(response) {
var responseNode = xmlDoc.createElement('value');
responseNode.textContent = response;
responseXML.appendChild(responseNode);
});
} else {
responseXML.setAttribute('id', groupJson);
}
});
};
TDS.SelectInteraction.prototype.getResponseXml = function() {
var responseXml = Util.Xml.createDocument('interaction');
var interactionEl = responseXml.documentElement;
interactionEl.setAttribute('identifier', this.getResponseIdentifier());
interactionEl.setAttribute('type', 'selectable');
var groupsList = this.getResponseJson();
Util.Array.each(groupsList, function(groupJson) {
var groupNode = responseXml.createElement('group');
groupNode.setAttribute('identifier', groupJson.identifier);
interactionEl.appendChild(groupNode);
Util.Array.each(groupJson.responses, function(response) {
var responseNode = responseXml.createElement('response');
responseNode.setAttribute('identifier', response);
groupNode.appendChild(responseNode);
});
});
return responseXml;
};
TDS.SelectInteraction.prototype.getResponse = function() {
var responseXml = this.getResponseXml();
return Util.Xml.serializeToString(responseXml);
};
TDS.SelectInteraction.prototype.resetResponse = function() {
var choices = this.getChoices();
for (var i = 0; i < choices.length; i++) {
choices[i].deselect();
}
};
TDS.SelectInteraction.prototype.setResponse = function(identifier) {
var choice = this.getChoice(identifier);
return (choice) ? choice.select() : false;
};
TDS.SelectInteraction.prototype.loadResponseIDs = function(responseIdentifiers) {
this.resetResponse();
for (var i = 0; i < responseIdentifiers.length; i++) {
this.setResponse(responseIdentifiers[i]);
}
};
TDS.SelectInteraction.prototype.loadResponse = function (xml) {
var interactionXml = Util.Xml.parseFromString(xml);
var interactionNode = interactionXml.documentElement;
var responseIdentifiers = [];
Util.Dom.queryTagsBatch('response', interactionNode, function(responseNode) {
var responseIdentifier = responseNode.getAttribute('identifier');
responseIdentifiers.push(responseIdentifier);
});
this.loadResponseIDs(responseIdentifiers);
};
TDS.SelectInteraction.prototype.loadResponseQTI = function (xml) {
var responseNode;
if (typeof xml == 'string') {
var xmlDoc = Util.Xml.parseFromString(xml);
responseNode = xmlDoc.documentElement;
} else {
responseNode = xml;
}
var responseIdentifiers = [];
Util.Dom.queryTagsBatch('value', responseNode, function (valueNode) {
var value = Util.Xml.getNodeText(valueNode);
responseIdentifiers.push(value);
});
this.loadResponseIDs(responseIdentifiers);
};
TDS.SelectInteraction.prototype.getSelectElements = function() {
return this._selectElements;
};
TDS.SelectInteraction.prototype.load = function(parent) {
parent = YUD.get(parent);
var interactionElements = YUD.getElementsByClassName('interaction', null, parent);
var selectElements = [];
YUD.batch(interactionElements, function(interactionEl) {
if (YUD.hasClass(interactionEl, 'selectable')) {
selectElements.push(interactionEl);
}
});
this._selectElements = selectElements;
for (var i = 0; i < selectElements.length; i++) {
var selectElement = selectElements[i];
var responseIdentifier = TDS.Interaction.parseIdentifier(selectElement);
var choice = new TDS.SelectChoice(responseIdentifier, selectElement);
this.addChoice(choice);
}
};

// FILE: SelectChoice.js (eb5e147a) 3/7/2014 11:24:07 AM

TDS.SelectChoice = function (identifier, element, config) {
this._selected = false;
TDS.SelectChoice.superclass.constructor.call(this, identifier, element, config);
this.createEvent('beforeSelectEvent');
this.createEvent('selectEvent');
this.createEvent('deselectEvent');
};
YAHOO.extend(TDS.SelectChoice, TDS.Choice);
TDS.SelectChoice.prototype.isSelected = function() {
return this._selected;
};
TDS.SelectChoice.prototype.getGroupIdentifier = function() {
return this._element.getAttribute('data-its-group');
};
TDS.SelectChoice.prototype.select = function() {
if (this._selected) {
return false;
}
var b4result = this.fireEvent('beforeSelectEvent', this._identifier);
if (b4result !== false) {
this._selected = true;
this.onSelect();
this.fireEvent('selectEvent', this._identifier);
return true;
}
return false;
};
TDS.SelectChoice.prototype.deselect = function() {
if (!this._selected) return false;
this._selected = false;
this.onDeselect();
this.fireEvent('deselectEvent', this._identifier);
return true;
};
TDS.SelectChoice.prototype.onSelect = function() {
YUD.addClass(this._element, 'selected');
this._element.setAttribute('aria-checked', 'true');
};
TDS.SelectChoice.prototype.onDeselect = function() {
YUD.removeClass(this._element, 'selected');
this._element.setAttribute('aria-checked', 'false');
};
TDS.SelectChoice.prototype.onClick = function(ev) {
if (this.isSelected()) this.deselect();
else this.select();
};
TDS.SelectChoice.prototype.init = function() {
YAHOO.util.Event.on(this._element, 'click', this.onClick, this, true);
this._element.setAttribute('role', 'checkbox');
this._element.setAttribute('aria-checked', 'false');
};

// FILE: DDInteraction.js (6182c44b) 5/2/2014 12:55:57 PM

TDS.DDInteraction = function(responseIdentifier)
{
this._groupLookup = new Util.Structs.Map();
this._dragLookup = new Util.Structs.Map();
this._dragSource = null;
this._dropTarget = null;
this._defaultResponse = null;
TDS.DDInteraction.superclass.constructor.call(this, responseIdentifier);
};
YAHOO.lang.extend(TDS.DDInteraction, TDS.Interaction);
TDS.DDInteraction.CSS = {
INTERACTION: 'interaction',
DRAGGABLE: 'draggable',
DRAG_GROUP: 'drag-group',
DROP_TARGET: 'drop-target',
DROP_TARGET_COLLAPSED: 'drop-target-collapsed',
DRAG_SOURCE: 'drag-source',
DRAG_OVER: 'drag-over',
DRAG_PROXY: 'drag-proxy',
DRAG_PROXY_OVER: 'drag-proxy-over',
DROP_MARKER: 'drop-marker',
DRAG_LOCKED: 'drag-locked'
};
TDS.DDInteraction.prototype.getGroups = function()
{
return this._groupLookup.getValues();
};
TDS.DDInteraction.prototype.getGroup = function(responseIdentifier)
{
return this._groupLookup.get(responseIdentifier);
};
TDS.DDInteraction.prototype.addGroup = function(group)
{
var responseIdentifier = group.getIdentifier();
this._groupLookup.set(responseIdentifier, group);
};
TDS.DDInteraction.prototype.getDraggables = function()
{
return this._dragLookup.getValues();
};
TDS.DDInteraction.prototype.getDraggable = function(responseIdentifier)
{
return this._dragLookup.get(responseIdentifier);
};
TDS.DDInteraction.prototype.addDraggable = function(draggable)
{
var responseIdentifier = draggable.getIdentifier();
this._dragLookup.set(responseIdentifier, draggable);
};
TDS.DDInteraction.prototype.getSource = function() { return this._dragSource; };
TDS.DDInteraction.prototype.hasSource = function() { return (this._dragSource != null); };
TDS.DDInteraction.prototype.setSource = function(draggable)
{
if (this._dragSource == draggable) return;
this.clearSource();
if (!(draggable instanceof TDS.Choice)) return;
var dragEl = draggable.getElement();
YUD.addClass(dragEl, TDS.DDInteraction.CSS.DRAG_SOURCE);
this._dragSource = draggable;
};
TDS.DDInteraction.prototype.clearSource = function()
{
if (this._dragSource == null) return;
var dropEl = this._dragSource.getElement();
YUD.removeClass(dropEl, TDS.DDInteraction.CSS.DRAG_SOURCE);
this._dragSource = null;
};
TDS.DDInteraction.prototype.getTarget = function() { return this._dropTarget; };
TDS.DDInteraction.prototype.hasTarget = function() { return (this._dropTarget != null); };
TDS.DDInteraction.prototype.setTarget = function(droppable)
{
this.clearTarget();
if (!(droppable instanceof TDS.Choice)) return;
var dropEl = droppable.getElement();
YUD.addClass(dropEl, TDS.DDInteraction.CSS.DRAG_OVER);
var dragSource = this.getSource();
if (dragSource) {
var proxy = dragSource.getProxy();
var proxyEl = proxy.getDragEl();
YUD.addClass(proxyEl, TDS.DDInteraction.CSS.DRAG_PROXY_OVER);
}
this.addMarker(droppable);
this._dropTarget = droppable;
};
TDS.DDInteraction.prototype.clearTarget = function()
{
if (this._dropTarget == null) return;
var dropEl = this._dropTarget.getElement();
YUD.removeClass(dropEl, TDS.DDInteraction.CSS.DRAG_OVER);
var dragSource = this.getSource();
if (dragSource) {
var proxy = dragSource.getProxy();
var proxyEl = proxy.getDragEl();
YUD.removeClass(proxyEl, TDS.DDInteraction.CSS.DRAG_PROXY_OVER);
}
this.removeMarker(this._dropTarget);
this._dropTarget = null;
};
TDS.DDInteraction.prototype.addMarker = function(draggable)
{
if (draggable == null) return;
if (draggable instanceof TDS.DragDrop)
{
var dropEl = draggable.getElement();
var dropDoc = Util.Dom.getOwnerDocument(dropEl);
var markerId = YUD.getAttribute(dropEl, 'id');
var markerEl = dropDoc.createElement('span');
YUD.setAttribute(markerEl, 'id', markerId + '-marker');
YUD.addClass(markerEl, TDS.DDInteraction.CSS.DROP_MARKER);
YUD.insertBefore(markerEl, dropEl);
}
};
TDS.DDInteraction.prototype.removeMarker = function(draggable)
{
if (draggable == null) return;
if (draggable instanceof TDS.DragDrop)
{
var dropEl = draggable.getElement();
var dropDoc = Util.Dom.getOwnerDocument(dropEl);
var markerId = YUD.getAttribute(dropEl, 'id');
var markerEl = dropDoc.getElementById(markerId + '-marker');
if (markerEl != null) Util.Dom.removeNode(markerEl);
}
};
TDS.DDInteraction.prototype.onStartDrag = function(dragSource)
{
this.setSource(dragSource);
var draggables = this.getDraggables();
for (var i = 0; i < draggables.length; i++)
{
var droppable = draggables[i];
if (droppable == dragSource) continue;
var dropElement = droppable.getElement();
YUD.addClass(dropElement, TDS.DDInteraction.CSS.DROP_TARGET);
}
var groups = this.getGroups();
for (var i = 0; i < groups.length; i++)
{
var group = groups[i];
if (group.isDroppable())
{
var groupEl = group.getElement();
YUD.addClass(groupEl, TDS.DDInteraction.CSS.DROP_TARGET);
if (groupEl.offsetHeight == 0 || groupEl.offsetWidth == 0) {
YUD.addClass(groupEl, TDS.DDInteraction.CSS.DROP_TARGET_COLLAPSED);
}
}
}
};
TDS.DDInteraction.prototype.onDrag = function(ev, dragSource)
{
var srcEl = dragSource.getElement();
var targetEl = TDS.DDInteraction.getElementInEvent(ev, this.getDraggables());
if (targetEl == null) {
targetEl = TDS.DDInteraction.getElementInEvent(ev, this.getGroups());
}
var proxy = dragSource.getProxy();
var proxyEl = proxy.getDragEl();
if (targetEl == proxyEl) return;
if (this._dropTarget && this._dropTarget.getElement() == targetEl) return;
this.clearTarget();
if (targetEl == null || targetEl == srcEl) return;
var targetIdent = TDS.Interaction.parseIdentifier(targetEl);
if (targetIdent)
{
if (YUD.hasClass(targetEl, TDS.DDInteraction.CSS.DRAGGABLE))
{
var droppable = this.getDraggable(targetIdent);
if (droppable) this.setTarget(droppable);
}
else if (YUD.hasClass(targetEl, TDS.DDInteraction.CSS.DRAG_GROUP))
{
var group = this.getGroup(targetIdent);
if (group && group.isDroppable()) this.setTarget(group);
}
}
};
TDS.DDInteraction.prototype.onEndDrag = function(dragSource)
{
var dropTarget = this.getTarget();
if (dropTarget != null)
{
this.onDrop(dragSource, dropTarget);
}
this.clearTarget();
this.clearSource();
var draggables = this.getDraggables();
for (var i = 0; i < draggables.length; i++)
{
var droppable = draggables[i];
if (droppable == dragSource) continue;
var dropElement = droppable.getElement();
YUD.removeClass(dropElement, TDS.DDInteraction.CSS.DROP_TARGET);
}
var groups = this.getGroups();
for (var i = 0; i < groups.length; i++)
{
var group = groups[i];
var groupEl = group.getElement();
YUD.removeClass(groupEl, TDS.DDInteraction.CSS.DROP_TARGET);
YUD.removeClass(groupEl, TDS.DDInteraction.CSS.DROP_TARGET_COLLAPSED);
}
};
TDS.DDInteraction.prototype.onDrop = function(dragSource, dropTarget)
{
if (dropTarget instanceof TDS.DragGroup)
{
dragSource.setGroup(dropTarget);
}
else if (dropTarget instanceof TDS.DragDrop)
{
dragSource.setGroup(dropTarget.getGroup());
}
var srcEl = dragSource.getElement();
var dropEl = dropTarget.getElement();
Util.Dom.removeNode(srcEl);
if (dropTarget instanceof TDS.DragGroup)
{
dropEl.appendChild(srcEl);
}
else if (dropTarget instanceof TDS.DragDrop)
{
YUD.insertBefore(srcEl, dropEl);
}
};
TDS.DDInteraction.prototype.validateResponse = function()
{
return (this._defaultResponse != this.getResponse());
};
TDS.DDInteraction.prototype.getResponseJson = function()
{
var groupsList = [];
var groups = this.getGroups();
Util.Array.sort(groups, TDS.Interaction.compareOrder);
Util.Array.each(groups, function(group)
{
var draggables = group.getChildren();
Util.Array.sort(draggables, TDS.Interaction.compareOrder);
var jsonGroup =
{
responses: [],
identifier: group.getIdentifier()
};
Util.Array.each(draggables, function(draggable)
{
jsonGroup.responses.push(draggable.getIdentifier());
});
groupsList.push(jsonGroup);
});
return groupsList;
};
TDS.DDInteraction.prototype.createResponseQTI = function (xmlDoc) {
var rootNode = xmlDoc.documentElement;
var groupsList = this.getResponseJson();
Util.Array.each(groupsList, function (groupJson) {
var responseNode = xmlDoc.createElement('response');
responseNode.setAttribute('id', groupJson.identifier);
rootNode.appendChild(responseNode);
Util.Array.each(groupJson.responses, function (response) {
var valueNode = xmlDoc.createElement('value');
valueNode.textContent = response;
responseNode.appendChild(valueNode);
});
});
};
TDS.DDInteraction.prototype.getResponseXml = function()
{
var responseXml = Util.Xml.createDocument('interaction');
var interactionEl = responseXml.documentElement;
interactionEl.setAttribute('identifier', this.getResponseIdentifier());
interactionEl.setAttribute('type', 'draggable');
var groupsList = this.getResponseJson();
Util.Array.each(groupsList, function(groupJson)
{
var groupNode = responseXml.createElement('group');
groupNode.setAttribute('identifier', groupJson.identifier);
interactionEl.appendChild(groupNode);
Util.Array.each(groupJson.responses, function(response)
{
var responseNode = responseXml.createElement('response');
responseNode.setAttribute('identifier', response);
groupNode.appendChild(responseNode);
});
});
return responseXml;
};
TDS.DDInteraction.prototype.getResponse = function()
{
var responseXml = this.getResponseXml();
return Util.Xml.serializeToString(responseXml);
};
TDS.DDInteraction.prototype.loadResponse = function (xml)
{
var interactionXml = Util.Xml.parseFromString(xml);
var interactionNode = interactionXml.documentElement;
var dd = this;
Util.Dom.queryTagsBatch('group', interactionNode, function (groupNode)
{
var groupIdentifier = groupNode.getAttribute('identifier');
var group = dd.getGroup(groupIdentifier);
Util.Dom.queryTagsBatch('response', groupNode, function (responseNode)
{
var responseIdentifier = responseNode.getAttribute('identifier');
var draggable = dd.getDraggable(responseIdentifier);
dd.onDrop(draggable, group);
});
});
};
TDS.DDInteraction.prototype.loadResponseQTI = function (xml) {
var responseNode;
if (typeof xml == 'string') {
var xmlDoc = Util.Xml.parseFromString(xml);
responseNode = xmlDoc.documentElement;
} else {
responseNode = xml;
}
var dd = this;
var groupId = responseNode.getAttribute('id');
var group = dd.getGroup(groupId);
if (group) {
Util.Dom.queryTagsBatch('value', responseNode, function (valueNode) {
var responseIdentifier = Util.Xml.getNodeText(valueNode);
var draggable = dd.getDraggable(responseIdentifier);
dd.onDrop(draggable, group);
});
}
};
TDS.DDInteraction.prototype.load = function (parentEl, opts) {
opts = opts || {};
opts.createGroups = opts.createGroups || true;
opts.moveDraggables = opts.moveDraggables || false;
parentEl = YUD.get(parentEl);
var interactionElements = YUD.getElementsByClassName(TDS.DDInteraction.CSS.INTERACTION, null, parentEl);
var dragElements = [];
var groupElements = [];
YUD.batch(interactionElements, function(interactionEl)
{
if (YUD.hasClass(interactionEl, TDS.DDInteraction.CSS.DRAGGABLE))
{
dragElements.push(interactionEl);
}
else if (YUD.hasClass(interactionEl, TDS.DDInteraction.CSS.DRAG_GROUP))
{
groupElements.push(interactionEl);
}
});
for (var i = 0; i < groupElements.length; i++)
{
var groupElement = groupElements[i];
var groupIdent = TDS.Interaction.parseIdentifier(groupElement);
var group = new TDS.DragGroup(this, groupIdent, groupElement);
this.addGroup(group);
}
for (var i = 0; i < dragElements.length; i++)
{
var dragEl = dragElements[i];
var responseIdent = TDS.Interaction.parseIdentifier(dragEl);
var draggable = new TDS.DragDrop(this, responseIdent, dragEl);
this.addDraggable(draggable);
var groups = this.getGroups();
for (var j = 0; j < groups.length; j++)
{
var group = groups[j];
var groupEl = group.getElement();
if (dragEl.parentNode == groupEl)
{
draggable.setGroup(group);
break;
}
}
}
if (opts.createGroups) {
this._createGroupContainers(opts);
}
this._defaultResponse = this.getResponse();
};
TDS.DDInteraction.prototype._createGroupContainers = function (opts)
{
var getGroupIdent = function(el) { return YUD.getAttribute(el, 'data-its-group'); };
var draggables = this.getDraggables();
var groupMapping = {};
for (var i = 0; i < draggables.length; i++)
{
var draggable = draggables[i];
if (draggable.getGroup()) continue;
var dragEl = draggable.getElement();
var groupIdent = getGroupIdent(dragEl);
if (groupIdent == null) continue;
var groupDraggables = groupMapping[groupIdent];
if (!groupDraggables)
{
groupDraggables = [];
groupMapping[groupIdent] = groupDraggables;
}
groupDraggables.push(draggable);
}
for (var groupIdent in groupMapping)
{
var groupDraggables = groupMapping[groupIdent];
var dragStartEl = groupDraggables[0].getElement();
var groupEl = dragStartEl.parentNode;
var groupChildren = YUD.getChildren(groupEl);
var groupUsingParent = Util.Array.every(groupChildren, function(child)
{
return (groupIdent == getGroupIdent(child));
});
if (!groupUsingParent)
{
var dragDoc = Util.Dom.getOwnerDocument(dragStartEl);
groupEl = dragDoc.createElement('span');
YUD.insertBefore(groupEl, dragStartEl);
}
groupEl.setAttribute('data-its-identifier', groupIdent);
groupEl.className = TDS.DDInteraction.CSS.INTERACTION + ' ' + TDS.DDInteraction.CSS.DRAG_GROUP;
var group = new TDS.DragGroup(this, groupIdent, groupEl);
this.addGroup(group);
for (var i = 0; i < groupDraggables.length; i++)
{
var groupDraggable = groupDraggables[i];
var dragEl = groupDraggable.getElement();
if (opts.moveDraggables || !groupUsingParent) {
console.log('DDI: Moving draggable into group: ', dragEl, group.getElement());
Util.Dom.removeNode(dragEl);
group.getElement().appendChild(dragEl);
}
groupDraggable.setGroup(group);
}
}
for (var i = 0; i < draggables.length; i++) {
var draggable = draggables[i];
var dragEl = draggable.getElement();
var dragText = Util.Dom.getTextContent(dragEl);
dragText = YAHOO.lang.trim(dragText);
if (Util.String.startsWith(dragText, '#') &&
Util.String.endsWith(dragText, '#')) {
dragText = dragText.substr(1);
dragText = dragText.substring(0, dragText.length - 1);
Util.Dom.setTextContent(dragEl, dragText);
var dragGroup = draggable.getGroup();
dragGroup.setDroppable(true);
draggable.lock();
}
}
};
TDS.DDInteraction.getElementInRegion = function(region, choices)
{
for(var i = 0, ii = choices.length; i < ii; i++)
{
var choice = choices[i];
var regions = choice.getRegions();
for (var j = 0, jj = regions.length; j < jj; j++)
{
if (regions[j].contains(region)) return choice.getElement();
}
}
return null;
};
TDS.DDInteraction.getElementInEvent = function(evt, choices)
{
var point = new YAHOO.util.Point(evt.clientX, evt.clientY);
return TDS.DDInteraction.getElementInRegion(point, choices);
};
TDS.DDInteraction.drawLine = function(x1, y1, x2, y2) {
if (y1 < y2) {
var pom = y1;
y1 = y2;
y2 = pom;
pom = x1;
x1 = x2;
x2 = pom;
}
var a = Math.abs(x1 - x2);
var b = Math.abs(y1 - y2);
var c;
var sx = (x1 + x2) / 2;
var sy = (y1 + y2) / 2;
var width = Math.sqrt(a * a + b * b);
var x = sx - width / 2;
var y = sy;
a = width / 2;
b = Math.sqrt(Math.abs(x1 - x) * Math.abs(x1 - x) + Math.abs(y1 - y) * Math.abs(y1 - y));
c = Math.abs(sx-x);
var cosb = (b * b - a * a - c * c) / (2 * a * c);
var rad = Math.acos(cosb);
var deg = (rad * 180) / Math.PI;
var htmlns = 'http://www.w3.org/1999/xhtml';
var div = document.createElementNS(htmlns, 'div');
div.setAttribute('style', 'border:1px solid red;width:' + width + 'px;height:0px;-moz-transform:rotate(' + deg + 'deg);-webkit-transform:rotate(' + deg + 'deg);position:absolute;top:' + y + 'px;left:' + x + 'px;');
document.body.appendChild(div);
}

// FILE: DragDrop.js (58121815) 3/7/2014 11:24:07 AM

TDS.DragDrop = function(parentInteraction, responseIdentifier, element)
{
this._parentInteraction = parentInteraction;
this._group = null;
this._proxy = null;
TDS.DragDrop.superclass.constructor.call(this, responseIdentifier, element);
};
YAHOO.extend(TDS.DragDrop, TDS.Choice);
TDS.DragDrop.prototype.getProxy = function() { return this._proxy; };
TDS.DragDrop.prototype.getGroup = function() { return this._group; };
TDS.DragDrop.prototype.setGroup = function(group) {
var dragEl = this.getElement();
dragEl.setAttribute('data-its-group', group.getIdentifier());
this._group = group;
};
TDS.DragDrop.prototype.init = function()
{
var element = this.getElement();
var elementWin = this.getWin();
var proxy = new elementWin.YAHOO.util.DDProxy(element);
this._proxy = proxy;
proxy.startDrag = Util.bind(this.onStartDrag, this);
proxy.onDrag = Util.bind(this.onDrag, this);
proxy.endDrag = Util.bind(this.onEndDrag, this);
};
TDS.DragDrop.prototype.onStartDrag = function(x, y)
{
var srcEl = this._proxy.getEl();
var proxyEl = this._proxy.getDragEl();
YUD.addClass(proxyEl, TDS.DDInteraction.CSS.DRAG_PROXY);
YUD.setStyle(proxyEl, 'width', '');
YUD.setStyle(proxyEl, 'height', '');
YUD.setStyle(proxyEl, 'border', '');
proxyEl.innerHTML = srcEl.innerHTML;
this._proxy.setDelta(0, 0);
this._parentInteraction.onStartDrag(this);
};
TDS.DragDrop.prototype.onDrag = function(ev)
{
this._parentInteraction.onDrag(ev, this);
};
TDS.DragDrop.prototype.onDragDrop = function(ev, id)
{
};
TDS.DragDrop.prototype.onEndDrag = function(ev)
{
var srcEl = this._proxy.getEl();
var proxyEl = this._proxy.getDragEl();
YUD.removeClass(proxyEl, TDS.DDInteraction.CSS.DRAG_PROXY);
this._parentInteraction.onEndDrag(this);
};
TDS.DragDrop.prototype.lock = function() {
var dragEl = this.getElement();
YUD.addClass(dragEl, TDS.DDInteraction.CSS.DRAG_LOCKED);
var proxy = this.getProxy();
proxy.lock();
};
TDS.DragDrop.prototype.unlock = function() {
var dragEl = this.getElement();
YUD.removeClass(dragEl, TDS.DDInteraction.CSS.DRAG_LOCKED);
var proxy = this.getProxy();
proxy.unlock();
};

// FILE: DragGroup.js (d5be9376) 3/7/2014 11:24:07 AM

TDS.DragGroup = function(parentInteraction, responseIdentifier, element)
{
this._parentInteraction = parentInteraction;
this._droppable = false;
TDS.DragGroup.superclass.constructor.call(this, responseIdentifier, element);
};
YAHOO.extend(TDS.DragGroup, TDS.Choice);
TDS.DragGroup.prototype.getChildren = function()
{
var groupDraggables = [];
var draggables = this._parentInteraction.getDraggables();
for (var i = 0; i < draggables.length; i++)
{
var draggable = draggables[i];
if (draggable.getGroup() == this)
{
groupDraggables.push(draggable);
}
}
return groupDraggables;
};
TDS.DragGroup.prototype.setDroppable = function(droppable) {
this._droppable = droppable;
};
TDS.DragGroup.prototype.isDroppable = function() {
if (this._droppable) return true;
var draggables = this.getChildren();
return (draggables.length == 0);
};
TDS.DragGroup.prototype.init = function()
{
var element = this.getElement();
YUE.on(element, 'mouseenter', this.onEnter, this, true);
YUE.on(element, 'mouseleave', this.onLeave, this, true);
};
TDS.DragGroup.prototype.onEnter = function(ev)
{
var dragSource = this._parentInteraction.getSource();
if (dragSource && dragSource != this && this.isDroppable())
{
this._parentInteraction.setTarget(this);
}
};
TDS.DragGroup.prototype.onLeave = function(ev)
{
var dragSource = this._parentInteraction.getSource();
if (dragSource)
{
var dragProxy = dragSource.getProxy();
if (dragProxy && ev.relatedTarget === dragProxy.getDragEl()) return;
this._parentInteraction.clearTarget();
}
};

// FILE: OrderInteraction.js (87826ab5) 5/2/2014 12:55:57 PM

(function(TDS) {
var Orientation = {
Vertical: 'vertical',
Horizontal: 'horizontal'
}
var CSS = {
INTERACTION: 'interaction',
ORDER_CHOICE: 'order-choice',
ORDER_GROUP: 'order-group',
ORDER_SOURCE: 'order-source',
ORDER_HOVER: 'order-hover',
ORDER_PROXY: 'order-proxy'
};
function OI(responseIdentifier, orientation) {
this._orientation = orientation || Orientation.Vertical;
this._groups = new Util.Structs.Map();
this._defaultResponse = null;
OI.superclass.constructor.call(this, responseIdentifier);
};
YAHOO.lang.extend(OI, TDS.Interaction);
OI.Orientation = Orientation;
OI.CSS = CSS;
OI.prototype.getOrientation = function () {
return this._orientation;
};
OI.prototype.createGroup = function(id, el) {
var group = new TDS.OrderGroup(this, id, el);
this._groups.set(id, group);
return group;
};
OI.prototype.removeGroup = function (id) {
return this._groups.remove(id);
};
OI.prototype.getGroup = function(id) {
return this._groups.get(id);
};
OI.prototype.getGroups = function (sort) {
var groups = this._groups.getValues();
if (sort) {
Util.Array.sort(groups, TDS.Interaction.compareOrder);
}
return groups;
};
OI.prototype.getGroupIdentifiers = function(sort) {
var groups = this._groups.getValues(sort);
return groups.map(function(group) {
return group.getIdentifier();
});
};
OI.prototype.load = function (parentEl) {
parentEl = YUD.get(parentEl);
$('.interaction.order-group', parentEl).each(function (groupIdx, groupEl) {
var groupId = TDS.Interaction.parseIdentifier(groupEl);
var group = this.createGroup(groupId, groupEl);
$('.interaction.order-choice', groupEl).each(function (choiceIdx, choiceEl) {
var choiceId = TDS.Interaction.parseIdentifier(choiceEl);
group.createChoice(choiceId, choiceEl);
}.bind(this));
}.bind(this));
this._defaultResponse = this.getResponse();
};
OI.prototype.validateResponse = function () {
return (this._defaultResponse != this.getResponse());
};
OI.prototype.getResponseJson = function () {
var groupsList = [];
var groups = this.getGroups(true);
groups.forEach(function (group) {
var jsonGroup = {
identifier: group.getIdentifier(),
responses: []
};
var choices = group.getChoices(true);
choices.forEach(function (choice) {
jsonGroup.responses.push(choice.getIdentifier());
});
groupsList.push(jsonGroup);
}, this);
return groupsList;
};
OI.prototype.createResponseQTI = function (xmlDoc) {
var rootNode = xmlDoc.documentElement;
var groupsList = this.getResponseJson();
Util.Array.each(groupsList, function (groupJson) {
var responseNode = xmlDoc.createElement('response');
responseNode.setAttribute('id', groupJson.identifier);
rootNode.appendChild(responseNode);
Util.Array.each(groupJson.responses, function (response) {
var valueNode = xmlDoc.createElement('value');
valueNode.textContent = response;
responseNode.appendChild(valueNode);
});
});
};
OI.prototype.getResponseXml = function () {
var responseXml = Util.Xml.createDocument('interaction');
var interactionEl = responseXml.documentElement;
interactionEl.setAttribute('identifier', this.getResponseIdentifier());
interactionEl.setAttribute('type', 'order');
var groupsList = this.getResponseJson();
Util.Array.each(groupsList, function (groupJson) {
var groupNode = responseXml.createElement('group');
groupNode.setAttribute('identifier', groupJson.identifier);
interactionEl.appendChild(groupNode);
Util.Array.each(groupJson.responses, function (response) {
var responseNode = responseXml.createElement('response');
responseNode.setAttribute('identifier', response);
groupNode.appendChild(responseNode);
});
});
return responseXml;
};
OI.prototype.getResponse = function () {
var responseXml = this.getResponseXml();
return Util.Xml.serializeToString(responseXml);
};
OI.prototype.loadResponseXml = function (xmlDoc) {
var interaction = this;
var xmlRoot = xmlDoc.documentElement;
Util.Dom.queryTagsBatch('group', xmlRoot, function (groupNode) {
var groupIdentifier = groupNode.getAttribute('identifier');
var group = interaction.getGroup(groupIdentifier);
if (group) {
var identifiers = [];
Util.Dom.queryTagsBatch('response', groupNode, function (responseNode) {
var responseIdentifier = responseNode.getAttribute('identifier');
identifiers.push(responseIdentifier);
});
group.sort(identifiers);
}
});
};
OI.prototype.loadResponse = function(xmlStr) {
var xmlDoc = Util.Xml.parseFromString(xmlStr);
this.loadResponseXml(xmlDoc);
}
OI.prototype.loadResponseQTI = function (xml) {
var responseNode;
if (typeof xml == 'string') {
var xmlDoc = Util.Xml.parseFromString(xml);
responseNode = xmlDoc.documentElement;
} else {
responseNode = xml;
}
var interaction = this;
var groupId = responseNode.getAttribute('id');
var group = interaction.getGroup(groupId);
if (group) {
var identifiers = [];
Util.Dom.queryTagsBatch('value', responseNode, function (valueNode) {
var responseIdentifier = Util.Xml.getNodeText(valueNode);
identifiers.push(responseIdentifier);
});
group.sort(identifiers);
}
};
TDS.OrderInteraction = OI;
})(TDS);

// FILE: OrderGroup.js (62721c9d) 7/23/2014 4:30:36 PM

(function(TDS) {
function OG(parentInteraction, responseIdentifier, element) {
this._parentInteraction = parentInteraction;
this._lookup = {};
this._list = [];
OG.superclass.constructor.call(this, responseIdentifier, element);
}
YAHOO.extend(OG, TDS.Choice);
OG.prototype.getParentInteraction = function() {
return this._parentInteraction;
};
OG.prototype.toggleLockDrag = function (identifier, lock) {
for (var i = 0; i < this._list.length; ++i) {
var choice = this._list[i];
if (choice._identifier != identifier) {
choice._preventDrag = lock;
}
}
};
OG.prototype.createChoice = function(id, el) {
var choice = new TDS.OrderChoice(this, id, el);
this._lookup[id] = choice;
this._list.push(choice);
return choice;
};
OG.prototype.getChoices = function(sort) {
var choices = this._list.concat();
if (sort) {
Util.Array.sort(choices, TDS.Interaction.compareOrder);
}
return choices;
};
OG.prototype.getIdentifiers = function(sort) {
var choices = this.getChoices(sort);
return choices.map(function(choice) {
return choice.getIdentifier();
});
};
OG.prototype.getChoice = function(id) {
return this._lookup[id];
};
OG.prototype.removeChoice = function(id) {
var choice = this.getChoice(id);
if (choice) {
delete this._lookup[id];
Util.Array.remove(this._list, choice);
}
};
OG.prototype._syncDom = function() {
var choices = this.getChoices();
var elements = choices.map(function(choice) {
return choice.getElement();
});
var groupEl = this.getElement();
$(groupEl).append(elements);
};
OG.prototype.sort = function(identifiers) {
Util.Array.sort(this._list, function(recA, recB) {
var idxA = identifiers.indexOf(recA.getIdentifier());
var idxB = identifiers.indexOf(recB.getIdentifier());
return idxA > idxB ? 1 : idxA < idxB ? -1 : 0;
});
this._syncDom();
};
OG.prototype.dispose = function() {
this._parentInteraction = null;
this.getChoices().forEach(function(choice) {
choice.dispose();
});
};
TDS.OrderGroup = OG;
})(TDS);

// FILE: OrderChoice.js (867b99b2) 7/23/2014 4:30:36 PM

(function(TDS) {
var OI = TDS.OrderInteraction;
var Orientation = OI.Orientation;
var CSS = OI.CSS;
function OC(parentGroup, responseIdentifier, element) {
this._parentGroup = parentGroup;
this._parentInteraction = parentGroup.getParentInteraction();
this._proxy = null;
this._dragging = false;
this._dragBack = false;
this._lastX = 0;
this._lastY = 0;
this._preventDrag = false;
OC.superclass.constructor.call(this, responseIdentifier, element);
};
YAHOO.extend(OC, TDS.Choice);
OC.prototype.getGroup = function() {
return this._parentGroup;
};
OC.prototype.getParentInteraction = function () {
return this._parentInteraction;
};
OC.prototype.getProxy = function() {
return this._proxy;
};
OC.prototype.isDragging = function () {
return this._dragging;
};
OC.prototype.init = function() {
var element = this.getElement();
var elementWin = element.ownerDocument.defaultView;
var proxy = new elementWin.YAHOO.util.DDProxy(element);
this._proxy = proxy;
if (this._parentInteraction.getOrientation() == Orientation.Vertical) {
proxy.setXConstraint(0, 0);
} else {
proxy.setYConstraint(0, 0);
}
proxy.startDrag = this.onStartDrag.bind(this);
proxy.onDrag = this.onDrag.bind(this);
proxy.onDragOver = this.onDragOver.bind(this);
proxy.onDragDrop = this.onDragDrop.bind(this);
proxy.endDrag = this.onEndDrag.bind(this);
proxy.b4MouseDown = this.onBeforeMouseDown.bind(this);
};
OC.prototype.refreshCache = function () {
var element = this.getElement();
var elementWin = element.ownerDocument.defaultView;
elementWin.YAHOO.util.DragDropMgr.refreshCache();
};
OC.prototype.onBeforeMouseDown = function(ev) {
if (this._preventDrag) {
return false;
}
};
OC.prototype.onStartDrag = function (x, y) {
this._dragging = true;
this._parentGroup.toggleLockDrag(this._identifier, true);
var $srcEl = $(this._proxy.getEl());
var $proxyEl = $(this._proxy.getDragEl());
$srcEl.addClass(CSS.ORDER_SOURCE);
$proxyEl.addClass(CSS.ORDER_PROXY);
$proxyEl.css('width', '');
$proxyEl.css('height', '');
$proxyEl.css('border', '');
$proxyEl.html($srcEl.html());
this._proxy.setDelta(0, ($proxyEl.height() / 2));
};
OC.prototype.onDrag = function(ev) {
if (this._parentInteraction.getOrientation() == Orientation.Horizontal) {
var x = YUE.getPageX(ev);
if (x < this._lastX) {
this._dragBack = true;
} else if (x > this._lastX) {
this._dragBack = false;
}
this._lastX = x;
} else {
var y = YUE.getPageY(ev);
if (y < this._lastY) {
this._dragBack = true;
} else if (y > this._lastY) {
this._dragBack = false;
}
this._lastY = y;
}
};
OC.prototype.onDragOver = function (ev, id) {
var $src = $(this.getElement());
var $dest = $(YUD.get(id));
if (!$src.parent().is($dest.parent())) return;
if (this._dragBack) {
$src.insertBefore($dest);
} else {
$src.insertAfter($dest);
}
this.refreshCache();
};
OC.prototype.onDragDrop = function(ev, id) {
};
OC.prototype.onEndDrag = function() {
this._dragging = false;
this._parentGroup.toggleLockDrag(this._identifier, false);
var $srcEl = $(this._proxy.getEl());
var $proxyEl = $(this._proxy.getDragEl());
$srcEl.removeClass(CSS.ORDER_SOURCE);
$proxyEl.removeClass(CSS.ORDER_PROXY);
};
OC.prototype.dispose = function() {
this._parentGroup = null;
this._parentInteraction = null;
this._proxy = null;
};
TDS.OrderChoice = OC;
})(TDS);

// FILE: module_interaction.js (77279990) 5/2/2014 12:55:57 PM

(function() {
function responseGetterITS(item, response) {
var isValid = true;
var xml = [];
xml.push('<interactions>');
Util.Array.each(item.interactions, function(interaction) {
xml.push(interaction.getResponse());
if (!interaction.validateResponse()) {
isValid = false;
}
});
xml.push('</interactions>');
response.value = xml.join('');
response.isValid = isValid;
response.isSelected = isValid;
}
function responseGetterQTI(item, response) {
var isValid = true;
var xmlDoc = Util.Xml.parseFromString('<itemResponse></itemResponse>');
Util.Array.each(item.interactions, function (interaction) {
interaction.createResponseQTI(xmlDoc);
if (!interaction.validateResponse()) {
isValid = false;
}
});
response.value = Util.Xml.serializeToString(xmlDoc);
response.isValid = isValid;
response.isSelected = isValid;
}
function responseSetterITS(item, value) {
var responseXml = Util.Xml.parseFromString(value);
var interactionsNode = responseXml.documentElement;
Util.Dom.queryTagsBatch('interaction', interactionsNode, function(interactionNode) {
var interactionIdentifier = interactionNode.getAttribute('identifier');
var interactionMatch = Util.Array.find(item.interactions, function(interaction) {
return (interactionIdentifier == interaction.getResponseIdentifier());
});
if (interactionMatch) {
var interactionXml = Util.Xml.serializeToString(interactionNode);
interactionMatch.loadResponse(interactionXml);
}
});
}
function responseSetterQTI(item, value) {
var responseXml = Util.Xml.parseFromString(value);
var rootNode = responseXml.documentElement;
Util.Dom.batchElementsByTagName('response', rootNode, function(responseNode) {
var responseId = responseNode.getAttribute('id');
var interactionMatch = Util.Array.find(item.interactions, function (interaction) {
var groups = interaction.getGroups();
return Util.Array.some(groups, function (group) {
var groupId = group.toString();
return (groupId && groupId == responseId);
});
});
if (interactionMatch) {
interactionMatch.loadResponseQTI(responseNode);
}
});
}
function responseGetter(item, response) {
if (item.format.toUpperCase() == 'HT') {
responseGetterITS(item, response);
} else {
responseGetterQTI(item, response);
}
}
function responseSetter(item, value) {
if (item.format.toUpperCase() == 'HT') {
responseSetterITS(item, value);
} else {
responseSetterQTI(item, value);
}
}
var loadQtiInteraction = function (page, item) {
var itemStem = item.getStemElement();
var idPostfix = '-interaction-' + item.getID();
item.interactions = [];
var qtiXml = (item.qti) ? item.qti.xml : null;
if (qtiXml == null) {
return;
}
var hti = new HottextItem.Parse(item.position);
hti.createFromXml(qtiXml, itemStem);
var selectInteraction = new TDS.SelectInteraction('select' + idPostfix);
selectInteraction.load(itemStem);
var componentArray = selectInteraction.getSelectElements();
for (var i = 0; i < componentArray.length; ++i) {
item.addComponent(componentArray[i]);
}
if (selectInteraction.getChoices().length > 0) {
item.interactions.push(selectInteraction);
}
if (item.value != null) {
responseSetter(item, item.value);
}
};
function mapSelectConstraints(selectInteraction, item) {
var constraints = Util.Array.find(item.specs, function (spec) {
return spec.nodeName == 'constraints';
});
if (constraints == null) return;
Util.Dom.queryTagsBatch('cardinality', constraints, function(el) {
var id = Util.Xml.getAttribute(el, 'target');
var min = Util.Xml.getAttributeInt(el, 'min');
var max = Util.Xml.getAttributeInt(el, 'max');
selectInteraction.setCardinality(id, min, max);
});
}
function loadInteraction(page, item) {
var itemContainer = item.getElement();
item.interactions = [];
var id_postfix = '-interaction-' + item.getID();
var ddInteraction = new TDS.DDInteraction('dd' + id_postfix);
ddInteraction.load(itemContainer);
var draggables = ddInteraction.getDraggables();
if (draggables.length > 0) {
item.interactions.push(ddInteraction);
var pageElement = page.getElement();
var scrollContainer = Util.Dom.getElementByClassName('theQuestions', 'div', pageElement);
if (scrollContainer) {
for (var i = 0; i < draggables.length; i++) {
var ddProxy = draggables[i].getProxy();
ddProxy.setScrollDirection(true, true);
ddProxy.setParentScroll(scrollContainer);
}
}
}
var selectInteraction = new TDS.SelectInteraction('select' + id_postfix);
selectInteraction.load(itemContainer);
mapSelectConstraints(selectInteraction, item);
if (selectInteraction.getChoices().length > 0) {
item.interactions.push(selectInteraction);
}
var orderInteraction = new TDS.OrderInteraction('order' + id_postfix);
orderInteraction.load(itemContainer);
if (orderInteraction.getGroups().length > 0) {
item.interactions.push(orderInteraction);
}
if (item.value != null) {
responseSetter(item, item.value);
}
var componentArray = selectInteraction.getSelectElements();
for (var i = 0; i < componentArray.length; ++i) {
item.addComponent(componentArray[i]);
}
}
ContentManager.onItemEvent('available', function(page, item) {
if (item.isResponseType('HotText')) {
loadInteraction(page, item);
}
if (item.isResponseType('QTI-Hottext')) {
loadQtiInteraction(page, item);
}
});
ContentManager.onItemEvent('keyevent', function (page, item, evt) {
if (!item.interactions) return;
if (evt.type != 'keydown') return;
if (evt.ctrlKey || evt.altKey) return;
if ((evt.key == 'Enter') && (
(item.isResponseType('HotText')) ||
(item.isResponseType('QTI-Hottext'))
)) {
if (ContentManager.isReadOnly()) return;
evt.stopPropagation();
var activeComp = item.getActiveComponent();
if (activeComp && typeof activeComp.click == "function")
activeComp.click();
}
});
ContentManager.registerResponseHandler('HotText', responseGetter, responseSetter);
ContentManager.registerResponseHandler('QTI-HotText', responseGetter, responseSetter);
})();

// FILE: hottext.parse.js (fe9f90ff) 3/7/2014 11:24:07 AM

HottextItem = (typeof (HottextItem) == "undefined") ? {} : HottextItem;
HottextItem.Parse = function(id) {
this.mid = id;
this._fixXmlTasks={};
};
HottextItem.Parse.prototype.createFromXml = function(xmlString, container) {
var xmlDoc = Util.Xml.parseFromString(xmlString);
this.parseItemBody(xmlDoc);
var xmlNodes = xmlDoc.documentElement;
this.parseHottextInteractions(xmlDoc, xmlNodes);
this.fixXml(xmlDoc, xmlNodes);
var aDiv = document.createElement('div');
aDiv.innerHTML = Util.Xml.serializeToString(xmlNodes);
container.innerHTML = aDiv.childNodes[0].innerHTML;
};
HottextItem.Parse.prototype.parseItemBody = function(doc) {
var itemBody = doc.getElementsByTagName('itemBody');
if (itemBody && itemBody.length) {
if (itemBody && itemBody.length == 1) {
var itemElement = itemBody[0];
var itemDiv = doc.createElement('div');
var test = itemElement.parentNode.nodeName;
YUD.setAttribute(itemDiv, 'id', test);
var itemChildren = YUD.getChildren(itemElement);
for (var j = 0; j < itemChildren.length; ++j) {
var childNode = itemChildren[j];
var childClone = childNode.cloneNode(true);
itemDiv.appendChild(childClone);
}
itemElement.parentNode.replaceChild(itemDiv, itemElement);
}
}
};
HottextItem.Parse.prototype.parseHottextInteractions = function(doc, xmlElements) {
var interactionElements = xmlElements.getElementsByTagName('hottextInteraction');
if (interactionElements && interactionElements.length) {
for (var i = 0; i <= interactionElements.length; ++i) {
i = 0;
var interactionElement = interactionElements[i];
var interactionDiv = doc.createElement('div');
var responseIdentifier = YUD.getAttribute(interactionElement, 'responseIdentifier');
var divId = this.createDivId(interactionDiv.nodeName, 'ht-' + this.mid + '-' + responseIdentifier);
YUD.setAttribute(interactionDiv, 'id', divId);
var interactionChildren = YUD.getChildren(interactionElement);
for (var j = 0; j < interactionChildren.length; ++j) {
var childNode = interactionChildren[j];
var childClone = childNode.cloneNode(true);
interactionDiv.appendChild(childClone);
}
interactionElement.parentNode.replaceChild(interactionDiv, interactionElement);
}
}
this.parseHottexts(doc, xmlElements);
};
HottextItem.Parse.prototype.createDivId = function (nodeType, identifier) {
return this.mid + '-' + nodeType + '-' + identifier;
};
HottextItem.Parse.prototype.parseHottexts = function(doc, xmlElements) {
var hottextElements = xmlElements.getElementsByTagName('hottext');
if (hottextElements && hottextElements.length) {
for (var i = 0; i <= hottextElements.length; ++i) {
i = 0;
var hottextElement = hottextElements[i];
var hottextSpan = doc.createElement('span');
YUD.addClass(hottextSpan, 'interaction selectable');
for (var j = 0; j < hottextElement.childNodes.length; ++j) {
var childNode = hottextElement.childNodes[j];
var childClone = childNode.cloneNode(true);
hottextSpan.appendChild(childClone);
}
hottextElement.parentNode.replaceChild(hottextSpan, hottextElement);
}
}
};
HottextItem.Parse.prototype.fixXml = function(xmlDoc, parentNode) {
this._fixXmlTasks = [];
this.fixXmlRecurse(parentNode);
for (var i = 0; i < this._fixXmlTasks.length; ++i) {
var parent = this._fixXmlTasks[i].parent;
var child = this._fixXmlTasks[i].child;
parent.removeChild(child);
}
};
HottextItem.Parse.prototype.fixXmlRecurse = function(parentNode) {
for (var i = 0; i < parentNode.childNodes.length; ++i) {
var childNode = parentNode.childNodes[i];
if (childNode.nodeName == 'hottextInteraction') {
var obj = {
parent: parentNode,
child: childNode
};
this._fixXmlTasks.push(obj);
} else {
this.fixXmlRecurse(childNode);
}
}
};

// FILE: SetSimNameSpace.js (d502f2e2) 3/7/2014 11:24:14 AM

if (typeof Simulator == 'undefined' || !Simulator) {
var Simulator = {};
}
Simulator.nameSpace = function() {
var nsObj = null, parts;
for (var i = 0; i < arguments.length; i++) {
parts = ('' + arguments[i]).split('.');
nsObj = Simulator;
for (var j = (parts[0] === 'Simulator') ? 1 : 0; j < parts.length; j++) {
nsObj[parts[j]] = nsObj[parts[j]] || {};
nsObj = nsObj[parts[j]];
}
}
console.log('Set up ' + arguments[0] + '.' + arguments[1] + ' namespace');
return nsObj;
};
Simulator.Animation = Simulator.nameSpace('Simulator', 'Animation');
Simulator.Control = Simulator.nameSpace('Simulator', 'Control');
Simulator.Display = Simulator.nameSpace('Simulator', 'Display');
Simulator.Input = Simulator.nameSpace('Simulator', 'Input');
Simulator.Utils = Simulator.nameSpace('Simulator', 'Utils');

// FILE: swfobject.js (25b1dbca) 3/7/2014 11:24:14 AM

var swfobject = function () {
var UNDEF = "undefined",
OBJECT = "object",
SHOCKWAVE_FLASH = "Shockwave Flash",
SHOCKWAVE_FLASH_AX = "ShockwaveFlash.ShockwaveFlash",
FLASH_MIME_TYPE = "application/x-shockwave-flash",
EXPRESS_INSTALL_ID = "SWFObjectExprInst",
ON_READY_STATE_CHANGE = "onreadystatechange",
win = window,
doc = document,
nav = navigator,
plugin = false,
domLoadFnArr = [main],
regObjArr = [],
objIdArr = [],
listenersArr = [],
storedAltContent,
storedAltContentId,
storedCallbackFn,
storedCallbackObj,
isDomLoaded = false,
isExpressInstallActive = false,
dynamicStylesheet,
dynamicStylesheetMedia,
autoHideShow = true,
ua = function () {
var w3cdom = typeof doc.getElementById != UNDEF && typeof doc.getElementsByTagName != UNDEF && typeof doc.createElement != UNDEF,
u = nav.userAgent.toLowerCase(),
p = nav.platform.toLowerCase(),
windows = p ? /win/.test(p) : /win/.test(u),
mac = p ? /mac/.test(p) : /mac/.test(u),
webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false,
ie = ! +"\v1",
playerVersion = [0, 0, 0],
d = null;
if (typeof nav.plugins != UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] == OBJECT) {
d = nav.plugins[SHOCKWAVE_FLASH].description;
if (d && !(typeof nav.mimeTypes != UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && !nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) {
plugin = true;
ie = false;
d = d.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
playerVersion[0] = parseInt(d.replace(/^(.*)\..*$/, "$1"), 10);
playerVersion[1] = parseInt(d.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
playerVersion[2] = /[a-zA-Z]/.test(d) ? parseInt(d.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0;
}
}
else if (typeof win.ActiveXObject != UNDEF) {
try {
var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);
if (a) {
d = a.GetVariable("$version");
if (d) {
ie = true;
d = d.split(" ")[1].split(",");
playerVersion = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
}
}
}
catch (e) { }
}
return { w3: w3cdom, pv: playerVersion, wk: webkit, ie: ie, win: windows, mac: mac };
} (),
onDomLoad = function () {
if (!ua.w3) { return; }
if ((typeof doc.readyState != UNDEF && doc.readyState == "complete") || (typeof doc.readyState == UNDEF && (doc.getElementsByTagName("body")[0] || doc.body))) {
callDomLoadFunctions();
}
if (!isDomLoaded) {
if (typeof doc.addEventListener != UNDEF) {
doc.addEventListener("DOMContentLoaded", callDomLoadFunctions, false);
}
if (ua.ie && ua.win) {
doc.attachEvent(ON_READY_STATE_CHANGE, function () {
if (doc.readyState == "complete") {
doc.detachEvent(ON_READY_STATE_CHANGE, arguments.callee);
callDomLoadFunctions();
}
});
if (win == top) {
(function () {
if (isDomLoaded) { return; }
try {
doc.documentElement.doScroll("left");
}
catch (e) {
setTimeout(arguments.callee, 0);
return;
}
callDomLoadFunctions();
})();
}
}
if (ua.wk) {
(function () {
if (isDomLoaded) { return; }
if (!/loaded|complete/.test(doc.readyState)) {
setTimeout(arguments.callee, 0);
return;
}
callDomLoadFunctions();
})();
}
addLoadEvent(callDomLoadFunctions);
}
} ();
function callDomLoadFunctions() {
if (isDomLoaded) { return; }
try {
var t = doc.getElementsByTagName("body")[0].appendChild(createElement("span"));
t.parentNode.removeChild(t);
}
catch (e) { return; }
isDomLoaded = true;
var dl = domLoadFnArr.length;
for (var i = 0; i < dl; i++) {
domLoadFnArr[i]();
}
}
function addDomLoadEvent(fn) {
if (isDomLoaded) {
fn();
}
else {
domLoadFnArr[domLoadFnArr.length] = fn;
}
}
function addLoadEvent(fn) {
if (typeof win.addEventListener != UNDEF) {
win.addEventListener("load", fn, false);
}
else if (typeof doc.addEventListener != UNDEF) {
doc.addEventListener("load", fn, false);
}
else if (typeof win.attachEvent != UNDEF) {
addListener(win, "onload", fn);
}
else if (typeof win.onload == "function") {
var fnOld = win.onload;
win.onload = function () {
fnOld();
fn();
};
}
else {
win.onload = fn;
}
}
function main() {
if (plugin) {
testPlayerVersion();
}
else {
matchVersions();
}
}
function testPlayerVersion() {
var b = doc.getElementsByTagName("body")[0];
var o = createElement(OBJECT);
o.setAttribute("type", FLASH_MIME_TYPE);
var t = b.appendChild(o);
if (t) {
var counter = 0;
(function () {
if (typeof t.GetVariable != UNDEF) {
var d = t.GetVariable("$version");
if (d) {
d = d.split(" ")[1].split(",");
ua.pv = [parseInt(d[0], 10), parseInt(d[1], 10), parseInt(d[2], 10)];
}
}
else if (counter < 10) {
counter++;
setTimeout(arguments.callee, 10);
return;
}
b.removeChild(o);
t = null;
matchVersions();
})();
}
else {
matchVersions();
}
}
function matchVersions() {
var rl = regObjArr.length;
if (rl > 0) {
for (var i = 0; i < rl; i++) {
var id = regObjArr[i].id;
var cb = regObjArr[i].callbackFn;
var cbObj = { success: false, id: id };
if (ua.pv[0] > 0) {
var obj = getElementById(id);
if (obj) {
if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) {
setVisibility(id, true);
if (cb) {
cbObj.success = true;
cbObj.ref = getObjectById(id);
cb(cbObj);
}
}
else if (regObjArr[i].expressInstall && canExpressInstall()) {
var att = {};
att.data = regObjArr[i].expressInstall;
att.width = obj.getAttribute("width") || "0";
att.height = obj.getAttribute("height") || "0";
if (obj.getAttribute("class")) { att.styleclass = obj.getAttribute("class"); }
if (obj.getAttribute("align")) { att.align = obj.getAttribute("align"); }
var par = {};
var p = obj.getElementsByTagName("param");
var pl = p.length;
for (var j = 0; j < pl; j++) {
if (p[j].getAttribute("name").toLowerCase() != "movie") {
par[p[j].getAttribute("name")] = p[j].getAttribute("value");
}
}
showExpressInstall(att, par, id, cb);
}
else {
displayAltContent(obj);
if (cb) { cb(cbObj); }
}
}
}
else {
setVisibility(id, true);
if (cb) {
var o = getObjectById(id);
if (o && typeof o.SetVariable != UNDEF) {
cbObj.success = true;
cbObj.ref = o;
}
cb(cbObj);
}
}
}
}
}
function getObjectById(objectIdStr) {
var r = null;
var o = getElementById(objectIdStr);
if (o && o.nodeName == "OBJECT") {
if (typeof o.SetVariable != UNDEF) {
r = o;
}
else {
var n = o.getElementsByTagName(OBJECT)[0];
if (n) {
r = n;
}
}
}
return r;
}
function canExpressInstall() {
return !isExpressInstallActive && hasPlayerVersion("6.0.65") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);
}
function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {
isExpressInstallActive = true;
storedCallbackFn = callbackFn || null;
storedCallbackObj = { success: false, id: replaceElemIdStr };
var obj = getElementById(replaceElemIdStr);
if (obj) {
if (obj.nodeName == "OBJECT") {
storedAltContent = abstractAltContent(obj);
storedAltContentId = null;
}
else {
storedAltContent = obj;
storedAltContentId = replaceElemIdStr;
}
att.id = EXPRESS_INSTALL_ID;
if (typeof att.width == UNDEF || (!/%$/.test(att.width) && parseInt(att.width, 10) < 310)) { att.width = "310"; }
if (typeof att.height == UNDEF || (!/%$/.test(att.height) && parseInt(att.height, 10) < 137)) { att.height = "137"; }
doc.title = doc.title.slice(0, 47) + " - Flash Player Installation";
var pt = ua.ie && ua.win ? "ActiveX" : "PlugIn",
fv = "MMredirectURL=" + win.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + pt + "&MMdoctitle=" + doc.title;
if (typeof par.flashvars != UNDEF) {
par.flashvars += "&" + fv;
}
else {
par.flashvars = fv;
}
if (ua.ie && ua.win && obj.readyState != 4) {
var newObj = createElement("div");
replaceElemIdStr += "SWFObjectNew";
newObj.setAttribute("id", replaceElemIdStr);
obj.parentNode.insertBefore(newObj, obj);
obj.style.display = "none";
(function () {
if (obj.readyState == 4) {
obj.parentNode.removeChild(obj);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
createSWF(att, par, replaceElemIdStr);
}
}
function displayAltContent(obj) {
if (ua.ie && ua.win && obj.readyState != 4) {
var el = createElement("div");
obj.parentNode.insertBefore(el, obj);
el.parentNode.replaceChild(abstractAltContent(obj), el);
obj.style.display = "none";
(function () {
if (obj.readyState == 4) {
obj.parentNode.removeChild(obj);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
else {
obj.parentNode.replaceChild(abstractAltContent(obj), obj);
}
}
function abstractAltContent(obj) {
var ac = createElement("div");
if (ua.win && ua.ie) {
ac.innerHTML = obj.innerHTML;
}
else {
var nestedObj = obj.getElementsByTagName(OBJECT)[0];
if (nestedObj) {
var c = nestedObj.childNodes;
if (c) {
var cl = c.length;
for (var i = 0; i < cl; i++) {
if (!(c[i].nodeType == 1 && c[i].nodeName == "PARAM") && !(c[i].nodeType == 8)) {
ac.appendChild(c[i].cloneNode(true));
}
}
}
}
}
return ac;
}
function createSWF(attObj, parObj, id) {
var r, el = getElementById(id);
if (ua.wk && ua.wk < 312) { return r; }
if (el) {
if (typeof attObj.id == UNDEF) {
attObj.id = id;
}
if (ua.ie && ua.win) {
var att = "";
for (var i in attObj) {
if (attObj[i] != Object.prototype[i]) {
if (i.toLowerCase() == "data") {
parObj.movie = attObj[i];
}
else if (i.toLowerCase() == "styleclass") {
att += ' class="' + attObj[i] + '"';
}
else if (i.toLowerCase() != "classid") {
att += ' ' + i + '="' + attObj[i] + '"';
}
}
}
var par = "";
for (var j in parObj) {
if (parObj[j] != Object.prototype[j]) {
par += '<param name="' + j + '" value="' + parObj[j] + '" />';
}
}
el.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + att + '>' + par + '</object>';
objIdArr[objIdArr.length] = attObj.id;
r = getElementById(attObj.id);
}
else {
var o = createElement(OBJECT);
o.setAttribute("type", FLASH_MIME_TYPE);
for (var m in attObj) {
if (attObj[m] != Object.prototype[m]) {
if (m.toLowerCase() == "styleclass") {
o.setAttribute("class", attObj[m]);
}
else if (m.toLowerCase() != "classid") {
o.setAttribute(m, attObj[m]);
}
}
}
for (var n in parObj) {
if (parObj[n] != Object.prototype[n] && n.toLowerCase() != "movie") {
createObjParam(o, n, parObj[n]);
}
}
el.parentNode.replaceChild(o, el);
r = o;
}
}
return r;
}
function createObjParam(el, pName, pValue) {
var p = createElement("param");
p.setAttribute("name", pName);
p.setAttribute("value", pValue);
el.appendChild(p);
}
function removeSWF(id) {
var obj = getElementById(id);
if (obj && obj.nodeName == "OBJECT") {
if (ua.ie && ua.win) {
obj.style.display = "none";
(function () {
if (obj.readyState == 4) {
removeObjectInIE(id);
}
else {
setTimeout(arguments.callee, 10);
}
})();
}
else {
obj.parentNode.removeChild(obj);
}
}
}
function removeObjectInIE(id) {
var obj = getElementById(id);
if (obj) {
for (var i in obj) {
if (typeof obj[i] == "function") {
obj[i] = null;
}
}
obj.parentNode.removeChild(obj);
}
}
function getElementById(id) {
var el = null;
try {
el = doc.getElementById(id);
}
catch (e) { }
return el;
}
function createElement(el) {
return doc.createElement(el);
}
function addListener(target, eventType, fn) {
target.attachEvent(eventType, fn);
listenersArr[listenersArr.length] = [target, eventType, fn];
}
function hasPlayerVersion(rv) {
var pv = ua.pv, v = rv.split(".");
v[0] = parseInt(v[0], 10);
v[1] = parseInt(v[1], 10) || 0;
v[2] = parseInt(v[2], 10) || 0;
return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;
}
function createCSS(sel, decl, media, newStyle) {
if (ua.ie && ua.mac) { return; }
var h = doc.getElementsByTagName("head")[0];
if (!h) { return; }
var m = (media && typeof media == "string") ? media : "screen";
if (newStyle) {
dynamicStylesheet = null;
dynamicStylesheetMedia = null;
}
if (!dynamicStylesheet || dynamicStylesheetMedia != m) {
var s = createElement("style");
s.setAttribute("type", "text/css");
s.setAttribute("media", m);
dynamicStylesheet = h.appendChild(s);
if (ua.ie && ua.win && typeof doc.styleSheets != UNDEF && doc.styleSheets.length > 0) {
dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];
}
dynamicStylesheetMedia = m;
}
if (ua.ie && ua.win) {
if (dynamicStylesheet && typeof dynamicStylesheet.addRule == OBJECT) {
dynamicStylesheet.addRule(sel, decl);
}
}
else {
if (dynamicStylesheet && typeof doc.createTextNode != UNDEF) {
dynamicStylesheet.appendChild(doc.createTextNode(sel + " {" + decl + "}"));
}
}
}
function setVisibility(id, isVisible) {
if (!autoHideShow) { return; }
var v = isVisible ? "visible" : "hidden";
if (isDomLoaded && getElementById(id)) {
getElementById(id).style.visibility = v;
}
else {
createCSS("#" + id, "visibility:" + v);
}
}
function urlEncodeIfNecessary(s) {
var regex = /[\\\"<>\.;]/;
var hasBadChars = regex.exec(s) != null;
return hasBadChars && typeof encodeURIComponent != UNDEF ? encodeURIComponent(s) : s;
}
var cleanup = function () {
if (ua.ie && ua.win) {
window.attachEvent("onunload", function () {
var ll = listenersArr.length;
for (var i = 0; i < ll; i++) {
listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);
}
var il = objIdArr.length;
for (var j = 0; j < il; j++) {
removeSWF(objIdArr[j]);
}
for (var k in ua) {
ua[k] = null;
}
ua = null;
for (var l in swfobject) {
swfobject[l] = null;
}
swfobject = null;
});
}
} ();
return {
registerObject: function (objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {
if (ua.w3 && objectIdStr && swfVersionStr) {
var regObj = {};
regObj.id = objectIdStr;
regObj.swfVersion = swfVersionStr;
regObj.expressInstall = xiSwfUrlStr;
regObj.callbackFn = callbackFn;
regObjArr[regObjArr.length] = regObj;
setVisibility(objectIdStr, false);
}
else if (callbackFn) {
callbackFn({ success: false, id: objectIdStr });
}
},
getObjectById: function (objectIdStr) {
if (ua.w3) {
return getObjectById(objectIdStr);
}
},
embedSWF: function (swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr,
flashvarsObj, parObj, attObj, simDocument, callbackFn) {
if (simDocument != null) doc = simDocument;
var callbackObj = { success: false, id: replaceElemIdStr };
if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {
setVisibility(replaceElemIdStr, false);
addDomLoadEvent(function () {
widthStr += "";
heightStr += "";
var att = {};
if (attObj && typeof attObj === OBJECT) {
for (var i in attObj) {
att[i] = attObj[i];
}
}
att.data = swfUrlStr;
att.width = widthStr;
att.height = heightStr;
var par = {};
if (parObj && typeof parObj === OBJECT) {
for (var j in parObj) {
par[j] = parObj[j];
}
}
if (flashvarsObj && typeof flashvarsObj === OBJECT) {
for (var k in flashvarsObj) {
if (typeof par.flashvars != UNDEF) {
par.flashvars += "&" + k + "=" + flashvarsObj[k];
}
else {
par.flashvars = k + "=" + flashvarsObj[k];
}
}
}
if (hasPlayerVersion(swfVersionStr)) {
var obj = createSWF(att, par, replaceElemIdStr);
if (att.id == replaceElemIdStr) {
setVisibility(replaceElemIdStr, true);
}
callbackObj.success = true;
callbackObj.ref = obj;
}
else if (xiSwfUrlStr && canExpressInstall()) {
att.data = xiSwfUrlStr;
showExpressInstall(att, par, replaceElemIdStr, callbackFn);
return;
}
else {
setVisibility(replaceElemIdStr, true);
}
if (callbackFn) { callbackFn(callbackObj); }
});
}
else if (callbackFn) { callbackFn(callbackObj); }
},
switchOffAutoHideShow: function () {
autoHideShow = false;
},
ua: ua,
getFlashPlayerVersion: function () {
return { major: ua.pv[0], minor: ua.pv[1], release: ua.pv[2] };
},
hasFlashPlayerVersion: hasPlayerVersion,
createSWF: function (attObj, parObj, replaceElemIdStr) {
if (ua.w3) {
return createSWF(attObj, parObj, replaceElemIdStr);
}
else {
return undefined;
}
},
showExpressInstall: function (att, par, replaceElemIdStr, callbackFn) {
if (ua.w3 && canExpressInstall()) {
showExpressInstall(att, par, replaceElemIdStr, callbackFn);
}
},
removeSWF: function (objElemIdStr) {
if (ua.w3) {
removeSWF(objElemIdStr);
}
},
createCSS: function (selStr, declStr, mediaStr, newStyleBoolean) {
if (ua.w3) {
createCSS(selStr, declStr, mediaStr, newStyleBoolean);
}
},
addDomLoadEvent: addDomLoadEvent,
addLoadEvent: addLoadEvent,
getQueryParamValue: function (param) {
var q = doc.location.search || doc.location.hash;
if (q) {
if (/\?/.test(q)) { q = q.split("?")[1]; }
if (param == null) {
return urlEncodeIfNecessary(q);
}
var pairs = q.split("&");
for (var i = 0; i < pairs.length; i++) {
if (pairs[i].substring(0, pairs[i].indexOf("=")) == param) {
return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf("=") + 1)));
}
}
}
return "";
},
expressInstallCallback: function () {
if (isExpressInstallActive) {
var obj = getElementById(EXPRESS_INSTALL_ID);
if (obj && storedAltContent) {
obj.parentNode.replaceChild(storedAltContent, obj);
if (storedAltContentId) {
setVisibility(storedAltContentId, true);
if (ua.ie && ua.win) { storedAltContent.style.display = "block"; }
}
if (storedCallbackFn) { storedCallbackFn(storedCallbackObj); }
}
isExpressInstallActive = false;
}
}
};
} ();

// FILE: Object2.js (6e541d7d) 3/7/2014 11:24:14 AM

Object.size = function(obj) {
var size = 0;
if(obj.length) size = obj.length;
if(size == 0) {
try {
for (var propName in obj) {
if (obj.hasOwnProperty(propName)) size++;
}
} catch(err) {
logError('Javascript error: ' + err.message + ' occurred. Object size could not be determined.');
return Simulator.Constants.FAILURE;
}
}
return size;
};

// FILE: HTML2JSMap2.js (3c3fa47f) 3/7/2014 11:24:14 AM

Simulator.HTML2JSMap = function(sim) {
var source = 'HTML2JSMap';
var map = [];
var dbg = function() {return sim.getDebug();};
this.inspect = function(embedded, force) {
var buff = [];
var sep = '\n';
buff.push('Inspecting ' + source + sep);
for ( var i in map) {
buff.push(i + ' = ' + map[i].getName() + ' ' + map[i].getEname() + sep);
}
buff.push('End Inspecting ' + source + sep + sep);
if(!embedded) force == true ? debugf(buff.join('')) : debug(buff.join(''));
else return buff.join('');
};
this.mapJSFromHTML = function(jsObject, htmlElement) {
if(!jsObject || !htmlElement) dbg().logError(source, 'jsOject or htmlElement is null. Cannot map JSFromHTML');
else {
map[htmlElement.id] = jsObject;
}
};
this.getJSFromHTML = function(htmlElement) {
return map[htmlElement.id];
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: Constants2.js (5b242848) 3/7/2014 11:24:14 AM

Simulator.Constants = function() {};
Simulator.Constants.HIDDEN = false;
Simulator.Constants.VISIBLE = true;
Simulator.Constants.SUCCESS = 1;
Simulator.Constants.NONE = 0;
Simulator.Constants.FAILURE = -1;
Simulator.Constants.YES = 1;
Simulator.Constants.NO = 0;
Simulator.Constants.SIM_CONTAINER_NAME = 'container';
Simulator.Constants.TIME_BASED_ANIMATION = 'timeline';
Simulator.Constants.INTERACTIVE_ANIMATION = 'interactive';
Simulator.Constants.STATIC_ANIMATION = 'static';
Simulator.Constants.INPUT_PANEL_NAME = 'inputPanel';
Simulator.Constants.ANIMATION_PANEL_NAME = 'animationPanel';
Simulator.Constants.DATA_DISPLAY_PANEL_NAME = 'dataOutputPanel';
Simulator.Constants.CONTROL_PANEL_NAME = 'controlElementsPanel';
Simulator.Constants.ITERATION_DELIMITTER = '\\0x1D\\';  // Use to be ';'
Simulator.Constants.KEY_VALUE_DELIMITTER = '\\0x1F\\';   // Use to be ':'
Simulator.Constants.PAIR_DELIMITTER = '\\0x1E\\';  // Use to be ','
Simulator.Constants.MULTIPLE_VALUE_DELIMITTER = '|';
Simulator.Constants.SPEECH_LABEL_PREFIX = 'Move To ';
Simulator.Constants.SPEECH_ITEM_VALUE_PREFIX = 'Select ';
Simulator.Constants.SPEECH_CMD_ITEM_PREFIX = 'Click ';
Simulator.Constants.ANIMATION_FINISHED = 'animationFinished';
Simulator.Constants.ANIMATION_STARTED = 'animationStarted';
Simulator.Constants.ANIMATION_THREAD_FINISHED = 'animationThreadFinished';
Simulator.Constants.ANIMATION_LOADED = 'animationLoaded';
Simulator.Constants.ANIMATION_REPORT_STATUS = 'reportStatus';
Simulator.Constants.ANIMATION_REPORTING = 'animationReporting';
Simulator.Constants.ANIMATION_UNRESPONSIVE = 'animationUnresponsive';
Simulator.Constants.ANIMATION_ABORTED = 'animationAborted';
Simulator.Constants.ANIMATION_UNABLE_TO_START = 'animationUnableToStart';
Simulator.Constants.ANIMATION_NOT_READY = 0;
Simulator.Constants.PARAM_COMMAND = 'command';
Simulator.Constants.PARAM_INFO = 'info';
Simulator.Constants.PARAM_DATA = 'data';
Simulator.Constants.PARAM_INPUT = 'input';
Simulator.Constants.PARAM_UPDATE = 'update';
Simulator.Constants.PARAM_OUTPUT = 'output';
Simulator.Constants.PARAM_DEBUG_OUTPUT = 'debug';
Simulator.Constants.PARAM_ERROR = 'error';
Simulator.Constants.SET_ID_CMD = 'setID';
Simulator.Constants.PLAY_CMD = 'play';
Simulator.Constants.STOP_CMD = 'stop';
Simulator.Constants.REWIND_CMD = 'rewind';
Simulator.Constants.RESTART_CMD = 'restart';
Simulator.Constants.OUTPUT_REQ_CMD = 'outputRequest';
Simulator.Constants.INPUT_NAME_PART = 0;
Simulator.Constants.INPUT_VALUE_PART = 1;
Simulator.Constants.START_FRAME = 'startFrame';
Simulator.Constants.ANIMATION_COMPLETED = 'animationCompleted';
Simulator.Constants.ANIMATION_PLAYING = 'animationPlaying';
Simulator.Constants.ANIMATION_PAUSED = 'animationPaused';
Simulator.Constants.ANIMATION_STOPPED = 'animationStopped';
Simulator.Constants.ANIMATION_REWOUND = 'animationRewound';
Simulator.Constants.ANIMATION_READY = 'animationReady';
Simulator.Constants.ANIMATION_ERROR = 'animationError';
Simulator.Constants.ANIMATION_PROPERTIES = 'properties';
Simulator.Constants.GET_ANIMATION_PROPERTIES = 'properties';
Simulator.Constants.ANIMATION_ALIVE = 'alive';
Simulator.Constants.SIM_CALLBACK = 'Simulator.Animation.FlashAnimationInterface.AnimationMediaOutput';
Simulator.Constants.DEFAULT_INITIAL_TRIAL_NUM = 0;
Simulator.Constants.NO_DATA_INDICATOR = '';
Simulator.Constants.HTML5_ANIMATION = 'html5';
Simulator.Constants.FLASH_ANIMATION = 'flash';
Simulator.Constants.IMAGE_ANIMATION = 'image';
Simulator.Constants.HOTTEXT_ANIMATION = 'hotText';

// FILE: Whiteboard2.js (47c6306a) 3/7/2014 11:24:14 AM

Simulator.Whiteboard = function (sim) {
var categories = [];
var source = 'Whiteboard';
var dbg = function () {return sim.getDebug();};
var key = Math.random()*1000;
this.addCategory = function(catName) {
if(catName in categories) return false;
else {
categories[catName] = [];
return true;
}
};
this.getCategory = function(name) {
if(name in categories) return categories[name];
else return null;
};
this.getCategoryAsString = function(name, separator) {
var buff = [];
var num = 0;
if(name in categories) {
var cat = categories[name];
for(var item in cat) {
if(cat.hasOwnProperty(item)) {
if(num > 0) buff.push(Simulator.Constants.PAIR_DELIMITTER + ' ');
buff.push(item);
if(separator) buff.push(Simulator.Constants.KEY_VALUE_DELIMITTER + ' ');
else buff.push(Simulator.Constants.KEY_VALUE_DELIMITTER);
buff.push(this.getItem(name, item));
num++;
}
}
return buff.join('');
}
else return null;
};
this.categoryExists = function(categoryName) {
return category in categories;
};
this.itemExists = function(categoryName, itemName) {
if(categoryName in categories) {
var category = categories[categoryName];
return (itemName in category);
}
else return false;
};
this.addItem = function(category, item) {
if(category in categories) {
var cat= categories[category];
if(item in cat) return null;
else {
cat[item] = null;
return key;
}
} else return null;
};
this.setItem = function(category, item, value, itemKey) {
if(category in categories) {
if(key == itemKey) {
var cat = categories[category];
cat[item] = value;
return true;
}
else return false;
}
else return false;
};
this.getItem = function(category, theItem) {
if(category in categories) {
cat = categories[category];
if(cat[theItem]) return cat[theItem];
else return null;
}
else return null;
};
this.clearCategory = function(category) {
if(categories[category]) categories[category] = [];
};
this.clearWhiteboard = function() {
for(var p in categories) {
categories[p] = [];
}
};
this.inspect = function(embedded, force) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting Whiteboard:'); buff.push(sep);
for ( var i in categories) {
var aCat = categories[i];
buff.push('Inspecting '); buff.push(i); buff.push(' category:'); buff.push(sep);
for(var k in aCat) {
buff.push(i); buff.push('['); buff.push(k); buff.push('] = '); buff.push(aCat[k]); buff.push(sep);
}
}
if(!embedded) (force) ? dbg().debugf(buff.join(''), null, true) : dbg().debug(buff.join(''), null, true);
return buff.join('');
};
};

// FILE: Utils2.js (3547fea0) 3/7/2014 11:24:14 AM

Simulator.Utils.Utils = function (sim) {
var source = 'Utils';
var timeMark = 0;
var IE = 'Microsoft Internet Explorer';
var MSIE = 'MSIE';
var FIREFOX = 'Firefox';
var CHROME = 'Chrome';
var OPERA = 'Opera';
var SAFARI = 'Safari';
var sequenceNumber = 0;
var dbg = function () { return sim.getDebug(); };
this.getChildElement = function (id, numChild) {
var HTMLElement = document.getElementById(id);
var num = 0;
var child = null;
if (HTMLElement) {
var children = HTMLElement.childNodes;
if (chldren.length > 0) {
for (var i = 0; i < children.length; i++) {
child = children[i];
if (child.nodeName[0] != '#') {
if (num == numChild) return child;
else num++;
}
}
return null;
} else return HTMLElement;
} else dbg().logError(source, 'Could not get HTMLElement');
};
this.applyFilter = function (functionName, data) {
var result = null;
var elements = [];
switch (functionName) {
case 'max':
result = Math.max.apply(Math, data);
break;
case 'min':
result = Math.min.apply(Math, data);
break;
case 'first':
result = data[0];
break;
case 'last':
result = data[data.length - 1];
break;
case 'average':
var sum = 0;
for (var i = 0; i < data.length; i++) {
sum += parseFloat(data[i]);
}
result = sum / data.length;
break;
case 'sum':
var sum = 0;
for (var i = 0; i < data.length; i++) {
sum += parseFloat(data[i]);
}
result = sum;
break;
case 'numNonZero':
var num = 0;
for (var i = 0; i < data.length; i++) {
if (data[i] !== 0) num++;
}
result = num;
break;
case 'zeroNotNull':
if (data[0] == 'null') result = '0';
else result = data[0];
break;
case 'blankNotNull':
if (data[0] === 'null') result = Simulator.Constants.NO_DATA_INDICATOR;
else result = data[0];
break;
case 'blankNotZero':
if (parseFloat(data[0]) == 0) result = Simulator.Constants.NO_DATA_INDICATOR;
else result = data[0];
break;
default:
if (functionName.substr(0, 4) == 'set[') {
var resultArray = [];
elements = functionName.replace(/set\s*\[/, '');
elements = elements.replace(/\s*\]$/, '');
var parts = functionName.substr(4).split(',');
for (var i = 0; i < parts.length; i++) {
resultArray.push(data[parseInt(parts[i])]);
}
result = resultArray.join(',');
}
}
return result;
};
this.getFileName = function (path, includeExtension) {
var filename = path.substring(path.lastIndexOf('/') + 1);
var index = filename.lastIndexOf('.');
if (!includeExtension) filename = filename.substring(0, index);
return filename;
};
this.getElementsByClassName = function (classname, node) {
if (!node) node = document.getElementsByTagName('body')[0];
var a = [];
var re = new RegExp('\\b' + classname + '\\b');
var els = node.getElementsByTagName('*');
for (var i = 0, j = els.length; i < j; i++)
if (re.test(els[i].className)) a.push(els[i]);
return a;
};
this.getElementsByTagValue = function (node, tagName, tagValue) {
if (!node) node = document.getElementsByTagName('body')[0];
var a = [];
var els = node.getElementsByTagName(tagName);
for (var i = 0; j < els.length; i++)
if (els[i].nodeValue == tagValue) a.push(els[i]);
return a;
};
this.associationStoreToString = function (associationStore, sep) {
buff = [];
num = 0;
for (var i in associationStore) {
if (associationStore.hasOwnProperty(i)) {
if (num > 0) buff.push(', ');
if (sep) buff.push('\n');
buff.push(i); buff.push(': '); buff.push(associationStore[i]);
num++;
}
}
return buff.join('');
};
this.assocArrayIsEmpty = function (theArray) {
for (var i in theArray) {
if (i) {
if (theArray.hasOwnProperty(i))
return false;
}
}
return true;
};
this.appendText = function (node, txt, noBreak) {
if (!noBreak) {
node.innerHTML = node.innerHTML + '<br>';
}
node.appendChild(document.createTextNode(txt));
if (!noBreak) {
node.innerHTML = node.innerHTML + '<br>';
}
};
this.appendBlankVertcalSpace = function (parentElement, theNum) {
var num = 1;
var newBreak = null;
if (theNum) num = theNum;
for (var i = 0; i < num; i++) {
newBreak = document.createElement('br');
newBreak.style.border = 'none';
parentElement.appendChild(newBreak);
}
};
this.appendElement = function (node, tag, id, htm) {
var ne = document.createElement(tag);
if (id) ne.id = id;
if (htm) ne.innerHTML = htm;
node.appendChild(ne);
};
this.getNextSequenceNumber = function () {
return ++sequenceNumber;
};
this.replaceAll = function (inThisString, replaceThis, withThis) {
var re = new RegExp('[' + replaceThis + ']', 'g');
return inThisString.replace(re, withThis);
};
this.setObjectDimensions = function (governingObject, subjectObject) {
var dimensions = setDimensions(governingObject.height, governingObject.width, subjectObject.height, subjectObject.width);
subjectObject.height = dimensions.height;
subjectObject.width = dimensions.width;
};
this.removeHeadingAndTrailingQuotes = function (theString, theTypeOfQuotes) {
var fIndex, lIndex, strLength;
var typeOfQuotes = 'both';
if (theTypeOfQuotes) typeOfQuotes = theTypeOfQuotes;
if (theString) theString = theString.trim();
if (typeOfQuotes === 'double' || typeOfQuotes === 'both') {
fIndex = theString.indexOf('"');
lIndex = theString.lastIndexOf('"');
strLength = theString.length;
if (fIndex == 0 && lIndex == strLength - 1)
theString = theString.substr(1, lIndex - 1);
}
if (typeOfQuotes === 'single' || typeOfQuotes === 'both') {
fIndex = theString.indexOf("'");
lIndex = theString.lastIndexOf("'");
strLength = theString.length;
if (fIndex == 0 && lIndex == strLength - 1)
theString = theString.substr(1, lIndex - 1);
}
return theString;
};
this.setDimensions = function (governingObjectHeight, governingObjectWidth, subjectObjectHeight, subjectObjectWidth, padding) {
var x = subjectObjectHeight / governingObjectHeight;
var y = subjectObjectWidth / governingObjectWidth;
var z = subjectObjectHeight / subjectObjectWidth;    // Get proportion
if (!padding)
padding = 0;
if (x >= y) {
subjectObjectHeight = governingObjectHeight;
subjectObjectWidth = subjectObjectHeight / z;
} else {
subjectObjectWidth = governingObjectWidth;
subjectObjectHeight = subjectObjectWidth * z;
}
var dimensions = {};
if (z > 1) {
dimensions.width = subjectObjectWidth - padding;
dimensions.height = dimensions.width * z;
} else {
dimensions.height = subjectObjectHeight - padding;
dimensions.width = dimensions.height / z;
}
return dimensions;
};
this.elementInArray = function (array, element, isSubstring) {
for (var i = 0; i < array.length; i++) {
if (!isSubstring) if (array[i] == element) return true;
else if (array[i].indexOf(element) != -1) return true;
}
return false;
};
this.getAttributes = function (node) {
var attr = [];
var attributes = node.attributes;
if (attributes != null && attributes != undefined) {
for (var j = 0; j < attributes.length; j++) {
var id = attributes[j].nodeName;
attr[id] = attributes[j].nodeValue;
}
}
return attr;
};
this.getNumberLength = function (num) {
var str = num + '';
return str.length;
};
this.isInternetExplorer = function () {
return navigator.userAgent.indexOf(MSIE) != -1;
};
this.isIE8orBelow = function () {
var info = this.getBrowserInfo(['name', 'major version'], null);
return (info['name'] === IE && parseInt(info['major version']) < 9);
};
this.isFireFox = function () {
return navigator.userAgent.indexOf(FIREFOX) != -1;
};
this.isChrome = function () {
return navigator.userAgent.indexOf(CHROME) != -1;
};
this.isOpera = function () {
return navigator.userAgent.indexOf(OPERA) !== -1;
};
this.isSafari = function () {
return navigator.userAgent.indexOf(SAFARI) !== -1;
};
this.getBrowserInfo = function (infoArray, sep) {
var nVer = navigator.appVersion;
var nAgt = navigator.userAgent;
var browserName = navigator.appName;
var fullVersion = '' + parseFloat(navigator.appVersion);
var majorVersion = parseInt(navigator.appVersion, 10);
var nameOffset, verOffset, ix;
if ((verOffset = nAgt.indexOf(OPERA)) !== -1) {
browserName = opera;
fullVersion = nAgt.substring(verOffset + 6);
if ((verOffset = nAgt.indexOf('Version')) !== -1)
fullVersion = nAgt.substring(verOffset + 8);
}
else if ((verOffset = nAgt.indexOf(MSIE)) !== -1) {
browserName = IE;
fullVersion = nAgt.substring(verOffset + 5);
}
else if ((verOffset = nAgt.indexOf(CHROME)) !== -1) {
browserName = CHROME;
fullVersion = nAgt.substring(verOffset + 7);
}
else if ((verOffset = nAgt.indexOf(SAFARI)) !== -1) {
browserName = SAFARI;
fullVersion = nAgt.substring(verOffset + 7);
if ((verOffset = nAgt.indexOf('Version')) !== -1)
fullVersion = nAgt.substring(verOffset + 8);
}
else if ((verOffset = nAgt.indexOf(FIREFOX)) !== -1) {
browserName = FIREFOX;
fullVersion = nAgt.substring(verOffset + 8);
}
else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <
(verOffset = nAgt.lastIndexOf('/'))) {
browserName = nAgt.substring(nameOffset, verOffset);
fullVersion = nAgt.substring(verOffset + 1);
if (browserName.toLowerCase() === browserName.toUpperCase()) {
browserName = navigator.appName;
}
}
if ((ix = fullVersion.indexOf(';')) !== -1)
fullVersion = fullVersion.substring(0, ix);
if ((ix = fullVersion.indexOf(' ')) !== -1)
fullVersion = fullVersion.substring(0, ix);
majorVersion = parseInt('' + fullVersion, 10);
if (isNaN(majorVersion)) {
fullVersion = '' + parseFloat(navigator.appVersion);
majorVersion = parseInt(navigator.appVersion, 10);
}
buff = [];
if (!sep) sep = ' ';
for (var i = 0; i < infoArray.length; i++) {
switch (infoArray[i]) {
case 'name': buff.push('Name  = ' + browserName);
break;
case 'major version': buff.push('Major version = ' + majorVersion);
break;
case 'full version': buff.push('Full version = ' + fullVersion);
break;
case 'appName': buff.push('App Name = ' + navigator.appName);
break;
case 'agent': buff.push('User Agent = ' + navigator.userAgent);
break;
case 'platform': buff.push('Platform = ' + navigator.platform);
break;
}
}
return buff.join(sep);
};
this.markTime = function () {
var d = new Date;
timeMark = d.getTime();
};
this.getElapsedTime = function () {
var d = new Date;
var nowTime = d.getTime();
return nowTime - timeMark;
};
this.getClass = function (obj) {
if (typeof obj === "undefined")
return "undefined";
if (obj === null)
return "null";
else return Object.prototype.toString.call(obj).match(/^\[object\s(.*)\]$/)[1];
};
this.getJSObjName = function (obj) {
if (!obj) return null;
else if (obj.getName) return obj.getName();
else if (obj.name) return obj.name;
else return this.getJSObjNameViaConstructor(obj);
};
this.getJSObjNameViaConstructor = function (obj) {
var str = obj.constructor.name;
if (!str) str = obj.constructor.toString();
var index = str.indexOf('(');
if (index > -1) {
str = str.substring(0, index);
index = str.indexOf('function');
if (index == 0) str = str.substring('function'.length);
}
return str.trim();
};
this.createTimeOutCallbackStr = function (obj, fctn, args) {
var buff = [];
buff.push(obj);
buff.push('.');
buff.push(fctn);
buff.push('(\'');
buff.push(args);
buff.push('\')');
return buff.join('');
};
this.bindEvent = function (el, event, handler) {
if (el.addEventListener)
el.addEventListener(event, handler, false);
else if (el.attachEvent)
el.attachEvent("on" + event, handler);
}
this.canPlayHtml5 = function () {
if (YAHOO.env.ua.ie > 0 &&
YAHOO.env.ua.ie < 9) return false;
if (Util.Browser.getFirefoxVersion() > 0 &&
Util.Browser.getFirefoxVersion() < 4) return false;
return true;
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
};
};

// FILE: Debug2.js (d3da706c) 3/7/2014 11:24:14 AM

Simulator.Utils.Debug = function (sim) {
var Count = 0;
var debugOn = false;
var prevSetting = false;
var dLevel = 'SimWarning';
var stackLevel = 2;
var eventMgr = function () { return sim.getEventManager(); }
var util = function() { return sim.getUtils(); };
this.tdebug = function (source, str1, appendCount, appendTime, str2) {
if (typeof console != 'object') return;
else if (debugOn) {
var buff = [];
if (source) {
if(util().isFireFox()) {
var line = callerLine((new Error).stack.split("\n")[stackLevel]);
buff.push(source + ' line ' + line + ': ');
}
else buff.push(source + ': ');
}
buff.push(str1);
if (appendCount) buff.push(Count++);
if (appendTime) buff.push(getTime());
if (str2) buff.push(str2);
console.log(buff.join(' '));
}
};
this.debug = function (source, str, obj, trace) {
if (typeof console != 'object') return;
var buff = [];
if (debugOn) {
if (source) {
if(util().isFireFox()) {
var line = callerLine((new Error).stack.split("\n")[stackLevel]);
buff.push(source + ' line ' + line + ': ');
}
else buff.push(source + ': ');
}
buff.push(str);
if (obj) buff.push(' = '); buff.push(obj); buff.push('\n\n');
console.log(buff.join(''));
if (trace == 'trace') {
console.log('--- Program stack trace: ---\n');
printStackTrace();
console.log('\n--- End of program stack trace ---\n\n');
}
}
};
this.debugf = function (source, str, obj, trace) {
if (typeof console != 'object') return;
var buff = [];
if (source) {
if(util().isFireFox()) {
var line = callerLine((new Error).stack.split("\n")[stackLevel]);
buff.push(source + ' line ' + line + ': ');
}
else buff.push(source + ': ');
}
buff.push(str);
if (obj) buff.push(' = '); buff.push(obj); buff.push('\n\n');
console.log(buff.join(''));
if (trace == 'trace') {
console.log('--- Program stack trace: ---\n');
printStackTrace();
console.log('\n--- End of program stack trace ---\n\n');
}
};
var iDest = 'console';
this.setIDest = function (dest) {
iDest = dest;
};
this.iDebug = function (source, str, obj, force) {
if (typeof console != 'object') return;
if (debugOn || force) {
var buff = [];
if (source) {
if(util().isFireFox()) {
var line = callerLine((new Error).stack.split("\n")[stackLevel]);
buff.push(source + ' line ' + line + ': ');
}
}
buff.push(str);
if (obj) buff.push(' = '); buff.push(obj); buff.push('\n\n');
if (iDest == 'screen') Simulator.showAlert('',buff.join(''));
else console.log(buff.join(''));
}
};
this.writeToConsole = function(str) {
console.log(str);
};
this.inspectArray = function (source, name, theArray, doNotIinspectObjects, embedded, force) {
if (typeof console != 'object') return;
var buff = [];
var sep = '\n\n';
if (debugOn || force) {
if (source) {
if(util().isFireFox()) {
var line = callerLine((new Error).stack.split("\n")[stackLevel]);
buff.push(source + ' line ' + line + ': ');
}
else buff.push(source + ': ');
}
buff.push('Inspecting '); buff.push(name); buff.push(sep);
if (theArray.length == 0) {
for (var p in theArray) {
buff.push(name); buff.push('['); buff.push(p); buff.push('] = ');
if(theArray[p].getSourceName) { buff.push(theArray[p].getSourceName()); buff.push(sep);}
else if(theArray[p].getName) { buff.push(theArray[p].getName()); buff.push(sep);}
else {buff.push(String(theArray[p])); buff.push(sep);}
if(!doNotIinspectObjects) if (theArray[p].inspect != undefined) buff.push(theArray[p].inspect(true));
}
} else {
for (var i = 0; i < theArray.length; i++) {
buff.push(name); buff.push('['); buff.push(i); buff.push('] = ');
if(theArray[i].getSourceName) {
buff.push(theArray[i].getSourceName()); buff.push(' ');
}
if(theArray[i].getName) {
buff.push(theArray[i].getName()); buff.push(sep);
}
else {
buff.push(theArray[i]); buff.push(sep);
}
buff.push('Inspecting '); buff.push(typeof theArray[i]); buff.push(sep);
if(!doNotIinspectObjects) if (theArray[i].inspect != undefined) buff.push(theArray[i].inspect(true));
}
}
buff.push('End of inspection of '); buff.push(name); buff.push(sep);
console.log(buff.join(''));
}
};
this.setDebug = function (flag) {
prevSetting = debugOn;
if(flag === 'on' || flag === true) debugOn = true;
else debugOn = false;
};
this.setErrorReportLevel = function (level) {
dLevel = (level == 'SimWarning' || level == 'SimError' || level == 'SimFatalError') ? level : 'SimError';
};
this.debugIsOn = function () {
return debugOn;
};
this.resetDebug = function () {
debugOn = prevSetting;
};
this.logWarning = function (source, str, notify, trace) {
var trace = 'noTrace';
if (trace) trace = 'trace';
logMsg = true;
if (dLevel == 'SimWarning') this.debugf(source, 'Warning: ' + str                                                            );
logMsg = false;
if (notify) Simulator.showAlertWarning(str);
};
this.logError = function (source, str, notify, noTrace) {
var noTrace = 'trace';
if (noTrace) trace = 'noTrace';
logMsg = true;
if (dLevel != 'SimFatalError') this.debugf(source, '**** ERROR: ' + str                                                            );
logMsg = false;
if (notify) Simulator.showAlert('**** ERROR: ' + str);
};
this.logFatalError = function (source, str) {
logMsg = true;
this.debugf(source, '!!!!!! FATAL ERROR: ' + str                                                                                                             );
logMsg = false;
eventMgr().postEvent(new Simulator.Event(this, 'info', 'fatalErrorOccurred', str));
Simulator.showAlert('Fatal Error',str);
};
function AssertException(message) {
this.message = message;
AssertException.prototype.toString = function () {
return 'AssertException: ' + this.message;
};
}
this.assert = function (exp, message) {
if (!exp) {
throw new AssertException(message);
}
};
function printStackTrace() {
if (isFireFox()) console.trace();
else if (isChrome()) {
var obj = {};
Error.captureStackTrace(obj, getStackTrace);
console.log(obj);
}
else if (isInternetExplorer());
else if (isSafari());
else if (isOpera());
else console.log('Unknown browser: ' + getBrowserInfo(['name']));
}
function callerLine(str) {
var index = str.lastIndexOf(':');
return str.substr(index + 1);
};
};

// FILE: Queue2.js (9300fb40) 3/7/2014 11:24:14 AM

Simulator.Utils.Queue = function (sim) {
var source = 'Queue';
var dbg = function () { return sim.getDebug(); };
var queue = [];
var offset = 0;
this.length = function () {
return (queue.length - offset);
};
this.isEmpty = function () {
return (queue.length == 0);
};
this.insertAt = function (item, index) {
var offsetIndex = index + offset;
if (offsetIndex >= 0 && offsetIndex < queue.length) queue.splice(offsetIndex, 0, item);
else if (offsetIndex == queue.length) queue.push(item);
};
this.add = function (item) {
queue.push(item);
};
this.elementAt = function (index) {
var offsetIndex = index + offset;
if (offsetIndex >= 0 && offsetIndex < queue.length) return queue[offsetIndex];
else return undefined;
};
this.remove = function () {
if (queue.length == 0)
return null;
var item = queue[offset];
if (++offset * 2 >= queue.length) {
queue = queue.slice(offset);
offset = 0;
}
return item;
};
this.peek = function () {
return (queue.length > 0 ? queue[offset] : null);
};
this.clear = function () {
var item = this.remove();
while (item != null) {
item = this.remove();
}
};
this.inspect = function (embedded, force) {
var buff = [];
buff.push('\nInspecting Queue:');
buff.push('Contains ' + queue.length + (queue.length == 1 ? ' item' : ' items'));
buff.push('Queue offset = ' + offset);
for (var i = offset; i < queue.length; i++) {
buff.push('queue[' + i + '] = ' + queue[i]);
}
buff.push('End inspecting Queue\n');
if (embedded) return buff.join('\n');
else {
if (force) debugf(buff.join('\n'));
else debug(buff.join('\n'));
}
};
this.entriesAsString = function () {
var buff = [];
for (var i = 0; i < queue.length; i++) {
buff.push(queue[i]);
}
return buff.join(',');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Utils.OrderedQueue = function (sim) {
Simulator.Utils.Queue.call(this, sim);
var source = 'OrderedQueue';
dbg = function () {return sim.getDebug();};
this.add = function (item) {
var len = this.length();
if (typeof (item) != 'object') {
if (this.isEmpty()) {
this.insertAt(item, 0);
return;
}
else for (var i = 0; i < len; i++) {
if (item < this.elementAt(i)) {
this.insertAt(item, i);
return;
}
}
this.insertAt(item, len);
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Utils.OrderedQueue.prototype = new Simulator.Utils.Queue();
Simulator.Utils.OrderedQueue.parent = Simulator.Utils.Queue;
Simulator.Utils.OrderedQueue.prototype.constructor = Simulator.Utils.OrderedQueue;

// FILE: Stack2.js (525edc9c) 3/7/2014 11:24:14 AM

Simulator.Utils.Stack = function (sim) {
var source = 'Stack';
this.store = [];
var dbg = function () {return sim.getDebug();};
this.push = function (data) {
this.store.push(data);
};
this.pop = function () {
if (this.store.length > 0) return this.store.pop();
else return null;
};
this.peek = function () {
return this.store[this.store.length - 1];
};
this.inspect = function (embedded, forced) {
var buff = [];
buff.push('\nInspecting Stack:');
buff.push('Stack contains ' + this.store.length + (this.store.length == 1 ? ' element' : ' elements'));
var last = this.store.length - 1;
for (var i = last; i >= 0; i--) {
if (typeof (this.store[i]) == 'object') {
if (this.store[i].inspect != undefined) buff.push(this.store[i].inspect(true, true));
}
else buff.push('stack nonobject element: ' + this.store[i]);
}
buff.push('End inspecting Stack\n');
if (embedded) return buff.join('\n');
else forced == null ? debug(buff.join('\n')) : debugf(buff.join('\n'));
};
this.elementAt = function (num) {
if (num < this.store.length && num >= 0) return this.store[num];
};
this.insertAt = function (obj, index) {
if (index >= 0 && index < this.store.length) this.store.splice(index, 0, obj);
else if (index == this.store.length) this.store.push(obj);
};
this.numElements = function () {
return this.store.length;
};
this.clear = function () {
var item = this.pop();
while (item != null) {
item = this.pop();
}
};
this.entriesAsString = function () {
var buff = [];
for (var i = this.store.length - 1; i > -1; i--) {
buff.push(this.store[i]);
}
return buff.join(',');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: String2.js (5355229f) 3/7/2014 11:24:14 AM

String.prototype.trim = function () {
return this.replace(/^\s+|\s+$/g,'');
};
String.prototype.ltrim = function() {
return this.replace(/^\s+/,'');
};
String.prototype.rtrim = function() {
return this.replace(/\s+$/,'');
};

// FILE: Dictionary2.js (d6257e6b) 3/7/2014 11:24:14 AM

Simulator.Utils.Dictionary = function (sim) {
var source = 'Dictionary';
var elements = [];
var dbg = function () {return sim.getDebug();};
this.exists = function (key) {
return (elements[key] == undefined);
};
this.keyExists = function (key) {
return (key in elements);
};
this.setValue = function (key, value) {
this.addKey(key);
elements[key] = value;
};
this.addKey = function (key, value) {
if (!this.keyExists(key)) {
elements[key] = '';
}
};
this.remove = function (key) {
delete elements[key];
};
this.lookup = function (key) {
return elements[key];
};
this.keys = function () {
var keys = [];
for (var key in elements) {
if (key != undefined && key != null) keys.push(key);
}
return keys;
};
this.size = function () {
var i = 0;
for (key in elements) {
i++;
}
return i;
};
this.toString = function () {
var buff = new Simulator.Utils.StringBuffer();
var str;
for (key in elements) {
if (key != undefined && key != null) {
if (elements[key] instanceof Array) {
str = (elements[key]).join('  ');
} else str = elements[key];
buff.append('key = ').append(key).append(', value = ').append(str).append('\n');
}
}
return buff.toString();
};
this.toAssociativeArray = function() {
dbg().inspectArray(source, 'elements', elements);
return elements;
};
this.inspect = function (embedded, forced) {
buff = [];
var sep = '\n\n';
buff.push('Inspecting Dictionary'); buff.push(sep);
buff.push(this.toString()); buff.push(sep);
if (!embedded) (forced) ? debugf(buff.join('')) : debug(buff.join(''));
return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Utils.StringBuffer = function () {
this.buffer = [];
this.append = function (string) {
this.buffer.push(string);
return this;
};
this.toString = function () {
return this.buffer.join('');
};
};

// FILE: Table2.js (48412901) 7/23/2014 4:30:37 PM

Simulator.Utils.Table = function (incompleteRows, tableName, sim) {
var source = 'Table';
var columns = [];
var typedElements = [];
var columnNames = [];
var contentsForInCompleteRows = false;
var name = tableName;
var maxRowNum = -1;
var dbg = function () { return sim.getDebug(); };
var simMgr = function () { return sim.getSimulationManager(); };
var scoringTable = function () { return sim.getScoringTable(); };
this.getName = function () {
return name;
};
if (incompleteRows) contentsForInCompleteRows = true;
this.setMaxRowNum = function (num) {
if (num) maxRowNum = num;
};
this.addElement = function (name, type) {
if (!(name in columns)) {
columns[name] = [];
columnNames.push(name);
if (type) {
if (!(type in typedElements)) {
var values = new Array();
typedElements[type] = values;
}
typedElements[type].push(name);
}
}
};
this.cloneInputsForOutputs = function () {
var outputs = typedElements['output'];
if (!outputs) {
var values = new Array();
typedElements['output'] = values;
outputs = typedElements['output'];
}
for (var p in columns) {
if (columns.hasOwnProperty(p)) {
if (!outputs.hasOwnProperty(p)) {
typedElements['output'].push(p);
}
}
}
};
this.clearTable = function (clearOutputs) {
for (var p in columns) {
if (columns.hasOwnProperty(p)) {
var col = columns[p];
for (var j = 0; j < col.length; j++) col[j] = '';
}
}
if (clearOutputs) {
var outputs = typedElements['output'];
if (outputs) {
for (var t in outputs) {
if (outputs.hasOwnProperty(t)) {
outputs[t] = '';
}
}
}
}
};
this.clearEntry = function (colName, rowNum) {
if (columns.hasOwnProperty(colName)) {
var col = columns[colName];
col[rowNum] = '';
}
};
this.clearRow = function (rowNum, clearOutputs, deleteRow) {
for (var p in columns) {
if (columns.hasOwnProperty(p)) {
var col = columns[p];
col[rowNum] = '';
}
}
if (clearOutputs) {
var outputs = typedElements['output'];
if (outputs) {
for (var t in outputs) {
if (outputs.hasOwnProperty(t)) {
outputs[rowNum] = '';
}
}
}
}
};
this.deleteEmptyRows = function () {
var numRows = getNumRows();
for (var row = 0; row < numRows; row++) {
if (rowIsEmpty(row)) deleteRow(row);
}
};
this.outputEntered = function () {
var outputs = typedElements['output'];
if (outputs) {
for (var i = 0; i < outputs.length; i++) {
if (!this.isColumnEmpty(outputs[i])) return true;
}
return false;
}
return false;
};
function deleteRow(num) {
size = Object.size(columns);
for (var col = 0; col < size; col++) {
aColName = columnNames[col];
columns[aColName].splice(num, 1);
}
}
this.isColumnEmpty = function (elementName) {
if (columns[elementName]) {
for (var i = 0; i < columns[elementName].length; i++) {
if (columns[elementName][i] != '') return false;
}
return true;
}
else return true;
};
this.deleteElement = function (elementName) {
if (elementName in columns) delete columns[elementName];
for (t in typedElements) {
for (var j = 0; j < typedElements[t].length; j++) {
if (typedElements[t][j] == elementName) typedElements[t].splice(j, 1);
}
}
};
this.setValue = function (colName, rowNum, value) {
var theValue = null;
if (value instanceof Array) {
theValue = value.join(', ');
}
else theValue = value;
if (rowNum == null || rowNum < 0) {
rowNum = simMgr().getTrialNum() - 1;
}
if (rowNum > -1) {
if (!columns[colName]) columns[colName] = [];
columns[colName][rowNum] = theValue;
} else {
dbg().logError(source, 'rowNum = ' + rowNum + ' in ' + name + '.setValue');
}
};
this.getElementsOfType = function (type) {
if (typedElements[type]) return typedElements[type];
else return null;
};
function getNumRows() {
var maxLen = 0;
var len = 0;
for (var p in columns) {
len = columns[p].length;
maxLen = Math.max(len, maxLen);
}
return maxLen;
}
this.getContents = function () {
var buff = [];
var colNames = [];
var maxLen = 0;
var len = 0;
var i = 0;
var aColName = null;
buff.push('<responseTable>');
buff.push('   <tr>');
for (var p in columns) {
buff.push('      <th id = "' + p + '">' + p + '</th>');
len = columns[p].length;
maxLen = Math.max(len, maxLen);
colNames[i++] = p;
}
if ((maxRowNum > 0) && (maxLen > maxRowNum)) {
maxLen = maxRowNum;
}
buff.push('   </tr>');
var size = colNames.length;
var value = null;
for (var row = 0; row < maxLen; row++) {
if (!contentsForInCompleteRows && !rowIsCompletlyFilledIn(row)) break;
else {
buff.push('   <tr>');
for (var col = 0; col < size; col++) {
aColName = colNames[col];
value = columns[aColName][row];
if (value == undefined || value == null) value = '';
if (value && value.indexOf && value.indexOf('<') != -1)
value = '<![CDATA[' + value + ']]>';
buff.push('      <td>' + value + '</td>');
}
buff.push('   </tr>');
}
}
buff.push('</responseTable>');
return buff.join('\n');
};
function rowIsCompletlyFilledIn(rowNum) {
var size = Object.size(columns);
for (var col = 0; col < size; col++) {
aColName = columnNames[col];
if (columns[aColName][rowNum] == '') return false;
}
return true;
}
function rowIsEmpty(rowNum) {
var size = Object.size(columns);
for (var col = 0; col < size; col++) {
aColName = columnNames[col];
if (columns[aColName][rowNum] == undefined) continue;
else if (columns[aColName][rowNum] != '') return false;
}
return true;
}
this.getNumNonEmptyRows = function () {
var maxLen = 0;
var numRows = 0;
for (var p in columns) {
numRows = 0;
len = columns[p].length;
for (var row = 0; row < len; row++) {
if (columns[p][row] != '') numRows++;
}
maxLen = Math.max(numRows, maxLen);
}
return maxLen;
};
this.restoreResponseTable = function (node) {
var child = null;
var attr = null;
var text = null;
var colNum = -1;
var rowNum = -2;
this.clearTable();
var children = node.childNodes;
for (var q = 0; q < children.length; q++) {
if (children[q].nodeName == 'tr') {
rowNum++;
colNum = -1;
child = children[q];
for (var m = 0; m < child.childNodes.length; m++) {
if (child.childNodes[m].nodeName == 'td') {
colNum++;
text = child.childNodes[m].textContent;
scoringTable().setValue(columnNames[colNum], rowNum, text);
} else if (child.childNodes[m].nodeName == 'th') {
attr = child.childNodes[m].attributes;
for (var j = 0; j < attr.length; j++) {
if (attr[j].nodeValue[0] != '#') {
columnNames.push(attr[j].nodeValue);
if (!attr[j].nodeValue in columns) dbg().logFatalError(source, 'response column name: ' + columnNames[j] + ' is not in ' + name + ' column names');
}
}
}
}
}
}
};
this.inspectElementTypes = function (embedded, force) {
var buff = [];
var aType = null;
buff.push('Inspecting typedElements:');
for (var e in typedElements) {
buff.push('  ' + e + ' type elements:');
aType = typedElements[e];
for (var j = 0; j < aType.length; j++) {
buff.push('    ' + aType[j]);
}
}
buff.push('End inspecting typeElements');
if (embedded) return buff.join('\n');
else (force === null) ? debug(buff.join('\n')) : debugf(buff.join('\n'));
};
this.inspect = function (embedded, force) {
var str = this.getContents();
var preface = name + 'Table output:\n';
if (embedded) return str;
else {
if (!force) debug(preface + str);
else debugf(preface + str);
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: PersistentVariableDataBase2.js (d79e17f2) 3/7/2014 11:24:14 AM

Simulator.Utils.PersistentVariableDataBase = function (sim) {
var source = 'PersistentVariableDB';
var store = [];
var dbg = function () {return sim.getDebug();};
this.updateElement = function (element, value, operation) {
if (element in store) {
if (!isNaN(value)) {
currentValue = store[element];
if (!operation) currentValue += parseFloat(value);
else switch (operation) {
case '+':
currentValue += parseFloat(value);
break;
case '*':
currentValue *= parseFloat(value);
break;
case '/':
currentValue /= parseFloat(value);
break;
case '-':
currentValue -= parseFloat(value);
break;
case 'overwrite':
currentValue = value;
break;
default:
dbg().logWarning(source, 'Invalid operator ' + operator + ' passed to PersistentVariableDataBase.updateElement. No update occurred');
break;
}
store[element] = currentValue;
} else store[element] = value;
}
else {
if (!isNaN(value)) store[element] = parseFloat(value);
else store[element] = value;
}
return this.getElementValue(element);
};
this.setElementTo = function (element, num) {
store[element] = num;
};
this.getElementValue = function (element) {
if (element in store) return store[element];
else return null;
};
this.getContents = function () {
return store;
};
this.inspect = function (embedded, force) {
var buff = [];
buff.push('Inspecting ' + source);
for (var p in store) {
buff.push('   ' + source + '[' + p + '] = ' + store[p]);
}
if (embedded) return buff.join('\n');
else force == true ? debugf(buff.join('\n')) : debug(buff.join('\n'));
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: SimItem2.js (06b0ebae) 3/7/2014 11:24:14 AM

Simulator.SimItem = function(sim) {
var source = 'SimItem';
var eName = 'SimItem';
var simId = null;
var IDNum = -1;
var dbg = function() {return sim.getDebug();};
var simDocument = function() { return sim.getSimDocument(); };
if(sim) {
simId = sim.getSimID();
}
this.getEname = function() {
return eName;
};
this.setEname = function(newEname) {
eName = newEname;
return this;
};
this.createItemID = function (reset, itemNum, aName) {
var name = (!aName) ? this.getName() : aName;
if (itemNum != null) {
if (itemNum > -1) return name + 'Item' + simId + itemNum;
else {
IDNum++;
return name + 'Element' + simId + IDNum;
}
}
else {
if (reset) IDNum = -1;
++IDNum;
return name + 'Item' + simId + IDNum;
}
};
this.getNodeID = function () {
return nodeID;
};
this.inspect = function(embedded, force) {
var buff = [];
var sep = '\n';
buff.push('Inspecting ' + source + sep);
for ( var i in this) {
if (i == 'items') {
buff.push(this.parent.inspect());
} else {
if (i.substr(0, 3) == 'get') {
buff.push(i.charAt(3).toLowerCase() + i.slice(4));
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
}
buff.push('End Inspecting ' + source + sep + sep);
if(!embedded) force == true ? dbg().debugf(source, buff.join('')) : dbg().debug(source, buff.join(''));
else return buff.join('');
};
this.setAttributes = function (attr) {
for (var i in attr) {
switch (i) {
case 'eName':
this.setEname(attr[i]);
break;
}
}
};
};

// FILE: KeyboardInput2.js (6de9896b) 5/2/2014 12:55:58 PM

Simulator.Input.KeyboardInput = function (sim) {
var KEY = 0;
var ELEMENT = 1;
var ITEM = 2;
var source = 'KeyboardInput';
var dbg = function () { return sim.getDebug(); };
var eventMgr = function () { return sim.getEventManager(); };
var simMgr = function () { return sim.getSimulationManager(); };
var elementSelected = false;
var focusableElements = [];
var inputIndex = 0;
var itemIndex = -1;
this.addFocusableElement = function (element, elementID, itemID) {
focusableElements.push([]);
focusableElements[focusableElements.length - 1][KEY] = elementID;
focusableElements[focusableElements.length - 1][ELEMENT] = element;
focusableElements[focusableElements.length - 1][ITEM] = [];
};
this.addFocusableElementItem = function (element, elementID, itemID, position) {
var index = elementInDB(elementID);
if (index == -1) {
this.addFocusableElement(element, elementID, itemID);
var items = [];
items.push(itemID);
focusableElements[focusableElements.length - 1][ITEM] = items;
}
else {
var items = focusableElements[index][ITEM];
if (items == null) {
items = [];
items.push(itemID);
}
else if ((items.length == 0) || (!position) || (items.length <= position))
items.push(itemID);
else
items.splice(position, 0, itemID);
}
};
this.inspect = function (force) {
var buff = [];
buff.push("Inspecting focusableElements:");
for (var i = 0; i < focusableElements.length; i++) {
buff.push("[" + i + "] = " + focusableElements[i][KEY] + ", " + focusableElements[i][ELEMENT].getName() + ", " + focusableElements[i][ITEM]);
}
buff.push("End inspecting focusableElements");
force == null ? debug(source, buff.join('\n')) : debugf(source, buff.join('\n'));
};
var advanceToNextElement = function () {
inputIndex++;
if (inputIndex >= focusableElements.length)
inputIndex = -1;
};
var advanceToNextItem = function () {
elementSelected = false;
itemIndex++;
if ((inputIndex == -1) || (focusableElements[inputIndex][ITEM].length <= itemIndex)) {
advanceToNextElement();
itemIndex = 0;
}
};
var advanceToPreviousElement = function () {
inputIndex--;
if (inputIndex < 0)
inputIndex = focusableElements.length - 1;
if (inputIndex >= 0) {
itemIndex = focusableElements[inputIndex][ITEM].length - 1;
if (itemIndex < 0)
itemIndex = 0;
}
};
var advanceToPreviousItem = function () {
if (itemIndex == 0)
advanceToPreviousElement();
else
itemIndex--;
};
var elementInDB = function (elementID) {
for (var i = 0; i < focusableElements.length; i++) {
if (focusableElements[i][KEY] == elementID) return i;
}
return -1;
};
var getInputObjectFromList = function (inputIndex, itemIndex) {
if ((inputIndex != -1) && (inputIndex < focusableElements.length)) {
var parts = [];
parts[KEY] = focusableElements[inputIndex][KEY];
parts[ELEMENT] = focusableElements[inputIndex][ELEMENT];
var items = [];
items = focusableElements[inputIndex][ITEM];
parts[ITEM] = items[itemIndex];
return parts;
}
};
shortcut = {
'all_shortcuts': {},
'add': function (shortcut_combination, callback, simDoc, opt) {
var default_options = {
'type': 'keydown',
'propagate': true,
'disable_in_input': false,
'target': simDoc,
'keycode': false
};
if (!opt) opt = default_options;
else {
for (var dfo in default_options) {
if (typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];
}
}
var ele = opt.target;
if (typeof opt.target == 'string') ele = document.getElementById(opt.target);
shortcut_combination = shortcut_combination.toLowerCase();
var func = function (e) {
e = e || window.event;
if (opt['disable_in_input']) {
var element = null;
if (e.target) element = e.target;
else if (e.srcElement) element = e.srcElement;
if (element.nodeType == 3) element = element.parentNode;
if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;
}
if (e.keyCode) code = e.keyCode;
else if (e.which) code = e.which;
var character = String.fromCharCode(code).toLowerCase();
if (code == 188) character = ",";
if (code == 190) character = ".";
var keys = shortcut_combination.split("+");
var kp = 0;
var shift_nums = {
"`": "~",
"1": "!",
"2": "@",
"3": "#",
"4": "$",
"5": "%",
"6": "^",
"7": "&",
"8": "*",
"9": "(",
"0": ")",
"-": "_",
"=": "+",
";": ":",
"'": "\"",
",": "<",
".": ">",
"/": "?",
"\\": "|"
};
var special_keys = {
'esc': 27,
'escape': 27,
'tab': 9,
'space': 32,
'return': 13,
'enter': 13,
'backspace': 8,
'scrolllock': 145,
'scroll_lock': 145,
'scroll': 145,
'capslock': 20,
'caps_lock': 20,
'caps': 20,
'numlock': 144,
'num_lock': 144,
'num': 144,
'pause': 19,
'break': 19,
'insert': 45,
'home': 36,
'delete': 46,
'end': 35,
'pageup': 33,
'page_up': 33,
'pu': 33,
'pagedown': 34,
'page_down': 34,
'pd': 34,
'left': 37,
'up': 38,
'right': 39,
'down': 40,
'f1': 112,
'f2': 113,
'f3': 114,
'f4': 115,
'f5': 116,
'f6': 117,
'f7': 118,
'f8': 119,
'f9': 120,
'f10': 121,
'f11': 122,
'f12': 123
};
var modifiers = {
shift: { wanted: false, pressed: false },
ctrl: { wanted: false, pressed: false },
alt: { wanted: false, pressed: false },
meta: { wanted: false, pressed: false}
};
if (e.ctrlKey) modifiers.ctrl.pressed = true;
if (e.shiftKey) modifiers.shift.pressed = true;
if (e.altKey) modifiers.alt.pressed = true;
if (e.metaKey) modifiers.meta.pressed = true;
for (var i = 0; k = keys[i], i < keys.length; i++) {
if (k == 'ctrl' || k == 'control') {
kp++;
modifiers.ctrl.wanted = true;
} else if (k == 'shift') {
kp++;
modifiers.shift.wanted = true;
} else if (k == 'alt') {
kp++;
modifiers.alt.wanted = true;
} else if (k == 'meta') {
kp++;
modifiers.meta.wanted = true;
} else if (k.length > 1) {
if (special_keys[k] == code) kp++;
} else if (opt['keycode']) {
if (opt['keycode'] == code) kp++;
} else {
if (character == k) kp++;
else {
if (shift_nums[character] && e.shiftKey) {
character = shift_nums[character];
if (character == k) kp++;
}
}
}
}
if (kp == keys.length &&
modifiers.ctrl.pressed == modifiers.ctrl.wanted &&
modifiers.shift.pressed == modifiers.shift.wanted &&
modifiers.alt.pressed == modifiers.alt.wanted &&
modifiers.meta.pressed == modifiers.meta.wanted) {
callback(e);
if (!opt['propagate']) {
e.cancelBubble = true;
e.returnValue = false;
if (e.stopPropagation) {
e.stopPropagation();
e.preventDefault();
}
return false;
}
}
};
this.all_shortcuts[shortcut_combination] = {
'callback': func,
'target': ele,
'event': opt['type']
};
if (ele.addEventListener) ele.addEventListener(opt['type'], func, false);
else if (ele.attachEvent) ele.attachEvent('on' + opt['type'], func);
else ele['on' + opt['type']] = func;
},
'remove': function (shortcut_combination) {
shortcut_combination = shortcut_combination.toLowerCase();
var binding = this.all_shortcuts[shortcut_combination];
delete (this.all_shortcuts[shortcut_combination]);
if (!binding) return;
var type = binding['event'];
var ele = binding['target'];
var callback = binding['callback'];
if (ele.detachEvent) ele.detachEvent('on' + type, callback);
else if (ele.removeEventListener) ele.removeEventListener(type, callback, false);
else ele['on' + type] = false;
}
};
this.initializeKeyboardShortcuts = function () {
shortcut.add('tab', function () { handleKeyBoardInput('tab', '', ''); }, sim.getSimDocument());
shortcut.add('ctrl+tab', function () { handleKeyBoardInput('ctrl', 'tab', ''); }, sim.getSimDocument());
shortcut.add('shift+tab', function () { handleKeyBoardInput('shift', 'tab', ''); }, sim.getSimDocument());
shortcut.add('ctrl+shift+tab', function () { handleKeyBoardInput('ctrl', 'shift', 'tab'); }, sim.getSimDocument());
shortcut.add('enter', function () { handleKeyBoardInput('enter', '', ''); }, sim.getSimDocument());
};
this.removeKeyboardShortcuts = function () {
shortcut.remove('tab');
shortcut.remove('ctrl+tab');
shortcut.remove('shift+tab');
shortcut.remove('ctrl+shift+tab');
shortcut.remove('enter');
};
var prevInputObjectInfo = [];
var handleKeyBoardInput = function (firstKey, secondKey, thirdKey) {
if (simMgr().isPlaying()) return;
var parts = null;
if (prevInputObjectInfo[ELEMENT]) {
prevInputObjectInfo[ELEMENT].keyboardNavigateAwayFrom(prevInputObjectInfo[KEY], prevInputObjectInfo[ITEM], itemIndex);
}
switch (firstKey) {
case 'ctrl':
switch (secondKey) {
case 'tab':
if (elementSelected) advanceToNextElement();
else advanceToNextItem();
parts = getInputObjectFromList(inputIndex, itemIndex);
if (parts) {
parts[ELEMENT].keyboardNavigateTo(parts[KEY], parts[ITEM], itemIndex);
} else {
eventMgr().postEvent(new Simulator.Event(this, 'info', 'lastfocusableSimulatorElementReached', null, false));
inputIndex = -1;
}
break;
case 'shift':
switch (thirdKey) {
case 'tab':
if (elementSelected) advanceToPreviousElement();
else advanceToPreviousItem();
parts = getInputObjectFromList(inputIndex, itemIndex);
if (parts) {
parts[ELEMENT].keyboardNavigateTo(parts[KEY], parts[ITEM], itemIndex);
} else {
eventMgr().postEvent(new Simulator.Event(this, 'info', 'firstfocusableSimulatorElementReached', null, false));
inputIndex = -1;
}
break;
}
break;
}
break;
case 'shift':
switch (secondKey) {
case 'tab':
if (elementSelected) advanceToPreviousElement();
else advanceToPreviousItem();
parts = getInputObjectFromList(inputIndex, itemIndex);
if (parts) {
parts[ELEMENT].keyboardNavigateTo(parts[KEY], parts[ITEM], itemIndex);
} else {
eventMgr().postEvent(new Simulator.Event(this, 'info', 'firstfocusableSimulatorElementReached', null, false));
inputIndex = -1;
}
break;
}
break;
case 'tab':
break;
case 'enter':
parts = getInputObjectFromList(inputIndex, itemIndex);
if (parts) {
parts[ELEMENT].recordKeyboardSelection(parts[KEY], parts[ITEM], itemIndex);
if (parts[ELEMENT].getType() === 'dropList') {
itemIndex = focusableElements[inputIndex][ITEM].length - 1;
}
}
break;
}
if (parts) {
prevInputObjectInfo[KEY] = parts[KEY];
prevInputObjectInfo[ELEMENT] = parts[ELEMENT];
prevInputObjectInfo[ITEM] = parts[ITEM];
}
else {
prevInputObjectInfo[KEY] = null;
prevInputObjectInfo[ELEMENT] = null;
prevInputObjectInfo[ITEM] = null;
}
};
this.closeDropList = function () {
handleKeyBoardInput('enter');
}
var debug = function (str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
};
var debugf = function (str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
};
};

// FILE: SimElement2.js (75901a96) 7/23/2014 4:30:37 PM

Simulator.SimElement = function (sim) {
Simulator.SimItem.call(this, sim);
var source = 'SimElement';
var name = '';
var focusable = false;
var nodeID = null;
var type = null;
var label = '';
var scoreable = true;
var spaceAbove = 0;
var spaceBelow = 0;
var image = null;
var speechLabel = '';
var toEvents = new Simulator.EventDB(sim, 'toEvents');
var fromEvents = new Simulator.EventDB(sim, 'fromEvents');
var theSimulator = null;
var keyboardInput = function () { sim.getKeyboardInput(); };
var html2jsMap = function() { return sim.getHTML2JSMap(); };
if(sim) {
theSimulator = sim;
}
var eventMgr = function () { return theSimulator.getEventManager(); };
var dbg = function() {return theSimulator.getDebug();};
var simDocument = function() { return sim.getSimDocument(); };
this.getEname = function() {
return source;
};
this.addEvent = function (theEvent, dir) {
switch (dir) {
case 'to':
toEvents.addEvent(theEvent);
eventMgr().registerEvent(theEvent);
break;
case 'from':
fromEvents.addEvent(theEvent);
break;
default:
dbg().logError(source, 'Unknown event direction ' + dir + ' passed to ' + this.getName());
break;
}
return this;
};
this.setFocusable = function (flag, noRegister) {
if (flag == true) {
focusable = true;
}
else focusable = false;
};
this.isFocusable = function () {
return focusable;
};
this.nextEvent = function (reset) {
return fromEvents.nextEvent(reset);
};
this.getName = function () {
return name;
};
this.setName = function (newName) {
name = newName.trim();
nodeID = this.createItemID(true, -1);
return this;
};
this.getType = function () {
return type;
};
this.setType = function (newType) {
type = newType;
return this;
};
this.getLabel = function () {
return label;
};
this.setLabel = function (newLabel) {
label = newLabel;
return this;
};
this.getScoreable = function () {
return scoreable;
};
this.setSpaceAbove = function (newSpaceAbove) {
spaceAbove = parseInt(newSpaceAbove);
};
this.getSpaceAbove = function () {
return spaceAbove;
};
this.setSpaceBelow = function (newSpaceBelow) {
spaceBelow = parseInt(newSpaceBelow);
};
this.getSpaceBelow = function () {
return spaceBelow;
};
this.getImage = function () {
return image;
};
this.setImage = function (newImage) {
image = newImage;
return this;
};
this.getData = function () {
return '';
};
this.setSpeechLabel = function (newSpeechLabel) {
speechLabel = newSpeechLabel;
};
this.getSpeechLabel = function () {
return speechLabel;
};
this.formatEventData = function () {
return this.getData();
};
this.postOnChangeEnabled = function () {
var theEvent = this.nextEvent('true');
while (theEvent != null) {
if (theEvent.postOnChange == 'yes') {
return true;
}
theEvent = this.nextEvent();
}
return false;
};
this.postOnChangeEvents = function () {
var theEvent = this.nextEvent('true');
while (theEvent != null) {
if (theEvent.postOnChange == 'yes') {
theEvent.data = this.formatEventData();
eventMgr().postEvent(theEvent);
}
theEvent = this.nextEvent();
}
};
this.postStaticEvents = function () {
var theEvent = this.nextEvent('true');
while (theEvent != null) {
if (theEvent.postOnChange != 'yes') {
theEvent.data = this.formatEventData();
theEvent.postEvent();
}
theEvent = this.nextEvent();
}
};
this.getNodeID = function () {
return nodeID;
};
this.mapHTML2JS = function(htmlElement) {
html2jsMap().mapJSFromHTML(this, htmlElement);
};
this.inspect = function(embedded, force) {
var buff = [];
var sep = '\n';
buff.push('Inspecting ' + source + sep);
var str = Simulator.SimElement.prototype.inspect.call(this, true, force);
if (str) {
buff.push(str);
buff.push(fromEvents.inspect(true, force));
buff.push(toEvents.inspect(true, force));
return buff.join('');
}
else {
for ( var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i.charAt(3).toLowerCase() + i.slice(4));
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
buff.push(fromEvents.inspect(true, force));
buff.push(toEvents.inspect(true, force));
buff.push('End Inspecting ' + source + sep + sep);
if(!embedded) force == true ? debugf(buff.join('')) : debug(buff.join(''));
else return buff.join('');
}
};
this.selectViaKeyboard = function (itemIndex) { Simulator.showAlert('Error','"selectViaKeyboard" must be inplemented by subclass'); };
if(sim) this.setEname('SimElement');
this.setAttributes = function (attr) {
Simulator.SimElement.prototype.setAttributes.call(this, attr);
for (var i in attr) {
switch (i) {
case 'name':
this.setName(attr[i]);
break;
case 'image':
this.setImage(attr[i]);
break;
case 'label':
this.setLabel(attr[i]);
break;
case 'type':
this.setType(attr[i]);
break;
case 'spaceAbove':
this.setSpaceAbove(attr[i]);
break;
case 'spaceBelow':
this.setSpaceBelow(attr[i]);
break;
case 'speechLabel':
this.setSpeechLabel(attr[i]);
break;
}
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.SimElement.prototype = new Simulator.SimItem();
Simulator.SimElement.prototype.constructor = Simulator.SimElement;

// FILE: DataDictionary2.js (12b8a1fc) 3/7/2014 11:24:14 AM

Simulator.DataDictionary = function (sim) {
Simulator.SimItem.call(this, sim);
var source = 'DataDictionary';
var dataDB = [];
var dbg = function () { return sim.getDebug(); };
this.createEntry = function(key) {
if(!dataDB.keyExists(key)) dataDB.addKey(key, '');
};
this.setEntryValue = function(key, value) {
dataDB.setValue(key, value);
};
this.getEntryValue = function(key) {
return dataDB.lookup(key);
};
this.contents = function() {
var buff = [];
buff.push('<Table>\n');
buff.push('<tr>');
var keys = dataDB.keys();
for(var i = 0; i < keys.length; i++) {
buff.push('<th id = "' + keys[i] + '">' + keys[i] + '</th>');
}
return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
};
};
Simulator.DataDictionary.prototype = new Simulator.SimItem();
Simulator.DataDictionary.parent = Simulator.SimItem;
Simulator.DataDictionary.prototype.constructor = Simulator.DataDictionary;

// FILE: EventManager2.js (88ecb2ad) 3/7/2014 11:24:14 AM

Simulator.EventManager = function(sim) {
var source = 'EventManager';
var inputQueue = new Simulator.Utils.Queue(sim);
var subscriberDB = null;
var timer = null;
var dbg = function() {return sim.getDebug();};
var utils = function() {return sim.getUtils();};
var getSubscriberDB = function() {
if(!subscriberDB) subscriberDB = new Simulator.EventDB(sim, 'subscriberDB');
return subscriberDB;
};
this.registerEvent = function(event) {
getSubscriberDB().addEvent(event);
};
this.deRegisterEvent = function(event) {
getSubscriberDB().remove(event);
};
this.postEvent = function(event) {
inputQueue.add(event);
};
this.startEventProcessing = function() {
var closure = bind(processEvents);
timer = setInterval (closure, 500 );
};
this.getSourceName = function(obj) {
return utils().getJSObjName(obj);
};
this.stopEventProcessing = function() {
clearTimeout(timer);
};
function processEvents() {
while(!inputQueue.isEmpty()) {
var matches = [];
var event = inputQueue.remove();
matches = getSubscriberDB().getAllMatchingEvents(event);
for ( var i = 0; i < matches.length; i++) {
if((matches[i]).src.handleEvent != undefined) {
(matches[i]).src.handleEvent(event);
}
else if(typeof (matches[i]).src != 'object') {
(matches[i]).src.prototype.handleEvent(event);
}
}
}
}
function bind(method) {
var _this = this;
return(function() {
return(method.apply(_this.arguments));
});
}
function getEventSrcName(event) {
if (event.src.getSourceName === undefined) return 'object';
else return event.src.getSourceName();
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: EventDB2.js (5c4bdc27) 3/7/2014 11:24:14 AM

Simulator.EventDB = function(sim, theName) {
var source = 'EventDB';
var DB = [];
var currentIndex = 0;
var name = theName;
var dbg = function() {return sim.getDebug();};
this.getName = function() {
return name;
};
this.addEvent = function(event) {
DB.push(event);
};
this.removeEvent = function(event) {
var index = this.isInDB(event, true);
if(index > -1) DB.splice(index, 1);
};
this.isInDB = function(event, fullMatch) {
for(var i = 0; i < DB.length; i++) {
var theEvent = DB[i];
if(theEvent.type == event.type && theEvent.context == event.context) {
if (fullMatch) {
if(theEvent.src == event.src) return i;
} else return i;
}
}
return -1;
};
this.getAllMatchingEvents = function(event) {
var matches = [];
var k = 0;
for ( var i = 0; i < DB.length; i++) {
var theEvent = DB[i];
if(theEvent.type == event.type && (theEvent.context == event.context || theEvent.context == '*'|| event.context == '*')) {
if(event.data) theEvent.data = event.data;
theEvent.completeWithoutOutput = event.completeWithoutOutput;
theEvent.originatorName = event.originatorName;
matches[k++] = theEvent;
}
}
return matches;
};
this.nextEvent = function(reset) {
if(reset) currentIndex = 0;
if(currentIndex < DB.length) return DB[currentIndex++];
else return null;
};
this.inspect = function(embedded, forced) {
var buff = [];
var sep = '\n';
buff.push('Inspecting EventDB ' + name + sep);
buff.push('There are ' + DB.length + ' events in ' + name + sep);
for(var i = 0; i < DB.length; i++) {
(forced) ? buff.push(debugf(DB[i].inspect(embedded, true))) : buff.push(debug(DB[i].inspect(embedded, true)));
buff.push(sep);
};
buff.push('End of EventDB ' + name + ' Inspection' + sep + sep);
if(!embedded) (forced) ? debugf(buff.join('')) : debug(buff.join(''));
else return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: Event2.js (3f33490d) 3/7/2014 11:24:14 AM

Simulator.Event = function(src, type, context, data, postOnChange, completeWithoutOutput) {
this.type = type;
this.src = src;
this.context = context;
this.data = data;
this.postOnChange = postOnChange;
this.completeWithoutOutput = (completeWithoutOutput === true) ? true : false;
this.inspect = function() {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting event'); buff.push(sep);
if(this.src.getName) {
buff.push('event src = '); buff.push(this.src.getName()); buff.push(';'); buff.push(sep);
}
buff.push('event type = '); buff.push(this.type); buff.push(';'); buff.push(sep);
buff.push('event context = '); buff.push(this.context);  buff.push(';'); buff.push(sep);
buff.push('event data = '); buff.push(this.data);  buff.push(';'); buff.push(sep);;
buff.push('event postOnChange = '); buff.push(this.postOnChange);  buff.push(';'); buff.push(sep);;
buff.push('event completeWithoutOutput = '); buff.push(this.completeWithoutOutput);  buff.push(';'); buff.push(sep);;
return buff.join('');
};
function addHTMLEvent( obj, type, fn ) {
if( obj.attachEvent ) {
obj['e'+type+fn] = fn;
obj[type+fn] = function(){obj['e'+type+fn]( window.event );};
obj.attachEvent( 'on'+type, obj[type+fn] );
} else
obj.addEventListener( type, fn, false );
}
function removeHTMLEvent( obj, type, fn ) {
if( obj.detachEvent ) {
obj.detachEvent( 'on'+type, obj[type+fn] );
obj[type+fn] = null;
} else
obj.removeEventListener( type, fn, false );
}
};

// FILE: Layout2.js (84e0627a) 3/7/2014 11:24:14 AM

Simulator.Display.Layout = function (sim, container) {
var source = 'Layout';
var panelList = [];
var dbg = function () { return sim.getDebug(); };
var eventMgr = function () { return sim.getEventManager(); };
var simDocument = function () { return sim.getSimDocument(); };
var utils = function () { return sim.getUtils(); };
var simDocument = function () { return sim.getSimDocument(); };
this.specifyLayout = function (layout) {
var format = null;
var attr = layout[0].attributes;
var div = simDocument().createElement('div');
div.setAttribute('id', Simulator.Constants.SIM_CONTAINER_NAME + sim.getSimID());
if (utils().isInternetExplorer()) {
format = attr.getNamedItem('format').value;
}
else format = attr['format'].nodeValue;
if (format) {
div.setAttribute('class', format);
container.appendChild(div);
}
else dbg().logError(source, 'Could not get layout format attribute.');
};
this.createPanels = function (node) {
var aPanel;
var panelSpec;
var panelNum = 0;
for (var i = 0; i < node.length; i++) {
if (node[i].nodeName[0] != '#') {
aPanel = new Simulator.Display.Panel(sim, panelNum++);
for (var j = 0; j < node[i].childNodes.length; j++) {
if (node[i].childNodes[j].nodeName[0] != '#') {
panelSpec = node[i].childNodes[j];
aPanel.setAttributes(aPanel, utils().getAttributes(panelSpec));
}
}
var attr = node[i].attributes;
if (utils().isInternetExplorer()) aPanel.setAttributes(utils().getAttributes(node[i]));
else if (Object.size(attr) > 0) aPanel.setAttributes(utils().getAttributes(node[i]));
aPanel.setName(node[i].nodeName);
var id = aPanel.getNodeID();
if (!panelList[id]) panelList[id] = aPanel;
aPanel.render();
}
}
};
this.getPanelInstance = function (panelType) {
for (var panel in panelList)
if (panel.indexOf(panelType) > -1) return panelList[panel];
return null;
};
this.resizeAllPanels = function (zoom) {
debug(source, 'In Layout Panel Resize All Panels for simID=' + sim.getSimID());
var aPanel = null;
for (var name in panelList) {
aPanel = panelList[name];
if (aPanel.resize) {
aPanel.resize(zoom);
} else dbg().logError(source, 'unknown panel name: ' + name);
}
};
this.recordPanelSizes = function (zoom) {
debug(source, 'In Record Panel Sizes for simID=' + sim.getSimID());
var aPanel = null;
for (var name in panelList) {
aPanel = panelList[name];
if (aPanel.recordOriginalWidthAndHeight) {
aPanel.recordOriginalWidthAndHeight();
} else dbg().logError(source, 'unknown panel name: ' + name);
}
};
this.makeAllPanelsVisible = function () {
var aPanel = null;
for (var name in panelList) {
aPanel = panelList[name];
aPanel.setDisplay('visible');
var HTMLPanel = simDocument().getElementById(name);
if (HTMLPanel) {
HTMLPanel.style.visibility = 'visible';
debug(name + '.style.visibility = ' + HTMLPanel.style.visibility);
}
else dbg().logError(source, 'Could not get HTML ' + name + ' panel element. Could not make panel visible');
}
};
this.getContainerWidth = function () {
var width = 0;
var container = simDocument().getElementById(Simulator.Constants.SIM_CONTAINER_NAME + sim.getSimID());
if (container) {
width = container.offsetWidth;
if (width === 0) {
dbg().logError(source, 'Simulator container offsetWidth is 0');
}
return container.offsetWidth;
} else {
dbg().logError(source, 'Simulator\'s container with id = "' + id + '" is null');
return FAILURE;
}
};
this.getContainerHeight = function () {
var height = 0;
var container = simDocument().getElementById(Simulator.Constants.SIM_CONTAINER_NAME + sim.getSimID());
if (container) {
height = container.offsetHeight;
if (height === 0) {
dbg().logError(source, 'Simuator container offsetHeight is 0');
}
return container.offsetHeight;
} else {
dbg().logError(source, 'Simulator\'s container with id = "' + id + '" is null.');
return FAILURE;
}
};
this.handleEvent = function (event) {
switch (event.type) {
case 'info':
switch (event.context) {
case 'simulatorStateChange':
switch (event.data) {
case 'ReadOnly': this.disableAllInput();
break;
case 'Playing': this.disableAllInput();
break;
case 'Ready': this.enableAllInput();
break;
}
break;
}
}
};
this.enableAllInput = function () {
for (var panel in panelList) {
if (panel) {
var panelObj = panelList[panel];
if (panelObj.enableAllInput)
panelObj.enableAllInput();
}
}
};
this.disableAllInput = function () {
for (var panel in panelList) {
if (panel) {
var panelObj = panelList[panel];
if (panelObj.disableAllInput)
panelObj.disableAllInput();
}
}
};
this.saveInputs = function () {
for (var panel in panelList) {
if (panel) {
var panelObj = panelList[panel];
if (panelObj.saveInputs)
panelObj.saveInputs();
}
}
};
this.hasEmptyChoiceListSelection = function () {
for (var panel in panelList) {
if (panel) {
var panelObj = panelList[panel];
if (panelObj.hasEmptyChoiceListSelection) {
if (panelObj.hasEmptyChoiceListSelection()) {
return true;
}
}
}
}
return false;
};
this.getSourceName = function () {
return source;
};
if (sim) eventMgr().registerEvent(new Simulator.Event(this, 'info', 'simulatorStateChange'));
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: Simulator2.js (783ffe24) 5/2/2014 12:55:58 PM

Simulator.showAlertWarning = function (msg) {
if (window.TDS && TDS.Dialog) {
TDS.Dialog.showWarning(msg, function () {});
} else {
alert(msg);
}
};
Simulator.showAlert = function (headline,msg) {
if (window.TDS && TDS.Dialog) {
TDS.Dialog.showAlert(msg, function () {});
} else {
alert(msg);
}
};
Simulator.Simulator = function (container, assistiveMode, speechMode) {
var source = 'Simulator';
var simID = null;
var speechEnabled = speechMode;
var language = 'english';
var mode = 'operation';
var xmlns = '';
var simMgr = null;
var layout = null;
var animationSetObj = null;
var animationShellPath = null;
var animationExternalScriptsPath = null;
var animationPresent = true;
var accessibilityIFActive = assistiveMode;
var dataTable = null;
var instance = this;
var simDocument = null;
var visible = true;
var eventMgr = new Simulator.EventManager(this);
var whiteboard = new Simulator.Whiteboard(this);
var scoringTable = new Simulator.Utils.Table(true, 'ScoringTable', this);
var persistentVariableDB = new Simulator.Utils.PersistentVariableDataBase(this);
var utils = new Simulator.Utils.Utils(this);
var dbg = new Simulator.Utils.Debug(this);
var keyboardInput = new Simulator.Input.KeyboardInput(this);
var html2jsMap = new Simulator.HTML2JSMap(this);
var sliderPreRenderQueue = new Simulator.Utils.Queue();
var sliderIndex = 1;
var speechGrammarBldr = null;
var speechMgr = null;
this.getSpeechGrammarBldr = function () {
return speechGrammarBldr;
};
this.getVisibility = function () {
return visible;
};
this.setVisibilityAndAttachEvents = function (newValue) {
visible = newValue;
if (newValue) {
this.resize(this, false);
this.bindResize(simDocument.body, this);
}
};
this.getSourceName = function () {
return source;
};
this.getDataTable = function () {
return dataTable;
};
this.setAnimationShellPath = function (path) {
if (!animationShellPath)
animationShellPath = path;
};
this.getAnimationShellPath = function () {
return animationShellPath;
};
this.setAnimationExternalScriptsPath = function (path) {
if (!animationExternalScriptsPath)
animationExternalScriptsPath = path;
};
this.getAnimationExternalScriptsPath = function () {
return animationExternalScriptsPath;
};
this.getAnimationSet = function () {
return animationSetObj;
};
this.getSimulationManager = function () {
return simMgr;
};
this.getSimDocument = function () {
return simDocument;
};
this.getLayout = function () {
return layout;
};
this.getSimID = function () {
return simID;
};
this.getHTML2JSMap = function () {
return html2jsMap;
};
this.getParser = function () {
return parser;
};
this.getWhiteboard = function () {
return whiteboard;
};
this.getScoringTable = function () {
return scoringTable;
};
this.getPersistentVariableDB = function () {
return persistentVariableDB;
};
this.getEventManager = function () {
return eventMgr;
};
this.getDebug = function () {
return dbg;
};
this.getUtils = function () {
return utils;
};
this.getKeyboardInput = function () {
return keyboardInput;
};
debug('Instantiating SimulationManager');
simMgr = new Simulator.SimulationManager(this);
debug('Required services instantiated');
this.getSliderPreRenderQueue = function () {
return sliderPreRenderQueue;
};
this.getSliderIndex = function () {
return sliderIndex++;
};
this.getSpeechEnabled = function () {
return speechEnabled;
};
this.getLanguage = function () {
return language;
};
this.getMode = function () {
return mode;
};
this.getXmlns = function () {
return xmlns;
};
this.animationIsPresent = function () {
return animationPresent;
};
this.startSimulation = function (xmlFile) {
var xmlDoc = loadXMLDoc(xmlFile);
this.startSimulationXmlDom(xmlDoc);
sendStartEvent();
};
this.startSimulationXmlText = function (xmlText) {
var xmlDoc = loadXMLDocFromString(xmlText);
this.startSimulationXmlDom(xmlDoc);
sendStartEvent();
};
var onSliderContainerDone = function () {
var sliderElement = instance.getSliderPreRenderQueue().remove();
while (sliderElement) {
sliderElement.postContainerRender();
sliderElement = instance.getSliderPreRenderQueue().remove();
}
};
this.startSimulationXmlDom = function (xmlDoc) {
eventMgr.startEventProcessing();
debug('Simulator is loading');
if (container) {
var className = container.getAttribute('class');
if (className)
className += ' simV2';
else
className = 'simV2';
container.setAttribute('class', className);
}
var x = xmlDoc.childNodes[1];
if (!x) x = xmlDoc.childNodes[0];
if (!x) x = xmlDoc.getElementsByTagName('simulationItem');
if (x) {
recordItemAttributes(this, x);
simDocument = container.ownerDocument;
} else {
dbg.logFatalError(source, 'Missing "simulationItem" element in xml input file.');
return;
}
if (speechEnabled) {
if (speechGrammarBldr === null) speechGrammarBldr = new Simulator.Speech.SpeechGrammarBuilder(this);
speechGrammarBldr.setItemName(this.getItemName());
speechGrammarBldr.createHeader();
}
x = xmlDoc.getElementsByTagName('definition');
if (x.length > 0) {
debug('found definition spec');
var layOut = xmlDoc.getElementsByTagName('layout');
if (layOut.length > 0) {
debug('Found layout spec');
layout = new Simulator.Display.Layout(this, container);
layout.specifyLayout(layOut);
layout.createPanels(layOut[0].childNodes);
} else {
dbg.logFatalError(source, 'Missing "layout" element in xml input file.');
return;
}
} else {
dbg.logFatalError(source, 'Missing "definition" element in xml input file.');
}
var x = xmlDoc.getElementsByTagName('initialization');
if (x.length > 0) {
debug('Found initialization section');
recordInitializationSpecs(x);
}
simMgr.initManagerVariables();
var x = xmlDoc.getElementsByTagName('state');
if (x.length > 0) {
debug('Found state element');
}
x = xmlDoc.getElementsByTagName('input');
if (x.length > 0) {
debug('Found input section');
whiteboard.addCategory('dataInput');
whiteboard.addCategory('evaluationInput');
whiteboard.addCategory('animationInput');
whiteboard.addCategory('evaluationOutput');
whiteboard.addCategory('animationOutput');
var sections = xmlDoc.getElementsByTagName('section');
if (sections) {
for (var i = 0; i < sections.length; i++) {
createInputSection(this, sections[i]);
}
} else {
dbg.logFatalError(source, 'Missing "section" elements in xml input file.');
return;
}
} else {
dbg.logFatalError(source, 'Missing "input" element in xml input file.');
}
x = xmlDoc.getElementsByTagName('animation');
if (x.length > 0) {
animationPresent = true;
for (var k = 0; k < x.length; k++) {
debug('Found animation section');
createAnimationMembers(this, x[k]);
}
} else animationPresent = false;
x = xmlDoc.getElementsByTagName('display');
if (x.length > 0) {
for (var k = 0; k < x.length; k++) {
debug('Found display section');
createDisplayMembers(this, x[k]);
}
}
x = xmlDoc.getElementsByTagName('evaluation');
var parser = new SimParser.EvaluationUnit(this);
if (x.length > 0) {
debug('Found evaluation section');
try {
parser.load(xmlDoc);
} catch (err) {
dbg.logFatalError(source, 'Error loading evaluation element: ' + err);
return;
}
}
x = xmlDoc.getElementsByTagName('control');
if (x.length > 0) {
debug('Found control section');
}
onSliderContainerDone();
if (speechEnabled) {
speechGrammarBldr.finishItemSpeechGrammar();
if (speechMgr === null) speechMgr = new Simulator.Speech.SpeechManager(this);
}
simMgr.setStateFromName('Loaded');
if (!animationPresent) eventMgr.postEvent(new Simulator.Event(this, 'info', 'allMediaLoaded'));
};
this.bindResize = function (dom, scope) {
if (dom) {
var f = function () { scope.resize(scope, false); };
dom.onresize = f;
} else {
dbg.logError(source, 'Failed to bind a resize event.');
}
};
this.resize = function (scope, zoom) {
scope = scope || this;
if (scope.getVisibility())
layout.resizeAllPanels(zoom);
};
this.getDoc = function () { return simDocument; };
this.getWin = function () { return window; };
this.loadXml = function (itemXml, responseXml) {
this.startSimulationXmlText(itemXml);
if (responseXml != null && responseXml.length > 0) {
this.loadResponseXml(responseXml);
}
};
this.getResponseXml = function () {
var stateMgr = new Simulator.ResponseStateManager(this);
simMgr.setResponseStateVariables(stateMgr);
return stateMgr.saveState();
};
this.loadResponseXml = function (xmlText) {
var responseMgr = new Simulator.ResponseStateManager(this);
simMgr.clearSimulationState();
var xmlDoc = loadXMLDocFromString(xmlText);
responseMgr.restoreSimulation(xmlDoc);
simMgr.displaySimulatorState();
};
this.isValid = function () {
return scoringTable.outputEntered();
};
this.isPlaying = function () {
return simMgr.isPlaying();
};
this.setReadOnlyState = function (readOnlyState) {
simMgr.setReadOnlyState(readOnlyState);
};
this.getAccessibilityIFActive = function () {
return accessibilityIFActive;
};
this.zoom = function (factor) {
this.zoomFactor = factor;
this.resize(this, true);
};
this.show = function () {
};
this.hide = function () {
};
this.focus = function () {
keyboardInput.initializeKeyboardShortcuts();
};
this.blur = function () {
keyboardInput.removeKeyboardShortcuts();
};
this.subscribe = function (type, context, callback) {
var stateCallback =
{
handleEvent: callback
};
var event = new Simulator.Event(stateCallback, type, context);
eventMgr.registerEvent(event);
return event;
};
this.unsubscribe = function (event) {
eventMgr.deRegisterEvent(event);
};
this.inspect = function (embedded, forced) {
var buff = [];
buff.push('Inspecting ' + source);
buff.push('simID = ' + simID);
buff.push('End inspecting ' + source);
if (embedded) return buff.join('\n');
else forced ? debugf(buff.join('\n')) : debug(buff.join('\n'));
};
dbg.setDebug(true);
dbg.setErrorReportLevel('SimWarning');
simID = simIDgenerate();
debug('accessibilityIFActive = ' + accessibilityIFActive);
function startSimulator() {
simMgr.setStateFromName('Loaded');
}
function recordItemAttributes(sim, node) {
var attrArray = utils.getAttributes(node);
for (var attr in attrArray) {
switch (attr) {
case 'speechEnabled': speechEnabled = attrArray[attr] === 'yes' ? true : false;
break;
case 'language': language = attrArray[attr];
break;
case 'mode': mode = attrArray[attr];
break;
case 'itemName': itemName = attrArray[attr];
break;
case 'xmlns': xmlns = attrArray[attr];
break;
default: dbg.logWarning(source, 'Unrecognized Simulator attribute ' + attr + ' with value ' + attrArray[attr]);
break;
}
}
debug('Completed recording item attributes');
}
function loadXMLDoc(fileName) {
var xhttp = null;
if (window.XMLHttpRequest) {
xhttp = new XMLHttpRequest();
} else {
xhttp = new ActiveXObject('Microsoft.XMLHTTP');
}
xhttp.open('GET', fileName, false);
xhttp.send();
return xhttp.responseXML;
}
function loadXMLDocFromString(xmlStr) {
var xmlDoc = null;
if (window.DOMParser) {
var domParser = new DOMParser();
xmlDoc = domParser.parseFromString(xmlStr, 'application/xml');
} else
{
xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
xmlDoc.async = 'false';
xmlDoc.loadXML(xmlStr);
}
return xmlDoc;
}
function recordInitializationSpecs(initNode) {
var varName = null;
var value = null;
var isIE = utils.isInternetExplorer();
if (initNode.length > 0) {
var children = initNode[0].childNodes;
whiteboard.addCategory('initialization');
for (var i = 0; i < children.length; i++) {
if (children[i].nodeName[0] !== '#') {
varName = children[i].attributes[0].nodeValue;
value = children[i].attributes[1].nodeValue;
debug('Found initialization variable ' + varName + ' with value = ' + value);
if ((isIE && (children[i].attributes).getNamedItem('persistent') != undefined)
|| 'persistent' in children[i].attributes)
persistentVariableDB.updateElement(varName, value);
else {
key = whiteboard.addItem('initialization', varName);
whiteboard.setItem('initialization', varName, value, key);
}
}
}
debug('Completed recording initialization specs');
}
}
function createInputSection(sim, section) {
var panel = layout.getPanelInstance(Simulator.Constants.INPUT_PANEL_NAME);
var attr = utils.getAttributes(section);
var aSection = new Simulator.Input.Section(sim, panel);
aSection.setAttributes(attr);
aSection.render();
var sectionElements = section.childNodes;
var theElement;
for (var i = 0; i < sectionElements.length; i++) {
switch (sectionElements[i].nodeName) {
case 'inputElement':
var iElements = sectionElements[i].childNodes;
for (var j = 0; j < iElements.length; j++) {
switch (iElements[j].nodeName) {
case 'dropList':
theElement = new Simulator.Input.DropList(sim, iElements[j], panel, aSection);
break;
case 'optionList':
theElement = new Simulator.Input.OptionList(sim, iElements[j], panel, aSection);
break;
case 'choiceList':
theElement = new Simulator.Input.ChoiceList(sim, iElements[j], panel, aSection);
break;
case 'upDownCounter':
theElement = new Simulator.Input.UpDownCounter(sim, iElements[j], panel, aSection);
break;
case 'slider':
theElement = new Simulator.Input.SimSlider(sim, iElements[j], panel, aSection);
break;
case 'textField':
theElement = new Simulator.Input.TextField(sim, iElements[j], panel, aSection);
break;
default:
continue;
}
var attr = utils.getAttributes(iElements[j]);
theElement.setAttributes(attr, iElements[j]);
setEvents(theElement, iElements[j]);
theElement.render();
break;
}
break;
case 'commandElement':
var cElements = sectionElements[i].childNodes;
for (var c = 0; c < cElements.length; c++) {
switch (cElements[c].nodeName) {
case 'button':
theElement = new Simulator.Control.Button(sim, panel, aSection);
break;
default:
continue;
}
theElement.setAttributes(cElements[c].attributes, cElements[c]);
setEvents(theElement, cElements[c]);
theElement.render(panel.getNodeID());
break;
}
break;
case 'staticElement':
var sElements = sectionElements[i].childNodes;
for (var s = 0; s < sElements.length; s++) {
switch (sElements[s].nodeName) {
case 'imageElement':
theElement = new Simulator.Input.ImageElement(sim, panel, aSection);
break;
case 'horizontalLine':
theElement = new Simulator.Input.HorizontalLine(sim, panel, aSection);
break;
case 'sectionDivider':
theElement = new Simulator.Input.SectionDivider(sim, panel, aSection);
break;
case 'verticalSpace':
theElement = new Simulator.Input.VerticalSpace(sim, panel, aSection);
break;
case 'textConstant':
theElement = new Simulator.Input.TextConstant(sim, panel, aSection);
break;
default:
continue;
}
theElement.setAttributes(sElements[s].attributes, sElements[s]);
theElement.render(Simulator.Constants.INPUT_PANEL_NAME);
break;
}
break;
}
}
}
function createAnimationMembers(sim, animationNode) {
var attr;
var theElement;
var animationSet = null;
var panel = layout.getPanelInstance(Simulator.Constants.ANIMATION_PANEL_NAME);
panel.recordOriginalWidthAndHeight();
for (var i = 0; i < animationNode.childNodes.length; i++) {
if (animationNode.childNodes[i].nodeName[0] != '#') {
animationSet = animationNode.childNodes[i];
break;
}
}
if (!animationSet) {
dbg().logError(source, 'Could not initialize animationSet.');
return;
}
var theSet = new Simulator.Animation.AnimationSet(sim, panel);
animationSetObj = theSet;
theSet.setAttributes(animationSet.attributes, animationSet);
setEvents(theSet, animationSet);
var animationSetElements = animationSet.childNodes;
for (var j = 0; j < animationSetElements.length; j++) {
switch (animationSetElements[j].nodeName) {
case 'animationThread':
var animationThread = animationSetElements[j];
theElement = new Simulator.Animation.AnimationThread(sim, panel, null, theSet);
attr = animationThread.attributes;
theElement.setAttributes(attr, animationThread);
var threadElements = animationThread.childNodes;
for (var k = 0; k < threadElements.length; k++) {
if (threadElements[k].nodeName === 'animationThreadElement') {
var aThreadElement = new Simulator.Animation.AnimationThreadElement(sim, theElement);
aThreadElement.setAttributes(threadElements[k].attributes, threadElements[k]);
theElement.addAnimationThreadElement(aThreadElement);
}
}
setEvents(theElement, animationThread);
break;
case 'animationElement':
theElement = new Simulator.Animation.AnimationElement(sim, theSet, panel);
attr = animationSetElements[j].attributes;
theElement.setAttributes(attr, animationSetElements[j]);
theSet.addAnimationElement(theElement);
if (theElement.getSrc() === '') {
var inlineElement = getElementInlineData(animationSetElements[j], sim);
if (inlineElement) {
theElement.setSrc(inlineElement.getData());
theElement.setInlineDataID(inlineElement.getID());
}
}
if ((theElement.getType() == 'html5') && (utils.canPlayHtml5())) {
panel.addPanelClass('withHTML5');
} else {
panel.addPanelClass('withFlash');
}
break;
case 'poster':
attr = animationSetElements[j].attributes;
theSet.setPoster(attr);
break;
case 'commandElement':
var cElements = animationSetElements[j].childNodes;
for (var c = 0; c < cElements.length; c++) {
switch (cElements[c].nodeName) {
case 'button':
theElement = new Simulator.Control.Button(sim, panel);
break;
default:
continue;
}
theElement.setAttributes(cElements[c].attributes, cElements[c]);
setEvents(theElement, cElements[c]);
theElement.render('animationPanel');
break;
}
break;
}
}
}
function getElementInlineData(node, sim) {
var aNode = null;
var theElement = new Simulator.Animation.InlineData(sim);
var attr = node.attributes;
var nodes = node.childNodes;
var numChildren = nodes.length;
for (var i = 0; i < numChildren; i++) {
aNode = nodes[i];
if (aNode.nodeName === 'inlineData') {
theElement.setAttributes(attr, aNode);
var data = aNode.textContent;
theElement.setData(data);
return theElement;
}
}
dbg.logError(source, 'Missing CDATA section for inlineData element');
return '';
}
function createDisplayMembers(sim, displayNode) {
var theElement = null;
var displayElements = displayNode.childNodes;
var panel = layout.getPanelInstance(Simulator.Constants.DATA_DISPLAY_PANEL_NAME);
for (var i = 0; i < displayElements.length; i++) {
switch (displayElements[i].nodeName) {
case 'displayElement':
var dElements = displayElements[i].childNodes;
for (var j = 0; j < dElements.length; j++) {
switch (dElements[j].nodeName) {
case 'table':
theElement = new Simulator.Display.DataTable(sim, panel);
dataTable = theElement;
simMgr.setTableExists(true);
break;
case 'graph':
break;
default:
continue;
}
theElement.setAttributes(dElements[j].attributes, dElements[j]);
setEvents(theElement, dElements[j]);
theElement.render('dataOutputPanel');
}
break;
case 'commandElement':
var cElements = displayElements[i].childNodes;
for (var c = 0; c < cElements.length; c++) {
switch (cElements[c].nodeName) {
case 'button':
theElement = new Simulator.Control.Button(sim, panel);
break;
default:
continue;
}
theElement.setAttributes(cElements[c].attributes, cElements[c]);
setEvents(theElement, cElements[c]);
theElement.render('dataOutputPanel');
break;
}
break;
}
}
}
function createControlMembers(sim, controlNode) {
var theElement = null;
var controlElements = controlNode.childNodes;
var panel = layout.getPanelInstance(Simulator.Constants.CONTROL_PANEL_NAME);
for (var i = 0; i < controlElements.length; i++) {
switch (controlElements[i].nodeName) {
case 'commandElement':
var cElements = controlElements[i].childNodes;
for (var c = 0; c < cElements.length; c++) {
switch (cElements[c].nodeName) {
case 'button':
theElement = new Simulator.Control.Button(sim, panel);
break;
default:
continue;
}
theElement.setAttributes(cElements[c].attributes, cElements[c]);
setEvents(theElement, cElements[c]);
theElement.render('controlPanel');
break;
}
break;
}
}
}
function setEvents(element, node) {
var events = [];
var attributes;
var children = node.childNodes;
if (children != null && children != undefined) {
for (var j = 0; j < children.length; j++) {
var id = children[j].nodeName;
if (id === 'event') {
attributes = children[j].attributes;
var eventInfo = createEvent(element, attributes);
element.addEvent(eventInfo['theEvent'], eventInfo['direction']);
}
}
}
return events;
}
function createEvent(obj, attributes) {
var response = [];
var data = '';
var ctx = '';
var dir = '';
var type = '';
var postOnChange = 'no';
var completeWithoutOutput = false;
for (var k = 0; k < attributes.length; k++) {
switch (attributes[k].nodeName) {
case 'direction':
dir = attributes[k].nodeValue;
break;
case 'data':
data = attributes[k].nodeValue;
break;
case 'context':
ctx = attributes[k].nodeValue;
break;
case 'type':
type = attributes[k].nodeValue;
break;
case 'postOnChange':
postOnChange = attributes[k].nodeValue;
break;
case 'completeWithoutOutput':
completeWithoutOutput = attributes[k].nodeValue === 'yes' ? true : false;
break;
}
}
response['theEvent'] = new Simulator.Event(obj, type, ctx, data, postOnChange, completeWithoutOutput); response['direction'] = dir;
return response;
}
function sendStartEvent() {
eventMgr.postEvent(new Simulator.Event(simMgr, 'command', 'load'));
}
function simIDgenerate() {
var id = new Date().getTime();
debug('simID generated: ' + id);
return id;
}
function debug(str1, str2, trace) {
dbg.debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg.debugf(source, str1, str2, trace);
}
};

// FILE: SimulationManager2.js (37d29644) 7/23/2014 4:30:37 PM

Simulator.SimulationManager = function (sim) {
var source = 'SimulationManager';
var name = 'SimulationManager';
var instance = this;
this.zoomFactor = 1;
var maxTrials = 0;
var initialTrialNum = 0;
var currentTrial = initialTrialNum;
var isTrialLimitReached = false;
var noMoreTrialsString = 'Limit on the Number of Trials Reached.';
var simulatorHeight = 0;
var simulatorWidth = 0;
var originalSimulatorHeight = 0;
var originalSimulatorWidth = 0;
var animationFinished = false;
var tableUpdated = false;
var itemName = '';
var redoingTrial = false;
var tableExists = false;
var animationCompleteWithoutOutput = false;
var stateDB = {};
var stateName = null;
var restoreAnimationOnReload = null;
var clearScoreOnNewTrial = false;
var useTrialNumFromDeleteQueue = false;
var state =
{
SimError: -1,
Uninitialized: 0,
Initialized: 1,
Instantiated: 2,
Loading: 3,
Loaded: 4,
Ready: 5,
TrialLimitReached: 6,
Playing: 7,
ReadOnly: 8
};
var currentState = state.Uninitialized;
var eventMgr = function () { return sim.getEventManager(); };
var whiteboard = function () { return sim.getWhiteboard(); };
var scoringTable = function () { return sim.getScoringTable(); };
var persistentVariableDB = sim.getPersistentVariableDB();
var trialNumStack = new Simulator.Utils.Stack(sim);
var deleteQueue = new Simulator.Utils.OrderedQueue(sim);
var layout = function () { return sim.getLayout(); };
var simID = function () { return sim.getSimID(); };
var dbg = function () { return sim.getDebug(); };
var dataTable = function () { return sim.getDataTable(); };
var simDocument = function () { return sim.getSimDocument(); };
registerAllEvents = function (simMgr) {
eventMgr().registerEvent(new Simulator.Event(simMgr, 'command', 'startTrial'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'command', 'newTrial'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'command', 'startAnimation'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'command', 'resetTrials'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'errorOccurred'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'animationStarted'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'animationFinished'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'animationThreadFinished'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'simulatorStateChange'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'animationUnreachable'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'tableUpdated'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'allMediaLoaded'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'allTableRowsCleared'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'command', 'redoTrial'));
eventMgr().registerEvent(new Simulator.Event(simMgr, 'info', 'simulatorDimensionsAvaiable'));
debug('Registered all pre - required events');
};
this.getName = function () {
return name;
};
this.getSourceName = function () {
return source;
};
this.getRestoreAnimationOnReload = function () {
return restoreAnimationOnReload;
};
this.setSimulatorHeight = function (height) {
if (height) {
simulatorHeight = height;
} else {
simulatorHeight = layout().getContainerHeight();
}
};
this.setSimulatorWidth = function (width) {
if (width) {
simulatorWidth = width;
} else {
simulatorWidth = layout().getContainerWidth();
}
};
this.setOriginalSimulatorHeight = function (height) {
if (height) {
originalSimulatorHeight = height;
} else {
originalSimulatorHeight = layout().getContainerHeight();
}
};
this.setOriginalSimulatorWidth = function (width) {
if (width) {
originalSimulatorWidth = width;
} else {
originalSimulatorWidth = layout().getContainerWidth();
}
};
this.getItemName = function () {
return itemName;
};
this.getSimulatorHeight = function () {
simulatorHeight = layout().getContainerHeight();
return simulatorHeight;
};
this.getSimulatorWidth = function () {
simulatorWidth = layout().getContainerWidth();
return simulatorWidth;
};
this.getOriginalSimulatorHeight = function () {
return originalSimulatorHeight;
};
this.getOriginalSimulatorWidth = function () {
return originalSimulatorWidth;
};
this.setAnimationCompleteWithoutOutput = function (flag) {
animationCompleteWithoutOutput = (flag === 'yes' || flag == true) ? true : false;
};
this.getAnimationCompleteWithoutOutput = function () {
return animationCompleteWithoutOutput;
};
this.setState = function (theState) {
currentState = theState;
switch (theState) {
case state.SimError: stateName = 'SimError'; break;
case state.Uninitialized: stateName = 'Uninitialized'; break;
case state.Initialized: stateName = 'Initialized'; break;
case state.Instantiated: stateName = 'Instantiated'; break;
case state.Loading: stateName = 'Loading'; break;
case state.Loaded: stateName = 'Loaded'; break;
case state.Ready: stateName = 'Ready'; break;
case state.TrialLimitReached: stateName = 'TrialLimitReached'; break;
case state.Playing: stateName = 'Playing'; break;
case state.ReadOnly: stateName = 'ReadOnly'; break;
default:
dbg().logError(source, 'Unknown state passed to setState: ' + theState);
return;
}
debugf('Simulator state: ' + stateName);
eventMgr().postEvent(new Simulator.Event(this, 'info', 'simulatorStateChange', stateName));
};
this.getState = function () {
return currentState;
};
this.getStateName = function () {
return stateName;
};
this.verifyCheckListSelection = function () {
return layout().hasEmptyChoiceListSelection();
};
this.setStateFromName = function (theStateName) {
switch (theStateName) {
case 'SimError': this.setState(state.SimError); break;
case 'Uninitialized': this.setState(state.Uninitialized); break;
case 'Initialized': this.setState(state.Initialized); break;
case 'Instantiated': this.setState(state.Instantiated); break;
case 'Loading': this.setState(state.Loading); break;
case 'Loaded': this.setState(state.Loaded); break;
case 'Ready': this.setState(state.Ready); break;
case 'TrialLimitReached': this.setState(state.TrialLimitReached); break;
case 'Playing': this.setState(state.Playing); break;
case 'ReadOnly': this.setState(state.ReadOnly); break;
default:
dbg().logError(source, 'Unknown state name passed to setState: ' + stateName);
return;
}
};
this.handleEvent = function (event) {
switch (event.type) {
case 'command':
switch (event.context) {
case 'startTrial':
var redoingATrial = this.adjustForRedoTrials();
if (!this.checkTrialLimitReached(redoingATrial)) {
layout().saveInputs();
tableUpdated = false;
animationFinished = false;
this.setAnimationCompleteWithoutOutput(false);
if (!redoingATrial) this.nextTrialNum();
} else this.trialLimitReachedAction();
break;
case 'startAnimation':
this.adjustForRedoTrials();
layout().saveInputs();
tableUpdated = false;
animationFinished = false;
break;
case 'newTrial':
if (!this.checkTrialLimitReached()) {
this.adjustForRedoTrials();
} else this.trialLimitReachedAction();
break;
case 'resetTrials':
if (!this.isReadOnly()) {
this.resetTrialNum();
layout().enableAllInput();
}
break;
case 'redoTrial':
if (!this.isReadOnly()) {
this.redoTrialNum(event.data);
}
break;
}
break;
case 'info':
switch (event.context) {
case 'animationStarted':
this.setPlayingState();
break;
case 'animationThreadFinished':
animationFinished = true;
debug(source, "Received animationThreadFinished event from, animationCompleteWithoutOutput = " + this.getAnimationCompleteWithoutOutput());
if (!this.getAnimationCompleteWithoutOutput()) {
debug('this.getTableExists() = ' + this.getTableExists() + ', tableUpdated = ' + tableUpdated);
if (this.getTableExists() && tableUpdated) {
dataTable().saveScoreableInputs();
whiteboard().clearCategory('evaluationOutput');
this.setReadyState();
} else {
if (!this.getTableExists()) {
debug(source, 'Table does not exist. Setting simulator state to Ready');
this.setReadyState();
}
else {
debug(source, 'Table does exist but has not been updated');
this.setReadyState();
}
}
} else {
dataTable().saveScoreableInputs();
debug(source, "Received animationThreadFinished event with animationCompleteWithoutOutput = true. Table was not updated. Current trial number remains at " + this.getTrialNum());
this.setReadyState();
}
break;
case 'animationUnreachable':
dbg.logWarning('AnimationUnreachable.Setting Ready state in SimulationManager.handleEvent');
this.setReadyState();
break;
case 'tableUpdated':
tableUpdated = true;
debug('Received tableUpdated event');
if (animationFinished) {
this.setReadyState();
}
break;
case 'allTableRowsCleared':
layout().enableAllInput();
break;
case 'allMediaLoaded':
debug("SimulationManager received 'allMediaLoaded' event");
this.setReadyState();
break;
case 'fatalErrorOccurred':
this.setState(state.Error);
eventMgr().postEvent(new Simulator.Event({ source: this, type: 'error', context: 'FatalSimulationError', data: event.data }));
eventMgr().stopEventProcessing();
break;
}
break;
default: dbg().logWarning(source, 'Unrecognized event of type "' + event.type + '" and context: "' + event.context + '"');
break;
}
};
this.lastTrialReached = function () {
if (deleteQueue.length() > 0) return false;
else if (maxTrials === 0) return false;
else if (trialNumStack.peek() < parseInt(maxTrials)) return false;
else {
trialNumStack.push(parseInt(maxTrials));
return true;
}
};
this.checkTrialLimitReached = function (redoingATrial) {
if (deleteQueue.length() > 0) {
isTrialLimitReached = false;
return false;
} else if (maxTrials === 0) {
isTrialLimitReached = false;
return false;
} else {
if (redoingATrial) isTrialLimitReached = (currentTrial > parseInt(maxTrials));
else isTrialLimitReached = (currentTrial >= parseInt(maxTrials));
return isTrialLimitReached;
}
};
this.trialLimitReached = function () {
return isTrialLimitReached;
};
this.nextTrialNum = function () {
var val = trialNumStack.peek();
if (isNaN(val)) trialNumStack.push(initialTrialNum);
else trialNumStack.push(parseInt(trialNumStack.peek()) + 1);
currentTrial = trialNumStack.peek();
if (!this.trialLimitReached() && clearScoreOnNewTrial) {
scoringTable().clearTable();
}
trialNumStack.inspect();
deleteQueue.inspect();
debug('SimulationManager.NextTrialNum: Setting next trial number to ' + currentTrial);
};
this.adjustForRedoTrials = function () {
if (deleteQueue.length() > 0) {
currentTrial = deleteQueue.remove();
useTrialNumFromDeleteQueue = true;
redoingTrial = false;
return true;
} else if (useTrialNumFromDeleteQueue) {
useTrialNumFromDeleteQueue = false;
currentTrial = trialNumStack.peek();
if (isNaN(currentTrial)) currentTrial = initialTrialNum;
return false;
} else return false;
};
this.redoTrialNum = function (num) {
deleteQueue.add(num);
trialNumStack.inspect();
deleteQueue.inspect();
redoingTrial = true;
this.setReadyState();
};
this.getTrialRowNum = function (recordOnChange) {
if (recordOnChange) {
if (deleteQueue.length() == 0) {
var val = trialNumStack.peek();
if (isNaN(val)) return initialTrialNum;
else return parseInt(trialNumStack.peek());
} else {
return deleteQueue.peek() - 1;
}
} else {
if (useTrialNumFromDeleteQueue) {
return currentTrial - 1;
} else {
var val = trialNumStack.peek();
if (isNaN(val)) return initialTrialNum;
else return parseInt(trialNumStack.peek());
}
}
}
this.isRedoingTrial = function () {
return redoingTrial;
};
this.getTrialNum = function () {
return currentTrial;
};
this.getInitialTrialNum = function () {
return initialTrialNum;
};
this.setTrialNum = function (num) {
trialNumStack.push(num);
currentTrial = num;
debug('SimulationManager.SetTrialNum: Setting current trial number to ' + currentTrial);
};
this.resumeTrials = function () {
};
this.resetTrialNum = function () {
deleteQueue.clear();
trialNumStack.push(Simulator.Constants.DEFAULT_INITIAL_TRIAL_NUM);
currentTrial = trialNumStack.peek();
};
this.getDisabledAction = function () {
switch (this.getState()) {
case state.TrialLimitReached:
return trialLimitReachedAction;
default: return this.noAction;
}
};
this.trialLimitReachedAction = function () {
this.setTrialLimitReachedState();
Simulator.showAlertWarning(this.getNoMoreTrialString());
};
this.noAction = function () {
return;
};
this.getNoMoreTrialString = function () {
return noMoreTrialsString;
};
this.getBaseURL = function () {
return baseURL;
};
this.getName = function () {
return source;
};
this.isPlaying = function () {
return this.getStateName() === 'Playing';
};
this.isReadOnly = function () {
return this.getStateName() == 'ReadOnly';
};
this.isReady = function () {
return (this.getState() === state.Ready);
};
this.setReadOnlyState = function (newState) {
newState === true ? this.setState(state.ReadOnly) : this.setState(state.Ready);
};
this.setReadyState = function () {
this.setState(state.Ready);
debugf('Enabling all input and setting simulator state to "Ready"', null, 'notrace');
layout().enableAllInput();
};
this.setPlayingState = function () {
debugf('Disabling all input and setting simulator state to "Playing"', null, 'notrace');
this.setState(state.Playing);
layout().disableAllInput();
};
this.setTrialLimitReachedState = function () {
this.setState(state.TrialLimitReached);
layout().disableAllInput();
};
this.getNextItem = function () {
window.location.reload();
};
this.getResponse = function () {
var contents = dataDB.getContents();
return contents;
};
this.setTableExists = function (flag) {
flag == true ? tableExists = true : tableExists = false;
};
this.getTableExists = function () {
return tableExists;
};
this.displaySimulatorState = function (embedded) {
var buff = [];
var aState = null;
buff.push('Simulator State:');
buff.push('-----------------------');
buff.push(deleteQueue.inspect(false));
buff.push(trialNumStack.inspect(false));
buff.push('currentTrial = ' + currentTrial);
buff.push('redoingTrial = ' + redoingTrial);
buff.push('currentState = ' + this.getStateName());
buff.push('zoomFactor = ' + this.zoomFactor);
buff.push('speechEnabled = ' + sim.getSpeechEnabled());
buff.push('simulator height = ' + this.getSimulatorHeight());
buff.push('simulator width = ' + this.getSimulatorWidth());
if (sim.getAnimationSet() !== null) {
aState = sim.getAnimationSet().getCurrentAnimationState();
} else {
aState = [];
aState['animation state'] = 'none';
}
for (var p in aState) buff.push(p + ' = ' + aState[p]);
buff.push('End of Simulator State');
buff.push('-----------------------');
if (!embedded) debug(buff.join('\n'));
else return buff.join('\n');
};
this.initManagerVariables = function () {
var whtBrd = whiteboard();
this.setTrialNum(Simulator.Constants.DEFAULT_INITIAL_TRIAL_NUM);
currentTrial = this.getTrialNum();
if (whtBrd.itemExists('initialization', 'MaxTrials')) {
maxTrials = whtBrd.getItem('initialization', 'MaxTrials');
if ((maxTrials) && (maxTrials > 0)) {
scoringTable().setMaxRowNum(maxTrials);
}
}
if (whtBrd.itemExists('initialization', 'NoMoreTrialsString')) {
noMoreTrialsString = whtBrd.getItem('initialization', 'NoMoreTrialsString');
}
if (whtBrd.itemExists('initialization', 'ClearScoreOnNewTrial')) {
clearScoreOnNewTrial = whtBrd.getItem('initialization', 'ClearScoreOnNewTrial');
clearScoreOnNewTrial = clearScoreOnNewTrial === 'yes' ? true : false;
}
if (whtBrd.itemExists('initialization', 'RestoreAnimationOnReload')) {
restoreAnimationOnReload = whtBrd.getItem('initialization', 'RestoreAnimationOnReload');
restoreAnimationOnReload = restoreAnimationOnReload === 'yes' ? true : false;
}
};
this.setSimulatorHeight = function (height) {
simulatorHeight = height;
};
this.setSimulatorWidth = function (width) {
simulatorWidth = width;
};
this.setResponseStateVariables = function (stateMgr) {
stateMgr.setResponseStateVariableValue('deleteQueue', deleteQueue.entriesAsString());
stateMgr.setResponseStateVariableValue('trialNumStack', trialNumStack.entriesAsString());
stateMgr.setResponseStateVariableValue('currentTrial', currentTrial);
stateMgr.setResponseStateVariableValue('redoingTrial', redoingTrial);
if (this.getStateName() == 'ReadOnly') stateMgr.setResponseStateVariableValue('currentState', 'Ready');
else stateMgr.setResponseStateVariableValue('currentState', this.getStateName());
stateMgr.setResponseStateVariableValue('zoomFactor', this.zoomFactor);
stateMgr.setResponseStateVariableValue('speechEnabled', sim.getSpeechEnabled());
if (this.getStateName() == 'ReadOnly') stateMgr.setResponseStateVariableValue('simulatorHeight', this.getOriginalSimulatorHeight());
else stateMgr.setResponseStateVariableValue('simulatorHeight', this.getSimulatorHeight());
if (this.getStateName() == 'ReadOnly') stateMgr.setResponseStateVariableValue('simulatorWidth', this.getOriginalSimulatorWidth());
else stateMgr.setResponseStateVariableValue('simulatorWidth', this.getSimulatorWidth());
};
this.clearSimulationState = function () {
trialNumStack.clear();
deleteQueue.clear();
};
function recordStateSpecs(initNode) {
if (initNode.length > 0) {
var children = initNode[0].childNodes;
for (var i = 0; i < children.length; i++) {
spec = children[i];
if (children[i].nodeName[0] != '#') {
varName = children[i].attributes[0].nodeValue;
stateDB.varName = '';
}
}
}
}
this.restoreStateVariables = function (stateDB) {
var parts = null;
for (p in stateDB) {
switch (p) {
case 'deleteQueue':
deleteQueue.clear();
parts = stateDB['deleteQueue'].split(',');
for (var i = 0; i < parts.length; i++) {
if (parts[i]) {
if (parts[i] !== undefined && parts[i] !== '') deleteQueue.add(parseInt(parts[i]));
}
}
break;
case 'trialNumStack':
trialNumStack.clear();
parts = stateDB['trialNumStack'].split(',');
for (var i = parts.length - 1; i > -1; i--) {
if (parts[i]) {
if (parts[i] !== undefined && parts[i] !== '') trialNumStack.push(parseInt(parts[i]));
}
}
break;
case 'currentTrial':
if (stateDB[p] !== '') currentTrial = parseInt(stateDB[p]);
break;
case 'redoingTrial':
redoingTrial = stateDB[p] === 'true' ? true : false;
break;
case 'currentState':
this.setStateFromName(stateDB[p]);
break;
case 'zoomFactor':
this.zoomFactor = parseFloat(stateDB[p]);
break;
case 'simulatorHeight':
this.setSimulatorHeight(stateDB[p]);
this.setOriginalSimulatorHeight(stateDB[p]);
break;
case 'simulatorWidth':
this.setSimulatorWidth(stateDB[p]);
this.setOriginalSimulatorWidth(stateDB[p]);
break;
}
}
this.displaySimulatorState();
};
if (sim) registerAllEvents(instance);
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: ResponseStateManager2.js (a910fe9e) 3/7/2014 11:24:14 AM

Simulator.ResponseStateManager = function (sim) {
var stateDB = {};
var persistentVarDB = function () { return sim.getPersistentVariableDB(); };
var util = function () { return sim.getUtils(); };
var simMgr = function () { return sim.getSimulationManager(); };
var dbg = function () { return sim.getDebug(); };
var scoringTable = function () { return sim.getScoringTable(); };
var dataTable = function () { return sim.getDataTable(); };
var simDocument = function() { return sim.getSimDocument(); };
var setStateVarSpec = function (initNode) {
var attr = initNode.attributes;
if (attr.length > 0) {
var element = attr['element'].nodeValue;
var value = attr['value'].nodeValue;
if (attr['persistent']) {
if (attr['persistent'].nodeValue == 'yes') persistentVarDB().updateElement(element, value);
}
else stateDB[element] = value;
}
};
var setInputStateSpec = function (initNode, panel) {
var attr = initNode.attributes;
if (attr.length > 0) {
var element = attr['element' +
''].nodeValue;
var value = attr['value'].nodeValue;
panel.setElementSelectState(element, value);
}
};
var setAnimationStateSpec = function (initNode) {
var spec = null;
var attr = null;
var animationStateDB = [];
var children = initNode.childNodes;
for (var i = 0; i < children.length; i++) {
if (children[i].nodeName[0] != '#') {
spec = children[i];
attr = spec.attributes;
if (attr.length > 0) {
var element = attr['element'].nodeValue;
var value = attr['value'].nodeValue;
animationStateDB[element] = value;
}
}
}
if (Object.size(animationStateDB) > 0) sim.getAnimationSet().setCurrentAnimationState(animationStateDB);
};
function writeSimulationState(indent) {
var simStateStr = indent + '<state>\n';
var doubleIndent = indent + indent;
var tripleIndent = doubleIndent + indent;
for (var p in stateDB) {
simStateStr = simStateStr + doubleIndent + '<stateSpec element="' + p + '" value="' + stateDB[p] + '" /> \n';
}
var store = persistentVarDB().getContents();
for (var i in store) {
simStateStr = simStateStr + doubleIndent + '<stateSpec element="' + i + '" value="' + store[i] + '" persistent="yes" /> \n';
}
var inputState = sim.getLayout().getPanelInstance(Simulator.Constants.INPUT_PANEL_NAME).saveInputElementStates(indent, '<inputSpec ', 'element="', '" value="', '" />\n');
simStateStr = simStateStr + inputState;
var displayTable = dataTable();
if (displayTable) {
var tableStr = displayTable.getContents(tripleIndent);
if (tableStr) {
simStateStr = simStateStr + doubleIndent + '<stateTableSpec id="dataTable"> \n' +
tableStr + doubleIndent + '</stateTableSpec>';
}
}
if (simMgr().getRestoreAnimationOnReload()) {
var animationState = sim.getAnimationSet().getCurrentAnimationState();
if (animationState != undefined && animationState != null) {
simStateStr = simStateStr + doubleIndent + '<animationStateSpec> \n';
for (var k in animationState) {
simStateStr = simStateStr + tripleIndent + '<stateSpec element="' + k + '" value="' + animationState[k] + '" /> \n';
}
simStateStr = simStateStr + doubleIndent + '</animationStateSpec>';
}
}
simStateStr = simStateStr + indent + '\n</state>\n';
return simStateStr;
}
this.setResponseStateVariableValue = function (theVariable, theValue) {
stateDB[theVariable] = theValue;
};
this.getResponseStateVariableValue = function (theVariable) {
return stateDB[theVariable];
};
this.restoreSimulation = function (xmlDoc) {
var responseSpec = xmlDoc.getElementsByTagName('responseSpec')[0];
if (responseSpec) {
var simState = responseSpec.getElementsByTagName('state')[0];
var children = simState.childNodes;
for (var i = 0; i < children.length; i++) {
if (children[i].nodeName[0] != '#') {
switch (children[i].nodeName) {
case 'stateSpec':
setStateVarSpec(children[i]);
break;
case 'inputSpec':
setInputStateSpec(children[i], sim.getLayout().getPanelInstance(Simulator.Constants.INPUT_PANEL_NAME));
break;
case 'stateTableSpec':
var nextGen = children[i].childNodes;
for (var q = 0; q < nextGen.length; q++) {
if (nextGen[q].nodeName == 'stateTable') {
dataTable().loadFromResponse(nextGen[q]);
}
}
break;
case 'animationStateSpec':
setAnimationStateSpec(children[i]);
break;
}
}
}
simMgr().restoreStateVariables(stateDB);
scoringTable().restoreResponseTable(responseSpec.getElementsByTagName('responseTable')[0]);
}
};
this.saveState = function () {
var stateStr = '<responseSpec>\n';
var responseStr = scoringTable().getContents('  ');
stateStr += responseStr + '\n\n';
stateStr += writeSimulationState('  ');
stateStr += '\n</responseSpec>';
return stateStr;
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: Canvas2.js (958ad2a2) 3/7/2014 11:24:14 AM

Simulator.Display.Canvas = function(sim) {
Simulator.SimElement.call(this, sim);
var source = 'Canvas';
var instance = this;
var hTMLElement = '';
var top = 0;
var left = 0;
var height = 0;
var width = 0;
var backgroundColor = '';
var dbg = function() {return sim.getDebug();};
var simulationMgr = function() {return sim.getSimulationManager();};
var simDocument = function() { return sim.getSimDocument(); };
this.getHTMLElement = function() {
return hTMLElement;
};
this.setHTMLElement = function(newHTMLElement) {
hTMLElement = newHTMLElement;
return this;
};
this.getTop = function() {
return top;
};
this.setTop = function(newTop) {
top = newTop;
return this;
};
this.getLeft = function() {
return left;
};
this.setLeft = function(newLeft) {
left = newLeft;
return this;
};
this.getHeight = function() {
if(simulationMgr()) {
return (parseFloat(height)/100)*(simulationMgr().getSimulatorHeight());
}
else return 0;
};
this.getHeightPercentage = function() {
return height;
};
this.setHeight = function(newHeight) {
height = newHeight;
return this;
};
this.getWidth = function() {
if(simulationMgr()) {
return (parseFloat(width)/100)*(simulationMgr().getSimulatorWidth());
}
else return 0;
};
this.getWidthPercentage = function() {
return width;
};
this.setWidth = function(newWidth) {
width = newWidth;
return this;
};
this.getBackgroundColor = function() {
return backgroundColor;
};
this.setBackgroundColor = function(newBackgroundColor) {
backgroundColor = newBackgroundColor;
return this;
};
this.containsElement = function(elementID) {
var children = hTMLElement.childNodes;
for(var i = 0; i < children.length; i++) {
if(children[i].nodeName[0] != '#') {
if(children[i].nodeValue == elementID) return true;
}
}
return false;
};
this.containsElementWithAttribute = function(elementID, attributeName, attributeValue) {
var attributes = null;
var children = hTMLElement.childNodes;
for(var i = 0; i < children.length; i++) {
if(children[i].nodeName[0] != '#') {
if(children[i].nodeValue == elementID) {
attributes = children[i].attributes;
if(attributes) {
if(attributeName in attributes) {
if(attributeValue) return attributes[attributeName] == attributeValue;
else return true;
}
} else return false;
} else return false;
}
}
return false;
};
this.setEname('Canvas');
this.setAttributes = function(attr, node) {
Simulator.Display.Canvas.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'top':
this.setTop(attr[i]);
break;
case 'left':
this.setLeft(attr[i]);
break;
case 'height':
this.setHeight(attr[i]);
break;
case 'width':
this.setWidth(attr[i]);
break;
case 'backgroundColor':
this.setBackgroundColor(attr[i]);
break;
}
}
};
this.getSourceName = function() {
return source;
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Display.Canvas.prototype = new Simulator.SimElement();
Simulator.Display.Canvas.prototype.constructor = Simulator.Display.Canvas;

// FILE: Panel2.js (2a3b3e28) 5/2/2014 12:55:58 PM

Simulator.Display.Panel = function (sim, panelNum) {
Simulator.Display.Canvas.call(this, sim);
var source = 'Panel';
var instance = this;
var headerText = '';
var headerTextSize = '';
var float = '';
var initialFocus = false;
var display = 'hidden';
var borderColor = '';
var dialogAttr = [];
var panelNumber = panelNum;
var panelID = '';
var dialogPanel = null;
var ioElements = [];
var dialogButtonLabel = "";
var originalWidth = null;
var originalHeight = null;
var dbg = function () { return sim.getDebug(); };
var utils = function () { return sim.getUtils(); };
var simDocument = function () { return sim.getSimDocument(); };
this.registerIOElement = function (inputElement) {
ioElements.push(inputElement);
};
this.getOriginalHeight = function () {
return originalHeight;
}
this.getOriginalWidth = function () {
return originalWidth;
}
this.recordOriginalWidthAndHeight = function () {
if (this.getName() == 'animationPanel' && !(originalWidth > 0 && originalHeight > 0)) {
originalWidth = this.getWidth();
originalHeight = this.getHeight();
debugf(source, 'Recording Original Width =' + originalWidth + ' Original Heigth =' + originalHeight);
}
}
this.getHeaderText = function () {
return headerText;
};
this.setHeaderText = function (newHeaderText) {
headerText = newHeaderText;
return this;
};
this.getHeaderTextSize = function () {
return headerTextSize;
};
this.setHeaderTextSize = function (textSize) {
headerTextSize = textSize == 'small' || textSize == 'medium' | textSize == 'large' | textSize == 'x-Large' ? textSize : null;
if (!headerTextSize) {
dbg().logError(source, 'Invalid value for headerTextSize attribute: ' + textSize);
headerTextSize = '';
}
return this;
};
this.getFloat = function () {
return float;
};
this.setFloat = function (newFloat) {
float = newFloat == 'left' | newFloat == 'right' || newFloat == 'none' ? newFloat : null;
if (!float) {
dbg().logError(source, 'Invalid value for float attribute: ' + newFloat);
newFloat = '';
}
return this;
};
this.getInitialFocus = function () {
return initialFocus;
};
this.setInitialFocus = function (newInitialFocus) {
initialFocus = newInitialFocus == 'yes' ? true : false;
return this;
};
this.setDialogButtonLabel = function (newLabel) {
dialogButtonLabel = newLabel;
};
this.getDialogButtonLabel = function () {
return dialogButtonLabel;
};
this.getDisplay = function () {
return display;
};
this.setDisplay = function (newDisplay) {
display = (newDisplay == 'inline' || newDisplay == 'block' || newDisplay == 'none' || newDisplay == 'hidden' || newDisplay == 'visible') ? newDisplay : null;
if (!display) {
dbg().logError(source, 'Invalid value for display attribute: ' + newDisplay);
display = 'hidden';
}
return this;
};
this.resize = function (zoom) {
if (this.getName() == 'animationPanel') {
sim.getAnimationSet().getRenderer().resizeAnimationElements(this, zoom);
}
};
this.getBorderColor = function () {
return borderColor;
};
this.setBorderColor = function (newBorderColor) {
borderColor = newBorderColor;
return this;
};
this.appendStr = function (str) {
var hElement = this.getHTMLElement();
hElement.innerHTML = hElement.innerHTML + str;
};
this.setStr = function (str) {
var hElement = this.getHTMLElement();
hElement.innerHTML = str;
};
this.resetStr = function (str) {
var hElement = this.getHTMLElement();
hElement.innerHTML = this.getHeaderText() + str;
};
this.disableAllInput = function () {
for (var i = 0; i < ioElements.length; i++) {
ioElements[i].disableInput();
}
};
this.enableAllInput = function () {
for (var i = 0; i < ioElements.length; i++) {
ioElements[i].enableInput();
}
};
this.saveInputs = function () {
for (var i = 0; i < ioElements.length; i++) {
if (ioElements[i].recordInput)
ioElements[i].recordInput();
}
};
this.saveInputElementStates = function (indent, preface, nameStr, valStr, suffix) {
var stateStr = '';
for (var i = 0; i < ioElements.length; i++) {
if (ioElements[i].saveState) {
stateStr = stateStr + indent + ioElements[i].saveState(indent, preface, nameStr, valStr, suffix);
}
}
return stateStr;
};
this.setElementSelectState = function (elementID, contents) {
var iElement = null;
for (var i = 0; i < ioElements.length; i++) {
iElement = ioElements[i];
if (iElement.getName() == elementID) iElement.setElementSelectState('true', contents);
}
};
this.hasEmptyChoiceListSelection = function () {
var iElement = null;
for (var i = 0; i < ioElements.length; i++) {
iElement = ioElements[i];
if (iElement.getType() === 'choiceList') {
var choiceSelection = iElement.getData();
if (choiceSelection.length == 0) {
var sectionLabel = iElement.getSectionLabel();
if ((sectionLabel != null) && (sectionLabel != '')) {
dbg().logFatalError(iElement.getName(), 'you must make a selection for "' + sectionLabel + '"!');
} else {
dbg().logFatalError(iElement.getName(), 'you must make a selection for a choice element!');
}
return true;
}
}
}
return false;
};
this.getHTMLPanel = function () {
return simDocument().getElementById(this.getName());
};
this.setAttributes = function (panel, attr) {
Simulator.Display.Panel.prototype.setAttributes.call(this, attr);
for (var i in attr) {
switch (i) {
case 'headerText':
this.setHeaderText(attr[i]);
break;
case 'headerTextSize':
this.setHeaderTextSize(attr[i]);
break;
case 'float':
this.setFloat(attr[i]);
break;
case 'display':
this.setDisplay(attr[i]);
break;
case 'border':
this.setBorder(attr[i]);
break;
case 'initialFocus':
this.setInitialFocus(attr[i]);
break;
case 'instructions':
dialogAttr[i] = attr[i];
break;
case 'button':
this.setDialogButtonLabel(attr[i]);
break;
case 'borderColor':
this.setBorderColor(attr[i]);
break;
case 'title':
this.setTitle(attr[i]);
break;
}
}
if (!utils().assocArrayIsEmpty(dialogAttr)) dialogPanel = new Simulator.Display.DialogPanel(sim, instance, panelID, this.getDialogButtonLabel(), dialogAttr);
};
this.render = function () {
var div = simDocument().createElement('div');
if (this.getFloat()) {
div.style.display = this.getFloat();
}
if (this.getHeightPercentage()) {
div.style.height = this.getHeightPercentage();
}
if (this.getWidthPercentage()) {
div.style.width = this.getWidthPercentage();
}
if (this.getTop()) {
div.style.top = this.getTop();
}
if (this.getLeft()) {
div.style.left = this.getLeft();
}
div.id = this.getNodeID();
div.setAttribute('class', 'panel' + panelNumber + ' panelSingle ' + this.getName());
if (this.getHeaderText()) {
var div2 = simDocument().createElement('div');
div2.setAttribute('class', 'holderInfo');
div2.innerHTML = this.getHeaderText();
div.appendChild(div2);
}
var container = simDocument().getElementById(Simulator.Constants.SIM_CONTAINER_NAME + sim.getSimID());
container.appendChild(div);
this.setHTMLElement(div);
if ('instructions' in dialogAttr) {
if ('button' in dialogAttr) dialogPanel.render();
else div.innerHTML = this.getDialogAttr()['instructions'];
}
this.mapHTML2JS(div);
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, forced) {
var buff = [];
var sep = '\n';
if (!embedded)
buff.push('Inspecting ' + this.getName() + ' panel');
buff.push(sep);
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) forced === null ? debug(buff.join('')) : debugf(buff.join(''));
else return buff.join('');
};
this.addPanelClass = function (className) {
var htmlPanel = simDocument().getElementById(this.getNodeID());
if (htmlPanel) {
var classNames = htmlPanel.getAttribute('class');
if (classNames.indexOf(className) != -1) {
return;
}
if (classNames != '') {
className = ' ' + className;
}
classNames = classNames + className;
htmlPanel.setAttribute('class', classNames);
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Display.Panel.prototype = new Simulator.Display.Canvas();
Simulator.Display.Panel.prototype.constructor = Simulator.Display.Panel;

// FILE: InlineData2.js (3bc75045) 3/7/2014 11:24:14 AM

Simulator.Animation.InlineData = function (sim) {
var source = 'InlineData';
var id = '';
var name = '';
var data = '';
var animationElementName = '';
var util = function () { return sim.getUtils(); };
var simDocument = function() { return sim.getSimDocument(); };
var dbg = function () { return sim.getDebug(); }
this.setID = function(newID) {
id = newID;
};
this.getID = function() {
return id;
};
this.setName = function(newName) {
name = newName;
return this;
};
this.getName = function() {
return name;
};
this.setData = function(newData) {
data = newData;
return this;
};
this.getData = function() {
return data;
};
this.setAnimationElement = function(newAnimationElementName) {
animationElementName = newAnimationElementName;
};
this.getAnimationElementName = function() {
return animationElementName;
};
this.getSourceName = function() {
return source;
};
this.inspect = function(embedded, force) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting InlineData element ' + this.getName());
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
buff.push('End of inlineData element inspection');
buff.push(sep);
if(embedded) return buff.join('');
else force == null ? debug(buff.join('')) : debugf(buff.join(''));
};
Simulator.Animation.InlineData.prototype.setAttributes = function (attr, node) {
var attr = util().getAttributes(node);
for (var i in attr) {
switch (i) {
case 'id':
this.setID(attr[i]);
break;
case 'name':
this.setName(attr[i]);
break;
case 'animationElement':
this.setAnimationElement(attr[i]);
break;
}
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
}

// FILE: AnimationElement2.js (506d508b) 3/7/2014 11:24:14 AM

Simulator.Animation.AnimationElement = function (sim) {
Simulator.SimElement.call(this, sim);
var source = 'AnimationElement';
var controls = '';
var src = '';
var altSrc = '';
var altSrcType = '';
var altText = '';
var behavior = 'timeline';
var inlineDataID = '';
var interactive = false;
this.setEname(source);
var util = function () { return sim.getUtils(); };
var simDocument = function () { return sim.getSimDocument(); };
var dbg = function () { return sim.getDebug(); };
var simMgr = function () { return sim.getSimulationManager(); };
this.getControls = function () {
return controls;
};
this.setControls = function (newControls) {
controls = newControls == 'yes' ? 'controls' : '';
return this;
};
this.getSrc = function () {
return src;
};
this.setSrc = function (newSrc) {
var filename = util().getFileName(newSrc, true);
if (filename == 'inlineData') src = '';
else src = newSrc;
return this;
};
this.getAltSrc = function () {
return altSrc;
};
this.setAltSrc = function (newAltSrc) {
var filename = util().getFileName(newAltSrc, true);
if (filename == 'inlineData') altSrc = '';
else altSrc = newAltSrc;
return this;
};
this.getAltSrcType = function () {
return altSrcType;
};
this.setAltSrcType = function (newAltSrcType) {
altSrcType = newAltSrcType;
return this;
};
this.setAltText = function (newAltText) {
altText = newAltText;
return this;
};
this.getAltText = function () {
return altText;
};
this.setInteractive = function (newInteractive) {
interactive = (newInteractive == "yes") ? true : false;
if (interactive) behavior = Simulator.Constants.INTERACTIVE_ANIMATION;
return this;
};
this.getInteractive = function () {
return interactive;
};
this.getBehavior = function () {
return behavior;
};
this.setBehavior = function (newBehavior) {
behavior = newBehavior;
if (behavior === Simulator.Constants.INTERACTIVE_ANIMATION) interaction = true;
return this;
};
this.setInlineDataID = function (newInlineDataID) {
inlineDataID = newInlineDataID;
return this;
};
this.getInlineDataID = function () {
return inlineDataID;
};
this.setAttributes = function (attr, node) {
if (node) attr = util().getAttributes(node);
Simulator.Animation.AnimationElement.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'controls':
this.setControls(attr[i]);
break;
case 'src':
this.setSrc(attr[i]);
break;
case 'altSrc':
this.setAltSrc(attr[i]);
break;
case 'altSrcType':
this.setAltSrcType(attr[i]);
break;
case 'altText':
this.setAltText(attr[i]);
break;
case 'behavior':
this.setBehavior(attr[i]);
break;
case "interactive":
this.setInteractive(attr[i]);
break;
default:
continue;
}
}
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting ');
buff.push(this.getEname());
buff.push(': ');
buff.push(this.getName());
buff.push(sep);
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (embedded) return buff.join('');
else force == null ? debug(buff.join('')) : debugf(buff.join(''));
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Animation.AnimationElement.prototype = new Simulator.SimElement();
Simulator.Animation.AnimationElement.parent = Simulator.SimElement;
Simulator.Animation.AnimationElement.prototype.constructor = Simulator.Animation.AnimationElement;

// FILE: AnimationRenderer2.js (b613b00c) 3/7/2014 11:24:14 AM

Simulator.Animation.AnimationRenderer = function (sim, thePanel, animationSet) {
Simulator.SimItem.call(this, sim);
var source = 'AnimationRenderer';
var prevImageID = null;
var elementInfomediaType = null;
var elementInfoid = null;
var elementInfosrc = null;
var ID_SEPARATOR = '!';
var currenAnimationName = null;
var currentAnimationElement = null;
var tries = 0;
var maxTries = 10;
var animationInterval = 500;
var panel = thePanel;
var simID = null;
var iFrameID = null;
if (sim) {
simID = sim.getSimID();
}
var util = function () { return sim.getUtils(); };
var dbg = function () { return sim.getDebug(); };
var whiteboard = function () { return sim.getWhiteboard(); };
var eventMgr = function () { return sim.getEventManager(); };
var simMgr = function () { return sim.getSimulationManager(); };
var layout = function () { return sim.getLayout(); };
var simDocument = function () { return sim.getSimDocument(); };
function doImageRendering(element, img, panelName, div, span, renderMaxTime) {
debug('In doImageRendering - Image = ' + img.src + ', height = ' + img.height + ', width = ' + img.width);
var dimensions = util().setDimensions(panel.getHeight(), panel.getWidth(), img.height, img.width, 10              );
if (dimensions.height > 0 && dimensions.width > 0) {
img.height = dimensions.height;
img.width = dimensions.width;
debug('In doImageRendering - Image resize with padding to height = ' + img.height + ', width = ' + img.width);
}
span.appendChild(img);
elementInfomediaType = 'image';
elementInfoid = div.id;
elementInfosrc = img.src;
if (!renderMaxTime) remderMaxTime = 0;
if (renderMaxTime >= 0) setTimeout(function () { handleTimeout(element); }, renderMaxTime);
}
function handleTimeout(renderedElement) {
var anEvent = null;
if (renderedElement != undefined && renderedElement != null) {
var thread = animationSet.getCurrentThread();
if (thread != null && thread != undefined) {
var element = thread.renderNextThreadElement();
if (element == null) {
anEvent = new Simulator.Event(renderedElement, "info", "animationThreadFinished");
eventMgr().postEvent(anEvent);
}
}
else {
anEvent = new Simulator.Event(renderedElement, "info", "animationThreadFinished");
eventMgr().postEvent(anEvent);
}
}
else
dbg().logFatalError(source, "renderedElement is null in AnimationRenderer.handleTimeout");
};
function flashEmbedSuccessCallback(event) {
if (!event.success) {
animationSet.setCurrentAnimation(null);
dbg().logFatalError(source, 'Could not embed flash element ' + event.id);
} else {
animationSet.setCurrentAnimation(simDocument().getElementById(event.ref.id));
eventMgr().postEvent(new Simulator.Event(animationSet, 'info', 'animationEmbedded', event.ref));
sendDataToAnimationElement(false);
}
}
function sendDataToAnimationElement(element, update) {
var t = null;
var foundSource = false;
var interactive = false;
var data = '';
element = (!element) ? currentAnimationElement : element;
debug('In sendDataToAnimationElement - element = ' + element.getName());
if (util().elementInArray(animationSet.getInputSource(), 'evaluator')) {
data = whiteboard().getItem('evaluationOutput', 'output');
if (data == null || data == '') data = '';
else foundSource = true;
}
if (util().elementInArray(animationSet.getInputSource(), 'animation')) {
var animationData = whiteboard().getCategoryAsString('animationInput');
foundSource = true;
if (animationData != '' && animationData != null) {
if (data != '' && data != null) data += Simulator.Constants.PAIR_DELIMITTER + animationData;
else data = animationData;
}
}
if (foundSource == false) {
dbg().logFatalError(source, 'Unknown input source ' + animationSet.getInputSource() + ' in sendDataToAnimationElement. No data sent to animation element');
return;
}
if (tries == 0) util().markTime();
var movie = animationSet.getCurrentAnimation();
if (movie) {
if (!movie.animationInput) {
t = setTimeout(function () { sendDataToAnimationElement(element, false); }, animationInterval);
tries++;
if (tries > maxTries) {
clearTimeout(t);
tries = 0;
dbg().logFatalError(source, 'Could not establish interface with animation element ' + currenAnimationName + ' after ' + tries
+ ' attempts spanning ' + util().getElapsedTime() + ' ms');
}
return;
}
else {
clearTimeout(t);
tries = 0;
var simID = sim.getSimID();
if (element.getInteractive) interactive = element.getInteractive();
if (movie.animationInitialize) movie.animationInitialize(simID, interactive);
if (!update) {
if ((data != null) && (data != '')) {
movie.animationInput(simID, 'input', data);
debugf('Sending "' + data + '" to animation "' + currenAnimationName + '"');
}
else {
movie.animationInput(simID, 'input', 'input');
debugf('Sending "input" to animation "' + currenAnimationName + '"');
}
debugf('Sending "play" to current animation after ' + util().getElapsedTime() + ' ms');
eventMgr().postEvent(new Simulator.Event(animationSet, 'info', 'animationStarted'));
movie.animationInput(simID, 'command', 'play');
}
else {
if (movie.animationInput) {
debugf('Sending "update" to animation "' + currenAnimationName + '" with data: "' + data + '" after ' + util().getElapsedTime() + ' ms');
eventMgr().postEvent(new Simulator.Event(animationSet, 'info', 'animationStarted'));
if ((data != null) && (data != '')) movie.animationInput(simID, 'update', data);
else movie.animationInput(simID, 'update', 'input');
}
else dbg().logFatalError(source, 'Could not re-establish previously established interface with animation element ' + currenAnimationName);
}
}
}
}
function removeFlash(flashObj) {
swfobject.removeSWF(flashObj);
animationSet.setCurrentAnimation(null);
}
function formatAnimationInput(data) {
}
this.sendDataToAnimation = function (element) {
sendDataToAnimationElement(element, false);
};
this.renderImage = function (element, panelName, imageSrc, currentElementName, renderMaxTime, thread) {
var img = null;
var span = null;
var HTMLAnimation = null;
var HTMLPanel = panel.getHTMLElement();
span = simDocument().getElementById('holdingSpan' + simID);
if (span)
HTMLAnimation = span.getElementsByTagName('img')[0];
if (!HTMLAnimation)
HTMLAnimation = simDocument().getElementById(prevImageID);
if (HTMLAnimation) {
HTMLAnimation.src = imageSrc;
HTMLAnimation.id = element.getName();
if (!renderMaxTime) remderMaxTime = 0;
if (renderMaxTime >= 0) setTimeout(function () { handleTimeout(element); }, renderMaxTime);
}
else {
var div = simDocument().getElementById('holderAnimation' + simID);
if (div && div.media != 'imageAnimation') {
var parent = div.parentNode;
if (parent.id == 'outerDiv')
HTMLPanel.removeChild(parent);
else
HTMLPanel.removeChild(div);
}
div = simDocument().createElement('div');
div.id = 'holderAnimation' + simID;
div.elementName = currentElementName;
div.setAttribute('class', 'holderAnimation');
div.media = 'imageAnimation';
HTMLPanel.appendChild(div);
span = simDocument().createElement('span');
span.setAttribute('class', 'holderCell');
span.id = 'holdingSpan' + simID;
div.appendChild(span);
img = simDocument().createElement('img');
img.id = currentElementName;
prevImageID = img.id;
var imageLoaded = false, wait;
util().bindEvent(img, 'load', function () { imageLoaded = true; });
img.src = imageSrc;
wait = setInterval(function () {
if (imageLoaded) {
clearInterval(wait);
eventMgr().postEvent(new Simulator.Event(element, 'info', 'imageEmbedded', img));
eventMgr().postEvent(new Simulator.Event(element, "info", "allMediaLoaded"));
doImageRendering(element, img, panelName, div, span, renderMaxTime);
}
}, 1);
}
};
this.renderAnimation = function (element, panelName, animationSrc, animationName, animationControls, currentElementName, renderMaxTime, thread) {
var holderDiv = null;
var hsize = panel.getHeight();
var wsize = panel.getWidth();
var HTMLPanel = panel.getHTMLElement();
var result = null;
var initialRender = false;
if (elementInfomediaType != 'animation' || elementInfosrc != animationSrc) {
holderDiv = simDocument().getElementById('holderAnimation' + simID);
if (holderDiv && holderDiv.media != 'animation') {
var parent = holderDiv.parentNode;
if (parent.id == 'outerDiv') HTMLPanel.removeChild(parent);
else HTMLPanel.removeChild(holderDiv);
initialRender = true;
}
holderDiv = simDocument().createElement('div');
holderDiv.id = 'holderAnimation' + simID;
holderDiv.name = 'holderAnimation' + simID;
holderDiv.elementName = animationName;
holderDiv.setAttribute('class', 'holderAnimation');
HTMLPanel.appendChild(holderDiv);
elementInfomediaType = 'animation';
elementInfoid = holderDiv.id;
initialRender = true;
} else holderDiv = simDocument().getElementById('holderAnimation' + simID);
elementInfosrc = animationSrc;
currentAnimationElement = element;
if(sim.getAccessibilityIFActive()) {
var altText = element.getAltText();
var altTextSpan = simDocument().createElement('span');
altTextSpan.style.position='absolute';
altTextSpan.style.top = '50%';
holderDiv.style.verticalAlign='middle';
holderDiv.style.horizontalAlign='center';
altTextSpan.style.fontSize = 'xx-large';
altTextSpan.innerHTML = altText;
holderDiv.innerHTML = '';
holderDiv.appendChild(altTextSpan);
debug('renderAnimation simulating time of animation execution since accessibilityIF is true');
setTimeout(simulateAnimationExecutionTime, 5000);
return;
}
if (!iFrameID) iFrameID = this.createItemID(true, -1, 'html5iFrame');
var iFrame = simDocument().getElementById(iFrameID);
if (!iFrame) {
iFrame = simDocument().createElement('iframe');
iFrame.id = iFrameID;
iFrame.width = wsize - 5;
iFrame.height = hsize - 5;
debug('iFrame.height = ' + iFrame.height + ', iFrame.width = ' + iFrame.width);
iFrame.border = 0;
iFrame.scrolling = 'no';
iFrame.src = appendExternalScriptURLParameter(animationSrc, sim.getAnimationExternalScriptsPath());
iFrame.setAttribute('style', 'height:' + iFrame.height + 'px !important');
iFrame.setAttribute('class', 'centeredAnimation');
if (initialRender) holderDiv.appendChild(iFrame);
iFrame.onload = function () {
debug("iFrame is loaded");
createHTML5AnimationInterface(element, iFrame, animationName);
};
}
else {
if (renderMaxTime != undefined && renderMaxTime != null && renderMaxTime >= 0) {
setTimeout(function () { handleTimeout(element); }, renderMaxTime);
}
sendDataToAnimationElement();
}
};
function appendExternalScriptURLParameter(animationUrl, scriptUrl) {
if (scriptUrl)
scriptUrl = encodeURIComponent(scriptUrl);
if (animationUrl) {
if (animationUrl.indexOf('?') != -1)
animationUrl = animationUrl.replace('?', '?scriptUrl=' + scriptUrl + '&');
else
animationUrl = animationUrl + '?scriptUrl=' + scriptUrl;
}
return animationUrl;
}
function createHTML5AnimationInterface(element, iFrame, animationName, renderMaxTime) {
var html5Shell = new Simulator.Animation.HTML5Shell(sim, simID);
if (!html5Shell) {
dbg().logFatalError(source, 'Could not instantiate HTML5Shell');
} else {
var parameters = {
callback: animationSet.animationMediaOutput,
behavior: element.getBehavior(),
inlineData: null,
containerID: iFrame.id,
outputOnReq: animationSet.getOutputOnRequest()
};
animationSet.setCurrentAnimation(html5Shell);
result = html5Shell.initialize(simID, parameters);
if (result !== Simulator.Constants.ANIMATION_LOADED) dbg().logFatalError(source, 'Could not initialize HTML5Shell');
currenAnimationName = animationName;
}
if (renderMaxTime != undefined && renderMaxTime != null && renderMaxTime >= 0) {
setTimeout(function () { handleTimeout(element); }, renderMaxTime);
}
sendDataToAnimationElement(element, false);
};
this.renderHotText = function (element, panelName, animationSrc, animationName, animationControls, currentElementName, renderMaxTime, thread) {
var HTMLPanel = panel.getHTMLElement();
var holderDiv = null;
var hsize = panel.getHeight();
var wsize = panel.getWidth();
if (elementInfomediaType != 'hotText' || elementInfosrc != animationSrc) {
holderDiv = simDocument().getElementById('holderAnimation' + simID);
if (holderDiv && holderDiv.media != 'hotText') {
var parent = holderDiv.parentNode;
if (parent.id == 'outerDiv') HTMLPanel.removeChild(parent);
else HTMLPanel.removeChild(holderDiv);
}
holderDiv = simDocument().createElement('div');
holderDiv.id = 'holderAnimation' + simID;
holderDiv.style.textAlign = 'left';
holderDiv.name = 'holderAnimation' + simID;
holderDiv.elementName = animationName;
holderDiv.setAttribute('class', 'holderAnimation');
var contentDiv = simDocument().createElement('div');
contentDiv.id = 'hotTextContentDiv';
contentDiv.style.textAlign = 'left';
contentDiv.style.padding = '0px';
holderDiv.appendChild(contentDiv);
HTMLPanel.appendChild(holderDiv);
elementInfomediaType = 'animation';
elementInfoid = holderDiv.id;
}
elementInfosrc = animationSrc;
contentDiv.innerHTML = animationSrc;
if (renderMaxTime != undefined && renderMaxTime != null && renderMaxTime >= 0) {
setTimeout(function () { handleTimeout(element); }, renderMaxTime);
}
currenAnimationName = animationName;
var hotText = new Simulator.Animation.HotTextShell(sim);
animationSet.setCurrentAnimation(hotText);
debug('AnimationSet.CurrentAnimation = ' + animationSet.getCurrentAnimation());
debug('Initializing the HotTextShell: inlinDataID = ' + element.getInlineDataID() + ', holderDiv.id = ' + holderDiv.id + ', outputOnRequest = ' + animationSet.getOutputOnRequest());
var parameters = {
callback: animationSet.animationMediaOutput,
inlineDataID: element.getInlineDataID(),
containerID: holderDiv.id,
behavior: element.getBehavior(),
outputOnReq: animationSet.getOutputOnRequest()
};
hotText.initialize(simID, parameters);
sendDataToAnimationElement(element, false);
};
this.resizeAnimationElements = function (panel, zoom) {
var HTMLPanel = panel.getHTMLElement();
if (zoom) {
var flashObjectArray = HTMLPanel.getElementsByTagName('object');
if (flashObjectArray && flashObjectArray.length == 1) {
var flashObj = flashObjectArray[0];
flashObj.animationResize(parseInt(flashObj.style.width), parseInt(flashObj.style.height));
}
}
else {
var hsize = panel.getHeight();
var wsize = panel.getWidth();
var flashObjectArray = HTMLPanel.getElementsByTagName('object');
if (flashObjectArray && flashObjectArray.length == 1) {
var flashObj = flashObjectArray[0];
var dimensions = util().setDimensions(hsize, wsize, parseInt(panel.getOriginalHeight()), parseInt(panel.getOriginalWidth()), 10              );
if (dimensions.height > 0 && dimensions.width > 0) {
hsize = dimensions.height;
wsize = dimensions.width;
}
flashObj.width = wsize;
flashObj.height = hsize;
flashObj.setAttribute('originalwidth', wsize);
flashObj.setAttribute('originalheight', hsize);
flashObj.style.width = wsize + 'px';
flashObj.style.height = hsize + 'px';
flashObj.animationResize(wsize, hsize);
}
var imgArray = HTMLPanel.getElementsByTagName('img');
if (imgArray && imgArray.length == 1) {
var image = imgArray[0];
debug('Image height = ' + image.height + ', width = ' + image.width);
var dimensions = util().setDimensions(hsize, wsize, image.height, image.width, 10              );
if (dimensions.height > 0 && dimensions.width > 0) {
image.height = dimensions.height;
image.width = dimensions.width;
debug('Image resize with padding to height = ' + image.height + ', width = ' + image.width);
}
}
}
};
this.renderFlash = function (element, panelName, flashSrc, flashName, flashControls, currentElementName, renderMaxTime, thread) {
var HTMLPanel = panel.getHTMLElement();
if (elementInfomediaType != 'flash' || elementInfosrc != flashSrc) {
var expressFlashInstall = false;
var animationSet = thread.getAnimationSet();
var flashvars = {
simID: simID,
simURL: escape(flashSrc),
simCallback: (window.document == simDocument()) ? Simulator.Constants.SIM_CALLBACK : 'window.parent.' + Simulator.Constants.SIM_CALLBACK,
simBehavior: element.getBehavior()
};
debug("flashvars.simBehavior = " + flashvars.simBehavior);
var params = {
wmode: 'opaque',
allowscriptaccess: 'always',
swliveconnect: 'true'
};
var attributes = {};
attributes.name = flashName;
attributes.media = 'flashAnimation';
attributes.styleclass = 'centeredAnimation';
var flashVersion = '9';
var hsize, wsize;
if ((panel.getOriginalHeight() == null) || (panel.getOriginalHeight() <= 0)) {
hsize = panel.getHeight() - 10;
} else {
hsize = panel.getOriginalHeight() - 10;
}
if ((panel.getOriginalWidth() == null) || (panel.getOriginalWidth() <= 0)) {
wsize = panel.getWidth() - 10;
} else {
wsize = panel.getOriginalWidth() - 10;
}
var holderDiv = simDocument().getElementById('holderAnimation' + simID);
if (holderDiv && holderDiv.media != 'flashAnimation') {
var parent = holderDiv.parentNode;
if (parent.id == 'outerDiv') HTMLPanel.removeChild(parent);
else HTMLPanel.removeChild(holderDiv);
}
holderDiv = simDocument().createElement('div');
holderDiv.id = 'holderAnimation' + simID;
holderDiv.name = 'holderAnimation' + simID;
holderDiv.elementName = flashName;
holderDiv.setAttribute('class', 'holderAnimation');
holderDiv.innerHTML = '<h1>Alternative content</h1>';
HTMLPanel.appendChild(holderDiv);
if(sim.getAccessibilityIFActive()) {
var altText = element.getAltText();
var altTextSpan = simDocument().createElement('span');
altTextSpan.style.position='absolute';
altTextSpan.style.top = '50%';
holderDiv.style.verticalAlign='middle';
holderDiv.style.horizontalAlign='center';
altTextSpan.style.fontSize = 'xx-large';
altTextSpan.innerHTML = altText;
holderDiv.innerHTML = '';
holderDiv.appendChild(altTextSpan);
debug('renderFlash simulating time of animation execution since accessibilityIF is true');
setTimeout(simulateAnimationExecutionTime, 5000);
return;
}
elementInfomediaType = 'flash';
elementInfoid = holderDiv.id;
elementInfosrc = flashSrc;
currentAnimationElement = element;
currenAnimationName = flashName;
swfobject.switchOffAutoHideShow();
swfobject.embedSWF(sim.getAnimationShellPath(), holderDiv.id, wsize, hsize, flashVersion, expressFlashInstall, flashvars, params, attributes, simDocument(), flashEmbedSuccessCallback);
if (renderMaxTime != undefined && renderMaxTime != null && renderMaxTime >= 0) {
setTimeout(function () { handleTimeout(element); }, renderMaxTime);
}
}
else
sendDataToAnimationElement(element, false);
};
this.renderVideo = function (element, panelName, videoSrc, currentElementName, renderMaxTime, thread) {
var HTMLAnimation = simDocument().getElementById(currentElementName);
var vid = simDocument().createElement('video');
vid.setAttribute('type', 'application/x-shockwave-flash');
vid.setAttribute('width', panel.getWidth(true) - 2);
vid.controls = 'true';
vid.setAttribute('src', videoSrc);
vid.object = simDocument().createElement('object');
vid.object.data = 'flvplayer.swf';
vid.object.media = 'videoAnimation';
vid.object.type = 'application/x-shockwave-flash';
vid.object.param = simDocument().createElement('param');
vid.object.param.value = 'flvplayer.swf';
vid.object.param.name = 'movie';
var div = simDocument().createElement('div');
div.setAttribute('class', 'holderAnimation');
var span = simDocument().createElement('span');
span.appendChild(vid);
div.appendChild(span);
panel.replaceChild(div, HTMLAnimation);
};
function simulateAnimationExecutionTime(renderer) {
debug('Posting animationThreadFinished event since accessibilityIF is true');
eventMgr().postEvent(new Simulator.Event(this, 'info', 'animationThreadFinished'));
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Animation.AnimationRenderer.prototype = new Simulator.SimItem();
Simulator.Animation.AnimationRenderer.prototype.constructor = Simulator.Animation.AnimationRenderer;

// FILE: HTML5Shell.js (dee9b115) 7/23/2014 4:30:37 PM

Simulator.Animation.HTML5Shell = function(sim, theSimID) {
var source = 'HTML5Shell';
var simURL = null;
var iFrameID = null;
var iFrame = null;
var behavior = null;
var simCallback = null;
var simHeight = null;
var simWidth = null;
var simID = theSimID;
var outputOnReq = null;
var maxSRTimeouts = 2;
var statusReqTimer = null;
var statusReturnTimer = null;
var statusReportInterval = 10 * 1000;
var statusReturnInterval = 1 * 1000;
var animationFinishedDelay = 1000;
var dbg = function() {
return sim.getDebug();
};
var utils = function() {
return sim.getUtils();
};
var simDocument = function() {
return sim.getSimDocument();
};
this.initialize = function(theSimID, parameters) {
if (!simIDIsValid(theSimID)) {
dbg().logError(source,
'initialize message with simID = ' + simulationID
+ ' sent to HTML5Shell with simID = ' + simID);
return Simulator.Constants.FAILURE;
} else {
iFrameID = parameters.containerID;
iFrame = simDocument().getElementById(iFrameID);
if (!iFrame) {
dbg().logError(source, 'Could not get iFrame from id ' + iframeID);
return Simulator.Constants.FAILURE;
} else {
simURL = iFrame.src;
behavior = parameters.behavior;
simWidth = iFrame.width;
simHeight = iFrame.height;
simCallback = parameters.callback;
outputOnReq = parameters.outputOnReq;
debug('In initialize');
simWidth1 = simWidth;
if (simID === "" && simURL === "") {
dbg().logError(source, "Simulation does not exist");
return Simulator.Constants.FAILURE;
} else {
var animationParams = {
behavior : behavior,
callback : this.fromAnimationInterface,
simHeight: simHeight,
simWidth: simWidth
};
debug('animationParams.behavior = '+ animationParams.behavior);
debug('animationParams.simHeight = '+ animationParams.simHeight);
debug('animationParams.simWidth = '+ animationParams.simWidth);
debug('Calling init in the animation interface');
var status = iFrame.contentWindow.init(this, animationParams);
if (status === Simulator.Constants.SUCCESS) {
debug('Received SUCCESS from init function in animation. Link with HTML Animation established');
status = Simulator.Constants.ANIMATION_LOADED;
if (behavior !== Simulator.Constants.INTERACTIVE_ANIMATION) startStatusTimer();
} else {
dbg().logFatalError(source,
'animation interface returned failure. Link with HTML Animation NOT established');
return Simulator.Constants.FAILURE;
}
}
return Simulator.Constants.ANIMATION_LOADED;
}
}
};
this.fromAnimationInterface = function(type, data) {
debug("HTML5Shell.fromAnimationInterface(), type = " + type);
var formattedOutput = null;
resetStatusTimer();
switch (type) {
case Simulator.Constants.ANIMATION_PROPERTIES:
formattedOutput = formatOutput(data);
sendOutputToSimulator(type, formattedOutput);
break;
case Simulator.Constants.ANIMATION_REPORTING:
if(data === Simulator.Constants.ANIMATION_ALIVE) debug('Received "I am alive" message from animation at ' + utils().getElapsedTime());
else debug('Received "' + data + '" message from animation at ' + utils().getElapsedTime());
break;
case Simulator.Constants.PARAM_OUTPUT:
formattedOutput = formatOutput(data);
sendOutputToSimulator(type, formattedOutput);
break;
case Simulator.Constants.PARAM_ERROR:
case Simulator.Constants.PARAM_INFO:
if ((data === Simulator.Constants.ANIMATION_FINISHED) && (behavior != Simulator.Constants.INTERACTIVE_ANIMATION)) {
processCommand(simID, Simulator.Constants.OUTPUT_REQ_CMD);
}
sendOutputToSimulator(type, data);
break;
default:
debug("ERROR - Unrecognized type, '" + type + "' of messsage received from animationInterface.");
}
};
this.animationInput = function(simulationID, type, input) {
debug("HTML5Shell.animationInput(): type = " + type + ", input = "
+ input);
var inputs = null;
if (!simIDIsValid(theSimID)) {
return Simulator.Constants.FAILURE;
} else {
debug("Received message from simulator: simID = " + simID
+ ", type = " + type + ", input = " + input);
switch (type) {
case Simulator.Constants.PARAM_COMMAND:
processCommand(simulationID, input);
break;
case Simulator.Constants.PARAM_INFO:
break;
case Simulator.Constants.PARAM_INPUT:
if (input === null || input === "") {
debug("Inputs not provided");
sendInfo(Simulator.Constants.ANIMATION_UNABLE_TO_START);
} else {
inputs = parseInputs(input);
if (iFrame.contentWindow) {
iFrame.contentWindow.updateInputs(inputs);
}
}
break;
case Simulator.Constants.PARAM_UPDATE:
if (!checkID(simulationID)) {
dbg().logError(source, 'simID does not match!');
return;
} else if (input === null || input === "") {
debug("Inputs not provided");
sendInfo(Simulator.Constants.ANIMATION_UNABLE_TO_START);
} else {
inputs = parseInputs(input);
iFrame.contentWindow.updateInputs(inputs);
iFrame.contentWindow.playAnimation();
if (behavior === Simulator.Constants.INTERACTIVE_ANIMATION) {
setTimeout(function() {
sendInfo(Simulator.Constants.ANIMATION_FINISHED);
}, animationFinishedDelay);
}
startStatusTimer();
}
break;
default:
debug("Inputs not provided");
}
}
};
var processCommand = function(simulationID, cmd) {
debug("Received command from simulator: " + cmd);
switch (cmd) {
case Simulator.Constants.GET_ANIMATION_PROPERTIES:
var properties = iFrame.contentWindow.getProperties();
var output = formatOutput(properties);
sendOutputToSimulator(Simulator.Constants.ANIMATION_PROPERTIES, output);
break;
case Simulator.Constants.PLAY_CMD:
if (iFrame.contentWindow) {
iFrame.contentWindow.playAnimation();
if (behavior === Simulator.Constants.INTERACTIVE_ANIMATION) {
setTimeout(function () {
sendInfo(Simulator.Constants.ANIMATION_FINISHED);
}, animationFinishedDelay);
}
startStatusTimer();
}
break;
case Simulator.Constants.STOP_CMD:
break;
case Simulator.Constants.REWIND_CMD:
rewind();
break;
case Simulator.Constants.SET_ID_CMD:
this.simID = simulationID;
break;
case Simulator.Constants.RESTART_CMD:
reStart();
break;
case Simulator.Constants.OUTPUT_REQ_CMD:
var outputs = iFrame.contentWindow.getOutputs();
debug("HTML5Shell.processCommand() with Simulator.Constants.OUTPUT_REQ_CMD, outputs = "
+ outputs);
var data = formatOutput(outputs);
debug("Received data from formatOutput: " + data);
sendOutputToSimulator(Simulator.Constants.PARAM_OUTPUT, data);
break;
case Simulator.Constants.ANIMATION_REPORT_STATUS:
sendStatusRequest();
break;
default:
dbg().logError(source, "Unknown command passed to animation");
}
};
var parseInputs = function(input) {
console.log("parseInputs(): " + input);
inputArray = [];
input = removeBrackets(input);
input = removeSemi(input);
var elements = input.split(Simulator.Constants.ITERATION_DELIMITTER);
for ( var j = 0; j < elements.length; j++) {
var pairs = String(elements[j]).split(
Simulator.Constants.PAIR_DELIMITTER);
for ( var i = 0; i < pairs.length; i++) {
parts = String(pairs[i]).split(
Simulator.Constants.KEY_VALUE_DELIMITTER);
parts[Simulator.Constants.INPUT_NAME_PART] = removeQuotes(String(
parts[Simulator.Constants.INPUT_NAME_PART]).trim());
parts[Simulator.Constants.INPUT_VALUE_PART] = removeQuotes(String(
parts[Simulator.Constants.INPUT_VALUE_PART]).trim());
var values = String(parts[Simulator.Constants.INPUT_VALUE_PART])
.split(Simulator.Constants.MULTIPLE_VALUE_DELIMITTER);
parts[Simulator.Constants.INPUT_VALUE_PART] = values;
debug("Input #" + (j + 1) + ", '"
+ parts[Simulator.Constants.INPUT_NAME_PART] + "' = "
+ parts[Simulator.Constants.INPUT_VALUE_PART] + ";");
inputArray[parts[Simulator.Constants.INPUT_NAME_PART]] = parts[Simulator.Constants.INPUT_VALUE_PART];
}
}
return inputArray;
};
var rewind = function() {
iFrame.contentWindow.gotoAndStop(Simulator.Constants.START_FRAME);
};
var reStart = function() {
iFrame.contentWindow.gotoAndStop(Simulator.Constants.START_FRAME);
iFrame.contentWindow.playAnimation();
};
var formatOutput = function(dataArray) {
var str = "";
for (key in dataArray) {
if (str)
str += Simulator.Constants.PAIR_DELIMITTER;
str += key + Simulator.Constants.KEY_VALUE_DELIMITTER + dataArray[key];
}
return str;
};
var sendOutput = function() {
var data = formatOutput();
sendOutputToSimulator(Simulator.Constants.PARAM_OUTPUT, data);
};
var sendInfo = function(info) {
sendOutputToSimulator(Simulator.Constants.PARAM_INFO, info);
};
var sendError = function(info) {
sendOutputToSimulator(Simulator.Constants.PARAM_ERROR, info);
};
var sendOutputToSimulator = function(type, output) {
debug("Sending simulator " + type + " message with data =  " + output.toString());
simCallback(this.simID, type, output);
};
var simIDIsValid = function(simulationID) {
if (simID === simulationID)
return true;
else
return false;
};
var removeBrackets = function(str) {
var rex = /[\[\]]*/gim;
return str.replace(rex, '');
};
var removeSemi = function(str) {
var rex = /[;]$/im;
return str.replace(rex, '');
};
var removeQuotes = function(str) {
var rex = /["]*/gim;
return str.replace(rex, '');
};
var startStatusTimer = function() {
if (statusReqTimer)
clearTimeout(statusReqTimer);
statusReqTimer = setTimeout(sendStatusRequest, statusReportInterval);
utils().markTime();
if (!statusReqTimer) dbg().logError(source,
'Could not start statusReqTimer. No "alive" messages will be sent to the animation.');
};
var resetStatusTimer = function() {
debug('Status timers reset at ' + utils().getElapsedTime());
if (statusReturnTimer)
clearTimeout(statusReturnTimer);
if (statusReqTimer)
clearTimeout(statusReqTimer);
startStatusTimer();
};
var sendStatusRequest = function() {
utils().markTime();
srTimeouts++;
statusReturnTimer = setTimeout(statusReportTimeout,
statusReturnInterval);
debug('Sending number ' + srTimeouts + ' status request to animation.');
if (iFrame.contentWindow) {
var result = iFrame.contentWindow.statusRequest();
if (result === Simulator.Constants.ANIMATION_ALIVE) {
resetStatusTimer();
}
}
};
var srTimeouts = 0;
statusReportTimeout = function() {
debug('Status report waiting period ' + srTimeouts + ' timed out at ' + utils().getElapsedTime());
if (srTimeouts === maxSRTimeouts) {
debug('Sending "animationUnresponsive" message to simulator');
sendOutputToSimulator(Simulator.Constants.PARAM_ERROR,
Simulator.Constants.ANIMATION_UNRESPONSIVE);
srTimeouts = 0;
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: HotTextShell2.js (eb5e34f2) 3/7/2014 11:24:14 AM

Simulator.Animation.HotTextShell = function (sim) {
var interactions = [];
var dictionary = new Object();
var source = 'HotTextShell';
var inlineDataID = null;
var dbg = function () {
return sim.getDebug();
};
var utils = function () {
return sim.getUtils();
};
var simDocument = function () {
return sim.getSimDocument();
};
function generateOutputStr(simID) {
var output = '';
var semicolon = '\\0x1D\\'; //to separate iterations
var comma = '\\0x1E\\'; //to separate data groups
var colon = '\\0x1F\\'; //to separate a key and value in a key-value group
var formattedResponse = '';
var rawResponse = '';
var responseText = '';
var interactionType = '';
var itemId = inlineDataID;
var responseXMLString, interaction, returnString;
if (interactions.length > 0) {
for (var j = 0; j < interactions.length; j++) {
interaction = interactions[j];
rawResponse = interaction.getResponse();
if (interaction instanceof TDS.DDInteraction) {
if (interactionType)
interactionType += '|' + 'draggable';
else
interactionType += 'draggable';
}
else if (interaction instanceof TDS.SelectInteraction) {
if (interactionType)
interactionType += '|' + 'selectable';
else
interactionType += 'selectable';
var selectionChoices = interaction.getSelectedChoices();
var selectedChoicesLength = 0;
if (selectionChoices)
selectedChoicesLength = selectionChoices.length;
for (var i = 0; i < selectedChoicesLength; i++) {
if (i == 0) {
formattedResponse = selectionChoices[i].getIdentifier();
responseText = selectionChoices[i].getElement().innerHTML.replace(/<[^>]*>/gi, '').replace(/&.{4};/gi, '');
}
else {
formattedResponse += '|' + selectionChoices[i].getIdentifier();
responseText += '|' + selectionChoices[i].getElement().innerHTML.replace(/<[^>]*>/gi, '').replace(/&.{4};/gi, '');
}
}
}
}
var xml = [];
xml.push('<interactions>');
xml.push(rawResponse);
xml.push('</interactions>');
rawResponse = xml.join('');
output += 'itemId' + colon + inlineDataID + comma;
output += 'interactionType' + colon + interactionType + comma;
output += 'formattedResponse' + colon + formattedResponse + comma;
output += 'rawHTResponseRC' + colon + rawResponse + comma;
output += 'responseText' + colon + responseText;
}
return output;
}
this.initialize = function (simID, parameters) {
inlineDataID = parameters.inlineDataID;
var itemContainer = simDocument().getElementById(parameters.containerID);
var id_postfix = '-interaction-' + simID;
var ddInteraction = new TDS.DDInteraction('dd' + id_postfix);
ddInteraction.load(itemContainer);
if (ddInteraction.getDraggables().length > 0) {
interactions.push(ddInteraction);
}
var selectInteraction = new TDS.SelectInteraction('select' + id_postfix);
selectInteraction.load(itemContainer);
var numChoices = selectInteraction.getChoices().length;
if (numChoices > 0) {
interactions.push(selectInteraction);
if (!parameters.outputOnReq)
for (var i = 0; i < numChoices; i++) {
selectInteraction.getChoices()[i].subscribe('selectEvent', function () { sim.getAnimationSet().animationMediaOutput(simID, 'output', generateOutputStr(simID)) });
selectInteraction.getChoices()[i].subscribe('deselectEvent', function () { sim.getAnimationSet().animationMediaOutput(simID, 'output', generateOutputStr(simID)) });
}
}
if (interactions.length) {
sim.getAnimationSet().animationMediaOutput(simID, 'info', 'animationLoaded');
}
else {
sim.getAnimationSet().animationMediaOutput(simID, 'info', 'animationError');
}
}
this.animationInput = function (simID, type, content) {
if (type == 'command') {
switch (content) {
case 'outputRequest':
{
var output = generateOutputStr(simID);
sim.getAnimationSet().animationMediaOutput(simID, 'output', output);
break;
}
case 'play':
{
sim.getAnimationSet().animationMediaOutput(simID, 'info', 'animationStarted');
sim.getAnimationSet().animationMediaOutput(simID, 'info', 'animationFinished');
break;
}
default:
break;
}
}
}
this.animationIONames = function () {
return 'output' + Simulator.Constants.KEY_VALUE_DELIMITTER + 'itemId' + Simulator.Constants.MULTIPLE_VALUE_DELIMITTER + 'interactionType' + Simulator.Constants.MULTIPLE_VALUE_DELIMITTER + 'formattedResponse' + Simulator.Constants.MULTIPLE_VALUE_DELIMITTER + 'rawHTResponseRC' + Simulator.Constants.MULTIPLE_VALUE_DELIMITTER + 'responseText' + Simulator.Constants.PAIR_DELIMITTER;
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
}

// FILE: AnimationSet2.js (ed489da9) 3/7/2014 11:24:14 AM

Simulator.Animation.AnimationSet = function (sim, panel) {
Simulator.SimElement.call(this, sim);
this.setEname('AnimationSet');
var source = 'AnimationSet';
var instance = this;
var setElements = [];
var setThreads = [];
var poster = [];
var inputSource = [];
var outputs = [];
var outputOnRequest = false;
var prevInputs = [];
var currentInputs = [];
var lastThreadExecuted = null;
var currentThread = null;
var currentAnimation = null;
var currentAnimationState = [];
var scoreable = true;
var key = null;
var renderer = null;
var animationBehavior = 'timeBased';
var instance = this;
var animationLoaded = false;
var util = function () { return sim.getUtils(); };
var dbg = function () { return sim.getDebug(); };
var whiteboard = function () { return sim.getWhiteboard(); };
var eventMgr = function () { return sim.getEventManager(); };
var scoringTable = function () { return sim.getScoringTable(); };
var simMgr = function () { return sim.getSimulationManager(); };
var simDocument = function() { return sim.getSimDocument(); };
function registerEvents(instance) {
eventMgr().registerEvent(new Simulator.Event(instance, 'info', 'animationThreadFinished'));
eventMgr().registerEvent(new Simulator.Event(instance, 'info', 'animationFinished'));
eventMgr().registerEvent(new Simulator.Event(instance, 'info', 'animationStarted'));
eventMgr().registerEvent(new Simulator.Event(instance, 'info', 'animationError'));
}
this.getRenderer = function () {
return renderer;
};
this.getKey = function () {
return key;
};
this.getPrevInputs = function () {
return prevInputs;
};
var inputSource = [];
inputSource[0] = 'evaluator';
this.getInputSource = function () {
return inputSource;
};
this.setInputSource = function (newInputSource) {
var parts = [];
inputSource.splice(0, 1);
parts = newInputSource.split(',');
for (var i = 0; i < parts.length; i++) {
parts[i] = parts[i].trim();
if (parts[i] == "evaluator" || parts[i] == "animation") {
if (!util().elementInArray(inputSource, parts[i])) inputSource.push(parts[i]);
}
else dgb().logFatalError(source, 'Unknow input source "' + parts[i] + '" passed to AnimationSet.setInputSource');
}
};
this.getCurrentAnimation = function () {
return currentAnimation;
};
this.setCurrentAnimation = function (animation) {
currentAnimation = animation;
};
this.getCurrentInputs = function() {
return currentInputs;
};
this.getAnimationBehavior = function () {
return animationBehavior;
};
this.setAnimationBehavior = function (newBehavior) {
animationBehavior = newBehavior;
return this;
};
this.addAnimationElement = function (element) {
setElements.push(element);
return this;
};
this.getAnimationElement = function (id) {
for (var i = 0; i < setElements.length; i++) {
if (setElements[i].getName() == id)
return setElements[i];
}
return null;
};
this.addThread = function (aThread) {
setThreads.push(aThread);
};
this.getThreadFromName = function (name) {
for (var i = 0; i < setThreads.length; i++) {
if (setThreads[i].getName() == name) return setThreads[i];
}
return null;
};
this.getFirstAnimationThread = function() {
return setThreads[0];
};
this.getPosterName = function () {
return poster['name'] + sim.getSimID();
};
this.getPosterSrc = function () {
return poster['image'];
};
this.getPosterShow = function () {
return poster['show'];
};
this.getInputSource = function () {
return inputSource;
};
this.setOutputs = function (newOutputs) {
outputs = newOutputs.split(",");
if(outputs == "inputs") scoringTable().cloneInputsForOutputs();
else if(scoreable) {
for(var i = 0; i < outputs.length; i++) {
if(outputs[i] != "none") scoringTable().addElement(outputs[i], "output");
}
}
};
this.getOutputs = function () {
return outputs;
};
this.setScoreable = function (newScoreable) {
scoreable = newScoreable == 'yes' ? true : false;
return this;
};
this.getScoreable = function () {
return scoreable;
};
this.setPoster = function (posterAttributes) {
for (var i = 0; i < posterAttributes.length; i++) {
if (posterAttributes[i].nodeName == 'image') {
poster[posterAttributes[i].nodeName] = posterAttributes[i].nodeValue;
}
else poster[posterAttributes[i].nodeName] = posterAttributes[i].nodeValue;
}
};
this.setOutputOnRequest = function (newOutputOnRequest) {
outputOnRequest = newOutputOnRequest == 'yes' ? true : false;
return this;
};
this.getOutputOnRequest = function () {
return outputOnRequest;
};
this.recordOutputs = function () {
var parts = [];
var data = whiteboard().getCategory('animationOutput')['output'];
if (data != null) {
data = data.split(Simulator.Constants.PAIR_DELIMITTER);
if (data != undefined && data != null && data != '') for (var i = 0; i < outputs.length; i++) {
if (outputs[i] == 'none') break;
else if (scoreable) {
for (var j = 0; j < data.length; j++) {
parts = data[j].split(Simulator.Constants.KEY_VALUE_DELIMITTER);
parts[0] = parts[0].trim();
if (parts[1]) parts[1] = parts[1].trim();
if (parts[0] == outputs[i]) scoringTable().setValue(parts[0], simMgr().getTrialNum() - 1, parts[1]);
}
}
}
}
};
this.selectThread = function (noStart) {
this.setCurrentThread(null);
for (var i = 0; i < setThreads.length; i++) {
if (setThreads[i].isSelected()) {
this.setCurrentThread(setThreads[i]);
if (!noStart) setThreads[i].startSimulation();
return true;
}
}
return false;
};
this.handleEvent = function (event) {
var newEvent = undefined;
switch (event.type) {
case 'info':
switch (event.context) {
case 'animationThreadFinished':
case 'animationFinished':
lastThreadExecuted = this.getCurrentThread();
if (poster['show'] == 'after' || poster['show'] == 'both') renderer.renderImage(this, 'animationPanel', this.getPosterSrc(), this.getPosterName(), -1, null);
break;
case 'animationStarted':
break;
case 'inputAvailable':
var result = this.storeInputs(true);
if (result != false) {
simMgr().setAnimationCompleteWithoutOutput(event.completeWithoutOutput);
this.sendDataToAnimation();
}
break;
case 'animationError':
dbg().logError(source, event.data);
break;
case 'outputAvailable':
if (!simMgr().trialLimitReached()) {
var result = this.storeInputs(true);
if (result != false) {
if (this.getCurrentThread() == null) {
this.selectThread();
} else {
var nextElement = this.getCurrentThread().renderNextThreadElement(false);
if (!nextElement) this.selectThread();
}
}
}
break;
default:
dbg().logFatalError(source, 'AnimationSet - Unknown command name: ' + event.context + ' received by ' + this.getName());
break;
}
break;
case 'command':
switch (event.context) {
case 'load':
if(!animationLoaded) {
if (poster['show'] == 'before' || poster['show'] == 'both')
renderer.renderImage(this, 'animationPanel', this.getPosterSrc(), this.getPosterName(), -1, null);
else if (util().assocArrayIsEmpty(poster)) eventMgr().postEvent(new Simulator.Event(instance, "info", "allMediaLoaded"));
animationLoaded = true;
}
break;
case 'startAnimation':
this.storeInputs(true);
if (this.getCurrentThread() == null) {
this.selectThread();
} else {
var nextElement = this.getCurrentThread().renderNextThreadElement(true);
if (nextElement) this.selectThread();
}
break;
case 'outputReq':
if (currentAnimation) {
currentAnimation.animationInput(sim.getSimID(), 'command', 'outputRequest');
}
break;
case 'startTrial':
if (!simMgr().trialLimitReached()) {
this.storeInputs(true);
simMgr().setAnimationCompleteWithoutOutput(event.completeWithoutOutput);
if (this.getCurrentThread() == null) {
this.selectThread();
} else {
var nextElement = this.getCurrentThread().renderNextThreadElement(false);
if (!nextElement) this.selectThread();
}
}
break;
default:
dbg().logFatalError(source, 'AnimationSet - Unknown command name: ' + event.context + ' received by ' + this.getName());
break;
}
break;
default:
dbg().logFatalError(source, 'AnimationSet ' + this.getName() + ': Unhandled event type received: ' + event.inspect());
return;
}
if (newEvent != undefined && newEvent != null) {
newEvent.postEvent();
}
};
this.sendDataToAnimation = function () {
debug('in sendDataToAnimation of AnimationSet');
var thread = this.getCurrentThread();
if (!thread) {
thread = lastThreadExecuted;
if (!thread) {
if (!this.selectThread()) dbg().logFatalError(source, 'Could not select a thread in sendDataToAnimation of AnimationSet.');
return;
} else return;
}
var element = thread.getCurrentElement();
if (!element) element = thread.getLastExecutedAnimationElement();
debug('In sendDataToAnimation - element = ' + (element === null) ? 'null' : element.getName());
if (element) {
renderer.sendDataToAnimation(element);
} else dbg().logFatalError(source, 'Could not find CurrentElement or LastExecutedAnimationElement in sendDataToAnimation of AnimationThread');
};
this.getSourceName = function() {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
if (!embedded)
buff.push('Inspecting AnimationSet');
buff.push(sep);
for (var i = 0; i < setElements.length; i++) {
buff.push('[');
buff.push(i);
buff.push('] = ');
buff.push(setElements[i].inspect(true));
buff.push(sep);
}
if (!embedded)
buff.push('End of AnimationSet inspection');
buff.push(sep);
if (!embedded) (force == null) ? debug(buff.join('')) : debugf(buff.join(''));
else return buff.join('');
};
this.getCurrentAnimationState = function () {
if (lastThreadExecuted) {
currentAnimationState['lastThreadExecutedName'] = lastThreadExecuted.getName();
currentAnimationState['currentThreadElementIndex'] = lastThreadExecuted.getCurrentThreadElementIndex();
currentAnimationState['animationInputs'] = currentInputs.join(',');
currentAnimationState['animationOutputs'] = this.getOutputs().join(',');
return currentAnimationState;
} else return [];
};
this.setCurrentAnimationState = function (stateArray) {
lastThreadExecuted = this.getThreadFromName(stateArray['lastThreadExecutedName']);
lastThreadExecuted.setCurrentThreadElementIndex(stateArray['currentThreadElementIndex']);
var parts = stateArray['animationInputs'].split(',');
for (var p in parts) currentInputs[p] = parts[p];
this.setOutputs(stateArray['animationOutputs']);
if (simMgr().getRestoreAnimationOnReload()) lastThreadExecuted.startSimulation();
};
this.storeInputs = function (backupInputs) {
var inputs = whiteboard().getCategory('animationInput');
if (inputs != null) {
if (Object.size(inputs) > 0) {
if (backupInputs) this.setPrevInputs();
for (var s in inputs) {
currentInputs[s] = inputs[s];
}
}
}
};
this.setPrevInputs = function () {
for (var p in currentInputs) {
prevInputs[p] = currentInputs[p];
}
};
this.setCurrentThread = function (thread) {
lastThreadExecuted = currentThread;
currentThread = thread;
if (currentThread !== null) {
debug('In setCurrentThread - currentThread = "' + currentThread.getName() + '", so setting currentElement to null');
currentThread.setCurrentElement(null);
} else dbg().logWarning(source, 'In setCurrentThread - currentThread = null');
};
this.getCurrentThread = function (thread) {
return currentThread;
};
function renderNextElement(instance) {
var anEvent = null;
if (currentThread != null && currentThread != undefined) {
var element = currentThread.renderNextThreadElement();
if (element == null) {
anEvent = new Simulator.Event(instance, "info", "animationThreadFinished");
eventMgr().postEvent(anEvent);
}
} else {
anEvent = new Simulator.Event(instance, "info", "animationThreadFinished");
eventMgr().postEvent(anEvent);
}
}
this.animationMediaOutput = function (theSimID, type, data) {
if (sim.getSimID() != theSimID) {
dbg().logWarning(source, 'SimID from animation: ' + theSimID + ' does not match this simulator\'s ID: ' + sim.getSimID());
}
var set = null;
if (type != 'debug' && type != Simulator.Constants.PARAM_DEBUG_OUTPUT)
debug('Received ' + type + ' output from the animation with data "' + data + '"');
switch (type) {
case 'info':
switch (data) {
case Simulator.Constants.ANIMATION_THREAD_FINISHED:
case Simulator.Constants.ANIMATION_FINISHED:
var currentElement = currentThread.getCurrentElement();
debug('In animationMediaOutput - currentElement = ' + ((currentElement === null) ? 'null' : currentElement.getName()));
if(currentElement.getBehavior() != Simulator.Constants.INTERACTIVE_ANIMATION) {
if (instance.getOutputs() != '') instance.recordOutputs();
}
renderNextElement(instance);
break;
case Simulator.Constants.ANIMATION_STARTED:
break;
case Simulator.Constants.ANIMATION_ABORTED:
case Simulator.Constants.ANIMATION_UNABLE_TO_START:
case 'newTrial':
eventMgr().postEvent(new Simulator.Event(set, 'command', 'newTrial'));
break;
default:
}
break;
case Simulator.Constants.PARAM_OUTPUT:
case Simulator.Constants.PARAM_DATA:
whiteboard().setItem('animationOutput', 'output', data, key);
instance.recordOutputs();
eventMgr().postEvent(new Simulator.Event(instance, 'info', 'animationOutputAvailable'));
break;
case Simulator.Constants.PARAM_DEBUG_OUTPUT:
break;
case Simulator.Constants.ANIMATION_ERROR:
eventMgr().postEvent(new Simulator.Event(set, 'animationError', data));
break;
default:
}
};
this.setAttributes = function (attr, node) {
var attr = util().getAttributes(node);
Simulator.Animation.AnimationSet.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'poster':
this.setPoster(attr[i]);
break;
case 'scoreable':
this.setScoreable(attr[i]);
break;
case 'outputs':
this.setOutputs(attr[i]);
break;
case 'inputSource':
this.setInputSource(attr[i]);
break;
case 'outputOnRequest':
this.setOutputOnRequest(attr[i]);
break;
}
}
};
if (sim) {
key = whiteboard().addItem('animationOutput', 'output');
inputSource[0] = 'evaluator';
registerEvents(instance);
renderer = new Simulator.Animation.AnimationRenderer(sim, panel, this);
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Animation.AnimationSet.prototype = new Simulator.SimElement();
Simulator.Animation.AnimationSet.parent = Simulator.Simulator;
Simulator.Animation.AnimationSet.prototype.constructor = Simulator.Animation.AnimationSet;

// FILE: AnimationThread2.js (7e76a405) 3/7/2014 11:24:14 AM

Simulator.Animation.AnimationThread = function (sim, panel, section, animationSet) {
Simulator.SimElement.call(this);
var source = 'AnimationThread';
var theSet = animationSet;
var threadElements = [];
var currentThreadElementIndex = 0;
var selectionCriteria = [];
var requiresInput = 'no';
var currentElement = null;
var currentThread = null;
var lastExecutedAnimationElement = null;
this.setEname(source);
if (animationSet)
animationSet.addThread(this);
var util = function () { return sim.getUtils(); };
var dbg = function () { return sim.getDebug(); };
var eventMgr = function () { return sim.getEventManager(); };
var renderer = function () { return animationSet.getRenderer(); };
var simDocument = function () { return sim.getSimDocument(); };
function onChangeToSpecified(criteria) {
if (criteria['onChangeTo']) {
if (criteria['onChangeTo'] == 'yes') return true;
else return false;
} else return false;
}
function changeOccurred(criteria) {
var val = criteria['variable'];
var prevVal = animationSet.getPrevInputs()[val];
var curVarName = criteria['variable'];
var currentVal = animationSet.getCurrentInputs()[curVarName];
if (currentVal != prevVal) {
if (criteria['value'] == '*') return true;
else return (currentVal == criteria['value']);
} else return false;
}
function inspectSelectionCriteria(sc, embedded, force) {
var buff = [];
var sep = '\n';
for (var l in sc) {
buff.push('selectionCriteria[');
buff.push(l);
buff.push('] = ');
buff.push(sc[l]);
buff.push(sep);
}
if (embedded) return buff.join('');
else force == null ? debug(buff.join('')) : debugf(buff.join(''));
}
this.getAnimationSet = function () {
return animationSet;
};
this.addAnimationThreadElement = function (element) {
threadElements.push(element);
return this;
};
this.getAnimationElement = function (id) {
return animationSet.getAnimationElement(id);
};
this.getFirstAnimationThreadElement = function () {
return threadElements[0];
};
this.nextAnimationThreadElement = function (reset) {
if (reset)
this.resetCurrentThreadElementIndex();
else this.incrementCurrentThreadElementIndex();
if (this.getCurrentThreadElementIndex() >= threadElements.length) return null;
else {
var nextElement = threadElements[this.getCurrentThreadElementIndex()];
return nextElement;
}
};
this.getCurrentThreadElementIndex = function () {
return currentThreadElementIndex;
};
this.setCurrentThreadElementIndex = function (num) {
currentThreadElementIndex = Math.min(Math.max(0, num), threadElements.length);
};
this.incrementCurrentThreadElementIndex = function () {
currentThreadElementIndex++;
};
this.resetCurrentThreadElementIndex = function () {
currentThreadElementIndex = 0;
};
this.getRequiresInput = function () {
return requiresInput;
};
this.setRequiresInput = function (newRequiresInput) {
requiresInput = newRequiresInput;
};
this.addSelectionCriteria = function (attributes) {
var criteriaAttr = [];
for (var i = 0; i < attributes.length; i++) {
criteriaAttr[attributes[i].nodeName] = attributes[i].nodeValue;
}
selectionCriteria.push(criteriaAttr);
};
this.getSelectionCriteria = function () {
return selectionCriteria;
};
this.isSelected = function () {
var result = true;
var sc = this.getSelectionCriteria();
if (Object.size(sc) == 0) result = true;
else {
for (var i = 0; i < sc.length; i++) {
var criterium = sc[i];
if (onChangeToSpecified(criterium)) {
if (changeOccurred(criterium)) {
if (!(criterium['variable'] in animationSet.getCurrentInputs()) || criterium['value'] != animationSet.getCurrentInputs()[criterium['variable']]) {
result = false;
break;
}
} else {
result = false;
break;
}
}
else {
if (!(criterium['variable'] in animationSet.getCurrentInputs()) || criterium['value'] != animationSet.getCurrentInputs()[criterium['variable']]) {
result = false;
break;
} else result = true;
}
}
}
return result;
};
this.startSimulation = function () {
theSet.setCurrentThread(this);
this.resetCurrentThreadElementIndex();
this.renderNextThreadElement(true);
};
this.getSourceName = function () {
return source;
};
this.renderNextThreadElement = function (startAtBeginning) {
debug('In renderNextThreadElement -startAtBeginning = ' + startAtBeginning);
if (startAtBeginning) currentThreadElement = this.getFirstAnimationThreadElement();
else {
currentThreadElement = this.nextAnimationThreadElement(false);
if (!currentThreadElement) {
dbg().logError(source, 'Could not get next AnimationThreadElement for currentThread = ' + this.getName());
return null;
}
}
debug('In renderNextThreadElement - currentThreadElement = ' + currentThreadElement.getName());
currentElement = animationSet.getAnimationElement(currentThreadElement.getName());
if (!currentElement) {
dbg().logError(source, 'Could not get new current AnimationElement for currentThreadElement = ' + currentThreadElement.getName());
return null;
}
else {
debug('In renderNextThreadElement - currentElement = ' + currentElement.getName());
currentElementName = currentElement.getName();
if (!currentElementName) dbg().logWarning(source, 'Name is null for current AnimationElement in AnimationThread = ' + this.getName());
switch (currentElement.getType()) {
case Simulator.Constants.IMAGE_ANIMATION:
debug('In renderNextThreadElement - rendering image ' + currentElement.getSrc());
renderer().renderImage(currentElement, 'animationPanel', currentElement.getSrc(),
currentElementName, currentThreadElement.getMaxTime(), this);
break;
case 'animation':
case Simulator.Constants.HTML5_ANIMATION:
if (util().canPlayHtml5()) {
renderer().renderAnimation(currentElement, 'animationPanel', currentElement.getSrc(),
util().getFileName(currentElement.getSrc()), currentThreadElement.getMaxTime(), this);
}
else if (currentElement.getAltSrcType() == Simulator.Constants.FLASH_ANIMATION) {
renderer().renderFlash(currentElement, 'animationPanel', currentElement.getAltSrc(),
util().getFileName(currentElement.getAltSrc()), currentElement.getControls(),
currentElementName, currentThreadElement.getMaxTime(), this);
}
break;
case Simulator.Constants.FLASH_ANIMATION:
renderer().renderFlash(currentElement, 'animationPanel', currentElement.getSrc(),
util().getFileName(currentElement.getSrc()), currentElement.getControls(),
currentElementName, currentThreadElement.getMaxTime(), this);
break;
case Simulator.Constants.HOTTEXT_ANIMATION:
renderer().renderHotText(currentElement, 'animationPanel', currentElement.getSrc(),
'', currentElement.getControls(),
currentElementName, currentThreadElement.getMaxTime(), this);
break;
}
}
debug('In renderNextThreadElement - returning currentElement = ' + currentElement.getName());
return currentElement;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting AnimationThread "'); buff.push(this.getName()); buff.push('"');
buff.push(sep);
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
buff.push(inspectSelectionCriteria(this.getSelectionCriteria(), true, force));
buff.push('End of selectionCriteria');
buff.push(sep);
for (var i = 0; i < threadElements.length; i++) {
switch (getConstructorName(threadElements[i].constructor.toString())) {
case 'AnimationThreadElement':
buff.push(threadElements[i].inspect(true)); buff.push(sep);
break;
}
}
buff.push('End of AnimationThread inspection');
buff.push(sep);
if (embedded) return buff.join('');
else force == null ? debug(buff.join('')) : debugf(buff.join(''));
};
this.getCurrentElement = function () {
debug('In getCurrentElement - returning ' + ((currentElement === null) ? null : currentElement.getName()));
return currentElement;
};
this.setCurrentElement = function (element) {
debug('In setCurrentElement - setting lastExecutedAnimationElement to currentElement: ' + ((currentElement === null) ? 'null' : currentElement.getName()));
lastExecutedAnimationElement = currentElement;
debug('In setCurrentElement - setting currentElement to ' + ((element === null) ? 'null' : element.getName()));
currentElement = element;
};
this.getLastExecutedAnimationElement = function () {
return lastExecutedAnimationElement;
};
this.setAttributes = function (attr, node) {
if (node) attr = util().getAttributes(node);
Simulator.Animation.AnimationThread.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'maxTime':
this.setmaxTime(attr[i]);
break;
case 'requiresInput':
this.setRequiresInput(attr[i]);
break;
case 'completionPendingOnOutput':
this.setCompletionPendingOnOutput(attr[i]);
break;
}
}
var threadElements = node.childNodes;
for (var i = 0; i < threadElements.length; i++) {
switch (threadElements[i].nodeName) {
case 'selectionClause':
var clauseElements = threadElements[i].childNodes;
for (var j = 0; j < clauseElements.length; j++) {
if (clauseElements[j].nodeName[0] != '#') this.addSelectionCriteria(clauseElements[j].attributes);
}
break;
}
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Animation.AnimationThread.prototype = new Simulator.SimElement();
Simulator.Animation.AnimationThread.parent = Simulator.SimElement;
Simulator.Animation.AnimationThread.prototype.constructor = Simulator.Animation.AnimationThread;

// FILE: AnimationThreadElement2.js (81aeeb51) 3/7/2014 11:24:14 AM

Simulator.Animation.AnimationThreadElement = function (sim, panel, section, animationSet, animationThread) {
Simulator.SimElement.call(this, sim);
var source = 'AnimationThreadElement';
var selectionCriteria = [];
var prevInputs = [];
var currentInputs = [];
var maxTime = -1;
this.setEname(source);
var util = function () { return sim.getUtils(); };
var whiteboard = function() { sim.getWhiteboard(); };
var dbg = function () { return sim.getDebug(); };
var simDocument = function() { return sim.getSimDocument(); };
function storeInputs(backupInputs) {
var inputs = whiteboard.getCategory('dataInputs');
setPrevInputs();
if (Object.size(inputs) > 0) {
setPrevInputs();
for (var r in inputs) {
currentInputs[r] = inputs[r];
}
}
}
function setPrevInputs() {
for (var p in currentInputs) {
prevInputs[p] = currentInputs[p];
}
}
function onChangeToSpecified(criteria) {
if (criteria['onChangeTo']) {
if (criteria['onChangeTo'] == 'yes') return true;
else return false;
} else return false;
}
function changeOccurred(criteria) {
var prevVal = animationSet.getPrevInputs()[criteria['variable']];
var curVarName = criteria['variable'];
var currentVal = animationSet.getCurrentInputs()[curVarName];
if (currentVal != prevVal) {
if (criteria['value'] == '*') return true;
else return (currentVal == criteria['value']);
} else return false;
}
function inspectSelectionCriteria (criteria, embedded, force) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting Selection Criteria:');
buff.push(sep);
for (var l in criteria) {
buff.push('selectionCriteria[');
buff.push(l);
buff.push(']: '); buff.push(sep);
for (var p in criteria[l]) {
buff.push('['); buff.push(p); buff.push('] = '); buff.push(criteria[l][p]); buff.push(sep);
}
}
buff.push('End of selectionCriteria');
buff.push(sep);
if (!embedded)
(force == null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
this.getMaxTime = function () {
return maxTime;
};
this.setMaxTime = function (newMaxTime) {
maxTime = newMaxTime;
};
this.getAnimationThread = function () {
return animationThread;
};
this.getAnimationSet = function () {
return animationSet;
};
this.addSelectionCriteria = function (attributes) {
var criteriaAttr = [];
for (var i = 0; i < attributes.length; i++) {
criteriaAttr[attributes[i].nodeName] = attributes[i].nodeValue;
}
selectionCriteria.push(criteriaAttr);
};
this.getSelectionCriteria = function () {
return selectionCriteria;
};
this.isSelected = function () {
var result = true;
var sc = this.getSelectionCriteria();
var scSize = Object.size(sc);
var inputSize = Object.size(animationSet.getCurrentInputs());
if (scSize == 0) result = true;
else if (scSize != inputSize) result = false;
else {
for (var i = 0; i < inputSize; i++) {
var criterium = sc[i];
if (onChangeToSpecified(criterium)) {
if (changeOccurred(criterium)) {
if (!(criterium['variable'] in animationSet.getCurrentInputs()) || criterium['value'] != animationSet.getCurrentInputs()[criterium['variable']]) {
result = false;
break;
}
} else {
result = false;
break;
}
}
else {
if (!(criterium['variable'] in animationSet.getCurrentInputs()) || criterium['value'] != animationSet.getCurrentInputs()[criterium['variable']]) {
result = false;
break;
}
}
}
}
return result;
};
this.getSourceName = function() {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting ');
buff.push(this.getEname());
buff.push(': ');
buff.push(this.getName());
buff.push(sep);
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
buff.push(inspectSelectionCriteria(selectionCriteria, true));
buff.push(sep);
buff.push('end of AnimationThreadElement Inspection'); buff.push(sep);
if (!embedded)
(force == null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
this.setAttributes = function (attr, node) {
if (node) attr = util().getAttributes(node);
Simulator.Animation.AnimationThreadElement.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'maxTime':
this.setMaxTime(attr[i]);
break;
default:
continue;
}
}
var threadElements = node.childNodes;
for (var i = 0; i < threadElements.length; i++) {
if (threadElements[i].nodeName[0] != '#') {
switch (threadElements[i].nodeName) {
case 'selectionClause':
var clauseElements = threadElements[i].childNodes;
for (var j = 0; j < clauseElements.length; j++) {
if (clauseElements[j].nodeName[0] != '#') this.addSelectionCriteria(clauseElements[j].attributes);
}
break;
}
}
}
};
this.render = function (panelName, currentElementName, maxTime, thread) {
var aThread = this.getAnimationThread();
var element = aThread.getAnimationElement(this.getName());
debug('In render - Attempting to render element "' + (element === null) ? null : element.getName() + '"');
element.render(panelName, currentElementName, maxTime, thread);
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Animation.AnimationThreadElement.prototype = new Simulator.SimElement();
Simulator.Animation.AnimationThreadElement.parent = Simulator.SimElement;
Simulator.Animation.AnimationThreadElement.prototype.constructor = Simulator.Animation.AnimationThreadElement;

// FILE: FlashAnimationInterface2.js (25f48b66) 3/7/2014 11:24:14 AM

Simulator.Animation.FlashAnimationInterface = {};
Simulator.Animation.FlashAnimationInterface.ObjectMapper = [];
Simulator.Animation.FlashAnimationInterface.GetInstance = function (simID) {
return Simulator.Animation.FlashAnimationInterface.ObjectMapper[simID];
}
Simulator.Animation.FlashAnimationInterface.MapInstance = function (simObject) {
Simulator.Animation.FlashAnimationInterface.ObjectMapper[simObject.getSimID()] = simObject;
}
Simulator.Animation.FlashAnimationInterface.AnimationMediaOutput = function (simID, type, data) {
var simulator = Simulator.Animation.FlashAnimationInterface.GetInstance(simID);
if(simulator)
simulator.getAnimationSet().animationMediaOutput(simID, type, data);
}

// FILE: Section2.js (6b08baee) 3/7/2014 11:24:14 AM

Simulator.Input.Section = function (sim, thePanel) {
Simulator.SimElement.call(this, sim);
var source = 'Section';
var instance = this;
var sectionNumber = 1;
var divider = 'no';
var sectionLabel = '';
var panel = thePanel;
var simID = null;
var dbg = function () { return sim.getDebug(); };
var utils = function () { return sim.getUtils(); };
var simMgr = function () { return sim.getSimulationManager(); };
var simDocument = function () { return sim.getSimDocument(); };
if (sim) {
simID = sim.getSimID();
}
this.setDivider = function (newDivider) {
divider = newDivider;
};
this.getDivider = function () {
return divider;
};
this.setLabel = function (newLabel) {
sectionLabel = newLabel;
return this;
};
this.getLabel = function () {
return sectionLabel;
};
this.render = function () {
var inputPanel = panel;
var label = this.getLabel();
var HTMLPanel = simDocument().getElementById(panel.getNodeID());
var space = this.getSpaceAbove();
if (space > 0) utils().appendBlankVertcalSpace(HTMLPanel, space);
if (label) {
var h2Element = simDocument().createElement('h2');
h2Element.innerHTML = label;
HTMLPanel.appendChild(h2Element);
}
var image = this.getImage();
if (image) {
div = simDocument().createElement('div');
div.id = 'imageHolder' + simID;
HTMLPanel.appendChild(div);
var span = simDocument().createElement('span');
span.id = 'holdingSpan' + simID;
div.appendChild(span);
var img = simDocument().createElement('img');
img.id = this.getEname() + SimItem.NextForNumber();
img.src = image;
span.appendChild(img);
}
if (this.getDivider() == 'yes') HTMLPanel.appendChild(simDocument().createElement('hr'));
space = this.getSpaceBelow();
if (space > 0) utils().appendBlankVertcalSpace(HTMLPanel, space);
};
this.setAttributes = function (attr, node) {
Simulator.Input.Section.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'divider':
instance.setDivider(attr[i]);
break;
}
}
};
function debug(str1, str2, trace) {
dbg().debug(source + ': ' + str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source + ': ' + str1, str2, trace);
}
};
Simulator.Input.Section.prototype = new Simulator.SimElement();
Simulator.Input.Section.prototype.constructor = Simulator.Input.Section;

// FILE: InputElement2.js (b2d99add) 7/23/2014 4:30:37 PM

Simulator.Input.InputElement = function (sim) {
Simulator.SimElement.call(this, sim);
var source = 'InputElement';
var prevValue = null;
var data = 0;
var availableinputScopes = ['dataInput', 'animationInput', 'evaluationInput'];
var inputScope = [];
var saveOnChange = true;
var key = undefined;
var scoreable = true;
var state = 'enabled';
var eventsRegistered = false;
var panel = null;
var section = null;
var dbg = function () { return sim.getDebug(); };
var eventMgr = function () { return sim.getEventManager(); };
var simulationMgr = function () { return sim.getSimulationManager(); };
var whiteboard = function () { return sim.getWhiteboard(); };
var scoringTable = function () { return sim.getScoringTable(); };
var simDocument = function () { return sim.getSimDocument(); };
this.getPanel = function () {
return panel;
};
this.setPanel = function (newPanel) {
panel = newPanel;
panel.registerIOElement(this);
return this;
};
this.setSection = function (theSection) {
section = theSection;
};
this.getSectionLabel = function () {
return section.getLabel();
};
this.getPrevValue = function () {
return prevValue;
};
this.setPrevValue = function (newPrevValue) {
prevValue = newPrevValue;
return this;
};
this.getData = function () {
var dataArray = [];
if (dataArray[0]) prevValue = dataArray[0];
dataArray[0] = data;
return dataArray;
};
this.setData = function (newData) {
if (data) prevValue = data;
data = newData;
return this;
};
this.getInputScope = function () {
return inputScope;
};
this.setInputScope = function (newinputScope) {
if (newinputScope == 'globalInput') {
for (var i = 0; i < availableinputScopes.length; i++) inputScope[i] = availableinputScopes[i];
} else inputScope = newinputScope.split(',');
for (var j = 0; j < inputScope.length; j++) inputScope[j] = inputScope[j].trim();
};
this.getSaveOnChange = function () {
return saveOnChange;
};
this.setSaveOnChange = function (newSaveOnChange) {
saveOnChange = newSaveOnChange == 'no' ? false : true;
};
this.onChange = function (id) {
if (!id) id = this.getNodeID();
var jsObj = this.getHTMLElement(id);
this.recordInput(jsObj, false, true);
this.postOnChangeEvents();
};
this.recordInput = function (obj, setDefault, recordOnChange) {
var value = null;
for (var i = 0; i < inputScope.length; i++) {
if (key == undefined) key = whiteboard().addItem(inputScope[i], this.getName());
value = this.getData(inputScope[i]);
if (value) {
if (inputScope[i] == 'animationInput' && this instanceof Simulator.Input.InputElement) value = this.formatForAnimationInput(value);
else if (inputScope[i] == 'dataInput' && this instanceof Simulator.Input.InputElement) value = this.formatForTableInput(value);
whiteboard().setItem(inputScope[i], this.getName(), value, key);
}
}
if (value && this.getScoreable() && !setDefault && this.postOnChangeEnabled()) {
scoringTable().setValue(this.getName(), simulationMgr().getTrialRowNum(recordOnChange), value);
}
};
this.getScoreable = function () {
return scoreable;
};
this.formatForAnimationInput = function (value) {
return value;
};
this.formatForTableInput = function (value) {
return value;
};
this.setScoreable = function (newScoreable) {
if (newScoreable == 'yes') scoreable = true;
else scoreable = false;
};
this.getState = function () {
return state;
};
this.setState = function (newState) {
if (newState == 'disabled') state = 'disabled';
else state = 'enabled';
};
this.disableInput = function () {
var element = simDocument().getElementById(this.getNodeID());
element.disabled = true;
this.setState('disabled');
};
this.enableInput = function () {
var element = simDocument().getElementById(this.getNodeID());
element.disabled = false;
this.setState('enabled');
};
this.getHTMLElement = function (id) {
if (id) return simDocument().getElementById(id);
else return simDocument().getElementById(this.getNodeID());
};
this.registerEvents = function () {
if (!eventsRegistered) {
eventMgr().registerEvent(new Simulator.Event(this, 'info', 'simulatorStateChange'), 'to');
eventsRegistered = true;
}
};
this.setAttributes = function (attr) {
Simulator.Input.InputElement.prototype.setAttributes.call(this, attr);
for (var i in attr) {
switch (i) {
case 'inputScope':
this.setInputScope(attr[i]);
break;
case 'state':
this.setState(attr[i]);
break;
case 'scoreable':
this.setScoreable(attr[i]);
break;
case 'saveOnChange':
this.setSaveOnChange(attr[i]);
break;
}
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.InputElement.prototype = new Simulator.SimElement();
Simulator.Input.InputElement.parent = Simulator.SimElement;
Simulator.Input.InputElement.prototype.constructor = Simulator.Input.InputElement;

// FILE: GroupList2.js (ff4ad670) 3/7/2014 11:24:14 AM

Simulator.Input.GroupList = function(sim) {
Simulator.Input.InputElement.call(this, sim);
var items = [];
var dbg = function() { return sim.getDebug(); };
var eventMgr = function() { return sim.getEventManager(); };
var utils = function() { return sim.getUtils(); };
var simulationMgr = function() { return sim.getSimulationManager(); };
var simDocument = function() { return sim.getSimDocument(); };
this.getItems = function() {
return items;
};
this.setItems = function(node) {
var id;
var ruleName = null;
var elementName = '';
try {
if(utils().isInternetExplorer()) elementName = node.attributes.getNamedItem('name').value;
else elementName = node.attributes['name'].nodeValue;
} catch(err) {
dbg().logError(source, 'Error occurred getting element name: ' + err.message);
elementName = '';
}
var attr = [];
var theItem;
var itemID = null;
var itemNum = 0;
if (node.childNodes != null) {
for ( var j = 0; j < node.childNodes.length; j++) {
id = node.childNodes[j].nodeName;
if (id[0] != '#') {
if (id == 'item') {
theItem = node.childNodes[j];
attr = theItem.attributes;
var attributes = new Simulator.Utils.Dictionary(sim);
items[itemNum] = attributes;
for ( var i = 0; i < attr.length; i++) {
var attribute = attr[i];
var nodeName = attribute.nodeName;
if(attribute.nodeName == 'image') {
attributes.setValue(nodeName, attribute.nodeValue);
}
else attributes.setValue(nodeName, attribute.nodeValue);
}
itemID = j == 0 ? this.createItemID(true, itemNum) : this.createItemID(false, itemNum);
attributes.setValue('itemID', itemID);
itemNum++;
}
}
}
}
};
this.disableItems = function() {
for(var i = 0; i < items.length; i++) {
var element = simDocument().getElementById(items[i].itemID);
element.disabled = true;
}
};
this.enableItems = function() {
for(var i = 0; i < items.length; i++) {
var element = simDocument().getElementById(items[i].itemID);
element.disabled = false;
}
};
this.getDefaultSelection = function() {
var defaults = [];
for(var i = 0; i < items.length; i++) {
if(items[i].keyExists('default')) {
if(items[i].lookup('default') == 'yes') {
defaults.push(items[i].lookup('val'));
}
}
}
return defaults;
};
this.setDefaultSelections = function() {
var defaults = this.getDefaultSelection();
if(defaults.length > 0) {
selectedItem = defaults;
this.setData(defaults);
}
};
this.getDataProxy = function(itemNum) {
if(itemNum != undefined && itemNum != null) return  items[itemNum].lookup('dataProxy');
else return null;
};
this.getAnimationProxy = function(itemNum) {
if(itemNum != undefined && itemNum != null) return  items[itemNum].lookup('animationProxy');
else return null;
};
this.getEvaluationProxy = function(itemNum) {
if(itemNum != undefined && itemNum != null) return  items[itemNum].lookup('evaluationProxy');
else return null;
};
this.extractItemValue = function(itemIndex) {
var value = null;
var inputScope = this.getInputScope();
if(isNaN(itemIndex)) {
for(var i = 0; i < items.length; i++) {
if(items[i].itemID == itemIndex) {
itemIndex = i;
break;
}
}
}
if(itemIndex >= 0) {
if(inputScope == 'dataInput') value = this.getDataProxy(itemIndex);
else if(inputScope == 'evaluationInput') value = this.getEvaluationProxy(itemIndex);
else if(inputScope == 'animationInput') value = this.getAnimationProxy(itemIndex);
if(value == undefined || value == null) value = items[itemIndex].lookup('val');
return value;
} else {
dbg().logError(source, 'itemIndex = "' + itemIndex + '". Could not extract item value');
return null;
}
};
this.saveState = function(indent, preface, nameStr, valStr, suffix) {
var checkedItems = '';
for(var i = 0; i < items.length; i++) {
var id = items[i].itemID;
var value = items[i].lookup('val');
if(value == undefined || value == null || value == '') value = items[i].lookup('dataProxy');
var htmlElement = simDocument().getElementById(id);
if(htmlElement.checked != undefined) {
if(htmlElement.checked) {
if(checkedItems == '') checkedItems = checkedItems + value;
else checkedItems = checkedItems + ', ' + value;
}
} else if(htmlElement.selected != undefined) {
if(htmlElement.selected) {
this.selectedIndex = value;
checkedItems = value;
}
}
}
if(checkedItems != '') return indent + preface + nameStr + this.getName() + valStr + checkedItems + suffix;
else return '';
};
this.setSelectStateViaKeyboard = function(elementID, itemID) {
var HTMLItem = null;
if(itemID) HTMLItem = simDocument().getElementById(itemID);
else HTMLItem = simDocument().getElementById(elementID);
if(HTMLItem) {
if(this.getType() == 'dropList') {
if(HTMLItem.selected) HTMLItem.removeAttribute('selected');
else {
HTMLItem.selected = 'selected';
}
} else {
if(HTMLItem.checked) HTMLItem.removeAttribute('checked');
else {
HTMLItem.checked = 'checked';
this.recordInput(this);
}
}
}
};
this.setSelectStateViaSpeech = function(elementID, itemID) {
this.recordKeyboardSelection(elementID, itemID);
};
this.recordKeyboardSelection = function(elementID, itemID, itemIndex) {
var element = null;
var item = null;
if(itemID) {
item = simDocument().getElementById(itemID);
if(!item) {
element = simDocument().getElementById(elementID);
if(element) item = element.getElementsByClassName(itemID)[0];
}
if(item) {
item.isSelected = true;
this.setSelectStateViaKeyboard(elementID, itemID);
this.onChange(elementID);
}
}
};
this.inspect = function(embedded, forced) {
buff = [];
if (!embedded)
buff.push('Inspecting GroupList');
var items = this.getItems();
for ( var i in items) {
buff.push(i);
buff.push(' = ');
buff.push(items[i]);
buff.push('\n\n');
}
if(!embedded) forced == true ? dbg().debugf(buff.join('')) : dbg().debug(buff.join());
else return buff.join('');
};
this.setAttributes = function(attr) {
Simulator.Input.GroupList.prototype.setAttributes.call(this, attr);
for ( var i in attr) {
switch (i) {
case 'items':
this.setItems(attr[i]);
break;
}
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.GroupList.prototype = new Simulator.Input.InputElement();
Simulator.Input.GroupList.prototype.constructor = Simulator.Input.GroupList;

// FILE: ChoiceList2.js (74f8086b) 5/2/2014 12:55:58 PM

Simulator.Input.ChoiceList = function(sim, node, panel, theSection) {
Simulator.Input.GroupList.call(this, sim);
var that = this;
var source = 'ChoiceList';
var dbg = function() { return sim.getDebug(); };
var utils = function() { return sim.getUtils(); };
var simMgr = function() { return sim.getSimulationManager(); };
var keyboardInput = function () { return sim.getKeyboardInput(); };
var scoringTable = function () { return sim.getScoringTable(); };
var simDocument = function() { return sim.getSimDocument(); };
if(sim) {
this.setPanel(panel);
this.setSection(theSection);
}
this.formatEventData = function() {
var buff = [];
var data = this.getData();
for(var i = 0; i < data.length; i++) {
if(data[i]) {
buff.push(data[i]);
if(i < data.length - 1) buff.push(',');
}
}
return buff.join('');
};
this.formatForAnimationInput = function(value) {
var output = [];
output[0] = value.join(Simulator.Constants.MULTIPLE_VALUE_DELIMITTER);
return output;
};
this.formatForTableInput = function(value) {
var output = [];
output[0] = value.join(Simulator.Constants.MULTIPLE_VALUE_DELIMITTER + ' ');
return output;
};
this.getData = function(inputScope) {
var checkedItems = [];
var k = 0;
var item = null;
var proxy = null;
var items = this.getItems();
for(var i = 0; i < items.length; i++) {
var labelFor = simDocument().getElementById(items[i].lookup('labelForID'));
item = simDocument().getElementById(items[i]['itemID']);
if(item.checked) {
if(inputScope == 'dataInput') proxy = this.getDataProxy(i);
else if(inputScope == 'evaluationInput') proxy = this.getEvaluationProxy(i);
else if(inputScope == 'animationInput') proxy = this.getAnimationProxy(i);
if(proxy != undefined && proxy != null) checkedItems[k] = proxy;
else checkedItems[k] = items[i].lookup('val');
labelFor.setAttribute('class', 'inputChecked');
k++;
}
else labelFor.removeAttribute('class');
}
this.setData(checkedItems);
return checkedItems;
};
this.handleEvent = function(event) {
switch (event.type) {
case 'inputReq':
this.recordInput(this);
break;
case 'info':
switch(event.context) {
case 'simulatorStateChange':
break;
}
break;
default:
dbg().logWarning(sourde, 'Unhandled event type received: ' + event.toString());
return;
}
};
this.setElementSelectState = function (state, contents) {
var htmlElement = null;
selectedItem = -1;
var items = this.getItems();
var parts = contents.split(',');
for (var i = 0; i < parts.length; i++) {
if (parts[i] != null) parts[i] = parts[i].trim();
}
var proxy = null;
var value = null;
for (var i = 0; i < items.length; i++) {
var labelFor = simDocument().getElementById(items[i].lookup('labelForID'));
proxy = items[i].lookup('dataProxy');
if (proxy) value = proxy;
else value = items[i].lookup('val');
if (state == 'true') {
if (utils().elementInArray(parts, value)) {
items[i].setValue('selected', 'checked');
if (selectedItem == '') selectedItem = value;
else selectedItem = ', ' + value;
htmlElement = simDocument().getElementById(items[i].itemID);
htmlElement.checked = 'checked';
labelFor.setAttribute('class', 'inputChecked');
this.recordInput(this, true);
}
else if ((items[i].lookup('selected')) || (items[i].lookup('default') == 'yes')) {
htmlElement = simDocument().getElementById(items[i].itemID);
if(htmlElement) htmlElement.checked = false;
labelFor.removeAttribute('class');
items[i].remove('selected');
}
} else {
if (value == contents && items[i].lookup('selected')) {
htmlElement = simDocument().getElementById(items[i].itemID);
if(htmlElement) htmlElement.checked = false;
labelFor.removeAttribute('class');
items[i].remove('selected');
}
}
}
};
this.keyboardNavigateTo = function(elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
var nodes = element.getElementsByTagName('li');
var item = nodes[index];
if(element) element.selectedIndex = index;
if(item) item.setAttribute('class', 'simAreaFocus');
};
this.keyboardNavigateAwayFrom = function(elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
var nodes = element.getElementsByTagName('li');
var item = nodes[index];
item.removeAttribute('class');
};
this.disableInput = function() {
this.disableItems();
};
this.enableInput = function() {
this.enableItems();
};
this.setAttributes = function(attr, node) {
Simulator.Input.ChoiceList.prototype.setAttributes.call(this, attr);
if(this.getScoreable()) scoringTable().addElement(this.getName(), 'input');
this.setItems(node);
};
this.doOnClick = function(id) {
this.onChange(id);
};
this.render = function() {
var nodeID = this.getNodeID();
var itemID = null;
var items = this.getItems();
var nextNum = utils().getNextSequenceNumber();
var image = null;
var panelHtml = panel.getHTMLElement();
this.setFocusable(true, true);
if(this.getLabel()) {
var textLabelEl = simDocument().createTextNode(this.getLabel());
panelHtml.appendChild(textLabelEl);
var brElement = simDocument().createElement('br');
panelHtml.appendChild(brElement);
}
for ( var x = 0; x < items.length; x++) {
var itemIDReset = x == 0 ? true : false;
itemID = this.createItemID(itemIDReset);
items[x]['itemID'] = itemID;
image = (items[x]).lookup('image');
if(x == 0) {
if (image != null && image != undefined) {
var ulElement = simDocument().createElement('ul');
ulElement.id = nodeID;
ulElement.setAttribute('class', 'multiSelect withImages');
} else {
ulElement = simDocument().createElement('ul');
ulElement.id = nodeID;
ulElement.setAttribute('class', 'multiSelect');
}
panelHtml.appendChild(ulElement);
}
var labelForID = 'labelFor' + itemID;
items[x].setValue('labelForID', labelForID);
if ((items[x]).lookup('val') != undefined) {
var listElement = simDocument().createElement('li');
var inputEl = simDocument().createElement('input');
inputEl.id = itemID;
inputEl.setAttribute('type', 'checkbox');
inputEl.setAttribute('name', 'ChoiceButtonGroup' + nodeID + nextNum);
inputEl.setAttribute('value', (items[x]).lookup('val'));
if(this.getSaveOnChange()) {
utils().bindEvent(inputEl, 'click', function () {
that.doOnClick(nodeID);
});
}
if(items[x].lookup('default') == 'yes') {
inputEl.setAttribute('checked', '');
}
listElement.appendChild(inputEl);
var labelForID = 'labelFor' + itemID;
items[x].setValue('labelForID', labelForID);
var labelEl = simDocument().createElement('label');
labelEl.id = labelForID;
labelEl.setAttribute('for', itemID);
if(items[x].lookup('default') == 'yes') {
labelEl.setAttribute('class', 'inputChecked');
}
if (image != null && image != undefined) {
var imageSpanEl = simDocument().createElement('span');
imageSpanEl.setAttribute('class', 'holderImage');
var imageEl = simDocument().createElement('img');
imageEl.setAttribute('src', image);
imageEl.setAttribute('alt', (items[x]).lookup('val'));
imageSpanEl.appendChild(imageEl);
labelEl.appendChild(imageSpanEl);
}
var listLabelSpanEl = simDocument().createElement('span');
listLabelSpanEl.setAttribute('class', 'listLabel');
listLabelSpanEl.innerHTML = (items[x]).lookup('val');
labelEl.appendChild(listLabelSpanEl);
listElement.appendChild(labelEl);
ulElement.appendChild(listElement);
}
if (this.isFocusable()) {
keyboardInput().addFocusableElementItem(this, this.getNodeID(), itemID);
}
}
this.setDefaultSelections();
this.mapHTML2JS(ulElement);
};
this.getSourceName = function() {
return source;
};
this.inspect = function(embedded, forced) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
for ( var i in this) {
if (i == 'items') {
buff.push(this.parent.inspect());
} else {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
}
if(!embedded) forced == true ? dbg().debugf(buff.join('')) : dbg().debug(buff.join(''));
else return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.ChoiceList.prototype = new Simulator.Input.GroupList();
Simulator.Input.ChoiceList.prototype.constructor = Simulator.Input.ChoiceList;

// FILE: DropList2.js (b5bdbdde) 3/7/2014 11:24:14 AM

Simulator.Input.DropList = function(sim, node, panel, theSection) {
Simulator.Input.GroupList.call(this, sim);
var dbg = function() { return sim.getDebug(); };
var utils = function() { return sim.getUtils(); };
var keyboardInput = function () { return sim.getKeyboardInput(); };
var scoringTable = function () { return sim.getScoringTable(); };
var simMgr = function () { return sim.getSimulationManager(); };
var simDocument = function() { return sim.getSimDocument(); };
var instance = this;
var selectType = 'single';
var listExpanded = false;
if(sim) {
this.setPanel(panel);
this.setSection(theSection);
}
this.getSelectType = function() {
return selectType;
};
this.getElementData = function(id) {
};
this.getKeyboardInput = function() {
return keyboardInput();
};
this.setSelectType = function(newSelectType) {
selectType = newSelectType;
return this;
};
this.getListExpanded = function() {
return listExpanded;
};
this.getData = function(inputScope) {
var data = [];
var proxy = null;
var select = simDocument().getElementById(this.getNodeID());
var value = select.value;
this.setData(value);
if(inputScope == 'dataInput') proxy = this.getDataProxy(select.selectedIndex);
else if(inputScope == 'animationInput') proxy = this.getAnimationProxy(select.selectedIndex);
else if(inputScope == 'evaluationInput') proxy = this.getEvaluationProxy(select.selectedIndex);
if(proxy != undefined && proxy != null) data[0] = proxy;
else data[0] = value;
return data;
};
this.handleEvent = function(event) {
switch (event.type) {
case 'inputReq':
this.recordInput(this);
break;
case 'info':
switch(event.context) {
case 'simulatorStateChange':
break;
}
break;
default:
dbg().logWarning(source, 'Unhandled event type received: ' + event.toString());
return;
}
};
this.setElementSelectState = function(state, contents) {
var items = this.getItems();
var proxy = null;
var value = null;
for(var i = 0; i < items.length; i++) {
proxy = items[i].lookup('dataProxy');
if(proxy) value = proxy;
else value = items[i].lookup('val');
var htmlElement = simDocument().getElementById(items[i].itemID);
if(state == 'true') {
if(value == contents) {
items[i].setValue('selected', 'selected');
selectedItem = value;
htmlElement.selected = true;
this.recordInput(this, true);
}
else if(items[i].lookup('selected') == 'selected') htmlElement.removeAttribute('selected');
} else {
if(value == contents && items[i].lookup('selected') == 'selected') htmlElement.removeAttribute('selected');
}
}
};
this.receivedSpeechFocus = function() {
debug(this.getName() + ' received speech focus');
var element = simDocument().getElementById(this.getNodeID());
var node = simDocument().getElementById(Simulator.Constants.INPUT_PANEL_NAME);
var outline = simDocument().getElementById('dropHolder' + this.getName());
if(outline) outline.setAttribute('class', 'dropHolder simAreaFocus');
outline.size = this.getItems().length;
element.size = this.getItems().length;
node = simDocument().getElementById(this.getName());
node.style.border='thin solid #ff0000';
};
this.speechActivated = function(value) {
this.setSelectStateViaSpeech(this.getNodeID(), value);
InputElement.onChange(this.getNodeID());
};
this.removeSpeechFocus = function() {
debug(this.getName() + ' lost speech focus');
var element = simDocument().getElementById(this.getNodeID());
element.size = 1;
var node = simDocument().getElementById(Simulator.Constants.INPUT_PANEL_NAME);
var element = getElementsByClassName('dropHolder', node)[0];
node = simDocument().getElementById(this.getName());
node.style.border='none';
if(element) element.setAttribute('class', 'dropHolder');
};
this.keyboardNavigateTo = function(elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
var outline = element.getParentNode;
if(outline) outline.setAttribute("class", "dropHolder simAreaFocus");
var item = null;
item = simDocument().getElementById(itemID);
if (item) {
item.setAttribute("focused", "focused");
}
if (!listExpanded) {
this.expandList();
listExpanded = true;
}
};
this.keyboardNavigateAwayFrom = function(elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
var outline = element.getParentNode;
if(outline) outline.setAttribute("class", "dropHolder");
var item = null;
item = simDocument().getElementById(itemID);
if (item) {
item.setAttribute("focused", "");
}
if (listExpanded) {
this.closeList();
listExpanded = false;
}
};
this.disableInput = function() {
this.disableItems();
};
this.enableInput = function() {
this.enableItems();
};
this.expandList = function() {
var dlist = simDocument().getElementById(this.getNodeID());
var newspan = simDocument().createElement('span');
newspan.setAttribute('id', "selectholderspan");
newspan.setAttribute('class', "selectHolder selectOpened");
dlist.parentNode.parentNode.appendChild(newspan);
newspan.appendChild(dlist.parentNode);
dlist.setAttribute('size', this.getItems().length);
var visibleHeight = 1.2 * this.getItems().length;
dlist.style.height = visibleHeight.toString() + 'em';
var container = simDocument().getElementById(Simulator.Constants.SIM_CONTAINER_NAME + sim.getSimID());
if (container) {
utils().bindEvent(container, 'click', function () {
if ((instance) && (instance.getListExpanded())) {
instance.getKeyboardInput().closeDropList();
}
});
}
};
this.closeList = function() {
var dlist = simDocument().getElementById(this.getNodeID());
dlist.style.height = "";
dlist.setAttribute('size', 0);
var spanRemoved = dlist.parentNode.parentNode;
spanRemoved.parentNode.appendChild(dlist.parentNode);
spanRemoved.parentNode.removeChild(spanRemoved);
};
this.recordKeyboardSelection = function(elementID, itemID, itemIndex) {
var element = null;
var item = null;
if((itemID) && (elementID)) {
item = simDocument().getElementById(itemID);
element = simDocument().getElementById(elementID);
if(!item) {
if(element) item = element.getElementsByClassName(itemID)[0];
}
if(item) {
if ((element.selectedIndex != null) && (element.selectedIndex >= 0))
element.options[element.selectedIndex].setAttribute("selected", "");
item.selected = true;
item.setAttribute("selected", "selected");
if (element)
element.selectedIndex = itemIndex;
this.setSelectStateViaKeyboard(elementID, itemID);
this.onChange(elementID);
}
}
if (listExpanded) {
this.closeList();
listExpanded = false;
}
};
this.setAttributes = function(attr, node) {
Simulator.Input.DropList.prototype.setAttributes.call(this, attr);
for ( var i in attr) {
switch (i) {
case 'selectType':
this.setSelectType(attr[i]);
break;
}
}
if(instance.getScoreable()) scoringTable().addElement(instance.getName(), 'input');
this.setItems(node);
};
this.doOnChange = function() {
instance.onChange(instance.getNodeID());
};
this.render = function() {
var items = this.getItems();
var itemID = null;
this.setFocusable(true, true);
var image = this.getImage();
if (image != undefined && image != null) {
var dropDiv = simDocument().createElement('div');
dropDiv.setAttribute('class', 'dropDown withImages');
dropDiv.id = this.getName();
var holderSpan = simDocument().createElement('span');
holderSpan.setAttribute('class', 'holderImage');
dropDiv.appendChild(holderSpan);
var img = simDocument().createElement('img');
img.src = image;
img.alt = this.getName() + ' image';
holderSpan.appendChild(img);
dropDiv.appendChild(holderSpan);
}
else {
var dropDiv = simDocument().createElement('div');
dropDiv.setAttribute('class', 'dropDown');
dropDiv.id = this.getName();
}
var form = simDocument().createElement('form');
dropDiv.appendChild(form);
form.name = this.getName();
var formSpan = simDocument().createElement('span');
formSpan.setAttribute('class', 'dropHolder');
formSpan.id = 'dropHolder' + this.getName();
form.appendChild(formSpan);
if(this.getLabel()) {
var labelSpan = simDocument().createElement('span');
labelSpan.style.padding.top = '15px';
labelSpan.style.padding.top = '15px';
labelSpan.innerHTML = this.getLabel();
formSpan.appendChild(labelSpan);
}
var select = simDocument().createElement('select');
select.id = this.getNodeID();
select.innerHTML =  + this.getName();
var item = null;
for ( var x = 0; x < items.length; x++) {
var itemIDReset = x == 0 ? true : false;
itemID = this.createItemID(itemIDReset);
items[x]['itemID'] = itemID;
if ((items[x]).lookup('val') != undefined) {
item = simDocument().createElement('option');
item.id = itemID;
item.value = (items[x]).lookup('val');
}
if(items[x].lookup('default') == 'yes') item.selected = 'selected';
item.innerHTML = (items[x]).lookup('val');
select.appendChild(item);
if(this.isFocusable()) {
keyboardInput().addFocusableElementItem(this, this.getNodeID(), itemID);
}
}
formSpan.appendChild(select);
var arrowSpan = simDocument().createElement('span');
arrowSpan.setAttribute('class', 'dropArrow');
formSpan.appendChild(arrowSpan);
htmlPanel = panel.getHTMLElement();
htmlPanel.appendChild(dropDiv);
var dropList = simDocument().getElementById(this.getNodeID());
if(instance.getSaveOnChange())
utils().bindEvent(dropList, 'change', function() {
instance.doOnChange();
});
utils().appendBlankVertcalSpace(simDocument().getElementById(panel.getNodeID()), 2);
this.setDefaultSelections();
this.mapHTML2JS(dropList);
};
this.getSourceName = function() {
return source;
};
this.inspect = function(embedded, forced) {
var buff = [];
var sep = '\n\n';
if(!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for ( var i in this) {
if (i == 'items') {
buff.push(this.parent.inspect());
} else {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
}
if(!embedded) forced === true ? dbg().debugf(buff.join('')) : dbg().debug(buff.join(''));
else return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.DropList.prototype = new Simulator.Input.GroupList();
Simulator.Input.DropList.prototype.constructor = Simulator.Input.DropList;

// FILE: OptionList2.js (a282b555) 3/7/2014 11:24:14 AM

Simulator.Input.OptionList = function(sim, node, panel, theSection) {
Simulator.Input.GroupList.call(this, sim);
var that = this;
var source = 'OptionList';
var dbg = function() { return sim.getDebug(); };
var utils = function() { return sim.getUtils(); };
var scoringTable = function () { return sim.getScoringTable(); };
var keyboardInput = function () { return sim.getKeyboardInput(); };
var simMgr = function() { sim.getSimulationManager(); };
var simDocument = function() { return sim.getSimDocument(); };
if(sim) {
this.setPanel(panel);
this.setSection(theSection);
}
this.getData = function(inputScope) {
var data = [];
var proxy = null;
var items = this.getItems();
for(var i = 0;  i < items.length; i++) {
var HTMLItem = simDocument().getElementById(items[i].lookup('itemID'));
var labelFor = simDocument().getElementById(items[i].lookup('labelForID'));
if(inputScope == 'dataInput') proxy = this.getDataProxy(i);
else if(inputScope == 'evaluationInput') proxy = this.getEvaluationProxy(i);
else if(inputScope == 'animationInput') proxy = this.getAnimationProxy(i);
if(HTMLItem.checked) {
if(proxy != undefined && proxy != null) data[0] = proxy;
else data[0] = items[i].lookup('val');
this.setData(data[0]);
labelFor.setAttribute('class', 'inputChecked');
items[i].setValue('checked','true');
selectedItem = data[0];
}
else {
labelFor.removeAttribute('class');
items[i].setValue('checked', 'false');
}
}
if(data.length == 0) this.setData('');
return data;
};
this.handleEvent = function(event) {
switch (event.type) {
case 'inputReq':
this.recordInput(this);
break;
case 'info':
switch(event.context) {
case 'simulatorStateChange':
break;
}
break;
default:
dbg().logWarning(source, 'Unhandled event type received: ' + event.toString());
return;
}
};
this.setElementSelectState = function(state, contents) {
var items = this.getItems();
var proxy = null;
var value = null;
for(var i = 0; i < items.length; i++) {
proxy = items[i].lookup('dataProxy');
if(proxy) value = proxy;
else value = items[i].lookup('val');
var itemID = items[i].lookup('itemID');
var labelFor = simDocument().getElementById('labelFor' + itemID);
var htmlElement = simDocument().getElementById(itemID);
if(value == contents) {
items[i].setValue('checked','true');
selectedItem = value;
htmlElement.checked = 'checked';
labelFor.setAttribute('class', 'inputChecked');
this.recordInput(this, true);
}
else if(items[i].lookup('checked')) {
items[i].setValue('checked', 'false');
htmlElement.removeAttribute('checked');
labelFor.removeAttribute('class');
}
}
};
this.keyboardNavigateTo = function(elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
var nodes = element.getElementsByTagName('li');
var item = nodes[index];
if(element) element.selectedIndex = index;
if(item) item.setAttribute('class', 'simAreaFocus');
};
this.receivedSpeechFocus = function() {
debug(this.getName() + ' received speech focus');
var element = simDocument().getElementById(this.getNodeID());
var nodes = element.getElementsByTagName('li');
var item = nodes[0];
if(element) element.selectedIndex = 0;
element.style.border='thin solid #ff0000';
if(item) item.setAttribute('class', 'simAreaFocus');
};
this.keyboardNavigateAwayFrom = function(elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
var nodes = element.getElementsByTagName('li');
var item = nodes[index];
item.removeAttribute('class');
};
this.removeSpeechFocus = function() {
debug(this.getName() + ' lost speech focus');
var element = simDocument().getElementById(this.getNodeID());
var nodes = element.getElementsByTagName('li');
var item = nodes[0];
item.removeAttribute('class');
element.style.border='none';
};
this.disableInput = function() {
this.disableItems();
};
this.enableInput = function() {
this.enableItems();
};
this.speechActivated = function(value) {
this.setSelectStateViaSpeech(this.getNodeID(), value);
this.onChange(this.getNodeID());
};
this.setAttributes = function(attr, node) {
Simulator.Input.OptionList.prototype.setAttributes.call(this, attr, node);
if(this.getScoreable()) scoringTable().addElement(this.getName(), 'input');
this.setItems(node);
};
this.doOnClick = function(id) {
this.onChange(id);
};
this.render = function() {
var nodeID = this.getNodeID();
var itemID = null;
var items = this.getItems();
var nextNum = utils().getNextSequenceNumber();
var image = null;
var panelHtml = panel.getHTMLElement();
this.setFocusable(true, true);
if(this.getLabel()) {
var textLabelEl = simDocument().createTextNode(this.getLabel());
panelHtml.appendChild(textLabelEl);
var brElement = simDocument().createElement('br');
panelHtml.appendChild(brElement);
}
var ulElement = null;
for ( var x = 0; x < items.length; x++) {
var itemIDReset = x == 0 ? true : false;
itemID = this.createItemID(itemIDReset);
items[x]['itemID'] = itemID;
image = (items[x]).lookup('image');
if(x == 0) {
if (image != undefined && image != null) {
ulElement = simDocument().createElement('ul');
ulElement.id = nodeID;
ulElement.setAttribute('class', 'singleSelect withImages');
} else {
ulElement = simDocument().createElement('ul');
ulElement.id = nodeID;
ulElement.setAttribute('class', 'singleSelect');
}
panelHtml.appendChild(ulElement);
}
if ((items[x]).lookup('val') != undefined) {
var listElement = simDocument().createElement('li');
var inputEl = simDocument().createElement('input');
inputEl.id = itemID;
inputEl.setAttribute('type', 'radio');
inputEl.setAttribute('name', 'RadioButtonGroup' + nodeID + nextNum);
inputEl.setAttribute('value', (items[x]).lookup('val'));
if (this.getSaveOnChange()) {
utils().bindEvent(inputEl, 'click', function () {
that.doOnClick(nodeID);
});
}
if(items[x].lookup('default') == 'yes') {
inputEl.setAttribute('checked', '');
}
listElement.appendChild(inputEl);
var labelForID = 'labelFor' + itemID;
items[x].setValue('labelForID', labelForID);
var elementLabel = simDocument().createElement('label');
elementLabel.id = labelForID;
elementLabel.setAttribute('for', itemID);
if(items[x].lookup('default') == 'yes') {
elementLabel.setAttribute('class', 'inputChecked');
}
if (image != undefined && image != null) {
var imageSpanEl = simDocument().createElement('span');
imageSpanEl.setAttribute('class', 'holderImage');
var imageEl = simDocument().createElement('img');
imageEl.setAttribute('src', image);
imageEl.setAttribute('alt', (items[x]).lookup('val'));
imageSpanEl.appendChild(imageEl);
elementLabel.appendChild(imageSpanEl);
}
var listLabelSpanEl = simDocument().createElement('span');
listLabelSpanEl.setAttribute('class', 'listLabel');
listLabelSpanEl.innerHTML = (items[x]).lookup('val');
elementLabel.appendChild(listLabelSpanEl);
listElement.appendChild(elementLabel);
ulElement.appendChild(listElement);
}
if(this.isFocusable()) {
keyboardInput().addFocusableElementItem(this, nodeID, itemID);
}
}
this.setDefaultSelections();
this.mapHTML2JS(ulElement);
};
this.getSourceName = function() {
return source;
};
this.inspect = function(embedded, forced) {
var buff = [];
var sep = '\n\n';
if(!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for ( var i in this) {
if (i == 'items') {
buff.push(this.parent.inspect());
} else {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
}
if(!embedded) forced === true ? dbg().debug(buff.join('')) : dbg().debug(buff.join(''));
else return buff.join('');
};
var debug = function(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
};
var debugf = function(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
};
};
Simulator.Input.OptionList.prototype = new Simulator.Input.GroupList();
Simulator.Input.OptionList.parent = Simulator.Input.GroupList;
Simulator.Input.OptionList.prototype.constructor = Simulator.Input.OptionList;

// FILE: FieldSet2.js (3ec40e14) 3/7/2014 11:24:14 AM

Simulator.Input.FieldSet = function(sim) {
Simulator.Input.InputElement.call(this, sim);
var dbg = function() { return sim.getDebug(); };
var persistentVarDB = function() { return sim.getPersistentVariableDataBase(); };
var simDocument = function() { return sim.getSimDocument(); };
var defaultValue = 0;
var minValue = 0;
var increment = 0;
var units = '';
var data = '';
var valueModifier = null;
var valueChanged = false;
var selectedValue = -1;
var valueModifierOp = 'add';
var maxValue = 0;
this.getMinValue = function() {
return minValue;
};
this.setMinValue = function(newMinValue) {
minValue = newMinValue;
return this;
};
this.getMaxValue = function() {
return maxValue;
};
this.setMaxValue = function(newMaxValue) {
maxValue = newMaxValue;
return this;
};
this.getDefaultValue = function() {
this.setData(defaultValue);
return defaultValue;
};
this.setDefaultValue = function(newDefaultValue) {
defaultValue = newDefaultValue;
selectedValue = newDefaultValue;
this.setPrevValue(newDefaultValue);
return this;
};
this.recordKeyboardSelection = function(elementID, itemID, itemIndex) {
var element = null;
var item = null;
if(itemID) {
item = simDocument().getElementById(itemID);
if(!item) {
element = simDocument().getElementById(elementID);
if(element) item = element.getElementsByClassName(itemID)[0];
}
if(item) {
item.isSelected = true;
this.setSelectStateViaKeyboard(elementID, itemID);
this.onChange(elementID);
}
}
};
this.setSelectStateViaKeyboard = function(elementID, itemID) {
if(itemID == 'goingUp') incrementValue(elementID, this.getMaxValue(), this.getIncrement());
else if(itemID == 'goingDown') decrementValue(elementID, this.getMaxValue(), this.getIncrement());
};
this.getIncrement = function() {
return increment;
};
this.setIncrement = function(newIncrement) {
increment = newIncrement;
return this;
};
this.getUnits = function() {
return units;
};
this.setUnits = function(newUnits) {
units = newUnits;
return this;
};
this.setData = function(newData) {
data = newData;
};
this.getData = function() {
var dataArray = [];
dataArray[0] = data;
return dataArray;
};
this.saveState = function(indent, preface, nameStr, valStr, suffix) {
if(selectedValue != '') return indent + preface + nameStr + this.getName() + valStr + this.getData() + suffix;
else return '';
};
this.setElementSelectState = function(state, contents) {
var value = parseFloat(contents);
if(value >= this.getMinValue() && value <= this.getMaxValue() && value % this.getIncrement() == 0) {
this.setData(contents);
selectedValue = contents;
setHTMLValue(this.getNodeID(), this.getData());
this.recordInput(this, true);
}
};
this.setValueModifier = function(element) {
valueModifier = element;
};
this.getValueModifier = function() {
return valueModifier;
};
this.setValueModifierOp = function(op) {
valueModifierOp = op;
};
this.getValueModifierOp = function() {
return valueModifierOp;
};
var doModifierOp = function(element, value) {
var modifier = element.getValueModifier();
if(isNaN(modifier)) modifier = persistentVarDB().getElementValue(element.getValueModifier());
if(value == undefined || value == null) logError('ValueModifier ' + modifier + ' for ' + element.getName() + ' is not a number nor in persistentVarDB');
else {
var op = element.getValueModifierOp();
switch(op) {
case 'add': value += modifier;
break;
case 'multiply': value *= modifier;
break;
case 'subtract': value -= modifier;
break;
case 'divide': value /= modifier;
break;
default: dbg().logError(source, 'Value modifer operation "' + op + '" is not defined');
break;
}
}
return value;
};
this.getModifiedValue = function(value) {
if(this.getValueModifier() != null) {
value = doModifierOp(this, value);
}
return value;
};
this.setAttributes = function(attr, node) {
Simulator.Input.FieldSet.prototype.setAttributes.call(this, attr);
for (var i in attr) {
switch (i) {
case 'minValue':
this.setMinValue(attr[i]);
break;
case 'maxValue':
this.setMaxValue(attr[i]);
break;
case 'defaultValue':
this.setDefaultValue(attr[i]);
break;
case 'increment':
this.setIncrement(attr[i]);
break;
case 'units':
this.setUnits(attr[i]);
break;
}
}
};
var setHTMLValue = function(id, value) {
var htmlElement = simDocument().getElementById(id);
if (!htmlElement) htmlElement = simDocument().getElementById(id + 'slider-value');
if (htmlElement) htmlElement.value = value;
};
this.setValueChanged = function(newValueChanged) {
valueChanged = newValueChanged == 'true' || newValueChanged == 'yes' ? true : false;
};
this.getValueChanged = function() {
return valueChanged;
};
this.incrementValue = function(id, maxValue, increment) {
var htmlElement = simDocument().getElementById(id);
currentValue = parseFloat(htmlElement.value);
currentValue = Math.min(currentValue + parseFloat(increment), maxValue);
htmlElement.value = currentValue;
currentValue = this.getModifiedValue(currentValue);
currentValue = currentValue.toString();
this.setData(currentValue);
valueChanged = true;
if(this.getSaveOnChange()) this.onChange(this.getNodeID());
};
this.decrementValue = function(id, minValue, decrement) {
var htmlElement = simDocument().getElementById(id);
currentValue = parseFloat(htmlElement.value);
currentValue = Math.max(currentValue - parseFloat(decrement), minValue);
htmlElement.value = currentValue;
currentValue = this.getModifiedValue(currentValue);
currentValue = currentValue.toString();
this.setData(currentValue);
valueChanged = true;
if(this.getSaveOnChange()) this.onChange(this.getNodeID());
};
this.inspect = function(embedded, forced) {
var buff = [];
var sep = '\n\n';
if (!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for ( var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) forced === true ? dbg().debugf(buff.join('')) : dbg().debug(buff.join(''));
else return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.FieldSet.prototype = new Simulator.Input.InputElement();
Simulator.Input.FieldSet.prototype.constructor = Simulator.Input.FieldSet;

// FILE: SimSlider2.js (7b358bac) 5/2/2014 12:55:58 PM

Simulator.Input.SimSlider = function (sim, node, panel, theSection) {
Simulator.Input.FieldSet.call(this, sim);
var that = this;
var source = 'SimSlider';
var instance = this;
var HTMLId = null;
var textAreaId = null;
var sliderBackgroundImage = 'http://yui.yahooapis.com/2.9.0/build/slider/assets/bg-h.gif';
var sliderImage = 'Scripts/Simulator/renderer/Images/slider_thumb.png';
var theSlider = null;
var setValues = [];
var orientation = 'horizontal';
var reportMovement = false;
var startConstraint = 0;
var endConstraint = 210;
var dbg = function () { return sim.getDebug(); };
var utils = function () { return sim.getUtils(); };
var simMgr = function () { return sim.getSimulationManager(); };
var scoringTable = function () { return sim.getScoringTable(); };
var keyboardInput = function () { return sim.getKeyboardInput(); };
var simDocument = function () { return sim.getSimDocument(); };
if (sim) {
this.setPanel(panel);
this.setSection(theSection);
}
this.setHTMLId = function (newHTMLId) {
HTMLId = newHTMLId;
};
this.getHTMLId = function () {
return HTMLId;
};
this.setTextAreaId = function (newTextAreaId) {
textAreaId = newTextAreaId;
};
this.getTextAreaId = function () {
return textAreaId;
};
this.getSetValues = function () {
return setValues;
};
this.setSetValues = function (newSetValues) {
setValues = newSetValues;
return this;
};
this.getSliderBackgroundImage = function () {
return sliderBackgroundImage;
};
this.setSliderBackgroundImage = function (newSliderBackgroundImage) {
sliderBackgroundImage = newSliderBackgroundImage;
return this;
};
this.getSliderImage = function () {
return 'Scripts/Simulator/renderer/Images/slider_thumb.png';
};
this.setSliderImage = function (newSliderImage) {
sliderImage = newSliderImage;
return this;
};
this.getOrientation = function () {
return orientation;
};
this.setOrientation = function (newOrientation) {
orientation = newOrientation;
return this;
};
this.getReportMovement = function () {
return reportMovement;
};
this.setReportMovement = function (newReportMovement) {
reportMovement = newReportMovement == 'yes' ? true : false;
return this;
};
this.handleEvent = function (event) {
switch (event.type) {
case 'inputReq':
this.recordInput(this);
break;
case 'info':
switch (event.context) {
case 'sliderValue':
this.setData(this.getModifiedValue(event.data.toString()));
this.onChange(this.getNodeID());
break;
case 'simulatorStateChange':
break;
}
default:
dbg().logWarning(source, 'Unhandled event type received: ' + event.toString());
return;
}
};
this.keyboardNavigateTo = function (elementID, itemID, index) {
if (this.getTextAreaId()) {
var element = simDocument().getElementById(this.getTextAreaId());
if (element) {
var className = element.getAttribute('class');
className = className + ' ' + 'simAreaFocus';
element.setAttribute('class', className);
element.focus();
}
}
};
this.keyboardNavigateAwayFrom = function (elementID, itemID, index) {
if (this.getTextAreaId()) {
var element = simDocument().getElementById(this.getTextAreaId());
if (element) {
var className = element.getAttribute('class');
var index = className.indexOf('simAreaFocus');
if (index > 0)
className = className.substring(0, index - 1);
element.setAttribute('class', className);
element.blur();
}
}
};
this.recordKeyboardSelection = function (elementID, itemID, itemIndex) {
if ((this.getTextAreaId()) && (theSlider != null)) {
var element = simDocument().getElementById(this.getTextAreaId());
if (element) {
var currentValue = element.value;
if (!isNaN(currentValue)) {
var actualValue = theSlider.jsSlider.getMinValue() - 0;
theSlider.setValue(actualValue + (currentValue / theSlider.scaleFactor));
RecordChange(theSlider);
}
element.blur();
}
}
};
this.disableInput = function () {
var element = simDocument().getElementById(this.getNodeID() + 'sliderHolder');
element.disabled = true;
var txtField = simDocument().getElementById(this.getNodeID() + 'slider-value');
txtField.disabled = true;
this.setState('disabled');
if (this.mySlider) {
this.mySlider.lock();
}
};
this.enableInput = function () {
var element = simDocument().getElementById(this.getNodeID() + 'sliderHolder');
element.disabled = false;
var txtField = simDocument().getElementById(this.getNodeID() + 'slider-value');
txtField.disabled = false;
this.setState('enabled');
if (this.mySlider) {
this.mySlider.unlock();
}
};
this.render = function () {
var panelHtml = panel.getHTMLElement();
var holderDiv = simDocument().createElement('div');
holderDiv.id = this.getNodeID() + 'sliderHolder';
if (this.getOrientation() == 'horizontal') holderDiv.setAttribute('class', 'slider sliderHorizontal');
else holderDiv.setAttribute('class', 'slider sliderVertical');
var label = '';
if (sim.getSpeechEnabled()) {
label = this.getSpeechLabel();
if (!label) {
label = this.getLabel();
if (!label) label = Simulator.Constants.SPEECH_LABEL_PREFIX + label;
else {
label = Section.GetCurrentSectionLabel();
if (!label) label = Simulator.Constants.SPEECH_LABEL_PREFIX + label;
else {
dbg().logFatalError(source, 'Item is speech enabled but no speechLabel, element label, or enclosing section label is specified for ' + this.getName());
return;
}
}
}
}
else {
label = this.getLabel();
if (!label) {
label = ' ';
} else {
label = label + ':';
}
}
var labelElem = simDocument().createElement('span');
labelElem.innerHTML = label;
var txtAreaDiv = simDocument().createElement('div');
txtAreaDiv.setAttribute('class', 'slider-label-area'); ;
var txtAreaInput = simDocument().createElement('input');
txtAreaInput.id = this.getNodeID() + 'slider-value';
this.txtAreaId = txtAreaInput.id;
this.setTextAreaId(txtAreaInput.id);
txtAreaInput.type = 'text';
txtAreaInput.size = utils().getNumberLength(this.getMaxValue());
txtAreaInput.maxlength = txtAreaInput.size;
txtAreaInput.autocomplete = 'off';
txtAreaInput.value = this.getDefaultValue();
txtAreaInput.setAttribute('class', 'slider-text-area');
utils().bindEvent(txtAreaInput, 'change', function () {
var currentValue = txtAreaInput.value;
if (!isNaN(currentValue)) {
var actualValue = theSlider.jsSlider.getMinValue() - 0;
theSlider.setValue(actualValue + Math.round(currentValue / theSlider.scaleFactor));
RecordChange(theSlider);
}
});
utils().bindEvent(txtAreaInput, 'keypress', function (event) {
var key = event.keyCode;
if (key == 13) {
var currentValue = txtAreaInput.value;
if (!isNaN(currentValue)) {
var actualValue = theSlider.jsSlider.getMinValue() - 0;
theSlider.setValue(actualValue + Math.round(currentValue / theSlider.scaleFactor));
RecordChange(theSlider);
}
} else {
var validKey = that.onKeyPressHandler(event);
if (!validKey) {
if (event.preventDefault) {
event.preventDefault();
} else {
event.returnValue = false;
}
}
}
});
var txtAreaUM = null;
if (this.getUnits()) {
txtAreaUM = simDocument().createElement('label');
txtAreaUM.setAttribute('for', txtAreaInput.id);
txtAreaUM.innerHTML = this.getUnits();
}
if (this.isFocusable()) keyboardInput().addFocusableElementItem(this, this.getNodeID(), txtAreaInput.id);
var minMaxDiv = simDocument().createElement('div');
minMaxDiv.setAttribute('class', 'slider-min-max');
var minValSpan = simDocument().createElement('span');
minMaxDiv.appendChild(minValSpan);
minValSpan.innerHTML = this.getMinValue() + '  ';
minValSpan.setAttribute('class', 'yui-slider-min');
var maxValSpan = simDocument().createElement('span');
minMaxDiv.appendChild(maxValSpan);
maxValSpan.setAttribute('class', 'yui-slider-max');
maxValSpan.innerHTML = '  ' + this.getMaxValue();
var image = this.getImage();
var imageDiv = null;
if (image != null && image != undefined) {
imageDiv = simDocument().createElement('div');
imageDiv.setAttribute('class', 'slider withImages');
imageDiv.setAttribute('id', this.getName());
var imageHolder = simDocument().createElement('span');
imageHolder.setAttribute('class', 'holderImage');
var imageElement = simDocument().createElement('img');
imageElement.setAttribute('src', image);
imageHolder.appendChild(imageElement);
imageDiv.appendChild(imageHolder);
}
var bgDivId = this.getNodeID() + 'DivBG';
var sliderDiv = simDocument().createElement('div');
sliderDiv.id = bgDivId;
sliderDiv.setAttribute('class', 'yui-h-slider');
sliderDiv.tabindex = '-1';
sliderDiv.title = 'Slider';
this.setHTMLId(sliderDiv.id);
var sliderThumbDiv = simDocument().createElement('div');
var thumbDivId = this.getNodeID() + 'ThumbDiv';
sliderThumbDiv.id = thumbDivId;
sliderThumbDiv.setAttribute("class", "yui-slider-thumb");
sliderThumbDiv.setAttribute('class', 'yui-slider-thumb');
panelHtml.appendChild(holderDiv);
txtAreaDiv.appendChild(labelElem);
txtAreaDiv.appendChild(txtAreaInput);
if (txtAreaUM) {
txtAreaDiv.appendChild(txtAreaUM);
}
sliderDiv.appendChild(sliderThumbDiv);
holderDiv.appendChild(txtAreaDiv);
holderDiv.appendChild(minMaxDiv);
holderDiv.appendChild(sliderDiv);
if (imageDiv != null) {
holderDiv.appendChild(imageDiv);
}
this.sliderDiv = sliderDiv.id;
this.sliderThumbDiv = sliderThumbDiv.id;
this.startConstraint = startConstraint;
this.endConstraint = endConstraint;
this.sliderDivId = sliderDiv.id;
this.sliderThumbDivId = sliderThumbDiv.id;
sim.getSliderPreRenderQueue().add(this);
this.recordInput(this, true);
this.setPrevValue(this.getDefaultValue());
this.mapHTML2JS(holderDiv);
};
this.onKeyPressHandler = function (event) {
var char = null, match = null;
if (event.which == null) {
char = String.fromCharCode(event.keyCode);
}
else if (event.which != 0 && event.charCode != 0) {
char = String.fromCharCode(event.which);
}
else {
return true;
}
match = char.match(/[0-9]/);
return !!match;
};
this.getHTMLElement = function (id) {
return simDocument().getElementById(this.getNodeID() + 'DivBG');
};
this.getHTMLSlider = function () {
return theSlider;
};
this.setFocusable(true, true);
this.postContainerRender = function () {
var inc = this.getIncrement();
var scaleFactor = (this.getMaxValue() - this.getMinValue()) / endConstraint;
inc = inc / scaleFactor;
this.scaleFactor = scaleFactor;
if (this.getOrientation() == 'horizontal') {
theSlider = YAHOO.widget.Slider.getHorizSlider(this.sliderDivId,
this.sliderThumbDivId, startConstraint, endConstraint, inc);
} else {
theSlider = YAHOO.widget.Slider.getVertSlider(this.sliderDivId,
this.sliderThumbDivId, startConstraint, endConstraint, inc);
}
this.mySlider = theSlider;
this.prevValue = this.getDefaultValue();
theSlider.setValue(Math.abs(this.getDefaultValue() - this.getMinValue()) / scaleFactor, false, true, true);
theSlider.valTxtField = this.txtAreaInput;
theSlider.jsSlider = this;
theSlider.scaleFactor = this.scaleFactor;
theSlider.subscribe('change', function () { RecordChange(theSlider); });
theSlider.subscribe('slideEnd', function () { SliderEnd(theSlider); });
theSlider.animate = false;
var id = this.txtAreaId;
var node = simDocument().getElementById(id);
node.value = this.getDefaultValue();
};
this.setAttributes = function (attr, node) {
if (node) attr = utils().getAttributes(node);
Simulator.Input.SimSlider.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'orientation':
this.setOrientation(attr[i]);
break;
case 'sliderBackgroundImage':
this.setSliderBackgroundImage(attr[i]);
break;
case 'sliderImage':
this.setSliderImage(attr[i]);
break;
case 'imagePath':
this.setSliderImagePath(attr[i]);
break;
case 'multModifier':
this.setMultModifier(attr[i]);
break;
case 'addModifier':
this.setAddModifier(attr[i]);
break;
case 'valueModifier':
this.setValueModifier(attr[i]);
break;
case 'reportMovement':
this.setReportMovement(attr[i]);
break;
}
}
if (this.getScoreable()) scoringTable().addElement(this.getName(), 'input');
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
if (!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) (force === null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
var SSFixRoundError = function (val, inc) {
if (inc) {
var rem = val % inc;
if (rem) {
val = val + (inc - rem);
}
}
return val;
};
var RecordChange = function (slider) {
var jsSlider = slider.jsSlider;
var actualValue = Math.round(slider.getValue());
actualValue = actualValue * slider.scaleFactor;
if (actualValue < 0)
actualValue = 0;
var offset = jsSlider.getMinValue() - 0;
actualValue = actualValue + offset;
actualValue = SSFixRoundError(actualValue, jsSlider.getIncrement());
var id = jsSlider.txtAreaId;
var node = simDocument().getElementById(id);
node.value = actualValue;
if (jsSlider.getReportMovement()) {
jsSlider.setData(actualValue);
jsSlider.recordInput(jsSlider);
instance.onChange(jsSlider.getNodeID());
}
};
var SliderEnd = function (slider) {
var jsSlider = slider.jsSlider;
var actualValue = Math.round(slider.getValue() * slider.scaleFactor);
if (actualValue < 0)
actualValue = 0;
var offset = slider.jsSlider.getMinValue() - 0;
actualValue = actualValue + offset;
actualValue = SSFixRoundError(actualValue, jsSlider.getIncrement());
var id = jsSlider.txtAreaId;
var node = simDocument().getElementById(id);
node.value = actualValue;
if (jsSlider.prevValue != actualValue) {
jsSlider.setData(jsSlider.getModifiedValue(actualValue) + '');
jsSlider.recordInput(jsSlider);
instance.onChange(jsSlider.getNodeID());
jsSlider.prevValue = actualValue;
}
};
this.setElementSelectState = function(state, contents) {
var value = parseFloat(contents);
if(value >= this.getMinValue() && value <= this.getMaxValue() && value % this.getIncrement() == 0) {
this.setData(contents);
this.setDefaultValue(contents);
setHTMLValue(this.getNodeID(), this.getData());
this.recordInput(this, true);
}
};
var setHTMLValue = function(id, value) {
var htmlElement = simDocument().getElementById(id);
if (!htmlElement) htmlElement = simDocument().getElementById(id + 'slider-value');
if (htmlElement) htmlElement.value = value;
if (!isNaN(value)) {
var actualValue = theSlider.jsSlider.getMinValue() - 0;
theSlider.setValue(actualValue + Math.round(value / theSlider.scaleFactor));
RecordChange(theSlider);
}
};
var debug = function (str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
};
var debugf = function (str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
};
}
Simulator.Input.SimSlider.prototype = new Simulator.Input.FieldSet();
Simulator.Input.SimSlider.parent = Simulator.Input.FieldSet;
Simulator.Input.SimSlider.prototype.constructor = Simulator.Input.SimSlider;

// FILE: TextField2.js (61cfa967) 3/7/2014 11:24:14 AM

Simulator.Input.TextField = function(sim, node, panel, theSection) {
Simulator.Input.InputElement.call(this, sim);
var that = this;
var source = 'TextField';
var userEditable = true;
var prevStyle = {};
var displayLabel = true;
var text = '';
var typeInputAllowed = 'textOnly';
var fieldLength = 7;
var textCache = '';
var dbg = function() { return sim.getDebug(); };
var utils = function() { return sim.getUtils(); };
var eventMgr = function () { return sim.getEventManager(); };
var simDocument = function () { return sim.getSimDocument(); };
var keyboardInput = function () { return sim.getKeyboardInput(); };
var scoringTable = function () { return sim.getScoringTable(); };
if(sim) {
this.setPanel(panel);
this.setSection(theSection);
}
eventMgr().registerEvent(new Simulator.Event(this, 'info', 'animationThreadFinished'), 'to');
this.getUserEditable = function () {
return userEditable;
};
this.setUserEditable = function (newUserEditable) {
userEditable = newUserEditable == 'yes' ? true : false;
return this;
};
this.getDisplayLabel = function () {
return displayLabel;
};
this.setDisplayLabel = function (newDisplayLabel) {
displayLabel = newDisplayLabel == 'yes' ? true : false;
return this;
};
this.getText = function () {
return text;
};
this.setText = function (newText) {
text = newText;
this.setData(newText);
return this;
};
this.setTypeInputAllowed = function (typeInput) {
typeInputAllowed = typeInput;
};
this.getTypeInputAllowed = function () {
return typeInputAllowed;
};
this.getFieldLength = function () {
return fieldLength;
};
this.setFieldLength = function (newLength) {
fieldLength = parseInt(newLength);
return this;
};
this.saveState = function (indent, preface, nameStr, valStr, suffix) {
var data = this.getData();
if (data != '') return indent + preface + nameStr + this.getName() + valStr + data + suffix;
else return '';
};
this.setElementSelectState = function (state, contents) {
this.setData(contents);
this.recordInput(this, true);
};
this.disableInput = function () {
var element = simDocument().getElementById(this.getNodeID());
element.disabled = true;
this.setState('disabled');
};
this.enableInput = function () {
var element = simDocument().getElementById(this.getNodeID());
element.disabled = false;
this.setState('enabled');
};
this.setTextCache = function (cacheText) {
textCache = cacheText;
};
this.handleEvent = function (event) {
switch (event.type) {
case 'inputReq':
this.recordInput(this);
break;
case 'info':
switch (event.context) {
case 'simulatorStateChange':
break;
case 'animationThreadFinished':
this.setData(textCache);
this.recordInput();
textCache = '';
eventMgr().postEvent(new Simulator.Event(this, 'info', 'inputAvailable'));
break;
}
break;
default:
dbg().logWarning(source, 'Unhandled event type received: ' + event.toString());
return;
}
};
this.keyboardNavigateTo = function (elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
if (element) {
prevStyle.color = element.style.borderColor;
prevStyle.width = element.style.borderWidth;
prevStyle.style = element.style.borderStyle;
element.style.borderStyle = 'solid';
element.style.borderWidth = '2px';
element.style.borderColor = '#FF9100';
}
element.focus();
};
this.keyboardNavigateAwayFrom = function (elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
if (element) {
element.style.borderStyle = prevStyle.style;
element.style.borderWidth = prevStyle.width;
element.style.borderColor = prevStyle.color;
element.blur();
}
};
this.recordKeyboardSelection = function (elementID, itemID, itemIndex) {
var element = null;
element = simDocument().getElementById(elementID);
if (element) {
element.style.borderStyle = prevStyle.style;
element.style.borderWidth = prevStyle.width;
element.style.borderColor = prevStyle.color;
element.isSelected = true;
this.setSelectStateViaKeyboard(elementID, itemID);
this.onChange(elementID);
element.blur();
}
};
this.setAttributes = function (attr, node) {
if (node) attr = utils().getAttributes(node);
Simulator.Input.TextField.prototype.setAttributes.call(this, attr, node);
for ( var i in attr) {
try {
switch (i) {
case 'initialText':
this.setText(attr[i]);
break;
case 'userEditable':
this.setUserEditable(attr[i]);
break;
case 'displayLabel':
this.setDisplayLabel(attr[i]);
break;
case 'fieldLength':
this.setFieldLength(attr[i]);
break;
case 'typeInputAllowed':
this.setTypeInputAllowed(attr[i]);
break;
}
} catch(err) {
dbg().logError(source, 'Error occurred getting TextField attribute ' + i + ': ' + err.message);
}
}
if(this.getScoreable()) {
sim.getScoringTable().addElement(this.getName(), 'input');
}
};
this.render = function() {
var nodeID = this.getNodeID();
var panelHtml = panel.getHTMLElement();
var brElement1 = simDocument().createElement('br');
panelHtml.appendChild(brElement1);
var brElement2 = simDocument().createElement('br');
panelHtml.appendChild(brElement2);
var divElement = simDocument().createElement('div');
divElement.setAttribute('class', 'textFieldWrapper withImages');
var image = this.getImage();
if (image != null && image != undefined) {
var spanElement1 = simDocument().createElement('span');
spanElement1.setAttribute('class', 'holderImage');
var imgElement = simDocument().createElement('img');
imgElement.setAttribute('src', image);
imgElement.setAttribute('alt', this.getName());
spanElement1.appendChild(imgElement);
divElement.appendChild(spanElement1);
}
var spanElement2 = simDocument().createElement('span');
spanElement2.setAttribute('class', 'textFieldContainer');
spanElement2.innerHTML = this.getLabel();
var inputEl = simDocument().createElement('input');
inputEl.setAttribute('type', 'text');
inputEl.id = nodeID;
inputEl.setAttribute('value', this.getText());
inputEl.onkeydown = 'return false;';
utils().bindEvent(inputEl, 'keypress', function (event) {
var validKey = that.onKeyPressHandler(nodeID, event);
if (!validKey) {
if (event.preventDefault) {
event.preventDefault();
} else {
event.returnValue = false;
}
}
});
utils().bindEvent(inputEl, 'change', function () {
that.changeInValue(nodeID);
});
inputEl.setAttribute('size', this.getFieldLength());
inputEl.setAttribute('maxlength', this.getFieldLength());
spanElement2.appendChild(inputEl);
divElement.appendChild(spanElement2);
panelHtml.appendChild(divElement);
this.recordInput(this, true);
this.setFocusable(true, true);
if(this.isFocusable()) {
keyboardInput().addFocusableElementItem(this, nodeID);
}
this.mapHTML2JS(divElement);
};
this.changeInValue = function(id) {
if(id) {
var htmlElement = simDocument().getElementById(id);
this.setData(htmlElement.value);
this.recordInput();
eventMgr().postEvent(new Simulator.Event(this, 'info', 'inputAvailable', null, false));
}
};
var numLockKeyCode = 144;
var numLockPressed = false;
this.onKeyPressHandler = function (id, event) {
var char = null, match = null;
if (event.which == null) {
char = String.fromCharCode(event.keyCode);
}
else if (event.which != 0 && event.charCode != 0) {
char = String.fromCharCode(event.which);
}
else {
return true;
}
switch(this.getTypeInputAllowed()) {
case 'alphaOnly':
match = char.match(/[a-z\.]/i);
return !!match;
break;
case 'numericOnly':
match = char.match(/[0-9\.\+\-]/);
return !!match;
break;
case 'alphaNumericOnly':
match = char.match(/[a-z0-9\.\+\-]/i);
return !!match;
break;
case 'textOnly':
return true;
break;
default:
return true;
break;
}
};
this.getSourceName = function() {
return source;
};
this.inspect = function(embedded, force) {
var buff = [];
var sep = '\n\n';
if (!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for ( var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) (force === null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
var debug = function(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
};
var debugf = function(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
};
};
Simulator.Input.TextField.prototype = new Simulator.Input.InputElement();
Simulator.Input.TextField.parent = Simulator.Input.InputElement;
Simulator.Input.TextField.prototype.constructor = Simulator.Input.TextField;

// FILE: StaticElement2.js (5438e893) 3/7/2014 11:24:14 AM

Simulator.Input.StaticElement = function (sim) {
Simulator.SimElement.call(this, sim);
var panel = null;
var section = null;
this.getPanel = function() {
return panel;
};
this.setPanel = function(newPanel) {
panel = newPanel;
return this;
};
this.setSection = function(theSection) {
section = theSection;
};
this.saveState = function(indent, preface, nameStr, valStr, suffix) {
return indent + preface + nameStr + this.getName() + valStr + checkedItems + suffix;
};
};
Simulator.Input.StaticElement.prototype = new Simulator.SimElement();
Simulator.Input.StaticElement.parent = Simulator.SimElement;
Simulator.Input.StaticElement.prototype.constructor = Simulator.Input.StaticElement;

// FILE: VerticalSpace2.js (49ece0f8) 3/7/2014 11:24:14 AM

Simulator.Input.VerticalSpace = function (sim, panel, theSection) {
Simulator.Input.StaticElement.call(this, sim);
var source = 'VerticalSpace';
var lines = 0;
var dbg = function () { return sim.getDebug(); };
var utils = function() { return sim.getUtils(); };
var simDocument = function() { return sim.getSimDocument(); };
if(sim) {
this.setPanel(panel);
this.setSection(theSection);
}
this.setLines = function(newLines) {
lines = parseInt(newLines);
};
this.getLines = function() {
return lines;
};
this.setAttributes = function (attr, node) {
if (node) attr = utils().getAttributes(node);
Simulator.Input.VerticalSpace.prototype.setAttributes(attr);
for (var i in attr) {
switch (i) {
case 'lines':
this.setLines(attr[i]);
break;
}
}
};
this.render = function () {
var panelHtml = panel.getHTMLElement();
var divElement = simDocument().createElement('div');
divElement.style.paddingBottom = 20 * this.getLines() + 'px';
panelHtml.appendChild(divElement);
this.setFocusable(false);
this.mapHTML2JS(divElement);
};
this.getSourceName = function() {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
if (!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) (force === null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.VerticalSpace.prototype = new Simulator.Input.StaticElement();
Simulator.Input.VerticalSpace.parent = Simulator.Input.StaticElement;
Simulator.Input.VerticalSpace.prototype.constructor = Simulator.Input.VerticalSpace;

// FILE: HorizontalLine2.js (85ef7e6d) 3/7/2014 11:24:14 AM

Simulator.Input.HorizontalLine = function (sim, panel, theSection) {
Simulator.Input.StaticElement.call(this, sim);
var source = 'HorizontalLine';
var dbg = function () { return sim.getDebug(); };
var utils = function () { return sim.getUtils(); };
var simDocument = function () { return sim.getSimDocument(); };
if (sim) {
this.setPanel(panel);
this.setSection(theSection);
}
var height = 0;
this.setHeight = function (newHeight) {
height = parseInt(newHeight);
};
this.getHeight = function () {
return height;
};
var width = 1;
this.setWidth = function (newWidth) {
width = parseInt(newWidth);
};
this.getWidth = function () {
return width;
};
var alignment = 'absolute';
this.setAlignment = function (newAlignment) {
alignment = newAlignment;
};
this.getAlignment = function () {
return alignment;
};
var distance = 0;
this.setDistance = function (newDistance) {
distance = newDistance;
};
this.getDistance = function () {
return distance;
};
var ownSpace = true;
this.setOwnSpace = function (newOwnSpace) {
ownSpace = newOwnSpace == 'yes' ? true : false;
};
this.getOwnSpace = function () {
return ownSpace;
};
this.setAttributes = function (attr, node) {
if (node) attr = utils().getAttributes(node);
Simulator.Input.HorizontalLine.prototype.setAttributes(attr);
for (var i in attr) {
switch (i) {
case 'name':
this.setName(attr[i]);
break;
case 'width':
this.setWidth(attr[i]);
break;
case 'height':
this.setHeight(attr[i]);
break;
case 'alignment':
this.setAlignment(attr[i]);
break;
case 'distance':
this.setDistance(attr[i]);
break;
case 'ownSpace':
this.setOwnSpace(attr[i]);
break;
}
}
};
this.render = function () {
var panelHtml = panel.getHTMLElement();
spanElement = simDocument().createElement('span');
spanElement.id = 'horizontalLine';
if (this.getAlignment() == 'left') {
spanElement.setAttribute('class', 'sim_divider sim_divider_left');
if (this.getDistance() != null) spanElement.style.marginLeft = this.getDistance() + 'px';
} else if (this.getAlignment() == 'right') {
spanElement.setAttribute('class', 'sim_divider sim_divider_right');
if (this.getDistance() != null) spanElement.style.marginRight = this.getDistance() + 'px';
} else {
spanElement.setAttribute('class', 'sim_divider sim_divider_center');
}
if (this.getWidth() != null) spanElement.style.width = this.getWidth() + "px";
if (this.getHeight() != null) spanElement.style.height = this.getHeight() + "px";
if (this.getOwnSpace()) spanElement.style.clear = 'both';
panelHtml.appendChild(spanElement);
this.setFocusable(false);
this.mapHTML2JS(spanElement);
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
if (!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) (force == null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
}
Simulator.Input.HorizontalLine.prototype = new Simulator.Input.StaticElement();
Simulator.Input.HorizontalLine.parent = Simulator.Input.StaticElement;
Simulator.Input.HorizontalLine.prototype.constructor = Simulator.Input.HorizontalLine;

// FILE: SectionDivider2.js (3355d9e6) 3/7/2014 11:24:14 AM

Simulator.Input.SectionDivider = function (sim, panel, theSection) {
Simulator.Input.StaticElement.call(this, sim);
var source = 'SectionDivider';
var dbg = function () { return sim.getDebug(); };
var utils = function () { return sim.getUtils(); };
var simDocument = function () { return sim.getSimDocument(); };
if (sim) {
this.setPanel(panel);
this.setSection(theSection);
}
this.setAttributes = function (attr, node) {
if (node) attr = utils().getAttributes(node);
Simulator.Input.SectionDivider.prototype.setAttributes(attr);
for (var i in attr) {
switch (i) {
case 'name':
this.setName(attr[i]);
break;
}
}
};
this.render = function () {
var panelHtml = panel.getHTMLElement();
divElement = simDocument().createElement('div');
divElement.id = 'hrHolder';
divElement.setAttribute('class', 'hrHolder');
var hrElement = simDocument().createElement('hr');
divElement.appendChild(hrElement);
panelHtml.appendChild(divElement);
this.setFocusable(false);
this.mapHTML2JS(divElement);
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
if (!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) (force == null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
}
Simulator.Input.SectionDivider.prototype = new Simulator.Input.StaticElement();
Simulator.Input.SectionDivider.parent = Simulator.Input.StaticElement;
Simulator.Input.SectionDivider.prototype.constructor = Simulator.Input.SectionDivider;

// FILE: UpDownCounter2.js (7fffd835) 3/7/2014 11:24:14 AM

Simulator.Input.UpDownCounter = function (sim, node, panel, theSection) {
Simulator.Input.FieldSet.call(this, sim);
var that = this;
var source = 'UpDownCounter';
var setValues = [];
var interButtonDelay = true;
var interButtonDelay = true;
var setValues = [];
var actOnChangeWithMouseout = false;
var dbg = function () { return sim.getDebug(); };
var utils = function () { return sim.getUtils(); };
var simDocument = function () { return sim.getSimDocument(); };
var scoringTable = function () { return sim.getScoringTable(); };
var keyboardInput = function () { return sim.getKeyboardInput(); };
if (sim) {
this.setPanel(panel);
this.setSection(theSection);
}
this.getSetValues = function () {
return setValues;
};
this.setsetValues = function (newsetValues) {
setValues = newsetValues;
return this;
};
this.setInterButtonDelay = function (newInterButtonDelay) {
interButtonDelay = newInterButtonDelay == true || newInterButtonDelay == 'yes' ? true : false;
return this;
};
this.getInterButtonDelay = function () {
return interButtonDelay;
};
this.handleEvent = function (event) {
switch (event.type) {
case 'inputReq':
this.recordInput(this);
break;
case 'info':
switch (event.context) {
case 'simulatorStateChange':
break;
}
break;
default:
dbg().logWarning(source, 'Unhandled event type received: ' + event.toString());
return;
}
};
this.setActOnChangeWithMouseout = function (newActOnChangeWithMouseout) {
actOnChangeWithMouseout = newActOnChangeWithMouseout == 'yes' ? true : false;
};
this.getActOnChangeWithMouseout = function () {
return actOnChangeWithMouseout;
};
this.keyboardNavigateTo = function (elementID, itemID, index) {
var element = simDocument().getElementsByClassName(elementID)[0];
var item = element.getElementsByClassName(itemID)[0];
if (item) item.setAttribute('class', itemID + ' simAreaFocus');
};
this.keyboardNavigateAwayFrom = function (elementID, itemID, index) {
var element = simDocument().getElementsByClassName(elementID)[0];
var item = element.getElementsByClassName(itemID)[0];
if (item) item.setAttribute('class', itemID);
};
this.recordKeyboardSelection = function (elementID, itemID, itemIndex) {
if ((itemID) && (elementID)) {
if (itemIndex == 0) {
this.incrementValue(this.getNodeID(), this.getMaxValue(), this.getIncrement());
}
else if (itemIndex == 1) {
this.decrementValue(this.getNodeID(), this.getMinValue(), this.getIncrement());
}
}
};
this.receivedSpeechFocus = function () {
debug(this.getName() + ' received speech focus');
var node = simDocument().getElementById('incrementalWrapper' + this.getNodeID());
node.style.border = 'thin solid #ff0000';
};
this.removeSpeechFocus = function (value) {
debug(this.getName() + ' lost speech focus');
var node = simDocument().getElementById('incrementalWrapper' + this.getNodeID());
prevBorders = node.borders;
node.style.border = 'none';
};
this.disableInput = function () {
var component = simDocument().getElementById('goingUp' + this.getNodeID());
component.disabled = true;
component = simDocument().getElementById('goingDown' + this.getNodeID());
component.disabled = true;
};
this.enableInput = function () {
var component = simDocument().getElementById('goingUp' + this.getNodeID());
component.disabled = false;
component = simDocument().getElementById('goingDown' + this.getNodeID());
component.disabled = false;
};
this.speechActivated = function (value) {
if (value == 1) this.incrementValue(this.getNodeID(), parseFloat(this.getMaxValue()), parseFloat(this.getIncrement()));
else if (value == -1) this.decrementValue(this.getNodeID(), this.getMinValue(), this.getIncrement());
this.onChange(this.getNodeID());
};
this.setAttributes = function (attr, node) {
if (node) attr = utils().getAttributes(node);
Simulator.Input.UpDownCounter.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'actOnChange':
this.setActOnChange(attr[i]);
break;
case 'actOnChangeWithMouseout':
this.setActOnChangeWithMouseout(attr[i]);
break;
case 'interButtonDelay':
this.setInterButtonDelay(attr[i]);
break;
case 'multModifier':
this.setMultModifier(attr[i]);
break;
case 'addModifier':
this.setAddModifier(attr[i]);
break;
}
}
if (this.getScoreable()) scoringTable().addElement(this.getName(), 'input');
};
this.render = function () {
var nodeID = this.getNodeID();
var panelHtml = panel.getHTMLElement();
this.setFocusable(true, true);
var nextNum = utils().getNextSequenceNumber();
var image = this.getImage();
if (this.getSpaceAbove()) {
utils().appendBlankVertcalSpace(panelHtml, this.getSpaceAbove);
}
var needtoShowLabelBelow = false;
needtoShowLabelBelow = true;
var divElement = null;
if (image != null && image != undefined) {
divElement = simDocument().createElement('div');
divElement.id = 'incrementalWrapper' + nodeID;
divElement.setAttribute('class', 'incrementalWrapper withImages');
var spanElement = simDocument().createElement('span');
spanElement.setAttribute('class', 'holderImage');
var imageElement = simDocument().createElement('img');
imageElement.setAttribute('src', image);
imageElement.setAttribute('alt', this.getName());
spanElement.appendChild(imageElement);
divElement.appendChild(spanElement);
}
else {
divElement = simDocument().createElement('div');
divElement.id = 'incrementalWrapper' + nodeID;
divElement.setAttribute('class', 'incrementalWrapper');
if (sim.getSpeechEnabled()) {
divElement.setAttribute('style', 'padding-bottom: 40px');
}
}
var containerSpanElement = simDocument().createElement('span');
containerSpanElement.setAttribute('class', 'incrementalContainer');
var inputElement = simDocument().createElement('input');
inputElement.id = nodeID;
inputElement.setAttribute('readonly', 'readonly');
inputElement.setAttribute('name', 'number' + nodeID);
inputElement.setAttribute('value', this.getDefaultValue());
inputElement.setAttribute('type', 'text');
containerSpanElement.appendChild(inputElement);
var labelElement = simDocument().createElement('label');
labelElement.setAttribute('for', nextNum);
labelElement.innerHTML = this.getUnits();
containerSpanElement.appendChild(labelElement);
var upDownSpanElement = simDocument().createElement('span');
upDownSpanElement.setAttribute('class', 'upDown');
var inputGoingUpElement = simDocument().createElement('input');
inputGoingUpElement.id = 'goingUp' + nodeID;
inputGoingUpElement.setAttribute('class', 'goingUp');
utils().bindEvent(inputGoingUpElement, 'click', function () {
that.incrementValue(nodeID, that.getMaxValue(), that.getIncrement());
});
if (this.getActOnChangeWithMouseout()) {
utils().bindEvent(inputGoingUpElement, 'mouseout', function () {
that.PotentialChangeInValue(nodeID);
});
if (this.getInterButtonDelay()) {
utils().bindEvent(inputGoingUpElement, 'mouseover', function () {
that.CancelNoChange(nodeID);
});
}
}
inputGoingUpElement.setAttribute('type', 'button');
upDownSpanElement.appendChild(inputGoingUpElement);
if (sim.getSpeechEnabled()) {
var textLabelElement1 = simDocument().createTextNode(' Increment');
upDownSpanElement.appendChild(textLabelElement1);
}
var inputGoingDownElement = simDocument().createElement('input');
inputGoingDownElement.id = 'goingDown' + nodeID;
inputGoingDownElement.setAttribute('class', 'goingDown');
utils().bindEvent(inputGoingDownElement, 'click', function () {
that.decrementValue(nodeID, that.getMinValue(), that.getIncrement());
});
if (this.getActOnChangeWithMouseout()) {
utils().bindEvent(inputGoingDownElement, 'mouseout', function () {
that.PotentialChangeInValue(nodeID);
});
if (this.getInterButtonDelay()) {
utils().bindEvent(inputGoingDownElement, 'mouseover', function () {
that.CancelNoChange(nodeID);
});
}
}
inputGoingDownElement.setAttribute('type', 'button');
upDownSpanElement.appendChild(inputGoingDownElement);
if (sim.getSpeechEnabled()) {
var textLabelElement2 = simDocument().createTextNode(' Decrement');
upDownSpanElement.appendChild(textLabelElement2);
}
containerSpanElement.appendChild(upDownSpanElement);
divElement.appendChild(containerSpanElement);
panelHtml.appendChild(divElement);
if (needtoShowLabelBelow) {
var textLabelElement3 = simDocument().createTextNode(this.getLabel());
divElement.appendChild(textLabelElement3);
}
if (this.isFocusable()) {
keyboardInput().addFocusableElementItem(this, 'upDown', 'goingUp');
keyboardInput().addFocusableElementItem(this, 'upDown', 'goingUp');
}
if (this.getSpaceBelow()) {
utils().appendBlankVertcalSpace(panelHtml, this.getSpaceBelow());
}
this.recordInput(this, true);
this.setPrevValue(this.getDefaultValue());
this.mapHTML2JS(divElement);
};
var theCounterID = null;
var prevCounterID = null;
var movementInterval = 50;
var t = null;
this.PotentialChangeInValue = function (id) {
var element = simDocument().getElementById(id);
prevCounterID = theCounterID == null ? id : theCounterID;
theCounterID = id;
if (this.getInterButtonDelay()) {
t = setTimeout(function () { that.ChangeInValue(); }, movementInterval);
} else this.ChangeInValue();
};
this.CancelNoChange = function () {
if (theCounterID == prevCounterID) clearTimeout(t);
};
this.ChangeInValue = function () {
if (theCounterID) {
var htmlElement = simDocument().getElementById(theCounterID);
if (this.getPrevValue() != htmlElement.value) {
this.setPrevValue(this.getData());
this.onChange(theCounterID);
}
theCounterID = null;
}
};
this.incrementValue = function (id, maxValue, increment) {
var htmlElement = simDocument().getElementById(id);
currentValue = parseFloat(htmlElement.value);
if ((currentValue + parseFloat(increment)) <= maxValue) {
currentValue = parseFloat((currentValue + parseFloat(increment)).toFixed(10));
}
htmlElement.value = currentValue;
currentValue = this.getModifiedValue(currentValue);
currentValue = currentValue.toString();
this.setData(currentValue);
valueChanged = true;
if (this.getSaveOnChange()) this.onChange(this.getNodeID());
};
this.decrementValue = function (id, minValue, decrement) {
var htmlElement = simDocument().getElementById(id);
currentValue = parseFloat(htmlElement.value);
if ((currentValue - parseFloat(decrement)) >= minValue) {
currentValue = parseFloat((currentValue - parseFloat(decrement)).toFixed(10));
}
htmlElement.value = currentValue;
currentValue = this.getModifiedValue(currentValue);
currentValue = currentValue.toString();
this.setData(currentValue);
valueChanged = true;
if (this.getSaveOnChange()) this.onChange(this.getNodeID());
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
if (!embedded) {
buff.push('Inspecting ');
buff.push(this.getName());
buff.push(sep);
}
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) (force === null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.UpDownCounter.prototype = new Simulator.Input.FieldSet();
Simulator.Input.UpDownCounter.parent = Simulator.Input.FieldSet;
Simulator.Input.UpDownCounter.prototype.constructor = Simulator.Input.UpDownCounter;

// FILE: TextConstant2.js (380d26ac) 3/7/2014 11:24:14 AM

Simulator.Input.TextConstant = function (sim, panel, theSection) {
Simulator.Input.StaticElement.call(this, sim);
var source = 'TextConstant';
var dbg = function () { return sim.getDebug(); };
var utils = function() { return sim.getUtils(); };
var simDocument = function() { return sim.getSimDocument(); };
if(sim) {
this.setPanel(panel);
this.setSection(theSection);
}
var text = '';
var heavy = false;
this.setText = function(newText) {
text = newText;
};
this.getText = function() {
return text;
};
this.setHeavy = function(newHeavy) {
if(newHeavy == 'yes') heavy = true;
else heavy = false;
};
this.getHeavy = function() {
return heavy;
};
this.setAttributes = function (attr, node) {
if (node) attr = utils().getAttributes(node);
Simulator.Input.TextConstant.prototype.setAttributes(attr);
for (var i in attr) {
switch (i) {
case 'text':
this.setText(attr[i]);
break;
case 'heavy':
this.setHeavy(attr[i]);
break;
}
}
};
this.render = function () {
var panelHtml = panel.getHTMLElement();
var divElement = simDocument().createElement('div');
if (this.getSpaceAbove() > 0) utils().appendBlankVertcalSpace(divElement, this.getSpaceAbove());
panelHtml.appendChild(divElement);
if (this.getHeavy()) divElement.innerHTML = '<b>' + this.getText() + '</b>';
else divElement.innerHTML = this.getText();
if (this.getSpaceBelow() > 0) utils().appendBlankVertcalSpace(divElement, this.getSpaceBelow());
this.setFocusable(false);
this.mapHTML2JS(divElement);
};
this.getSourceName = function() {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
buff.push('Inspecting TextElement');
buff.push(sep);
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i);
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
if (!embedded) (force === null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Input.TextConstant.prototype = new Simulator.Input.StaticElement();
Simulator.Input.TextConstant.parent = Simulator.Input.StaticElement;
Simulator.Input.TextConstant.prototype.constructor = Simulator.Input.TextConstant;

// FILE: CommandElement2.js (857c2608) 3/7/2014 11:24:14 AM

Simulator.Control.CommandElement = function (sim) {
Simulator.SimElement.call(this, sim);
var source = 'CommandElement';
var parent = Simulator.SimElement.prototype;
var cmdElementImages = ['image_Trashcan'];
var handler = null;
var state = 'enabled';
var handlerParameters = '';
var alwaysEnabled = false;
var eventsRegistered = false;
var panel = null;
var util = function () { return sim.getUtils(); };
var simMgr = function () { return sim.getSimulationManager(); };
var eventMgr = function () { return sim.getEventManager(); };
var dbg = function () { return sim.getDebug(); };
var simDocument = function() { return sim.getSimDocument(); };
var registerClassEvents = function (instance) {
if (!eventsRegistered) {
eventMgr().registerEvent(new Simulator.Event(instance, 'info', 'simulatorStateChange'));
eventsRegistered = true;
}
};
this.setEname(source);
this.isAPredefinedCmdElementImage = function (imageName) {
return util().elementInArray(cmdElementImages, imageName);
};
this.getState = function () {
return state;
};
this.setState = function (newState) {
if (simMgr().isPlaying() || simMgr().isReadOnly()) state = 'disabled';
else if (newState == 'disabled') {
if (this.getAlwaysEnabled()) state = 'enabled';
else state = newState;
}
else if (newState == 'enabled') {
state = newState;
} else dbg().logFatalError(source, 'Invalid state passed to CommandElement.setState()');
return this;
};
this.keyboardNavigateTo = function (elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
if (element) element.setAttribute('class', element.getAttribute('class') + ' simAreaFocus');
};
this.keyboardNavigateAwayFrom = function (elementID, itemID, index) {
var element = simDocument().getElementById(elementID);
if (element) {
var className = element.getAttribute('class');
var index = className.indexOf('simAreaFocus');
if (index > 0)
className = className.substring(0, index - 1);
element.setAttribute('class', className);
}
};
this.getHandler = function () {
return handler;
};
this.setHandler = function (newHandler) {
handler = newHandler;
return this;
};
this.getHandlerParameters = function () {
return handlerParameters;
};
this.setHandlerParameters = function (newHandlerParameters) {
handlerParameters = newHandlerParameters;
return this;
};
this.setPredefinedImage = function (newImage) {
this.setImage(newImage);
};
this.getAlwaysEnabled = function () {
return alwaysEnabled;
};
this.setAlwaysEnabled = function (newAlwaysEnabled) {
alwaysEnabled = newAlwaysEnabled == 'yes' ? true : false;
return this;
};
this.isDisabled = function () {
return state == 'disabled';
};
this.setPanel = function (thePanel) {
panel = thePanel;
panel.registerIOElement(this);
return this;
};
this.saveState = function(indent, preface, nameStr, valStr, suffix) {
return '';
};
this.getSourceName = function() {
return source;
};
this.inspect = function(embedded, force) {
var buff = [];
var sep = '\n';
buff.push('Inspecting ' + source + sep);
var str = Simulator.Control.CommandElement.prototype.inspect.call(this, true, force);
if (str) return str;
else {
for ( var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i.charAt(3).toLowerCase() + i.slice(4));
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
buff.push('End Inspecting ' + source + sep + sep);
if(!embedded) force == true ? dbg().debugf(source, buff.join('')) : dbg().debug(source, buff.join(''));
else return buff.join('');
}
};
this.setAttributes = function (attr, node) {
Simulator.Control.CommandElement.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'predefinedImage':
this.setPredefinedImage(attr[i]);
break;
case 'handler':
this.setHandler(attr[i]);
break;
case 'handlerParameters':
this.setHandlerParameters(attr[i]);
break;
case 'alwaysEnabled':
this.setAlwaysEnabled(attr[i]);
break;
case 'speechLabel':
this.setSpeechLabel(attr[i]);
break;
}
}
};
if (sim) {
registerClassEvents(this);
}
};
Simulator.Control.CommandElement.prototype = new Simulator.SimElement();
Simulator.Control.CommandElement.parent = Simulator.SimElement;
Simulator.Control.CommandElement.prototype.constructor = Simulator.Control.CommandElement;

// FILE: Button2.js (facfc7bf) 3/7/2014 11:24:14 AM

Simulator.Control.Button = function (sim, panel, section) {
Simulator.Control.CommandElement.call(this, sim);
var source = 'Button';
var instance = this;
var HTMLButton = null;
var src = '';
var implication = 'neutral';
var borderColor = '';
var eventsRegistered = false;
var debouceInterval = 1000;
var lastStartTrialTime = 0;
var genericButtonReady = true;
var startTrialButtonReady = true;
var startAnimationButtonReady = true;
var resetTrialsButtonReady = true;
var newTrialButtonReady = true;
var submitInputButtonReady = true;
var submitItemButtonReady = true;
var requestAnimationOutputButtonReady = true;
var showDialogButtonReady = true;
var showAlertButtonReady = true;
var util = function () { return sim.getUtils(); };
var simMgr = function () { return sim.getSimulationManager(); };
var eventMgr = function () { return sim.getEventManager(); };
var dbg = function () { return sim.getDebug(); };
var speechGrammarBldr = function () { return sim.getSpeechGrammarBldr(); };
var scoringTable = function () { return sim.getScoringTable(); };
var html2jsMap = function () { return sim.getHTML2JSMap(); };
var simDocument = function () { return sim.getSimDocument(); };
var keyboardInput = function () { return sim.getKeyboardInput(); };
var whiteboard = function () { return sim.getWhiteboard(); };
var registerClassEvents = function (instance) {
if (!eventsRegistered) {
eventMgr().registerEvent(new Simulator.Event(instance, 'info', 'animationFinished'));
eventMgr().registerEvent(new Simulator.Event(instance, 'info', 'animationThreadFinished'));
eventsRegistered = true;
}
};
function resetButton(buttonName) {
switch (buttonName) {
case 'generic':
genericButtonReady = true;
break;
case 'startTrial':
startTrialButtonReady = true;
break;
case 'startAnimation':
startAnimationButtonReady = true;
break;
case 'resetTrials':
resetTrialsButtonReady = true;
break;
case 'newTrial':
newTrialButtonReady = true;
break;
case 'submitInput':
submitInputButtonReady = true;
break;
case 'submitItem':
submitItemButtonReady = true;
break;
case 'requestAnimationOutput':
requestAnimationOutputButtonReady = true;
break;
case 'showDialog':
showDialogButtonReady = true;
break;
case 'showAlert':
showAlertButtonReady = true;
break;
case 'speechLabel':
this.setSpeechLabel(attr[i]);
break;
default:
break;
}
};
function publishEvents(jsButton, context) {
var anEvent = jsButton.nextEvent(true);
if (!context) context = '*';
while (anEvent != null) {
if (anEvent.context == context || anEvent.context == '*' || context == '*') {
eventMgr().postEvent(anEvent);
}
anEvent = jsButton.nextEvent();
}
};
this.setEname(source);
if (panel) {
this.setPanel(panel);
}
this.setHTMLButton = function () {
return HTMLButton;
};
this.setHTMLButton = function (newHTMLButton) {
HTMLButton = newHTMLButton;
return this;
};
this.getSrc = function () {
return src;
};
this.setSrc = function (newSrc) {
src = newSrc;
return this;
};
this.getImplication = function () {
return implication;
};
this.setImplication = function (newImplication) {
implication = newImplication;
return this;
};
this.recordKeyboardSelection = function (elementID, itemID) {
if (itemID) {
var handler = this.getHandler();
handler(elementID);
}
};
this.receivedSpeechFocus = function () {
debug(this.getName() + ' received speech focus');
var node = simDocument().getElementById('buttonDiv' + this.getNodeID());
borderColor = node.style.border.color;
node.style.border = '#ff0000';
};
this.removeSpeechFocus = function (value) {
debug(this.getName() + ' lost speech focus');
var node = simDocument().getElementById('buttonDiv' + this.getNodeID());
node.style.border.color = borderColor;
};
this.speechActivated = function (value) {
var handler = 'Button.' + this.getHandler();
eval(handler)(this.getNodeID());
};
this.handleEvent = function (event) {
var newEvent = undefined;
switch (event.type) {
case 'command':
break;
case 'info':
switch (event.context) {
case 'animationThreadFinished':
resetButton('startTrial');
break;
case 'animationFinished':
resetButton('startTrial');
break;
}
break;
default:
dbg().logWarning(this.getName() + ': Unhandled event type received: ' + event.toString());
return;
}
if (newEvent != undefined && newEvent != null) newEvent.postEvent();
};
this.disableInput = function () {
var element = simDocument().getElementById(this.getNodeID());
element.disable = true;
this.setState('disabled');
};
this.enableInput = function () {
var element = simDocument().getElementById(this.getNodeID());
element.disable = false;
this.setState('enabled');
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n';
buff.push('Inspecting ' + source + ' ' + this.getName() + sep);
var str = Simulator.Control.Button.prototype.inspect.call(this, true, force);
if (str) buff.push(str);
else {
for (var i in this) {
if (i.substr(0, 3) == 'get') {
buff.push(i.charAt(3).toLowerCase() + i.slice(4));
buff.push(' = ');
buff.push(eval('this.' + i + '()'));
buff.push(sep);
}
}
}
buff.push('End inspecting ' + source + ' ' + this.getName() + sep + sep);
if (!embedded) force == true ? debugf(buff.join('')) : debug(buff.join(''));
else return buff.join('');
};
function onClick(id) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((genericButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
genericButtonReady = false;
setTimeout(function () { resetButton("generic"); }, debouceInterval);
if (jsButton.isDisabled()) {
(simMgr().GetDisabledAction())();
}
else {
publishEvents(jsButton);
}
}
}
}
else {
dbg().logWarning(source, '-- Button with id = ' + id + ' could not be activated --');
}
}
else {
dbg().logFatalError(source, 'Could not get Button instance with id = ' + id);
}
};
function StartTrial(id) {
if (!simMgr().verifyCheckListSelection()) {
var newTime = new Date();
var debounceMultiplier = (sim.animationIsPresent()) ? 4 : .5;
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((startTrialButtonReady == true) && (!simMgr().isPlaying()) && !simMgr().isReadOnly()) {
lastStartTrialTime = newTime;
startTrialButtonReady = false;
whiteboard().clearCategory('evaluationOutput');
whiteboard().clearCategory('animationOutput');
setTimeout(function () { resetButton("startTrial"); }, debouceInterval * debounceMultiplier);
publishEvents(jsButton, 'startTrial');
}
}
} else {
dbg().logFatalError(source, 'Could not get Button instance with id = ' + id);
}
}
};
function StartAnimation(id) {
if (!simMgr().verifyCheckListSelection()) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((startAnimationButtonReady == true) && (!simMgr().isPlaying()) && !simMgr().isReadOnly()) {
lastStartTrialTime = newTime;
startAnimationButtonReady = false;
whiteboard().clearCategory('evaluationOutput');
whiteboard().clearCategory('animationOutput');
setTimeout(function () { resetButton("startAnimation"); }, debouceInterval * 4);
publishEvents(jsButton, 'startAnimation');
}
}
} else {
dbg().logFatalError(source, 'Could not get Button instance with id = ' + id);
}
}
};
function NewTrial(id) {
if (!simMgr().verifyCheckListSelection()) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((newTrialButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
newTrialButtonReady = false;
setTimeout(function () { resetButton("newTrial"); }, debouceInterval);
if (jsButton.isDisabled()) {
(simMgr().GetDisabledAction())();
}
else {
simMgr().NexTrial();
}
}
}
}
}
}
};
function SubmitInput(id) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((submitInputButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
submitInputButtonReady = false;
setTimeout(function () { resetButton("submitInput"); }, debouceInterval);
if (jsButton.isDisabled()) {
(simMgr().GetDisabledAction())();
}
else {
publishEvents(jsButton, 'submitInput');
}
}
}
}
}
};
function SubmitItem(id) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((submitItemButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
submitItemButtonReady = false;
setTimeout(function () { resetButton("submitItem"); }, debouceInterval);
if (jsButton.isDisabled()) {
(simMgr().GetDisabledAction())();
}
else {
var answer = confirm('Are You Sure You Want to Submit the Item for Scoring');
if (answer) {
simMgr().ScoreItem();
Simulator.showAlert('Question', 'Press "Next" for Next Test Item');
simMgr().GetNextItem();
}
}
}
}
}
}
};
function RequestAnimationOutput(id) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((requestAnimationOutputButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
requestAnimationOutputButtonReady = false;
setTimeout(function () { resetButton("requestAnimationOutput"); }, debouceInterval);
if (jsButton.isDisabled()) {
(simMgr().GetDisabledAction())();
}
else {
eventMgr().postEvent(new Simulator.Event(jsButton, 'command', 'outputReq'));
}
}
}
}
}
};
function ShowDialog(id, dialogID) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((showDialogButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
showDialogButtonReady = false;
setTimeout(function () { resetButton("showDialog"); }, debouceInterval);
if (jsButton.isDisabled()) {
(simMgr().GetDisabledAction())();
}
else {
dialogID.style.display = '';
}
}
}
}
}
};
function ShowAlert(id, parameters) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled') {
if ((showAlertButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
showAlertButtonReady = false;
setTimeout(function () { resetButton("showAlert"); }, debouceInterval);
if (jsButton.isDisabled())
(simMgr().GetDisabledAction())();
else {
if (parameters) {
var parts = parameters.split('|');
var elements = [];
var aParameter = null;
for (var i = 0; i < parts.length; i++) {
aParameter = parts[i].split('*');
elements[aParameter[0]] = aParameter[1];
}
if ('contents' in elements) Simulator.showAlertWarning(unescape(elements['contents']));
}
}
}
}
}
}
};
function ResetTrials(id) {
var newTime = new Date();
var theButton = simDocument().getElementById(id);
if (theButton) {
var jsButton = html2jsMap().getJSFromHTML(theButton);
if (jsButton.getState() == 'enabled' && !simMgr().isReadOnly()) {
if ((resetTrialsButtonReady == true) && (!simMgr().isPlaying())) {
if ((newTime - lastStartTrialTime) > debouceInterval) {
lastStartTrialTime = newTime;
resetTrialsButtonReady = false;
setTimeout(function () { resetButton("resetTrials"); }, debouceInterval);
if (jsButton.isDisabled()) {
(simMgr().GetDisabledAction())();
}
else {
publishEvents(jsButton, 'resetTrials');
simMgr().setReadyState();
scoringTable().clearTable();
}
}
}
}
}
};
this.setAttributes = function (attr, node) {
if (node) attr = util().getAttributes(node);
Simulator.Control.Button.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'implication':
this.setImplication(attr[i]);
break;
}
}
};
this.recordKeyboardSelection = function (elementID, itemID, itemIndex) {
var bHandler = this.getHandler();
var bNodeID = this.getNodeID();
var parameters = this.getHandlerParameters();
if (parameters) parameters = ', "' + parameters + '"';
if (!parameters)
parameters = '';
eval(bHandler + '("' + bNodeID + '"' + parameters + ')');
};
this.render = function (panelName) {
var needTableDiv = false;
var tableDiv = null;
var buttonDiv = null;
var HTMLPanel = panel.getHTMLElement();
var button = null;
var imageSpan = null;
var imageElement = null;
var labelSpan = null;
var type = this.getType();
var tableElement = null;
if (HTMLPanel.id.indexOf('dataOutputPanel') != -1) {
tableElement = util().getElementsByClassName('table_controls', HTMLPanel);
needTableDiv = true;
}
if (needTableDiv) {
tableDiv = simDocument().createElement('div');
tableDiv.id = 'tableDiv' + this.getNodeID();
tableDiv.setAttribute('class', 'table_controls');
HTMLPanel.appendChild(tableDiv);
} else {
buttonDiv = simDocument().createElement('div');
buttonDiv.id = 'buttonDiv' + this.getNodeID();
HTMLPanel.appendChild(buttonDiv);
}
button = simDocument().createElement('button');
button.id = this.getNodeID();
button.setAttribute('type', 'button');
var bHandler = this.getHandler();
var bNodeID = this.getNodeID();
var parameters = this.getHandlerParameters();
if (parameters) parameters = ', "' + parameters + '"';
if (!parameters)
parameters = '';
util().bindEvent(button, 'click', function (event) {
eval(bHandler + '("' + bNodeID + '"' + parameters + ')');
if (event.preventDefault) {
event.preventDefault();
} else {
event.returnValue = false;
}
return false;
});
if (type == 'mixed' || type == 'image') {
imageSpan = simDocument().createElement('span');
imageSpan.setAttribute('class', 'holderImage');
var image = this.getImage();
if (this.isAPredefinedCmdElementImage(image)) button.setAttribute('class', 'actionButton ' + image + ' ' + this.getImplication());
else {
button.setAttribute('class', 'actionButton withImages ' + this.getImplication());
imageElement = simDocument().createElement('img');
imageElement.src = image;
imageElement.alt = this.getLabel();
imageSpan.appendChild(imageElement);
}
button.appendChild(imageSpan);
}
if (type == 'mixed' || type == 'text') {
if (type == 'text')
button.setAttribute('class', 'actionButton ' + this.getImplication());
labelSpan = simDocument().createElement('span');
labelSpan.setAttribute('class', 'holderText');
if (sim.getSpeechEnabled()) {
labelSpan.innerHTML = Simulator.Constants.SPEECH_CMD_ITEM_PREFIX + this.getLabel();
} else labelSpan.innerHTML = this.getLabel();
button.appendChild(labelSpan);
}
if (needTableDiv)
tableDiv.appendChild(button);
else if (HTMLPanel.id.indexOf('dataOutputPanel') == -1)
buttonDiv.appendChild(button);
else
tableElement[0].appendChild(button);
this.setHTMLButton(button);
hButton = button;
this.mapHTML2JS(button);
this.setFocusable(true, true);
if (sim.getSpeechEnabled()) {
var speechLabel = this.getSpeechLabel();
if (!speechLabel) {
speechLabel = this.getLabel();
if (!speechLabel && section) {
label = section.getSectionLabel();
}
if (!speechLabel) {
dbg().logFatalError(source, 'Item is speech enabled but speechLabel attribute is missing for ' + this.getName(), true);
return;
}
}
speechGrammarBldr().createButtonGrammarRule(this.getName(), speechLabel, this, speechLabel);
}
if (this.isFocusable()) {
keyboardInput().addFocusableElementItem(this, this.getNodeID());
}
};
if (sim) {
registerClassEvents(instance);
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Control.Button.prototype = new Simulator.Control.CommandElement();
Simulator.Control.Button.parent = Simulator.Control.CommandElement;
Simulator.Control.Button.prototype.constructor = Simulator.Control.Button;

// FILE: DataDisplayElement2.js (20d98ee3) 3/7/2014 11:24:14 AM

Simulator.Display.DataDisplayElement = function  (sim) {
Simulator.SimElement.call(this, sim);
var visible = 'true';
var displayVector = [];
var waitOn = null;
var fixedDigits = 2;
this.getVisible = function() {
return visible;
};
this.setVisible = function(newVisible) {
visible = newVisible;
return this;
};
this.getDisplayVector = function() {
return displayVector;
};
this.setDisplayVector = function(newDisplayVector) {
displayVector = newDisplayVector;
return this;
};
this.getWaitOn = function() {
return waitOn;
};
this.setWaitOn = function(newWaitOn) {
waitOn = newWaitOn;
return this;
};
this.getFixedDigits = function() {
return fixedDigits;
};
this.setFixedDigits = function(newFixedDigits) {
fixedDigits = newFixedDigits;
return this;
};
this.onChange = function (id) {
this.postOnChangeEvents();
};
this.setAttributes = function (attr, node) {
Simulator.Display.DataDisplayElement.prototype.setAttributes.call(this, attr, node);
for (var i in attr) {
switch (i) {
case 'visible':
this.setVisible(attr[i]);
break;
case 'fixedDigits':
this.setFixedDigits(attr[i]);
break;
case 'waitOn':
this.setWaitOn(attr[i]);
break;
}
}
};
};
Simulator.Display.DataDisplayElement.prototype = new Simulator.SimElement();
Simulator.Display.DataDisplayElement.parent = Simulator.SimElement;
Simulator.Display.DataDisplayElement.prototype.constructor = Simulator.Display.DataDisplayElement;

// FILE: DataTable2.js (5ec2b308) 3/7/2014 11:24:14 AM

Simulator.Display.DataTable = function (sim, panel) {
Simulator.Display.DataDisplayElement.call(this, sim);
var source = 'DataTable';
var iteratorSelectorMap = [];
var rowFunctionMap = [];
var headingMap = [];
var headingNames = [];
var autoCountMap = [];
var scoreableMap = [];
var numFiguresMap = [];
var includeKeyInOutput = [];
var columnTextLengthMap = [];
var hasOutputKeys = false;
var colWidth = -1;
var whiteboardKey = null;
var userAlerted = false;
var deleteColumn = false;
var numRows = undefined;
var htmlTableRendered = false;
var userAddRows = true;
var numColumns = undefined;
var header = true;
var incrementTrialOnOutput = false;
var clearRows = false;
var footer = false;
var scoreable = false;
var headerVisible = true;
var outputSource = 'evaluator';
var deleteRowImage = '';
var prevBorder = 'none';
var simID = null;
var instance = this;
if (sim) {
simID = sim.getSimID();
}
var HTMLPanel = panel.getHTMLElement();
var keyboardInput = function () { return sim.getKeyboardInput(); };
var util = function () { return sim.getUtils(); };
var simMgr = function () { return sim.getSimulationManager(); };
var eventMgr = function () { return sim.getEventManager(); };
var dbg = function () { return sim.getDebug(); };
var speechGrammarBldr = function () { return sim.getSpeechGrammarBldr(); };
var whiteboard = function () { return sim.getWhiteboard(); };
var scoringTable = function () { return sim.getScoringTable(); };
var simDocument = function () { return sim.getSimDocument(); };
var HTMLDataTable = simDocument().createElement('table');
HTMLDataTable.setAttribute('class', 'dataTable');
HTMLDataTable.rules = 'all';
function updateHTMLTable(newHTMLTable) {
HTMLDataTable = newHTMLTable;
}
this.setFocusable(true, true);
function addRow(table, loadFromResponse) {
var newCell = null;
var hTable = simDocument().getElementById(table.getID());
var nRows = hTable.rows.length;
var lastCellID = table.createCellId(hTable.tBodies[0].rows.length - 2, numColumns - 1);
var newRow = hTable.insertRow(nRows);
for (var i = 0; i < numColumns; i++) {
newCell = newRow.insertCell(i);
newCell.id = table.createCellId(hTable.tBodies[0].rows.length - 1, i);
newCell.innerHTML = ' ';
if (table.isFocusable()) keyboardInput().addFocusableElementItem(table, table.getID(), newCell.id);
}
if (table.getClearRows()) {
var dCell = newCell = newRow.insertCell(numColumns);
dCell.style.borderRight = '0px';
dCell.style.borderTop = '0px';
dCell.style.borderBottom = '0px';
dCell.id = table.createCellId(hTable.tBodies[0].rows.length - 1, numColumns);
var anchor = simDocument().createElement('a');
anchor.href = '#';
anchor.setAttribute('class', 'clearRow');
var img = simDocument().createElement('img');
img.src = table.getDeleteRowImage();
anchor.appendChild(img);
anchor.onclick = (function (e) {
var theRow = simMgr().getTrialNum() - 1;
if (loadFromResponse) {
theRow = nRows - 1;
}
var id = table.getNodeID();
return function (e) {
instance.clearRow(e, id, theRow);
};
})();
dCell.appendChild(anchor);
if (table.isFocusable()) keyboardInput().addFocusableElementItem(table, table.getID(), dCell.id);
}
updateHTMLTable(hTable);
table.setNumRows(hTable.tBodies[0].rows.length);
}
function resolveColumn(inputKey, outputKey) {
for (var i = 0; i < numColumns; i++) {
if (headingMap[i]['inputKey']) {
if (inputKey) {
if (headingMap[i]['inputKey'].toLowerCase() == inputKey.toLowerCase()) {
if (outputKeyMatch(outputKey, i)) return i;
else return -1;
}
}
} else if (outputKey) {
if (outputKeyMatch(outputKey, i)) return i;
}
}
return -1;
}
function outputKeyMatch(outputKey, colNum) {
if (headingMap[colNum]['outputKey']) {
if (outputKey) {
if (headingMap[colNum]['outputKey'][0] == '+') {
if (headingMap[colNum]['outputKey'].substring(1) == outputKey) return true;
}
else {
theOutputKeys = headingMap[colNum]['outputKey'].split(',');
for (var j = 0; j < theOutputKeys.length; j++) {
anOutputKey = theOutputKeys[j].replace(/^\s+/, '');
anOutputKey = anOutputKey.replace(/\s+$/, '');
if (anOutputKey.toLowerCase() == outputKey.toLowerCase()) return true;
} return false;
}
}
} else {
if (outputKey) return false;
else return true;
}
}
function parseTableInput(obj, inputs) {
var inputArray = [];
var elements = null;
var parts = null;
var cellWritten = false;
for (var p in inputs) {
inputArray = inputs[p];
if (inputArray) {
for (var i = 0; i < inputArray.length; i++) {
if (inputArray[i]) {
elements = inputArray[i].split(Simulator.Constants.PAIR_DELIMITTER);
for (var k = 0; k < elements.length; k++) {
parts = elements[k].split(Simulator.Constants.KEY_VALUE_DELIMITTER);
if (parts[1]) cellWritten = obj.setCell(parts[0], parts[1]);
else cellWritten = obj.setCell(p, parts[0]);
}
}
}
}
}
if (cellWritten && !hasOutputKeys) {
debug(source, 'cellWritten = ' + cellWritten + ', hasOutputKeys = ' + hasOutputKeys + '. Sending "tableUpdated" event');
eventMgr().postEvent(new Simulator.Event(obj, 'info', 'tableUpdated'));
}
}
function parseOutput(obj, outputs) {
var parts = [];
var functionList = [];
var functionDB = [];
var iterations = [];
if (outputs == '' || outputs == ';') {
dbg().logError(source, 'Improper output parameter received in DataTable.parseOutput: ' + outputs + '');
return;
}
iterations = outputs.split(Simulator.Constants.ITERATION_DELIMITTER);
for (var t = 0; t < iterations.length; t++) {
functionList = iterations[t].split(Simulator.Constants.PAIR_DELIMITTER);
for (var fl = 0; fl < functionList.length; fl++) {
parts = functionList[fl].split(Simulator.Constants.KEY_VALUE_DELIMITTER);
parts[0] = util().removeHeadingAndTrailingQuotes(parts[0], 'both');
parts[1] = util().removeHeadingAndTrailingQuotes(parts[1], 'both');
if (t == 0)
functionDB[parts[0]] = [];
if (parts[0])
functionDB[parts[0]].push(parts[parts.length - 1]);
}
}
var cellWritten = false;
for (var k = 0; k < numColumns; k++) {
var allData = null;
var inputKey = headingMap[k]['inputKey'];
var outputKeys = headingMap[k]['outputKey'];
if (outputKeys) {
var outputKeyList = outputKeys.split(',');
for (var i = 0; i < outputKeyList.length; i++) {
var data = null;
if (typeof outputKeyList[i] == 'Array') outputKeyList[i] = outputKeyList[i][0];
outputKeyList[i] = outputKeyList[i].replace(/^\s*/, "");
outputKeyList[i] = outputKeyList[i].replace(/\s*$/, "");
outputKeyList[i] = outputKeyList[i].replace(/^"\s*/, "\*");
outputKeyList[i] = outputKeyList[i].replace(/\s*\"$/, "\"");
outputKeyList[i] = outputKeyList[i].replace(/\"/g, "");
if (outputKeyList[i] in functionDB) {
if (iteratorSelectorMap[k]) {
data = util().applyFilter(iteratorSelectorMap[k], functionDB[outputKeyList[i]]);
functionDB[outputKeyList[i]] = data;
} else {
if (includeKeyInOutput[k]) {
functionDB[outputKeyList[i]] = outputKeyList[i] + ' : ' + functionDB[outputKeyList[i]];
}
}
data = functionDB[outputKeyList[i]];
if (data instanceof Array) data = data.join(',');
if (allData) allData = allData + ', ' + data;
else allData = data;
cellWritten = obj.setCell(inputKey, allData, outputKeyList[i]);
}
}
}
}
if (cellWritten) {
obj.saveScoreableInputs();
eventMgr().postEvent(new Simulator.Event(obj, 'info', 'tableUpdated'));
}
}
function compoundOutputKey(outputs) {
return outputs[0] == '+' ? true : false;
}
function postTableDataToWhiteboard(obj) {
var dataSeriesID = null;
whiteboard().addCategory('itemTableData');
var cellID = null;
var cell = null;
var buff = [];
for (var j = 0; j < numRows; j++) {
for (var i = 0; i < numColumns; i++) {
cellID = obj.createCellId(j, i);
cell = simDocument().getElementById(cellID);
if (i == 0) buff.push(cell.innerHTML);
else {
buff.push(', ');
buff.push(cell.innerHTML);
}
}
dataSeriesID = 'series' + (j + 1);
if (!whiteboardKey) whiteboardKey = whiteboard().addItem('itemTableData', dataSeriesID);
whiteboard().setItem('itemTableData', dataSeriesID, buff.join(''), whiteboardKey);
}
}
function rowIsEmpty(tbl, theRow) {
var nCols = tbl.getNumColumns();
if (theRow < tbl.getNumRows() && theRow >= 0) {
for (var i = 0; i < nCols; i++) {
var id = tbl.createCellId(theRow, i);
var cell = simDocument().getElementById(id);
if (cell.innerHTML != '') return false;
}
}
return true;
}
var createTableBody = function (tbl) {
var tBody = simDocument().createElement('tbody');
HTMLDataTable.appendChild(tBody);
var row;
tbl.setFocusable(true, false);
for (var j = 0; j < numRows; j++) {
row = simDocument().createElement('tr');
tBody.appendChild(row);
for (var i = 0; i < numColumns; i++) {
var cell = simDocument().createElement('td');
cell.id = tbl.createCellId(j, i);
row.appendChild(cell);
cell.innerHTML = '';
if (tbl.isFocusable()) keyboardInput().addFocusableElementItem(tbl, tbl.getNodeID(), cell.id);
}
if (tbl.getClearRows()) {
var dCell = newCell = row.insertCell(row.cells.length);
dCell.id = tbl.createCellId(j, numColumns);
dCell.style.borderRight = '0px';
dCell.style.borderTop = '0px';
dCell.style.borderBottom = '0px';
var anchor = simDocument().createElement('a');
anchor.href = '#';
anchor.setAttribute('class', 'clearRow');
var img = simDocument().createElement('img');
img.src = tbl.getDeleteRowImage();
anchor.appendChild(img);
anchor.onclick = (function (e) {
var theRow = j;
var id = tbl.getNodeID();
return function (e) {
instance.clearRow(e, id, theRow);
};
})();
dCell.appendChild(anchor);
if (tbl.isFocusable()) keyboardInput().addFocusableElementItem(tbl, tbl.getNodeID(), dCell.id);
}
}
return;
};
var createRowDeletionSpeechCommand = function (tbl) {
speechGrammarBldr().createTableRowClearRule(tbl.getName(), '', tbl, 'Data Table');
};
this.setEname(source);
this.getHTMLTable = function () {
return HTMLDataTable;
};
this.getID = function () {
return HTMLDataTable.id;
};
this.setID = function (id) {
HTMLDataTable.setAttribute('id', this.getNodeID());
};
this.getUserAddRows = function () {
return userAddRows;
};
this.setUserAddRows = function (newUserAddRows) {
if (newUserAddRows == 'true') userAddRows = true;
else userAddRows = false;
};
this.getNumRows = function () {
return numRows;
};
this.setNumRows = function (newNumRows) {
numRows = parseInt(newNumRows);
if (numRows == undefined) {
dbg().logWarning(source, 'Could not convert string representation of number of data table rows to an integer');
}
if (numRows == 0) deleteColumn = true;
return this;
};
this.getNumColumns = function () {
return numColumns;
};
this.setNumColumns = function (newNumColumns) {
numColumns = parseInt(newNumColumns);
if (!numColumns) {
dbg().logWarning(source, 'Could not convert string representation of number of data table columns to an integer');
}
colWidth = 85 / numColumns;
dColWidth = (100 - (colWidth * numColumns)) + '%';
return this;
};
this.getHeader = function () {
return header;
};
this.setHeader = function (header) {
var indexStr = '';
var maxLength = 0;
var k = -1;
var cell = null;
var headingText = null;
var isIE = util().isInternetExplorer();
if (header != null) {
var tHead = HTMLDataTable.createTHead();
var row = simDocument().createElement('tr');
tHead.appendChild(row);
for (var i = 0; i < header.childNodes.length; i++) {
try {
var child = header.childNodes[i];
if (child.nodeName[0] != '#') {
k += 1;
if (k <= numColumns) {
cell = simDocument().createElement('th');
row.appendChild(cell);
indexStr = 'text';
if (isIE) headingText = child.attributes.getNamedItem(indexStr).value;
else headingText = child.attributes[indexStr].nodeValue;
cell.innerHTML = headingText;
headingNames[k] = headingText;
headingMap[k] = [];
indexStr = "contentType";
headingMap[k].push([indexStr]);
if (isIE) {
if (child.attributes.getNamedItem(indexStr) != undefined)
headingMap[k][indexStr] = child.attributes.getNamedItem(indexStr).value;
else
headingMap[k][indexStr] = "text";
}
else {
if (child.attributes[indexStr] != undefined)
headingMap[k][indexStr] = child.attributes[indexStr].nodeValue;
else
headingMap[k][indexStr] = "text";
}
indexStr = "inputKey";
headingMap[k].push([indexStr]);
if (isIE) {
if (child.attributes.getNamedItem(indexStr) != undefined)
headingMap[k][indexStr] = child.attributes.getNamedItem(indexStr).value;
else
headingMap[k][indexStr] = null;
}
else {
if (child.attributes[indexStr] != undefined)
headingMap[k][indexStr] = child.attributes[indexStr].nodeValue;
else
headingMap[k][indexStr] = null;
}
indexStr = "outputKey";
headingMap[k].push([indexStr]);
if (isIE) {
if (child.attributes.getNamedItem(indexStr) != undefined) {
headingMap[k][indexStr] = child.attributes.getNamedItem(indexStr).value;
headingMap[k][indexStr] = headingMap[k][indexStr].replace(/\s*\"\s*/g, "\"");
hasOutputKeys = true;
}
else
headingMap[k][indexStr] = null;
}
else {
if (child.attributes[indexStr] != undefined) {
headingMap[k][indexStr] = child.attributes[indexStr].nodeValue;
headingMap[k][indexStr] = headingMap[k][indexStr].replace(/\s*\"\s*/g, "\"");
hasOutputKeys = true;
}
else headingMap[k][indexStr] = null;
}
indexStr = "includeKeyInOutput";
if (isIE) {
if (child.attributes.getNamedItem(indexStr))
if (child.attributes.getNamedItem(indexStr).value == "yes") includeKeyInOutput[k] = true;
else includeKeyInOutput[k] = false;
}
else {
if (child.attributes[indexStr])
if (child.attributes[indexStr].nodeValue == "yes") includeKeyInOutput[k] = true;
else includeKeyInOutput[k] = false;
}
indexStr = "autoCount";
if (isIE) {
if (child.attributes.getNamedItem(indexStr)) autoCountMap[k] = child.attributes.getNamedItem(indexStr).value;
else autoCountMap[k] = null;
}
else {
if (child.attributes[indexStr]) autoCountMap[k] = child.attributes[indexStr].nodeValue;
else autoCountMap[k] = null;
}
indexStr = "filter";
if (isIE) {
if (child.attributes.getNamedItem(indexStr)) iteratorSelectorMap[k] = child.attributes.getNamedItem(indexStr).value;
var len = headingText.length;
if (len > maxLength) maxLength = len;
}
else {
if (child.attributes[indexStr]) iteratorSelectorMap[k] = child.attributes[indexStr].nodeValue;
var len = headingText.length;
if (len > maxLength) maxLength = len;
}
indexStr = "scoreable";
if (isIE) {
if (child.attributes.getNamedItem(indexStr) != undefined) {
scoreableMap[k] = true;
scoringTable().addElement(headingNames[k], "output");
}
else scoreableMap[k] = false;
}
else {
if (child.attributes[indexStr] != undefined) {
scoreableMap[k] = true;
scoringTable().addElement(headingNames[k], "output");
}
else scoreableMap[k] = false;
}
indexStr = "numDecFigures";
if (isIE) {
if (child.attributes.getNamedItem(indexStr) != undefined) numFiguresMap[k] = child.attributes.getNamedItem(indexStr).value;
}
else {
if (child.attributes[indexStr] != undefined) numFiguresMap[k] = child.attributes[indexStr].nodeValue;
}
indexStr = "rowFunction";
if (isIE) {
if (child.attributes.getNamedItem(indexStr) != undefined) rowFunctionMap[k] = child.attributes.getNamedItem(indexStr).value;
}
else {
if (child.attributes[indexStr] != undefined) rowFunctionMap[k] = child.attributes[indexStr].nodeValue;
}
indexStr = "maxTextLength";
if (isIE) {
if (child.attributes.getNamedItem(indexStr)) columnTextLengthMap[k] = child.attributes.getNamedItem(indexStr).value;
else columnTextLengthMap[k] = -1;
}
else {
if (child.attributes[indexStr]) columnTextLengthMap[k] = child.attributes[indexStr].nodeValue;
else columnTextLengthMap[k] = -1;
}
}
}
} catch (err) {
dbg().logError(source, 'Error occurred during construction of data table header column ' + k + ' for attribute ' + indexStr + ': ' + err.message);
}
}
}
return this;
};
this.getInputKey = function (columnNumber) {
return headingMap[columnNumber]['inputKey'];
};
this.getOutputKey = function (columnNumber) {
return headingMap[columnNumber]['outputKey'];
};
this.headingMapInverse = function (num) {
for (var key in headingMap) {
if (headingMap[key] == num) return key;
}
return null;
};
this.setIncrementTrialOnOutput = function (newIncrementTrialOnOutput) {
if (newIncrementTrialOnOutput == 'true') incrementTrialOnOutput = true;
else incrementTrialOnOutput = false;
};
this.getIncrementTrialOnOutput = function () {
return incrementTrialOnOutput;
};
this.createCellId = function (row, col) {
return this.getName() + simID + row + col;
};
this.getFooter = function () {
return footer;
};
this.setFooter = function (footer) {
var tFoot = HTMLDataTable.createTFoot();
var row = simDocument().createElement('TR');
tFoot.appendChild(row);
for (var i = 0; i < numColumns; i++) {
var cell = simDocument().createElement('TD');
cell.style.width = colWidth;
row.appendChild(cell);
cell.innerHTML = ' ';
}
this.HTMLDataTable.style.display = 'block';
return this;
};
this.getClearRows = function () {
return clearRows;
};
this.setClearRows = function (newClearRows) {
clearRows = newClearRows == 'true' || newClearRows == 'yes' ? true : false;
return this;
};
this.getScoreable = function () {
return scoreable;
};
this.setScoreable = function (newScoreable) {
if (newScoreable == 'yes') scoreable = true;
else scoreable = false;
return this;
};
this.getHeaderVisible = function () {
return headerVisible;
};
this.setHeaderVisible = function (newHeaderVisible) {
headerVisible = newHeaderVisible;
return this;
};
this.getOutputSource = function () {
return outputSource;
};
this.setOutputSource = function (newOutputSource) {
outputSource = newOutputSource;
return this;
};
this.getDeleteRowImage = function () {
return deleteRowImage;
};
this.setDeleteRowImage = function (newDeleteRowImage) {
deleteRowImage = newDeleteRowImage;
if (deleteRowImage) {
this.setClearRows(true);
deleteColumn = true;
}
return this;
};
this.evaluateRowFunction = function (row, column) {
if (rowFunctionMap[column]) {
var sum = 0;
var cellID = this.createCellId(row, column);
var cell = simDocument().getElementById(cellID);
switch (rowFunctionMap[column]) {
case 'mean':
for (var i = 0; i < numColumns; i++) if (i != column) sum += parseFloat(cell.inerHTML);
return (sum / numRows).toFixed(this.getFixedDigits());
break;
case 'sum':
for (var i = 0; i < numColumns; i++) if (i != column) sum += parseFloat(cell.inerHTML);
return sum.toFixed(this.getFixedDigits());
break;
case 'max':
var max = null;
for (var i = 0; i < numColumns; i++) max = Math.max(parseFloat(cell.inerHTML), max);
return max.toFixed(this.getFixedDigits());
break;
case 'min':
var min = null;
for (var i = 0; i < numColumns; i++) min = Math(min, parseFloat(cell.inerHTML));
return min.toFixed(this.getFixedDigits());
break;
}
}
};
this.replace = function () {
HTMLPanel.replaceChild(HTMLDataTable, HTMLDataTable);
this.refreshTable();
};
this.append = function () {
HTMLPanel.appendChild(HTMLDataTable);
};
this.setCell = function (inputKey, data, outputKey) {
var cellWritten = false;
var rowNum = simMgr().getTrialNum() - 1;
var colNum = resolveColumn(inputKey, outputKey);
if (rowNum == numRows) {
if (userAddRows) addRow(this);
else {
if (!userAlerted) {
Simulator.showAlertWarning('You cannot add additional data table rows.');
userAlerted = true;
}
return;
}
}
cellWritten = this.setCellWithRowColNum(rowNum, colNum, data);
this.setAutoCountCells(rowNum);
return cellWritten;
};
this.setCellWithRowColNum = function (rowNum, colNum, data) {
var cellWritten = false;
var testVal = null;
if (rowNum < numRows && rowNum >= 0 && colNum != -1) {
var id = this.createCellId(rowNum, colNum);
cell = simDocument().getElementById(id);
var contentType = headingMap[colNum]['contentType'];
if (data === Simulator.Constants.NO_DATA_INDICATOR) cell.inerHTML = Simulator.Constants.NO_DATA_INDICATOR;
else if (contentType == 'text') {
if (!isNaN(data)) {
testVal = parseFloat(data);
var figures = parseInt(numFiguresMap[colNum]);
if (!figures) figures = 0;
if (rowFunctionMap[colNum]) testVal = this.evaluateRowFunction(rowNum, colNum);
data = testVal.toFixed(figures);
}
else if (columnTextLengthMap[colNum] != -1) {
var parts = data.split(Simulator.Constants.MULTIPLE_VALUE_DELIMITTER);
var txtLen = parseInt(columnTextLengthMap[colNum]);
for (var i = 0; i < parts.length; i++) {
if (parts[i].length > txtLen) parts[i] = parts[i].substr(0, txtLen - 4) + " ...";
if (i > 0) parts[i] = ', ' + parts[i];
}
if (parts.length > 1) data = parts.join('\n');
else data = parts[0];
}
cell.innerHTML = util().replaceAll(data, Simulator.Constants.MULTIPLE_VALUE_DELIMITTER, ',');
} else if (contentType == 'image') {
cell.inerHTML = '<img src="data:image/png;base64,"' + data + '" alt="x">';
}
cellWritten = true;
} else cellWritten = false;
return cellWritten;
};
this.setAutoCountCells = function (rowNum) {
if (rowNum < numRows && rowNum >= 0) {
for (var i = 0; i < this.getNumColumns(); i++) {
if (autoCountMap[i] != null) {
var id = this.createCellId(rowNum, i);
cell = simDocument().getElementById(id);
cell.innerHTML = simMgr().getTrialNum();
}
}
}
};
this.handleEvent = function (event) {
var newEvent = undefined;
var data = '';
switch (event.type) {
case 'inputReq':
break;
case 'input':
data = event.data;
parseTableInput(this, data);
break;
case 'command':
switch (event.context) {
case 'resetTrials':
this.clearAllRows(this);
userAlerted = false;
break;
case 'startTrial':
if (!simMgr().trialLimitReached()) {
userAlerted = false;
data = whiteboard().getCategory('dataInput');
if (data != null) {
parseTableInput(this, data);
postTableDataToWhiteboard(this);
}
}
break;
case 'startAnimation':
userAlerted = false;
data = whiteboard().getCategory('dataInput');
if (data != null) {
parseTableInput(this, data);
postTableDataToWhiteboard(this);
}
break;
default:
dbg().logWarning(source, 'Unhandled command ' + event.context + ' received by DataTable');
break;
}
break;
case 'info':
switch (event.context) {
case 'inputAvailable':
if (!simMgr().trialLimitReached()) {
data = whiteboard().getCategory('dataInput');
if (data != null) {
parseTableInput(this, data);
postTableDataToWhiteboard(this);
}
}
break;
case Simulator.Constants.ANIMATION_FINISHED:
case Simulator.Constants.ANIMATION_THREAD_FINISHED:
if (this.getOutputSource()) {
if (this.getOutputSource() == 'evaluator') data = whiteboard().getItem('evaluationOutput', 'output');
else if (this.getOutputSource() == 'animation') data = whiteboard().getItem('animationOutput', 'output');
} else {
data = whiteboard().getItem('evaluationOutput', 'output');
if (!data) data = whiteboard().getItem('animationOutput', 'output');
}
if (data != null) parseOutput(this, data);
break;
case 'outputAvailable':
if ((!simMgr().trialLimitReached()) && ((this.getWaitOn() == null) || (this.getWaitOn() == ''))) {
data = whiteboard().getItem('evaluationOutput', 'output');
if (!data) data = whiteboard().getItem('evaluation', 'output');
if (!data) data = whiteboard().getItem('animationOutput', 'output');
if (data != null) parseOutput(this, data);
else eventMgr().postEvent(new Simulator.Event(this, 'info', 'tableUpdated'));
} else if ((this.getWaitOn() != null) && (this.getWaitOn() != '')) {
eventMgr().registerEvent(new Simulator.Event(this, 'info', this.getWaitOn()));
}
break;
case 'animationOutputAvailable':
data = whiteboard().getItem('animationOutput', 'output');
if (data != null) parseOutput(this, data);
else eventMgr().postEvent(new Simulator.Event(this, 'info', 'tableUpdated'));
break;
}
break;
default:
dbg().logWarning(source, 'DataTable ' + this.getName() + ': Unhandled event type received: ' + event.inspect());
return;
}
if (newEvent != undefined && newEvent != null) newEvent.postEvent();
};
this.allAttributesLoaded = function () {
createTableBody(this);
};
this.saveScoreableInputs = function () {
var row = simMgr().getTrialNum() - 1;
for (var i = 0; i < numColumns; i++) {
var cellID = this.createCellId(row, i);
var cell = simDocument().getElementById(cellID);
if (scoreableMap[i]) scoringTable().setValue(headingNames[i], row, cell.innerHTML);
}
};
this.getContents = function (indent, name) {
var buff = [];
var numCols = 0;
var table = simDocument().getElementById(this.getNodeID());
if (table) {
var body = table.tBodies[0];
var children = body.childNodes;
if (!name) buff.push(indent + '<stateTable>\n');
else buff.push('<' + name + '>\n');
for (var i = 0; i < children.length; i++) {
if (children[i].nodeName[0] != '#') {
var child = children[i];
if (child.nodeName.toLowerCase() == 'tr') {
buff.push(indent + '  <tr>\n');
var cols = child.childNodes;
if (this.getClearRows() == true) numCols = cols.length - 1;
else numCols = cols.length;
for (var j = 0; j < numCols; j++) {
if (cols[j].nodeName.toLowerCase() == 'th') {
buff.push(indent + '    <th>');
buff.push(cols[j].childNodes[0].textContent);
buff.push('</th>');
} else if (cols[j].nodeName.toLowerCase() == 'td') {
buff.push(indent + '    <td>');
buff.push(cols[j].textContent);
buff.push('</td>\n');
}
}
buff.push(indent + '  </tr>\n');
}
}
}
if (!name) buff.push(indent + '</stateTable>\n');
else buff.push('</' + name + '>\n');
return buff.join('');
} else return '';
};
this.loadFromResponse = function (node) {
var responseRowNum = -1;
var lastTableRowNum = this.getNumRows() - 1;
var colNum = -1;
var children = node.childNodes;
for (var i = 0; i < children.length; i++) {
var child = children[i];
if (child.nodeName[0] != '#') {
if (child.nodeName.toLowerCase() == 'tr') {
responseRowNum++;
colNum = -1;
if (lastTableRowNum < responseRowNum) {
addRow(this, true);
lastTableRowNum++;
}
var childChildren = child.childNodes;
for (var j = 0; j < childChildren.length; j++) {
var childChild = childChildren[j];
if (childChild.nodeName[0] != '#') {
if (childChild.nodeName.toLowerCase() == 'td') {
colNum++;
var cellID = this.createCellId(responseRowNum, colNum);
var cell = simDocument().getElementById(cellID);
if (cell) cell.innerHTML = childChild.textContent;
else dbg().logError(source, 'DataTable.loadFromResponse: Could not find cell with ID = ' + cellID);
}
}
}
}
}
}
};
this.keyboardNavigateTo = function (elementID, itemID, index) {
var item = simDocument().getElementById(itemID);
if (item) item.setAttribute('class', 'simAreaFocus');
};
this.keyboardNavigateAwayFrom = function (elementID, itemID, index) {
var item = simDocument().getElementById(itemID);
if (item) item.removeAttribute('class');
};
this.recordKeyboardSelection = function (elementID, itemID, itemIndex) {
var element = null;
var item = null;
if (itemID) {
item = simDocument().getElementById(itemID);
if (!item) {
element = simDocument().getElementById(elementID);
if (element) item = element.getElementsByClassName(itemID)[0];
}
if (item) {
item.isSelected = true;
if (this.getClearRows()) {
if ((itemIndex % (numColumns + 1)) == numColumns) {
var currentRow = Math.floor(itemIndex / (numColumns + 1));
this.clearRow(null, itemID, currentRow, false);
}
}
}
}
};
this.receivedSpeechFocus = function () {
debug(this.getName() + ' received speech focus');
var node = simDocument().getElementById(this.getID());
prevBorder = node.style.border;
node.style.border = 'thin solid #ff0000';
};
this.removeSpeechFocus = function (value) {
debug(this.getName() + ' lost speech focus');
var node = simDocument().getElementById(this.getID());
node.style.border = prevBorder;
};
this.speechActivated = function (value) {
var parts = value.split('#');
this.clearRow(null, this.getNodeID(), parts[1].trim(), false);
};
this.getSourceName = function () {
return source;
};
this.inspect = function (embedded, force) {
var buff = [];
var sep = '\n\n';
var rowSep = '\n\n';
var colSep = '   ';
var tHeader = HTMLDataTable.tHead;
var tBody = HTMLDataTable.tBodies[0];
buff.push('Inspecting '); buff.push(this.getName()); buff.push(sep);
for (var i = 0; i < numColumns; i++) {
buff.push(tHeader.rows[0].cells[i].innerHTML); buff.push(colSep);
}
buff.push(rowSep);
for (var l = 0; l < numRows; l++) {
var row = tBody.rows[l];
for (var j = 0; j < numColumns; j++) {
buff.push(row.cells[j].innerHTML); buff.push(colSep);
}
buff.push(rowSep);
}
buff.push(sep);
for (var prop in this) {
if (prop.substr(0, 3) == 'get') {
buff.push(prop);
buff.push(' = ');
buff.push(eval('this.' + prop + '()'));
buff.push(sep);
}
}
if (!embedded) (force === null) ? debug(buff.join('')) : debugf(buff.join(''));
return buff.join('');
};
this.refreshTable = function () {
HTMLDataTable.style.display = 'none';
HTMLDataTable.style.display = 'table';
};
this.clearRow = function (e, htmlTbl, theRow, batchDelete) {
var evt = window.event || e;
if (!simMgr().isPlaying() && !simMgr().isReadOnly()) {
var tbl = this;
var nRows = tbl.getNumRows();
var nCols = tbl.getNumColumns();
if (theRow < nRows && theRow >= 0) {
if (!rowIsEmpty(tbl, theRow)) {
for (var i = 0; i < nCols; i++) {
var id = tbl.createCellId(theRow, i);
var cell = simDocument().getElementById(id);
cell.innerHTML = '';
}
scoringTable().clearRow(theRow);
if (!batchDelete) eventMgr().postEvent(new Simulator.Event(tbl, 'command', 'redoTrial', theRow + 1));
}
}
}
if (evt) {
if (evt.preventDefault) {
evt.preventDefault();
} else {
evt.returnValue = false;
}
}
};
this.clearAllRows = function (tbl) {
if (!simMgr().isReadOnly()) {
var htmlTbl = simDocument().getElementById(tbl.getNodeID());
var nRows = tbl.getNumRows();
for (var j = 0; j < nRows; j++) {
this.clearRow(null, htmlTbl.id, j, true);
}
eventMgr().postEvent(new Simulator.Event(tbl, 'info', 'allTableRowsCleared'));
}
};
this.setAttributes = function (attr, node) {
if (node) attr = util().getAttributes(node);
Simulator.Display.DataTable.prototype.setAttributes.call(this, attr, node);
for (var key in attr) {
switch (key) {
case 'rows':
this.setNumRows(attr[key]);
break;
case 'columns':
this.setNumColumns(attr[key]);
break;
case 'footer':
this.setFooter(attr[key]);
break;
case 'clearRow':
this.setClearRows(attr[key]);
break;
case 'headerVisible':
this.setHeaderVisible(attr[key]);
break;
case 'name':
this.setID(this.getName());
break;
case 'deleteRowImage':
this.setDeleteRowImage(attr[key]);
break;
case 'contentType':
this.setContentType(attr[key]);
break;
case 'incrementTrialOnOutput':
this.setIncrementTrialOnOutput(attr[key]);
break;
case 'userAddRows':
this.setUserAddRows(attr[key]);
break;
case 'rowFunction':
this.setRowFunction(attr[key]);
break;
case 'outputSource':
this.setOutputSource(attr[key]);
break;
}
}
var children = node.childNodes;
for (var k = 0; k < children.length; k++) {
if (children[k].nodeName == 'header') {
this.setHeader(children[k]);
break;
}
}
this.allAttributesLoaded();
};
this.render = function (panelName) {
if (this.getVisible()) {
if (!htmlTableRendered) {
this.append();
htmlTableRendered = true;
}
else this.append();
this.refreshTable();
} else {
var HTMLTable = simDocument().getElementById(this.getName());
HTMLTable.style.display = 'none';
this.mapHTML2JS(HTMLTable);
}
};
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};
Simulator.Display.DataTable.prototype = new Simulator.Display.DataDisplayElement();
Simulator.Display.DataTable.parent = Simulator.Display.DataDisplayElement;
Simulator.Display.DataTable.prototype.constructor = Simulator.Display.DataTable;

// FILE: DialogPanel2.js (684f7af1) 3/7/2014 11:24:14 AM

Simulator.Display.DialogPanel = function(sim, enclosingPanel, panelID, buttonLabel, attr) {
var source = 'DialogPanel';
var HTMLDialogPanel = null;
var title = '';
var instructions = '';
var id = '';
var dialogAttr = [];
var dbg = function() { return sim.getDebug(); };
var simDocument = function() { return sim.getSimDocument(); };
this.getTitle = function() {
return title;
};
this.getInstructions = function() {
return instructions;
};
this.getID = function() {
return id;
};
this.setClass = function(newClass) {
HTMLDialogPanel.setAttribute('class', newClass);
};
this.setInstructions = function(newInstructions) {
dialogAttr['instructions'] = newInstructions;
};
this.setTitle = function(newTitle) {
dialogAttr['title'] = newITitle;
};
this.getDialogAttr = function() {
return dialogAttr;
};
this.render = function(enclosingPanel, attr, panelID, buttonLabel) {
dialogButton = dialogPanel.createButton(panelID + 'button', panelID, buttonLabel);
var htmlButton = simDocument().getElementById(dialogButton.getNodeID());
HTMLPanel = simDocument().getElementById(panelID);
dialogPanel.innerHTML = dialogAttr['instructions'];
dialogPanel.display = 'none';
HTMLPanel.appendChild(htmlButton);
};
this.getDialogButton = function() {
return dialogButton;
};
function setAttributes(attr) {
for(var i in attr) {
switch (i) {
case 'title':
title = attr[i];
break;
case 'instructions':
instructions = attr[i];
break;
default:
dbg().logError(source, 'Unknown DialogPanel attribute seen: ' + i + 'with value "' + attr[i] + '"');
}
}
setStructure();
}
function setStructure() {
HTMLDialogPanel = simDocument().createElement('div');
HTMLDialogPanel.setAttribute('class', 'infoWrapper');
HTMLDialogPanel.style.display = 'none';
var titleDiv = simDocument().createElement('div');
titleDiv.setAttribute('class', 'instructionsTitle');
var header = simDocument().createElement('h2');
header.innerHTML = title;
titleDiv.appendChild(header);
var anchor = simDocument().createElement('a');
anchor.href = '#';
anchor.setAttribute('class', 'close instructions');
anchor.innerHTML = 'Close';
titleDiv.appendChild(anchor);
HTMLDialogPanel.appendChild(titleDiv);
var instrDiv = simDocument().createElement('div');
instrDiv.setAttribute('class', 'holderInfo');
instrDiv.innerHTML = instructions;
HTMLDialogPanel.appendChild(instrDiv);
}
this.createButton = function(htmlID, panelName, buttonLabel) {
var theButton = new Button();
var attr = [];
attr['implication'] = 'neutral';
attr['label'] = buttonLabel;
attr['name'] = htmlID;
attr['type'] = 'text';
attr['alwaysEnabled'] = 'yes';
attr['handler'] = 'ShowDialog';
attr['handlerParameters'] = panelName;
theButton.setAttributes(attr, null);
theButton.render(panelName);
return theButton;
};
function debug(str1, str2, tace) {
dbg().debug(source + ': ' + str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source + ': ' + str1, str2, trace);
}
setAttributes(attr);
};

// FILE: SimParser.js (3ac3b06c) 3/7/2014 11:24:14 AM

var SimParser = SimParser || {};
SimParser.nameSpace = function() {
var nsObj = null, parts;
for (var i = 0; i < arguments.length; i++) {
parts = ('' + arguments[i]).split('.');
nsObj = SimParser;
for (var j = (parts[0] == 'SimParser') ? 1 : 0; j < parts.length; j++) {
nsObj[parts[j]] = nsObj[parts[j]] || {};
nsObj = nsObj[parts[j]];
}
}
return nsObj;
};
SimParser.ParserItem = SimParser.nameSpace('SimParser', 'ParserItem');
SimParser.Utils = SimParser.nameSpace('SimParser', 'Utils');
SimParser.Variable = SimParser.nameSpace('SimParser', 'Variable');
SimParser.VariableManager = SimParser.nameSpace('SimParser', 'VariableManager');
SimParser.Range = SimParser.nameSpace('SimParser', 'Range');
SimParser.RangeManager = SimParser.nameSpace('SimParser', 'RangeManager');
SimParser.Constraint = SimParser.nameSpace('SimParser', 'Constraint');
SimParser.ConstraintManager = SimParser.nameSpace('SimParser', 'ConstraintManager');
SimParser.Permutation = SimParser.nameSpace('SimParser', 'Permutation');
SimParser.Function = SimParser.nameSpace('SimParser', 'Function');
SimParser.FunctionManager = SimParser.nameSpace('SimParser', 'FunctionManager');
SimParser.FilterEvaluation = SimParser.nameSpace('SimParser', 'FilterEvaluation');
SimParser.FunctionEvaluation = SimParser.nameSpace('SimParser', 'FunctionEvaluation');
SimParser.EvaluationUnit = SimParser.nameSpace('SimParser', 'EvaluationUnit');

// FILE: ParserItem.js (33eb0c18) 3/7/2014 11:24:14 AM

SimParser.ParserItem = function(parser) {
var eName = 'ParserItem';
this.getEname = function() {
return eName;
};
this.setEname = function(newEname) {
eName = newEname;
return this;
};
SimParser.ParserItem.prototype.setAttributes = function (attr, node) {
for (var i in attr) {
switch (i) {
case 'eName':
this.setEname(attr[i]);
break;
}
}
}
};

// FILE: SimUtils.js (c38dc0fb) 3/7/2014 11:24:14 AM

if (typeof(EU) === 'undefined') EU = {};
EU.debug = function(str)
{
if (typeof debug == 'function') debug(str);
if (typeof console == 'object') console.log(str);
};
SimParser.Utils = function (vUnit) {
var evUnit = vUnit;
var whiteboard = evUnit.getSimInstance().getWhiteboard();
this.greedyEvaluation = function (varsWB, varsFunc) {
var varCount = new Array(varsFunc.length);
for (var i = 0; i < varsFunc.length; i++) {
varCount[i] = countVarBindable(varsWB, varsFunc[i]);
}
var iMax = 0;
for (var i = 0; i < varCount.length; i++) {
if (varCount[i].bindable && varCount[i].count > iMax) {
iMax = varCount[i].count;
}
}
r = [];
for (var i = 0; i < varsFunc.length; i++) {
if ((varCount[i].bindable && varCount[i].count === iMax) || varCount[i].count === 0) {
r.push(varsFunc[i].name);
}
}
return r;
};
this.fullEvaluation = function (varsWB, varsFunc) {
var func = [];
var vMng = evUnit.getVariableManager();
for (var i = 0; i < varsFunc.length; i++) {
var v = varsFunc[i].vars;
var fBind = true;
for (var j = 0; j < v.length; j++) {
if ((vMng.isVarBindable(v[j])) && (varsWB.indexOf(v[j]) === -1)) {
fBind = false;
break;
}
}
if (fBind) {
func.push(varsFunc[i]);
}
}
return func;
};
this.countVarBindable = function (varsWB, varFunc) {
var r = { count: 0, bindable: true };
var v = varFunc.vars;
var vMng = evUnit.getVariableManager();
for (var i = 0; i < v.length; i++) {
if (vMng.isVarBindable(v[i])) {
if (varsWB.indexOf(v[i]) !== -1) {
r.count++;
} else {
r.bindable = false;
}
}
}
return r;
};
this.mergeWBVariables = function (varsWB) {
var r = {};
var varsWB1 = [];
for (var i = 0; i < varsWB.length; i++) {
for (var key in varsWB[i]) {
varsWB1.push({ name: key, value: varsWB[i][key] });
}
}
for (var i = 0; i < varsWB1.length; i++) {
if (r[varsWB1[i].name] === undefined) {
r[varsWB1[i].name] = [varsWB1[i].value]
}
else {
r[varsWB1[i].name].push(varsWB1[i].value);
}
}
var rr = [];
for (var key in r) {
rr.push({ name: key, value: r[key] });
}
return rr;
};
this.getWBVarNames = function (varsWB) {
var names = [];
for (var i = 0; i < varsWB.length; i++) {
names.push(varsWB[i].name);
}
return names;
};
this.getWBVarValues = function (varsWB) {
var v = [];
for (var i = 0; i < varsWB.length; i++) {
v.push(varsWB[i].value);
}
return v;
};
this.convertElementNamesToVarNames = function (vNames) {
r = [];
var vMng = evUnit.getVariableManager();
for (var j = 0; j < vNames.length; j++) {
var v = vMng.getVariableByObjectName(vNames[j]);
if (v) {
r.push(v.getName());
} else {
EU.debug('Cannot find a varible name for element:' + vNames[j]);
r.push(vNames[j]);
}
}
return r;
};
this.getConstantValues = function () {
r = { vNames: [], vValues: [] };
var vMng = evUnit.getVariableManager();
var c = vMng.getConstants();
for (var i = 0; i < c.length; i++) {
if (r.vNames.indexOf(c[i].name) === -1) {
r.vNames.push(c[i].name);
r.vValues.push(c[i].value);
}
}
return r;
};
this.getImplicitValues = function (varFuncs) {
var imvarsRequiredNames = [];
var imvarsRequiredValues = [];
var vMng = evUnit.getVariableManager();
var impvarsDeclaredNames = vMng.getVariableNames(['implicit']);
for (var i = 0; i < varFuncs.length; i++) {
var v = varFuncs[i].vars;
for (var j = 0; j < v.length; j++) {
if (impvarsDeclaredNames.indexOf(v[j]) >= 0) {
if (imvarsRequiredNames.indexOf(v[j]) === -1) {
imvarsRequiredNames.push(v[j]);
var sirVar = vMng.getVariableByName(v[j]);
imvarsRequiredValues.push(sirVar.getValues());
}
}
}
}
return { 'names': imvarsRequiredNames, 'values': imvarsRequiredValues };
};
this.getVarObject = function(varNames, varValues) {
var r = {};
for (var i = 0; i < varNames.length; i++) {
r[varNames[i]] = varValues[i];
}
return r;
};
this.getFuncVars = function () {
vFuncs = [];
var fMng = evUnit.getFunctionManager();
var fn = fMng.getFunctions();
for (var i = 0; i < fn.length; i++) {
vFuncs.push({ name: fn[i].getName(), vars: fn[i].getVarNames() });
}
return vFuncs;
};
this.writeDataOnWhiteBoard = function (data, key1, cat, item) {
if (typeof (whiteboard) === 'undefined') {
EU.debug('whiteboard object not defined.');
return;
}
whiteboard.addCategory(cat);
if (!key1) {
key1 = whiteboard.addItem(cat, item);
}
whiteboard.setItem(cat, item, data, key1)
return key1;
};
this.readDataFromWhiteBoard = function (section, item) {
var  vars = [{ 'chalk': 15 }, { 'surfaceArea': 600 }, { 'chalk': 16}];
return vars;
};
this.readDataFromWhiteBoard = function (category) {
var data = [];
var cat = whiteboard.getCategory(category);
if (cat !== null || cat !== undefined || cat.length !== 0) {
for (var p in cat) {
if (cat.hasOwnProperty(p)) {
var d = {};
d[p] = cat[p];
data.push(d);
}
}
}
return data;
};
this.packVariablesforWhiteboard = function (v) {
var vv = {};
var vMng = evUnit.getVariableManager();
for (var i = 0; i < v.length; i++) {
var objName = v[i].name;
var sirVar = vMng.getVariableByName(v[i].name);
if (sirVar && sirVar.getType() === 'binding') {
objName = sirVar.getObjectName();
}
vv[objName] = v[i].value;
}
return vv;
};
this.packFunctionforWhiteboard = function (f, v) {
var ff = {};
for (var i = 0; i < f.length; i++) {
ff[f[i]] = v[i];
}
return ff;
};
this.getFuncNames = function (algorithm, varNames, varFuncs) {
if (algorithm === 'greedy') {
return greedyEvaluation(varNames, varFuncs)
} else {
if (algorithm === 'all') {
return this.fullEvaluation(varNames, varFuncs)
} else {
EU.debug('Unsupported algorithm in function evaluation');
}
}
};
this.createSingleOutput = function (varList, funcList) {
var r = {};
var v = {};
var f = {};
for (var i = 0; i < varList.length; i++) {
v[varList[i].name] = varList[i].value;
}
for (var i = 0; i < funcList.length; i++) {
f[funcList[i].name] = funcList[i].value;
}
r = { variables: v, functions: f };
return r;
};
this.oddValue = function (v) {
return ((v === undefined) || ((v === null) ||
((typeof (v) === 'string') ||
((typeof (v) === 'number') &&
((v === Infinity) || (v === -Infinity) || (v.toString() === 'NaN'))))))
};
}
if (!Array.prototype.indexOf)
{
Array.prototype.indexOf = function(elt           )
{
var len = this.length;
var from = Number(arguments[1]) || 0;
from = (from < 0)
? Math.ceil(from)
: Math.floor(from);
if (from < 0)
from += len;
for (; from < len; from++)
{
if ((from in this) && (this[from] === elt)) {
return from;
}
}
return -1;
};
}

// FILE: Parser.js (ff7ed807) 3/7/2014 11:24:14 AM

var Parser = function () {
if(!Array.indexOf){
Array.prototype.indexOf = function(arg){
for(var i=0; i<this.length; i++){
if(this[i]==arg){
return i;
}
}
return -1;
}
}
String.trim = function(strArg) {
return strArg.replace(/^\s+|\s+$/g,"");
}
function object(o) {
function F() {}
F.prototype = o;
return new F();
}
var TNUMBER = 0;
var TOP1 = 1;
var TOP2 = 2;
var TVAR = 3;
var TFUNCALL = 4;
function Token(type_, index_, prio_, number_) {
this.type_ = type_;
this.index_ = index_ || 0;
this.prio_ = prio_ || 0;
this.number_ = (number_ !== undefined && number_ !== null) ? number_ : 0;
this.toString = function () {
switch (this.type_) {
case TNUMBER:
return this.number_;
case TOP1:
case TOP2:
case TVAR:
return this.index_;
case TFUNCALL:
return "CALL";
default:
return "Invalid Token";
}
};
}
function Expression(tokens, ops1, ops2, functions) {
this.tokens = tokens;
this.ops1 = ops1;
this.ops2 = ops2;
this.functions = functions;
}
var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
escapable = /[\\\'\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
meta = {
'\b': '\\b',
'\t': '\\t',
'\n': '\\n',
'\f': '\\f',
'\r': '\\r',
"'" : "\\'",
'\\': '\\\\'
};
function escapeValue(v) {
if (typeof v === "string") {
escapable.lastIndex = 0;
return escapable.test(v) ?
"'" + v.replace(escapable, function (a) {
var c = meta[a];
return typeof c === 'string' ? c :
'\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
}) + "'" :
"'" + v + "'";
}
return v;
}
function append(a, b) {
if (Object.prototype.toString.call(a) != "[object Array]") {
return [a, b];
}
a = a.slice();
a.push(b);
return a;
}
function fac(a) {
a = Math.floor(a);
var b = a;
while (a > 1) {
b = b * (--a);
}
return b;
}
function pyt(a, b) {
return Math.sqrt(a * a + b * b);
}
function random(a) {
return Math.random() * (a || 1);
}
function Parser() {
this.success = false;
this.errormsg = "";
this.expression = "";
this.pos = 0;
this.tokennumber = 0;
this.tokenprio = 0;
this.tokenindex = 0;
this.tmpprio = 0;
this.ops1 = {
"sin": Math.sin,
"cos": Math.cos,
"tan": Math.tan,
"asin": Math.asin,
"acos": Math.acos,
"atan": Math.atan,
"sqrt": Math.sqrt,
"log": Math.log,
"exp": Math.exp,
"abs": Math.abs,
"ceil": Math.ceil,
"floor": Math.floor,
"round": Math.round,
"if": function(x){return x;},
"-": function(x){return -x;},
"!": function(x){return !x;},
"{": function(a){eval('var z = {'+a+'}'); return z;}
};
this.ops2 = {
"+": function(a,b){return Number(a) + Number(b);},
"-": function(a,b){return a - b;},
"*": function(a,b){return a * b;},
"/": function(a,b){return a / b;},
"%": function(a,b){return a % b;},
",":  append,
"&&": function(a,b){return a&&b;},
"||": function(a,b){return a||b;},
"^":   Math.pow,
"pow": Math.pow,
"?":  function(a,b){if(a){return b;}else{return null;};},
":":  function(ab,c){if(ab === null){return c;}else{return ab;};},
"[]": function(a,b){return a[b];},
"==": function(a,b){return a == b;},
"!=": function(a,b){return a != b;},
"<":  function(a,b){return a <  b;},
"<=": function(a,b){return a <= b;},
">":  function(a,b){return a >  b;},
">=": function(a,b){return a >= b;}
};
this.functions = {
"Math.atan2": Math.atan2,
"Math.sin": Math.sin,
"Math.cos": Math.cos,
"Math.floor": Math.floor,
"Math.min": Math.min,
"Math.max": Math.max,
"Math.pow": Math.pow,
"Math.rand": Math.random,
"Math.random": Math.random,
"Math.round": Math.round,
"Math.sqrt": Math.sqrt,
"atan2": Math.atan2,
"fac": fac,
"min": Math.min,
"max": Math.max,
"pow": Math.pow,
"random": random,
"rand": random,
"pyt": pyt
};
this.consts = {
"E": Math.E,
"e": Math.E,
"PI": Math.PI,
"pi": Math.PI
};
}
Parser.parbracketsAndCo = function (expr){
expr = enclosers(expr, '(', ')', '');
expr = enclosers(expr, '[', ']', '[]');
expr = enclosers(expr, '{', '}', '{');
return expr;
function enclosers(expr, delimOpen , delimClose, name){
var newExp = "",
char = 0,
pos = 0,
charOpen = delimOpen.charAt(0),
charClose = delimClose.charAt(0),
countingOpenedGroup = 0;
while(pos < expr.length) {
char = expr.charAt(pos);
if (char == charOpen) {
countingOpenedGroup ++;
if (delimOpen == '{')
newExp += name + '(' +'`';
else
newExp += name + '(';
}
else if (char == charClose) {
countingOpenedGroup --;
if(countingOpenedGroup < 0){
noIllegalGroup(countingOpenedGroup, delimOpen , delimClose);
}
if (delimOpen == '{')
newExp += '`' + ')';
else
newExp += ')';
}
else {
newExp += char;
}
pos++;
}
noIllegalGroup(countingOpenedGroup, delimOpen , delimClose);
return newExp;
}
function noIllegalGroup(countingOpenedGroup, delimOpen , delimClose){
if(countingOpenedGroup < 0) {
throw new Error('parse error : ' + delimOpen + '...'
+ delimClose + ', missing opening character');
}
else if(countingOpenedGroup > 0) {
throw new Error('parse error : ' + delimOpen + '...'
+ delimClose + ', missing closing character');
}
}
}
Parser.evaluate = function (expr, variables) {
return Parser.parse(expr).evaluate(variables);
};
Parser.Expression = Expression;
Parser.values = {
sin: Math.sin,
cos: Math.cos,
tan: Math.tan,
asin: Math.asin,
acos: Math.acos,
atan: Math.atan,
sqrt: Math.sqrt,
log: Math.log,
abs: Math.abs,
ceil: Math.ceil,
floor: Math.floor,
"Math.floor": Math.floor,
round: Math.round,
random: random,
rand: random,
fac: fac,
exp: Math.exp,
min: Math.min,
max: Math.max,
"Math.max": Math.max,
pyt: pyt,
pow: Math.pow,
atan2: Math.atan2,
E: Math.E,
PI: Math.PI
};
var PRIMARY  = 1 << 0;
var OPERATOR = 1 << 1;
var FUNCTION = 1 << 2;
var LPAREN   = 1 << 3;
var RPAREN   = 1 << 4;
var COMMA    = 1 << 5;
var SIGN     = 1 << 6;
var CALL     = 1 << 7;
Parser.prototype = {
parse: function (expr) {
expr = Parser.parbracketsAndCo(expr);
this.errormsg = "";
this.success = true;
var operstack = [];
var tokenstack = [];
this.tmpprio = 0;
var expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
var noperators = 0;
var lptsl = -1;
this.expression = expr;
this.pos = 0;
while (this.pos < this.expression.length) {
var cc = this.expression.charAt(this.pos);
if (this.isOperator()) {
if (this.isSign() && (expected & SIGN)) {
if (this.isNegativeSign()) {
this.tokenprio = 2;
this.tokenindex = "-";
this.addfunc(tokenstack, operstack, TOP1);
noperators += 1;
}
expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
}
else if (this.isComment()) {
}
else {
if ((expected & OPERATOR) === 0) {
this.error_parsing(this.pos, "unexpected operator");
}
this.addfunc(tokenstack, operstack, TOP2);
noperators += 2;
expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
}
}
else if (this.isNumber()) {
if ((expected & PRIMARY) === 0) {
this.error_parsing(this.pos, "unexpected number");
}
var token = new Token(TNUMBER, 0, 0, this.tokennumber);
tokenstack.push(token);
expected = (OPERATOR | RPAREN | COMMA);
}
else if (this.isString()) {
if ((expected & PRIMARY) === 0) {
this.error_parsing(this.pos, "unexpected string");
}
var token = new Token(TNUMBER, 0, 0, this.tokennumber);
tokenstack.push(token);
expected = (OPERATOR | RPAREN | COMMA);
}
else if (this.isLeftParen()) {
if ((expected & LPAREN) === 0) {
this.error_parsing(this.pos, "unexpected \"(\"");
}
if (expected & CALL) {
this.tokenprio = -2;
this.tokenindex = -1;
this.addfunc(tokenstack, operstack, TFUNCALL);
noperators += 2;
lptsl = tokenstack.length;
}
expected = (PRIMARY | LPAREN | FUNCTION | SIGN | RPAREN);
}
else if (this.isRightParen()) {
if ((expected & RPAREN) === 0) {
this.error_parsing(this.pos, "unexpected \")\"");
}
if (lptsl == tokenstack.length) {
var token = new Token(TNUMBER, 0, 0, '');
tokenstack.push(token);
lptsl = -1;
}
expected = (OPERATOR | RPAREN | COMMA | LPAREN | CALL);
}
else if (this.isComma()) {
if ((expected & COMMA) === 0) {
this.error_parsing(this.pos, "unexpected \",\"");
}
this.addfunc(tokenstack, operstack, TOP2);
noperators += 2;
expected = (PRIMARY | LPAREN | FUNCTION | SIGN);
}
else if (this.isConst()) {
if ((expected & PRIMARY) === 0) {
this.error_parsing(this.pos, "unexpected constant");
}
var consttoken = new Token(TNUMBER, 0, 0, this.tokennumber);
tokenstack.push(consttoken);
expected = (OPERATOR | RPAREN | COMMA);
}
else if (this.isOp2()) {
if ((expected & FUNCTION) === 0) {
this.error_parsing(this.pos, "unexpected function");
}
this.addfunc(tokenstack, operstack, TOP2);
noperators += 2;
expected = (LPAREN);
}
else if (this.isOp1()) {
if ((expected & FUNCTION) === 0) {
this.error_parsing(this.pos, "unexpected function");
}
this.addfunc(tokenstack, operstack, TOP1);
noperators += 1;
expected = (LPAREN);
}
else if (this.isVar()) {
if ((expected & PRIMARY) === 0) {
this.error_parsing(this.pos, "unexpected variable");
}
var vartoken = new Token(TVAR, this.tokenindex, 0, 0);
tokenstack.push(vartoken);
expected = (OPERATOR | RPAREN | COMMA | LPAREN | CALL);
}
else if (this.isWhite()) {
}
else {
if (this.errormsg === "") {
this.error_parsing(this.pos, "unknown character");
}
else {
this.error_parsing(this.pos, this.errormsg);
}
}
}
if (this.tmpprio < 0 || this.tmpprio >= 10) {
this.error_parsing(this.pos, "unmatched \"()\"");
}
while (operstack.length > 0) {
var tmp = operstack.pop();
tokenstack.push(tmp);
}
if (noperators + 1 !== tokenstack.length) {
this.error_parsing(this.pos, "parity");
}
return new Expression(tokenstack, object(this.ops1), object(this.ops2), object(this.functions));
},
evaluate: function (expr, variables) {
return this.parse(expr).evaluate(variables);
},
error_parsing: function (column, msg) {
this.success = false;
this.errormsg = "parse error: " + msg + "; col. " + column + " in: '" + this.expression + "'";
throw new Error(this.errormsg);
},
addfunc: function (tokenstack, operstack, type_) {
var operator = new Token(type_, this.tokenindex, this.tokenprio + this.tmpprio, 0);
while (operstack.length > 0) {
if (operator.prio_ <= operstack[operstack.length - 1].prio_) {
tokenstack.push(operstack.pop());
}
else {
break;
}
}
operstack.push(operator);
},
isNumber: function () {
var r = false;
var str = "";
while (this.pos < this.expression.length) {
var code = this.expression.charCodeAt(this.pos);
if ((code >= 48 && code <= 57) || code === 46) {
str += this.expression.charAt(this.pos);
this.pos++;
this.tokennumber = parseFloat(str);
r = true;
}
else {
break;
}
}
return r;
},
unescape: function (v, pos) {
var buffer = [];
var escaping = false;
var i;
for (i = 0; i < v.length; i++) {
var c = v.charAt(i);
if (escaping) {
switch (c) {
case "'":
buffer.push("'");
break;
case '\\':
buffer.push('\\');
break;
case '/':
buffer.push('/');
break;
case 'b':
buffer.push('\b');
break;
case 'f':
buffer.push('\f');
break;
case 'n':
buffer.push('\n');
break;
case 'r':
buffer.push('\r');
break;
case 't':
buffer.push('\t');
break;
case 'u':
var codePoint = parseInt(v.substring(i + 1, i + 5), 16);
buffer.push(String.fromCharCode(codePoint));
i += 4;
break;
default:
throw this.error_parsing(pos + i, "Illegal escape sequence: '\\" + c + "'");
}
escaping = false;
} else {
if (c == '\\') {
escaping = true;
} else {
buffer.push(c);
}
}
}
return buffer.join('');
},
isString: function () {
var r = false;
var str = "";
var startpos = this.pos;
var char0 = this.expression.charAt(this.pos);
if (this.pos < this.expression.length && (char0 == "'" || char0=='"' || char0=='`') ) {
this.pos++;
while (this.pos < this.expression.length) {
var char = this.expression.charAt(this.pos);
if (char != char0 || str.slice(-1) == "\\") {  //String must begin and end with the same type of quote
str += this.expression.charAt(this.pos);
this.pos++;
}
else {
this.pos++;
this.tokennumber = this.unescape(str, startpos);
r = true;
break;
}
}
}
return r;
},
isConst: function () {
var str;
for (var i in this.consts) {
if (true) {
var L = i.length;
str = this.expression.substr(this.pos, L);
if (i === str) {
this.tokennumber = this.consts[i];
this.pos += L;
return true;
}
}
}
return false;
},
isOperator: function () {
var opsyns = {
"+": ["+",0],
"-": ["-",0],
"&&": ["&&",-3],
"and": ["&&",-3],
"&amp;&amp;": ["&&",-3],
"||": ["||",-4],
"or": ["||",-4],
"*": ["*",1],
"/": ["/",2],
"%": ["%",2],
"^": ["^",3],
"?": ["?",-5],
":": [":",-6],
"if": ["+",-4],
"then": ["?",-5],
"else": [":",-6],
"[]": ["[]",4],
"===": ["==",-2],
"==": ["==",-2],
"=": ["==",-2],
"!==": ["!=",-2],
"!=": ["!=",-2],
"<>": ["!=",-2],
"<=": ["<=",-1],
"<": ["<",-1],
">=": [">=",-1],
">": [">",-1],
"&lt;=": ["<=",-1],
"&lt;": ["<",-1],
"&gt;=": [">=",-1],
"&gt;": [">",-1]
};
for (var key in opsyns) {
var found = true;
var equiv = opsyns[key][0];
var thischar = this.expression.charAt(this.pos);
for (var i=0; i<key.length; i+=1) {
found = found && this.expression.charAt(this.pos + i).toLowerCase() === key.charAt(i);
}
if (found) {
this.tokenindex = equiv;
this.tokenprio = opsyns[key][1];
this.pos += key.length;
return true;
};
}
return false;
},
isSign: function () {
var char = this.expression.charAt(this.pos - 1);
var prevchar = this.expression.charAt(this.pos - 2);
if (char === "-" || char === "+" || (prevchar+char) === "if") {
return true;
}
return false;
},
isPositiveSign: function () {
var char = this.expression.charAt(this.pos - 1);
if (char === "+") {
return true;
}
return false;
},
isNegativeSign: function () {
var char = this.expression.charAt(this.pos - 1);
if (char === "-") {
return true;
}
return false;
},
isLeftParen: function () {
var char = this.expression.charAt(this.pos);
if (char === "(") {
this.pos++;
this.tmpprio += 10;
return true;
}
return false;
},
isRightParen: function () {
var char = this.expression.charAt(this.pos);
if (char === ")") {
this.pos++;
this.tmpprio -= 10;
return true;
}
return false;
},
isComma: function () {
var char = this.expression.charAt(this.pos);
if (char === ",") {
this.pos++;
this.tokenprio = -1;
this.tokenindex = ",";
return true;
}
return false;
},
isWhite: function () {
var code = this.expression.charCodeAt(this.pos);
if (code === 32 || code === 9 || code === 10 || code === 13) {
this.pos++;
return true;
}
return false;
},
isOp1: function () {
var i, str = "";
for (i = this.pos; i < this.expression.length; i++) {
var c = this.expression.charAt(i);
if ( (c.toUpperCase() === c.toLowerCase()) && (c != '{') ) {
if (i === this.pos || c < '0' || c > '9') {
break;
}
}
str += c;
}
if (str.length > 0 && (str in this.ops1)) {
this.tokenindex = str;
this.tokenprio = 5;
this.pos += str.length;
return true;
}
return false;
},
isOp2: function () {
var i, str = "";
for (i = this.pos; i < this.expression.length; i++) {
var c = this.expression.charAt(i);
if (c.toUpperCase() === c.toLowerCase()) {
if (i === this.pos || c < '0' || c > '9') {
break;
}
}
str += c;
}
if (str.length > 0 && (str in this.ops2)) {
this.tokenindex = str;
this.tokenprio = 5;
this.pos += str.length;
return true;
}
return false;
},
isVar: function () {
var i, str = "";
for (i = this.pos; i < this.expression.length; i++) {
var c = this.expression.charAt(i);
if ((c.toUpperCase() === c.toLowerCase()) && (c !== '_') && (c !== '.')) {
if (i === this.pos || c < '0' || c > '9') {
break;
}
}
str += c;
}
if (str.length > 0) {
this.tokenindex = str;
this.tokenprio = 4;
this.pos += str.length;
return true;
}
return false;
},
isComment: function () {
var char = this.expression.charAt(this.pos - 1);
if (char === "/" && this.expression.charAt(this.pos) === "*") {
this.pos = this.expression.indexOf("*/", this.pos) + 2;
if (this.pos === 1) {
this.pos = this.expression.length;
}
return true;
}
return false;
}
};
Expression.prototype = {
simplify: function (values) {
values = values || {};
var nstack = [];
var newexpression = [];
var f, i, item, n1, n2;
var L = this.tokens.length;
for (i = 0; i < L; i++) {
item = this.tokens[i];
var type_ = item.type_;
if (type_ === TNUMBER) {
nstack.push(item);
}
else if (type_ === TVAR && (item.index_ in values)) {
item = new Token(TNUMBER, 0, 0, values[item.index_]);
nstack.push(item);
}
else if (type_ === TOP2 && nstack.length > 1) {
n2 = nstack.pop();
n1 = nstack.pop();
f = this.ops2[item.index_];
item = new Token(TNUMBER, 0, 0, f(n1.number_, n2.number_));
nstack.push(item);
}
else if (type_ === TOP1 && nstack.length > 0) {
n1 = nstack.pop();
f = this.ops1[item.index_];
item = new Token(TNUMBER, 0, 0, f(n1.number_));
nstack.push(item);
}
else {
while (nstack.length > 0) {
newexpression.push(nstack.shift());
}
newexpression.push(item);
}
}
while (nstack.length > 0) {
newexpression.push(nstack.shift());
}
return new Expression(newexpression, object(this.ops1), object(this.ops2), object(this.functions));
},
substitute: function (variable, expr) {
if (!(expr instanceof Expression)) {
expr = new Parser().parse(String(expr));
}
var newexpression = [];
var L = this.tokens.length;
var i, item;
for (i = 0; i < L; i++) {
item = this.tokens[i];
var type_ = item.type_;
if (type_ === TVAR && item.index_ === variable) {
for (var j = 0; j < expr.tokens.length; j++) {
var expritem = expr.tokens[j];
var replitem = new Token(expritem.type_, expritem.index_, expritem.prio_, expritem.number_);
newexpression.push(replitem);
}
}
else {
newexpression.push(item);
}
}
var ret = new Expression(newexpression, object(this.ops1), object(this.ops2), object(this.functions));
return ret;
},
evaluate: function (values) {
values = values || {};
var nstack = [];
var f, i, item, n1, n2;
var L = this.tokens.length;
for (i = 0; i < L; i++) {
item = this.tokens[i];
var type_ = item.type_;
if (type_ === TNUMBER) {
nstack.push(item.number_);
}
else if (type_ === TOP2) {
n2 = nstack.pop();
n1 = nstack.pop();
f = this.ops2[item.index_];
nstack.push(f(n1, n2));
}
else if (type_ === TVAR) {
if (item.index_ in values) {
nstack.push(values[item.index_]);
}
else if (item.index_ in this.functions) {
nstack.push(this.functions[item.index_]);
}
else {
throw new Error("undefined variable: " + item.index_);
}
}
else if (type_ === TOP1) {
n1 = nstack.pop();
f = this.ops1[item.index_];
nstack.push(f(n1));
}
else if (type_ === TFUNCALL) {
n1 = nstack.pop();
f = nstack.pop();
if (f.apply && f.call) {
if (Object.prototype.toString.call(n1) == "[object Array]") {
nstack.push(f.apply(undefined, n1));
}
else {
nstack.push(f.call(undefined, n1));
}
}
else {
throw new Error(f + " is not a function");
}
}
else {
throw new Error("invalid Expression");
}
}
if (nstack.length > 1) {
throw new Error("invalid Expression (parity)");
}
return nstack[0];
},
toString: function (toJS) {
var nstack = [];
var L = this.tokens.length;
var f, i, item, n1, n2;
for (i = 0; i < L; i++) {
item = this.tokens[i];
var type_ = item.type_;
if (type_ === TNUMBER) {
nstack.push(escapeValue(item.number_));
}
else if (type_ === TOP2) {
n2 = nstack.pop();
n1 = nstack.pop();
f = item.index_;
if (toJS && f == "^") {
nstack.push("Math.pow(" + n1 + "," + n2 + ")");
}
else {
nstack.push("(" + n1 + f + n2 + ")");
}
}
else if (type_ === TVAR) {
nstack.push(item.index_);
}
else if (type_ === TOP1) {
n1 = nstack.pop();
f = item.index_;
if (f === "-") {
nstack.push("(" + f + n1 + ")");
}
else {
nstack.push(f + "(" + n1 + ")");
}
}
else if (type_ === TFUNCALL) {
n1 = nstack.pop();
f = nstack.pop();
nstack.push(f + "(" + n1 + ")");
}
else {
throw new Error("invalid Expression");
}
}
if (nstack.length > 1) {
throw new Error("invalid Expression (parity)");
}
return nstack[0];
},
toLaTeX: function () {
var nstack = [];
var f, i, item, n1, n2;
var L = this.tokens.length;
for (i = 0; i < L; i++) {
item = this.tokens[i];
var type_ = item.type_;
if (type_ === TNUMBER) {
nstack.push(escapeValue(item.number_));
}
else if (type_ === TOP2) {
n2 = nstack.pop();
n1 = nstack.pop();
f = item.index_;
if (f == "^") {
nstack.push("{" + n1 + "}^{" + n2 + "}");
}
else if (f == "*") {
nstack.push(n1 + " \\times " + n2);
}
else if (f == "/") {
nstack.push("\\frac{" + n1 + "}{" + n2 + "}");
}
else {
nstack.push(n1 + " " + f + " " + n2);
}
}
else if (type_ === TVAR) {
nstack.push(item.index_);
}
else if (type_ === TOP1) {
n1 = nstack.pop();
f = item.index_;
if (f === "-") {
nstack.push(f + n1);
}
else {
nstack.push(f + ' ' + n1);
}
}
else if (type_ === TFUNCALL) {
n1 = nstack.pop();
f = nstack.pop();
nstack.push(f + ' ' + n1);
}
else {
throw new Error("invalid Expression");
}
}
if (nstack.length > 1) {
throw new Error("invalid Expression (parity)");
}
return nstack[0];
},
variables: function () {
var L = this.tokens.length;
var vars = [];
var i;
for (i = 0; i < L; i++) {
var item = this.tokens[i];
if (item.type_ === TVAR && (vars.indexOf(item.index_) == -1)) {
vars.push(item.index_);
}
}
return vars;
},
toJSFunction: function (param, variables) {
var f = new Function(param, "with(Parser.values) { return " + this.simplify(variables).toString(true) + "; }");
return f;
}
};
return Parser;
} ();

// FILE: Constraints.js (4a38f906) 3/7/2014 11:24:13 AM

SimParser.Constraint = function() {
SimParser.ParserItem.call(this);
var constraint;
var boundedConstraint;
var formulaName;
var name;
var varList;
var type;
this.getName = function () {
return name;
}
this.setName = function (newName) {
name = newName;
}
this.getFormulaName = function () {
return formulaName;
}
this.setFormulaName = function (newFormulaName) {
formulaName = newFormulaName;
}
this.getConstraint = function () {
return constraint;
}
this.setConstraint = function (newConstraint) {
constraint = newConstraint;
}
this.getType = function () {
return type;
}
this.setType = function (newType) {
type = newType;
}
this.isConstraintBindable = function (varsWB) {
var varNames = getVarNames();
r = true;
for (var i = 0; i < varNames.length; i++) {
if (varsWB.indexOf(varNames[i]) === -1) {
r = false;
break;
}
}
return r;
}
this.setAttributes = function (attr, node) {
if (attr.name !== undefined) {
this.setName(attr.name);
}
if (attr.formula !== undefined) {
this.setFormulaName(attr.formula);
}
if (attr.clause !== undefined) {
this.setConstraint(attr.clause);
}
if (attr.type !== undefined) {
this.setType(attr.type);
}
}
this.bindConstraint = function (vars) {
varList = [];
var c = constraint;
tokens = c.match(/\w+/g);
for (var i = 0; i < tokens.length; i++) {
for (var j = 0; j < vars.length; j++) {
if (tokens[i] === vars[j].getName()) {
varList.push(vars[j]);
break;
}
}
}
var strVar = new String();
for (var i = 0; i < varList.length; i++) {
strVar = strVar + varList[i].getName() + '=' + varList[i].getValue() + ';';
}
c = c.replace(/\bor\b/g, '||').replace(/\band\b/g, '&&');
boundedConstraint = strVar + '(' + c +')';
return boundedConstraint;
}
this.evaluate = function () {
if (boundedConstraint)
return eval(boundedConstraint);
}
this.getVarNames = function () {
var c = constraint;
var cNames = [];
var tokens = c.match(/\w+/g);
for (var i = 0; i < tokens.length; i++) {
if (tokens[i].toString().toLowerCase() === 'and' ||
tokens[i].toString().toLowerCase() === 'or' ||
parseFloat(tokens[i] !== NaN)) {
;
}
else {
cNames.push(tokens[i]);
}
}
return cNames;
}
this.setEname('Constraint');
}
SimParser.Constraint.prototype = new SimParser.ParserItem();
SimParser.Constraint.prototype.constructor = SimParser.Constraint;

// FILE: ConstraintManager.js (0b955c71) 3/7/2014 11:24:13 AM

SimParser.ConstraintManager = function() {
var constraints = [];
var that = this;
var subs = { '&lt;': '<', '&gt;': '>'};
this.getConstraints = function () {
return constraints;
};
this.setConstraints = function (root) {
constraints = [];
var r = root.getElementsByTagName('constraints').item(0);
if (r !== null && r.hasChildNodes()) {
for (var i = 0; i < r.childNodes.length; i++) {
var attr = {};
if (r.childNodes[i].nodeName[0] === '#') {
continue;
}
for (var j = 0; j < r.childNodes[i].attributes.length; j++) {
attr[r.childNodes[i].attributes[j].name] = r.childNodes[i].attributes[j].nodeValue;
}
c = new SimParser.Constraint();
c.setAttributes(attr, r);
constraints.push(c);
}
}
};
this.getConstraintNames = function (funcName, filter) {
var cNames = [];
if (typeof (filter) === 'undefined') {
filter = 'pre-condition';
}
for (var i = 0; i < constraints.length; i++) {
if (constraints[i].getFormulaName() === funcName && constraints[i].getType() === filter) {
cNames.push(constraints[i].getName());
}
}
return cNames;
};
this.getConstraintByName = function (cName, filter) {
if (typeof (filter) === 'undefined') {
filter = 'pre-condition';
}
for (var i = 0; i < constraints.length; i++) {
if (constraints[i].getName() === cName && constraints[i].getType() === filter) {
return constraints[i];
}
}
};
this.evalPreConstraints = function (fName, varValueList) {
var cEval = true;
if (typeof (fName) === 'undefined') {
fName = '';
}
var cn = that.getConstraintNames(fName, 'pre-condition');
for (var j = 0; j < cn.length; j++) {
var cnt = that.getConstraintByName(cn[j]);
var r = evalConstraint(cnt.getConstraint(), varValueList);
if (typeof (r) !== 'boolean') {
cEval = false;
}
else {
cEval = cEval && r;
}
if (!cEval) {
break;
}
}
return cEval;
};
this.evalPostConstraints = function (fName, varValueList, funcValueList) {
var cEval = true;
if (typeof (fName) === 'undefined') {
fName = '';
}
var varList = [];
for (var i = 0; i < varValueList.length; i++) {
varList.push(varValueList[i]);
}
for (var i = 0; i < funcValueList.length; i++) {
if (typeof (funcValueList[i]) !== 'undefined') {
varList.push(funcValueList[i]);
}
}
var cn = that.getConstraintNames(fName, 'post-condition');
for (var j = 0; j < cn.length; j++) {
var cnt = that.getConstraintByName(cn[j], 'post-condition');
var r = evalConstraint(cnt.getConstraint(), varList);
if (typeof (r) !== 'boolean') {
cEval = false;
}
else {
cEval = cEval && r;
}
if (!cEval) {
break;
}
}
return cEval;
};
var evalConstraint = function (constraint, vars) {
var result = null;
var varList = [];
var c = constraint;
var variables = vars;
var nonVariableTokens = [];
var tokens = c.match(/\w+/g);
for (var i = 0; i < tokens.length; i++) {
var tokenIsVariable = false;
for (var j = 0; j < variables.length; j++) {
if (tokens[i] === variables[j].name) {
varList.push(variables[j]);
tokenIsVariable = true;
break;
}
}
if ((isNaN(tokens[i])) && (tokens[i] !== 'and') && (tokens[i] !== 'or') && (tokenIsVariable == false) && (!arrayContains(nonVariableTokens, tokens[i]))) {
var pattern = new RegExp(tokens[i], 'g');
var newPatten = "'" + tokens[i] + "'";
c = c.replace(pattern, newPatten);
nonVariableTokens.push(tokens[i]);
}
}
var strVar = new String();
for (var i = 0; i < varList.length; i++) {
if (varList[i].value[0] != null) {
if (isNaN(varList[i].value[0])) {
strVar = strVar + varList[i].name + "='" + varList[i].value + "';";
}
else {
strVar = strVar + varList[i].name + '=' + varList[i].value + ';';
}
}
else if (varList[i].value != null) {
if (isNaN(varList[i].value)) {
strVar = strVar + varList[i].name + "='" + varList[i].value + "';";
}
else {
strVar = strVar + varList[i].name + '=' + varList[i].value + ';';
}
}
}
c = c.replace(/\bor\b/g, '||').replace(/\band\b/g, '&&');
try {
result = eval(strVar + '(' + c + ')');
}
catch (err) {
result = err.message;
}
return result;
};
var arrayContains = function(arr, obj) {
var i = arr.length;
while (i--) {
if (arr[i] === obj) {
return true;
}
}
return false;
};
};

// FILE: Permutations.js (f3e6b91c) 3/7/2014 11:24:14 AM

SimParser.Permutation = function(vars) {
var n = vars.length;
var pia = [];
var piv = [];
var rs = [];
var init = function () {
rs = [];
for (var i = 0; i < n; i++) {
pia[i] = 0;
piv[i] = vars[i].length - 1;
}
}
var next = function () {
for (var i = n - 1; i >= 0; i--) {
if (pia[i] < piv[i]) {
pia[i]++;
return true;
}
else {
var j = i - 1;
while ((j >= 0) && (pia[j] === piv[j])) j--;
if (j < 0) {
return false
} else {
pia[j]++;
for (var k = j + 1; k <= i; k++) pia[k] = 0;
return true;
}
}
}
}
var currentPermutation = function () {
var cp = [];
for (i = 0; i < n; i++) {
cp.push(vars[i][pia[i]]);
}
return cp;
}
var run = function () {
init();
do {
rs.push(currentPermutation());
}
while (next());
return rs;
}
return run();
};

// FILE: Functions.js (f72ba796) 3/7/2014 11:24:13 AM

SimParser.Function = function() {
SimParser.ParserItem.call(this);
var name;
var nameProxy;
var equation='';
var varList = [];
var value;
var context;
var type = 'regualar';
var variable;
var parser = new Parser();
var lookup;
var code = '';
var func;
var keyName = undefined;
var filter = '';
var scoreable = 'yes';
var orderedEvaluation = false;
var depLevel = -1;
var compOrder = -1;
this.bindVariables = function (vars) {
var vList = [];
var p = parser.parse(equation);
for (var i = 0; i < p.tokens.length; i++) {
if (p.tokens[i].type_ === 3) {
for (var j = 0; j < vars.length; j++) {
var v = undefined;
if (vars[j].getName() === p.tokens[i].index_) {
v = vars[j];
break;
}
}
if (v) {
vList.push(v);
}
}
}
this.setVarList(vList);
}
this.evaluateEquation = function () {
var bindList= {};
for (var i = 0; i < varList.length; i++) {
bindList[varList[i].getName()] = varList[i].getValue();
}
return parser.parse(this.getEquation()).evaluate(bindList);
}
this.testAnswer = function(testValue) {
return (value === testValue);
}
this.getValue = function () {
return value;
}
this.setValue = function (newValue) {
value = newValue;
return this;
}
this.getEquation = function () {
return equation;
}
this.setEquation = function (newEquation) {
equation = newEquation;
return this;
}
this.getVarList = function () {
return varList;
}
this.setVarList = function (vars) {
varList = vars;
return this;
}
this.setVarList = function (newVarList) {
varList = newVarList;
return this;
}
this.getName = function () {
return name;
}
this.setName = function (newName) {
name = newName;
return this;
}
this.getContext = function () {
return context;
}
this.setContext = function (newContext) {
context = newContext;
return this;
}
this.getDepLevel = function () {
return depLevel;
}
this.setDepLevel = function (level) {
depLevel = level;
}
this.getCompOrder = function () {
return compOrder;
}
this.setCompOrder = function (newCompOrder) {
compOrder = newCompOrder;
}
this.getVariable = function () {
return variable;
}
this.setVariable = function (newVariable) {
variable = newVariable;
}
this.getCode = function () {
return code;
}
this.setCode = function (newCode) {
code = newCode;
}
this.getScoreable = function () {
return scoreable;
}
this.setScoreable = function (newScorable) {
if (newScorable !== 'no') {
newScorable='yes'
}
scoreable = newScorable;
}
this.getOrderedEvaluation = function () {
return orderedEvaluation;
}
this.setOrderedEvaluation = function (ordered) {
if (ordered === 'yes') {
orderedEvaluation = true;
}
else {
orderedEvaluation = false;
}
}
this.getFunction = function () {
if (!func) {
var vNames = this.getVarNames();
var params = vNames.join(',');
func = new Function(params, 'return ' + this.getCode());
}
return func;
}
this.getVarNames = function () {
var fNames = [];
var p = parser.parse(equation);
for (var i = 0; i < p.tokens.length; i++) {
if (p.tokens[i].type_ === 3 && fNames.indexOf(p.tokens[i].index_) === -1 && p.tokens[i].index_ !== name) {
if ((p.tokens[i].index_.length < 5) || (p.tokens[i].index_.substring(0,5).toLowerCase() != 'math.')) {
fNames.push(p.tokens[i].index_);
}
}
}
return fNames;
}
this.getType = function () {
return type;
}
this.setType = function (t) {
type = t;
}
this.getKeyName = function () {
return keyName;
}
this.setKeyName = function (k) {
keyName = k;
}
this.getLookupValue = function (v) {
if (!lookup) {
lookup = {};
lookup = eval('(' + equation + ')');
}
return lookup[v];
}
this.getFilter = function () {
return filter;
}
this.setFilter = function (f) {
filter = f;
}
this.getProxyName = function () {
return nameProxy;
}
this.setProxyName = function (p) {
nameProxy = p;
}
this.setAttributes = function (attr, node) {
if (attr.type !== undefined) this.setType(attr.type);
if (attr.nameProxy !== undefined) this.setProxyName(attr.nameProxy);
if (attr.name !== undefined) this.setName(attr.name);
if (attr.formula !== undefined) this.setEquation(attr.formula);
if (attr.context !== undefined) this.setContext(attr.context);
if (attr.value !== undefined) this.setValue(attr.value);
if (attr.variable !== undefined) this.setVariable(attr.variable);
if (attr.code !== undefined) {
if (this.getType() === 'javascript') {
this.setEquation(attr.code);
}
this.setCode(attr.code);
}
if (attr.keyName !== undefined) this.setKeyName(attr.keyName);
if (attr.filter !== undefined) this.setFilter(attr.filter);
this.setScoreable(attr.scoreable);
if (attr.orderedEvaluation !== undefined) this.setOrderedEvaluation(attr.orderedEvaluation);
}
this.setEname('Equation');
};
SimParser.Function.prototype = new SimParser.ParserItem();
SimParser.Function.prototype.constructor = SimParser.Function;

// FILE: FunctionManager.js (056fcbc2) 3/7/2014 11:24:13 AM

SimParser.FunctionManager = function (eUnit) {
var functions = [];
var lfunctions = [];
var jfunctions = [];
var that = this;
var maxDepLevel = 0;
var depTreeExists = false;
var currentOrder = 0;
var varCurrent = [];
var evUnit = eUnit;
var scoringTable = evUnit.getSimInstance().getScoringTable();
var cMng = evUnit.getConstraintManager();
function mergeArrays(arrayOne, arrayTwo) {
var result = [];
for (var i = 0; i < arrayOne.length; i++) {
result.push(arrayOne[i]);
}
for (var i = 0; i < arrayTwo.length; i++) {
result.push(arrayTwo[i]);
}
return result;
}
function compareArrays(arrayOne, arrayTwo) {
for (var i = 0; i < arrayOne.length; i++) {
if (arrayTwo.indexOf(arrayOne[i]) === -1) {
return false;
}
}
return true;
}
this.getMaxDepLevel = function () {
return maxDepLevel;
}
this.setMaxDepLevel = function (level) {
maxDepLevel = level;
}
this.getFunctions = function () {
return functions;
}
this.getLFunctions = function () {
return lfunctions;
}
this.getJFunctions = function () {
return jfunctions;
}
this.setFunctions = function (root) {
functions = [];
var r = root.getElementsByTagName('functions').item(0);
if (r !== null && r.hasChildNodes()) {
for (var i = 0; i < r.childNodes.length; i++) {
var attr = {};
if (r.childNodes[i].nodeName[0] === '#') {
continue;
}
for (var j = 0; j < r.childNodes[i].attributes.length; j++) {
attr[r.childNodes[i].attributes[j].name] = r.childNodes[i].attributes[j].nodeValue;
}
var newFunction = new SimParser.Function();
newFunction.setAttributes(attr, r);
if (newFunction.getScoreable() !== 'no') {
scoringTable.addElement(newFunction.getName(), 'output');
}
if (attr.type === 'lookup') {
lfunctions.push(newFunction);
}
else {
functions.push(newFunction);
}
}
}
}
this.getFunctionNames = function () {
var fNames = [];
for (var i = 0; i < functions.length; i++) {
fNames.push(functions[i].getName());
}
return fNames;
}
this.getFunctionByName = function (funcName) {
for (var i = 0; i < functions.length; i++) {
if (functions[i].getName() === funcName) {
return functions[i];
}
}
for (var i = 0; i < lfunctions.length; i++) {
if (lfunctions[i].getName() === funcName) {
return lfunctions[i];
}
}
for (var i = 0; i < jfunctions.length; i++) {
if (jfunctions[i].getName() === funcName) {
return jfunctions[i];
}
}
}
this.getLFunctionByName = function (funcName) {
for (var i = 0; i < functions.length; i++) {
if (lfunctions[i].getName() === funcName) {
return lfunctions[i];
}
}
}
this.evaluateOrderedFunctions = function () {
var evaluationSucceed = true;
var iCompOrder = 0;
var vMng = evUnit.getVariableManager();
varCurrent = vMng.getVariableNames(['binding', 'constant', 'implicit', 'persistent', 'cumulative']);
for (var i=0; i<functions.length; i++) {
if (functions[i].getOrderedEvaluation() == true) {
if (this.canComputeFunction(functions[i], varCurrent)) {
functions[i].setCompOrder(iCompOrder);
iCompOrder++;
var varNext = [];
varNext.push(functions[i].getValue());
varCurrent = mergeArrays(varCurrent, varNext);
}
else {
EU.debug('Function evaluation cannot work because ordered function ' + functions[i].getValue() + ' cannot be evaluated');
evaluationSucceed = false;
break;
}
}
}
if (evaluationSucceed == true) {
currentOrder = iCompOrder;
}
}
this.buildFunctionDependancyTree = function () {
this.evaluateOrderedFunctions();
if (depTreeExists) {
return;
}
var orderedFuncList = [];
var varNext = [];
var iCompOrder = currentOrder;
var iDepLevel = 0;
var bEnd = false;
var iTotalAmount = functions.length;
while (iCompOrder < iTotalAmount && !bEnd) {
var oldCompOrder = iCompOrder;
for (var k = 0; k < functions.length; k++) {
if ((functions[k].getOrderedEvaluation() == false) && (functions[k].getDepLevel() === -1) && (this.canComputeFunction(functions[k], varCurrent))) {
functions[k].setDepLevel(iDepLevel);
functions[k].setCompOrder(iCompOrder);
orderedFuncList.push(functions[k]);
iCompOrder++;
varNext.push(functions[k].getValue());
}
}
iDepLevel++;
varCurrent = mergeArrays(varCurrent, varNext);
bEnd = !!oldCompOrder == iCompOrder;
}
if (iCompOrder === iTotalAmount) {
depTreeExists = true;
}
else {
EU.debug('Function evaluation cannot work because of broken dependancy tree.');
}
maxDepLevel = iDepLevel - 1;
}
this.buildFuncVarMap = function () {
var map = {};
for (var i = 0; i < functions.length; i++) {
map[functions[i].name] = functions[i].value;
}
return map;
}
this.canComputeFunction = function (func, values) {
var fvars = func.getVarNames();
return compareArrays(fvars, values);
}
this.getFunctionByCompOrder = function (order) {
for (var i = 0; i < functions.length; i++) {
if (functions[i].getCompOrder() === order) {
return functions[i];
}
}
}
this.bindVars = function () {
for (var i = 0; i < functions.length; i++) {
functions[i].bindVariables(variables);
}
}
this.evalFuncs = function () {
var res = [];
for (var i = 0; i < functions.length; i++) {
res.push(functions[i].evaluateEquation());
}
}
this.evaluateLFunctions = function (varValueList, varNames, varValues) {
var r = {};
for (var i = 0; i < lfunctions.length; i++) {
if (lfunctions[i].getScoreable() === 'yes') {
var varName = lfunctions[i].getName();
var fName = lfunctions[i].getKeyName();
if ((varName) && (cMng.evalPreConstraints(varName, varValueList))) {
var ind = varNames.indexOf(fName);
if (ind >= 0) {
var val = varValues[ind];
r[varName] = lfunctions[i].getLookupValue(val);
scoringTable.setValue(varName, null, r[varName]);
}
}
}
}
return r;
}
var evalFormula = function (formula, variables) {
var parser = new Parser();
try {
var result = parser.parse(formula).evaluate(variables);
}
catch (e) {
result = e.message;
}
return result;
}
this.evaluateJFunctions = function (varNames, varValues) {
var r = {};
var evUtils = new SimParser.Utils(evUnit);
var v = evUtils.getVarObject(varNames, varValues);
for (var i = 0; i < jfunctions.length; i++) {
if (jfunctions[i].getScoreable() === 'yes') {
var varName = jfunctions[i].getName();
if (varName) {
var sirF = jfunctions[i];
var jF = sirF.getFunction();
v[varName] = jF;
r[varName] = evalFormula(sirF.getEquation(), v);
scoringTable.setValue(varName, null, r[varName]);
}
}
}
return r;
}
this.getFunctionIndexByName = function (name, type) {
var fn = this.getFunctions();
if (type === 'lookup') var fn = this.getLFunctions();
for (var i = 0; i < fn.length; i++) {
if (fn[i].getName() === name) {
return i;
}
}
}
this.createFunction = function (name, type, formula, vName) {
var f = new SimParser.Function();
var attr = { 'name': name, 'type': type, 'formula': formula, 'variable': vName };
f.setAttributes(attr);
if (attr.type === 'lookup') {
lfunctions.push(f);
}
else {
functions.push(f);
}
}
this.renameEquation = function (oldName, newName) {
var f = this.getFunctionByName(oldName);
if (f) {
f.setName(newName);
}
}
this.updateFunction = function (name, type, formula, vName) {
var f = this.getFunctionNames(name);
if (!f) f = this.getLFunctionNames(name);
if (f) {
var attr = { 'name': name, 'type': type, 'formula': formula, 'variable': vName };
f.setAttributes(attr);
}
}
this.deleteFunction = function (name) {
var i = this.getFunctionIndexByName(name);
if (i) {
var fn = this.getFunctions();
fn.splice(i, 1);
}
else {
i = this.getFunctionIndexByName(name, 'lookup');
if (i) {
var fn = getLFunctions();
fn.splice(i, 1);
}
}
}
};

// FILE: FilterEvaluation.js (63af4f4c) 3/7/2014 11:24:13 AM

SimParser.FilterEvaluation = function (eUnit) {
var filters = 'max, min, average';
var rs;
var impVar = [];
var evUnit = eUnit;
var vMng = evUnit.getVariableManager();
var fMng = evUnit.getFunctionManager();
function getValues(fName) {
var r = [];
for (var i = 0; i < rs.length; i++) {
r.push(rs[i].functions[fName]);
}
return r;
}
function getVarValues(vName) {
var r = [];
for (var i = 0; i < rs.length; i++) {
r.push(rs[i].variables[vName]);
}
return r;
}
function max(fName) {
var v = getValues(fName);
var f = false;
var vr = impVar;
var maxValue = - Infinity;
var maxIndex = undefined;
for (var i=0; i<v.length; i++) {
if (v[i] && (v[i] > maxValue)) {
maxValue = v[i];
maxIndex = vr[i];
f = true;
}
}
return f ? maxValue : undefined;
}
function min(fName) {
var v = getValues(fName);
var vr = impVar;
var minValue = Infinity;
var minIndex = undefined;
var f = false;
for (var i=0; i<v.length; i++) {
if (v[i] && (v[i] < minValue)) {
minValue = v[i];
minIndex = vr[i];
f = true;
}
}
return f ? minValue : undefined;
}
function average(fName) {
var v = getValues(fName);
var totValue = 0;
var avValue = 0.0;
var f = false;
for (var i=0; i<v.length; i++) {
totValue = totValue + v[i];
}
if (v.length > 0) {
avValue = totValue / v.length;
f = true;
}
return f ? avValue : undefined;
}
this.run = function (result) {
rs = result;
var fList = fMng.getFunctionNames();
var impNames = vMng.getVariableNames(['implicit']);
if (impNames.length !== 1) {
return rs;
}
impVar = getVarValues(impNames[0]);
for (var i = 0; i < fList.length; i++) {
var r = {};
var sirF = fMng.getFunctionByName(fList[i]);
var filter = sirF.getFilter();
if (filter !== '') {
var fValues = getValues(fList[i]);
var aFilter = filter.split(',');
for (var j=0; j<aFilter.length; j++){
switch (aFilter[j]) {
case 'max':
r = max(fList[i]);
break;
case 'min':
r = min(fList[i]);
break;
case 'average':
r = average(fList[i]);
break;
}
}
for (var k=0; k<rs.length;k++) {
delete rs[k].functions[fList[i]];
var allgone = true;
if (fList.length - 1 === i || k > 0) {
for (var p in rs[k].functions) {
if (rs[k].functions.hasOwnProperty(p)) {
allgone = false;
break;
}
}
if (allgone) {
delete rs[k].functions;
delete rs[k].variables;
rs[k] = undefined;
}
}
}
rs[0].functions[fList[i]] = r;
}
}
var rs1 = [];
for (var i = 0; i < rs.length; i++) {
if (rs[i] !== undefined) {
rs1.push(rs[i]);
}
}
return rs1;
}
}

// FILE: Ranges.js (20308803) 3/7/2014 11:24:14 AM

SimParser.Range = function() {
SimParser.ParserItem.call(this);
var name;
var type;
this.getName = function () {
return name;
}
this.setName = function (newName) {
name = newName;
}
this.getType = function () {
return type;
}
this.setType = function (newType) {
type = newType;
}
SimParser.Range.prototype.setAttributes = function (attr) {
if (attr.name !== undefined) {
this.setName(attr.name);
}
if (attr.type !== undefined) {
this.setType(attr.type);
}
}
}
SimParser.Range.prototype = new SimParser.ParserItem();
SimParser.Range.prototype.constructor = SimParser.Range;

// FILE: RangeManager.js (ed4ffc7c) 3/7/2014 11:24:14 AM

SimParser.RangeManager = function() {
var ranges = [];
var that = this;
this.getRanges = function () {
return ranges;
}
this.setRanges = function (root) {
ranges = [];
var r = root.getElementsByTagName('ranges').item(0);
if (r !== null && r.hasChildNodes()) {
for (var i = 0; i < r.childNodes.length; i++) {
var attr = {};
if (r.childNodes[i].nodeName[0] === '#') {
continue;
}
for (var j = 0; j < r.childNodes[i].attributes.length; j++) {
attr[r.childNodes[i].attributes[j].name] = r.childNodes[i].attributes[j].nodeValue;
}
switch (attr.type) {
case 'range':
var rn = new SimParser.MinMaxRange();
break;
case 'iterator':
var rn = new SimParser.IterationRange();
break;
}
rn.setAttributes(attr, r);
ranges.push(rn);
}
}
}
this.getRangeByName = function (name) {
for (var i = 0; i < ranges.length; i++) {
if (ranges[i].getName() === name) {
return ranges[i];
}
}
}
}

// FILE: MinMaxRange.js (1b373b55) 3/7/2014 11:24:14 AM

SimParser.MinMaxRange = function() {
SimParser.Range.call(this);
var minValue = new Number();
var maxValue = new Number();
var increment = new Number();
var values;
var currentValue = new Number();
this.runNext = function (callback, params) {
if (currentValue <= maxValue) {
callback(params);
currentValue++;
}
}
this.runAll = function (callback, params) {
for (var i = minValue; i <= maxValue; i += increment) {
callback(params);
currentValue = i;
}
}
this.IsValueinRange = function (val) {
return (value >= minValue && value <= maxValue);
}
this.reset = function () {
currentValue = minValue;
}
this.getValues = function () {
return values;
}
this.setValues = function () {
values = [];
if (typeof (minValue) === 'undefined' || typeof (maxValue) === 'undefined' || typeof (incrementValue) === 'undefined') {
EU.debug('minValue/maxValue/increment is not defined in ' + name);
}
var curValue = minValue;
while (curValue <= maxValue) {
values.push(curValue);
curValue = curValue + increment;
}
}
SimParser.MinMaxRange.prototype.setAttributes = function (attr) {
SimParser.Range.prototype.setAttributes.call(this, attr);
if (attr.minValue !== undefined) {
minValue = parseInt(attr.minValue);
}
else {
minValue = 1;
}
if (attr.maxValue !== undefined) {
maxValue = parseInt(attr.maxValue);
}
else {
maxValue = 10;
}
if (attr.increment !== undefined)  {
increment = parseFloat(attr.increment);
}
else {
increment = 1;
}
this.setValues();
}
}
SimParser.MinMaxRange.prototype = new SimParser.Range();
SimParser.MinMaxRange.prototype.constructor = SimParser.MinMaxRange;

// FILE: IterationRange.js (a59630b6) 3/7/2014 11:24:13 AM

SimParser.IterationRange = function() {
SimParser.Range.call(this);
var startValue = new Number();
var numIterations = new Number();
var currentValue = new Number();
var values;
this.runNext = function (callback, params) {
if (currentValue <= numIterations) {
callback(params);
currentValue++;
}
}
this.runAll = function (callback, params) {
for (var i = 1; i <= numIterations; i++) {
callback(params);
currentValue = i;
}
}
this.reset = function () {
currentValue = 1;
}
this.getValues = function () {
return values;
}
this.getStartValue = function () {
return startValue;
}
this.setStartValue = function (newStartValue) {
startValue = newStartValue;
}
this.setValues = function () {
values = [];
if (typeof (startValue) === 'undefined' || typeof (numIterations) === 'undefined') {
EU.debug('startValue or numIterations is not defined in ' + name);
}
for (var i = startValue; i < numIterations; i++) {
values.push(i);
}
}
this.getNumIterations = function () {
return numIterations;
}
this.setNumIterations = function (iterations) {
numIterations = iterations;
}
SimParser.IterationRange.prototype.setAttributes = function (attr) {
SimParser.Range.prototype.setAttributes.call(this, attr);
if (attr.numIteration !== undefined) {
numIterations = parseInt(attr.numIteration);
}
else {
numIterations = 10;
}
if (attr.startValue !== undefined) {
startValue = parseInt(attr.startValue);
}
else {
startValue = 1;
}
if (attr.type !== undefined) {
this.type = attr.type;
}
this.setValues();
}
}
SimParser.IterationRange.prototype = new SimParser.Range();
SimParser.IterationRange.prototype.constructor = SimParser.IterationRange;

// FILE: Variables.js (968c17ce) 3/7/2014 11:24:14 AM

SimParser.Variable = function() {
SimParser.ParserItem.call(this);
var name;
var type;
var objectName;
var value = new Number();
this.getName = function () {
return name;
}
this.setName = function (n) {
name = n;
return this;
}
this.getType = function () {
return type;
}
this.setType = function (t) {
type = t;
return this;
}
this.getValue = function () {
return value;
}
this.setValue = function (v) {
value = v;
return this;
}
this.getObjectName = function () {
return objectName;
}
this.setObjectName = function (o) {
objectName = o;
return this;
}
SimParser.Variable.prototype.setAttributes = function (attr, node) {
if (attr.name !== undefined) {
this.setName(attr.name);
}
if (attr.type !== undefined) {
this.setType(attr.type);
}
if (attr.value !== undefined) {
this.setValue(attr.value);
}
if (attr.object !== undefined) {
this.setObjectName(attr.object);
}
}
this.setEname('BaseVariable');
}
SimParser.Variable.prototype = new SimParser.ParserItem();
SimParser.Variable.prototype.constructor = SimParser.Variable;

// FILE: VariableManager.js (a90121a7) 3/7/2014 11:24:14 AM

SimParser.VariableManager = function (eUnit) {
var variables = [];
var evUnit = eUnit;
var that = this;
this.getVariables = function () {
return variables;
}
this.setVariables = function (root) {
variables = [];
r = root.getElementsByTagName('variables').item(0);
if (r !== null && r.hasChildNodes()) {
for (var i = 0; i < r.childNodes.length; i++) {
if (r.childNodes[i].nodeName[0] === '#') {
continue;
}
var attr = {};
var rc = r.childNodes[i];
for (var j = 0; j < r.childNodes[i].attributes.length; j++) {
attr[r.childNodes[i].attributes[j].name] = r.childNodes[i].attributes[j].nodeValue;
}
if (rc.hasChildNodes()) {
var vals = [];
for (var k = 0; k < rc.childNodes.length; k++) {
if (rc.childNodes[k].nodeName[0] === '#') {
continue;
}
vals.push(rc.childNodes[k].textContent);
}
attr.allValues = vals;
}
var vr;
switch (attr.type) {
case 'binding':
vr = new SimParser.BindableVariable();
break;
case 'constant':
vr = new SimParser.ConstantVariable();
break;
case 'implicit':
vr = new SimParser.ImplicitVariable();
var rMng = evUnit.getRangeManager();
attr.sirRange = rMng.getRangeByName(attr.range);
break;
case 'result':
vr = new SimParser.ResultVariable();
break;
case 'lookup':
vr = new SimParser.LookupVariable();
break;
case 'cumulative':
vr = new SimParser.CumulativeVariable();
break;
case 'persistent':
vr = new SimParser.PersistentVariable();
break;
default:
vr = new SimParser.Variable();
break;
}
vr.setAttributes(attr, r);
variables.push(vr);
}
}
}
this.getConstants = function () {
var cNames = [];
var vars = that.getVariables();
for (var i = 0; i < vars.length; i++) {
if (vars[i].type === 'constant') {
cNames.push({ name: vars[i].name, value: [vars[i].value] });
}
}
return cNames;
}
this.getVariableByName = function (vName) {
var v = undefined;
for (var i = 0; i < variables.length; i++) {
if (variables[i].getName() === vName) {
return variables[i];
}
}
}
this.getVarIndexByName = function (vName) {
for (var i = 0; i < variables.length; i++) {
if (variables[i].getName() === vName) {
return i;
}
}
}
this.getVariableNames = function (filter) {
var vNames = [];
for (var i = 0; i < variables.length; i++) {
if ((filter === undefined) || (filter.indexOf(variables[i].getType()) >= 0)) {
vNames.push(variables[i].getName());
}
}
return vNames;
}
this.getVariableByObjectName = function (name) {
for (var i = 0; i < variables.length; i++) {
if (variables[i].getObjectName() === name) {
return variables[i];
}
}
}
this.isVarBindable = function (vName) {
var v = that.getVariableByName(vName);
return (v === undefined) ? false : v.type === 'binding';
}
this.isVarConstant = function (vName) {
var v = that.getVariableByName(vName);
return (v === undefined) ? false : v.type === 'constant';
}
this.isVarImplicit = function (vName) {
var v = that.getVariableByName(vName);
return (v === undefined) ? false : v.type === 'implicit';
}
this.isVarResult = function (vName) {
var v = that.getVariableByName(vName);
return (v === undefined) ? false : v.type === 'result';
}
this.getConstantNames = function () {
var cNames = [];
var vars = that.getVariables();
for (var i = 0; i < vars.length; i++) {
if (vars[i].getType() === 'constant') {
cNames.push(vars[i].getName());
}
}
return cNames;
}
this.getConstants = function () {
var cNames = [];
var vars = that.getVariables();
for (var i = 0; i < vars.length; i++) {
if (vars[i].getType() === 'constant') {
cNames.push({ name: vars[i].getName(), value: [vars[i].getValue()] });
}
}
return cNames;
}
function createVariable (name, value, type) {
var vr = undefined;
var attr = { 'type': type, 'name': name, 'value': value };
switch (attr.type) {
case 'binding':
vr = new SimParser.BindableVariable();
break;
case 'constant':
vr = new SimParser.ConstantVariable();
break;
case 'implicit':
vr = new SimParser.ImplicitVariable();
attr.sirRange = SirRangeManager.getRangeByName(attr.range);
break;
case 'result':
vr = new SimParser.ResultVariable();
break;
case 'lookup':
vr = new SimParser.LookupVariable();
break;
}
if (vr) {
vr.setAttributes(attr);
variables.push(vr);
return true;
}
else {
return false;
}
}
this.saveVariable = function (name, value, type) {
var v = this.getVariableByName(name);
if (v) {
v.setValue(value);
v.setName(name)
}
else {
createVariable(name, value, type);
}
}
this.renameVariable = function (oldName, newName) {
var v = this.getVariableByName(oldName);
if (v) {
v.setName(newName);
}
}
this.updateVariable = function (name, value) {
var v = this.getVariableByName(name);
if (v) {
var attr = { 'name': name, 'value': value };
v.setAttributes(attr);
}
}
this.deleteVariable = function (name) {
var i = this.getVarIndexByName(name);
if (i) {
functions.splice(i, 1);
}
}
};

// FILE: PersistentVariable.js (a729e6fa) 3/7/2014 11:24:14 AM

SimParser.PersistentVariable = function () {
SimParser.Variable.call(this);
var store;
this.getStore = function () {
return store;
}
this.setStore = function (s) {
store = s;
return this;
}
SimParser.PersistentVariable.prototype.setAttributes = function (attr, node) {
SimParser.Variable.prototype.setAttributes.call(this, attr, node);
if (attr.store !== undefined) {
this.setStore(attr.store);
}
if (attr.comOp !== undefined) {
this.setStore(attr.cumOP);
}
}
this.setEname('PersistentVariable');
};
SimParser.PersistentVariable.prototype = new SimParser.PersistentVariable();
SimParser.PersistentVariable.prototype.constructor = SimParser.Variable;

// FILE: ImplicitVariable.js (ff8ae7b2) 3/7/2014 11:24:13 AM

SimParser.ImplicitVariable = function () {
SimParser.Variable.call(this);
var allValues;
var range;
this.getValues = function () {
if (allValues) {
return allValues;
}
else {
if (range) {
allValues = range.getValues();
}
else {
allValues = [];
}
return allValues;
}
}
this.bindRange = function (newRange) {
range = newRange;
}
SimParser.ImplicitVariable.prototype.setAttributes = function (attr, node) {
SimParser.Variable.prototype.setAttributes.call(this, attr, node);
if (attr.range !== undefined) {
this.bindRange(attr.sirRange);
}
if (attr.defaultValue !== undefined) {
this.setValue(attr.defaultValue);
}
}
this.setEname('ImplicitVariable');
};
SimParser.ImplicitVariable.prototype = new SimParser.ImplicitVariable();
SimParser.ImplicitVariable.prototype.constructor = SimParser.Variable;

// FILE: LookupVariable.js (577cbf2a) 3/7/2014 11:24:14 AM

SimParser.LookupVariable = function () {
SimParser.Variable.call(this);
this.getAllValues = function () {
return [value];
}
SimParser.LookupVariable.prototype.setAttributes = function (attr, node) {
SimParser.Variable.prototype.setAttributes.call(this, attr, node);
if (attr.value !== undefined) {
this.setValue(attr.value);
}
if (attr.defaultValue !== undefined) {
this.setValue(attr.defaultValue);
}
}
this.setEname('LookupVariable');
};
SimParser.LookupVariable.prototype = new SimParser.LookupVariable();
SimParser.LookupVariable.prototype.constructor = SimParser.Variable;

// FILE: BindableVariable.js (3889f902) 3/7/2014 11:24:13 AM

SimParser.BindableVariable = function () {
SimParser.Variable.call(this);
var allValues;
this.getValues = function () {
return allValues;
}
this.setValues = function (v) {
allValues = v;
return this;
}
SimParser.BindableVariable.prototype.setAttributes = function (attr, node) {
SimParser.Variable.prototype.setAttributes.call(this, attr, node);
if (attr.allValues !== undefined) {
this.setValues(attr.allValues);
}
if (attr.defaultValue !== undefined) {
this.setValue(attr.defaultValue);
}
}
this.setEname('BindableVariable');
};
SimParser.BindableVariable.prototype = new SimParser.BindableVariable();
SimParser.BindableVariable.prototype.constructor = SimParser.Variable;

// FILE: ConstantVariable.js (77bb829f) 3/7/2014 11:24:13 AM

SimParser.ConstantVariable = function () {
SimParser.Variable.call(this);
var allValues;
this.getAllValues = function () {
return [value];
}
SimParser.ConstantVariable.prototype.setAttributes = function (attr, node) {
SimParser.Variable.prototype.setAttributes.call(this, attr, node);
if (attr.object !== undefined) {
this.setObjectName(attr.object);
}
}
this.setEname('ConstantVariable');
};
SimParser.ConstantVariable.prototype = new SimParser.ConstantVariable();
SimParser.ConstantVariable.prototype.constructor = SimParser.Variable;

// FILE: CumulativeVariable.js (0b412004) 3/7/2014 11:24:13 AM

SimParser.CumulativeVariable = function () {
SimParser.Variable.call(this);
var store;
var cumOp;
this.getStore = function () {
return store;
}
this.setStore = function (s) {
store = s;
return this;
}
this.getCumOp = function () {
return cumOp;
}
this.setCumOp = function (c) {
cumOp = c;
return this;
}
SimParser.CumulativeVariable.prototype.setAttributes = function (attr, node) {
SimParser.Variable.prototype.setAttributes.call(this, attr, node);
if (attr.store !== undefined) {
this.setStore(attr.store);
}
if (attr.cumOp !== undefined) {
this.setCumOp(attr.cumOp);
}
}
this.setEname('CumulativeVariable');
};
SimParser.CumulativeVariable.prototype = new SimParser.CumulativeVariable();
SimParser.CumulativeVariable.prototype.constructor = SimParser.Variable;

// FILE: ResultVariable.js (39bf143e) 3/7/2014 11:24:14 AM

SimParser.ResultVariable = function () {
SimParser.Variable.call(this);
SimParser.ResultVariable.prototype.setAttributes = function (attr, node) {
SimParser.Variable.prototype.setAttributes.call(this, attr, node);
}
this.setEname('ResultVariable');
};
SimParser.ResultVariable.prototype = new SimParser.ResultVariable();
SimParser.ResultVariable.prototype.constructor = SimParser.Variable;

// FILE: FunctionEvaluation.js (fbe0a444) 3/7/2014 11:24:13 AM

SimParser.FunctionEvaluation = function (eUnit) {
var key = undefined;
var varList = [];
var varNames = [];
var varValues = [];
var varFuncs = [];
var evalResult = [];
var isContinue = true;
var evUnit = eUnit;
var evUtils = new SimParser.Utils(eUnit);
var scoringTable = function() { return evUnit.getSimInstance().getScoringTable(); };
this.process = function (p, f) {
var d1 = new Date();
doInit(p,f);
if (isContinue) {
evalResult = doProcess(p,f);
if (evalResult.length > 0) {
doEnd();
}
}
var d2 = new Date();
return evalResult;
}
function doInit(p, f) {
varNames = [];
varValues = [];
varFuncs = [];
varList = [];
varList = evUtils.readDataFromWhiteBoard('evaluationInput', 'input');
if (varList === undefined || varList.length === 0) {
isContinue = false;
return;
}
var vWB = evUtils.mergeWBVariables(varList);
varNames = evUtils.getWBVarNames(vWB);
varValues = evUtils.getWBVarValues(vWB);
varNames = evUtils.convertElementNamesToVarNames(varNames);
p = new Parser();
var c = evUtils.getConstantValues();
for (var i = 0; i < c.vNames.length; i++) {
varNames.push(c.vNames[i]);
varValues.push(c.vValues[i]);
}
if (typeof (f) === 'undefined') {
varFuncs = evUtils.getFuncVars();
} else {
varFuncs = evUtils.getFuncVars(f);
}
var impVars = evUtils.getImplicitValues(varFuncs);
for (var i = 0; i < impVars.names.length; i++) {
varNames.push(impVars.names[i]);
varValues.push(impVars.values[i]);
}
}
function doProcess (p, f) {
var param = {};
if (typeof (p) === 'undefined') {
param.algorithm = 'greedy';
}
else {
param.algorithm = p;
}
var fList = [];
if (typeof (f) === 'undefined' || f === null || f === '') {
}
else {
var fMng = evUnit.getFunctionManager();
var sirF = fMng.getFunctionByName(f);
if (sirF === undefined) {
EU.debug('unknown function to evaluate: ' + f);
}
else {
fList.push(f);
}
}
var r = doProcess3();
return r;
}
var evalFormula2 = function (formula, variables) {
var parser = new Parser();
vars = {};
for (var i = 0; i < variables.length; i++) {
vars[variables[i].name] = variables[i].value;
}
try {
var result = parser.parse(formula).evaluate(vars);
}
catch (e) {
result = e.message;
}
return result;
}
function doProcess3 () {
var fMng = evUnit.getFunctionManager();
fMng.buildFunctionDependancyTree();
var result = [];
var persistentVarDB = evUnit.getSimInstance().getPersistentVariableDB();
var funcCount = fMng.getFunctions().length;
var permList = SimParser.Permutation(varValues);
var varValueList = [];
var vMng = evUnit.getVariableManager();
var cMng = evUnit.getConstraintManager();
for (var i = 0; i < permList.length; i++) {
varValueList = [];
var fLastIteration = false;
for (var k = 0; k < varNames.length; k++) {
varValueList.push({ 'name': varNames[k], 'value': permList[i][k] });
}
for (var k = 0; k < funcCount; k++) {
var sirF = fMng.getFunctionByCompOrder(k);
if (sirF.getValue() != null) {
var currentVariable = vMng.getVariableByName(sirF.getValue());
if ((currentVariable != null) && ((currentVariable.getType() == 'cumulative') || (currentVariable.getType() == 'persistent'))) {
var variableStore = currentVariable.getStore();
if (variableStore != null) {
if (persistentVarDB.getElementValue(variableStore) != null) {
varValueList.push ({ 'name': sirF.getValue(), 'value': persistentVarDB.getElementValue(variableStore)});
}
}
}
}
}
var funcVector = [];
var varFuncVars = [];
var fEval = true;
var fn = [];
if (cMng.evalPreConstraints('', varValueList)) {
for (var k = 0; k < funcCount; k++) {
var sirF = fMng.getFunctionByCompOrder(k);
fn[k] = sirF.getName();
if (cMng.evalPreConstraints(fn[k], varValueList)) {
funcVector[k] = evalFormula2(sirF.getEquation(), varValueList);
if (sirF.getValue() != null) {
var currentVariable = vMng.getVariableByName(sirF.getValue());
if ((currentVariable != null) && (currentVariable.getType() == 'cumulative')) {
var variableStore = currentVariable.getStore();
if (variableStore != null) {
var cumOp = currentVariable.getCumOp();
var variableCumOp = '+';
if (cumOp != null) {
if (cumOp === 'add') {
variableCumOp = '+';
}
else if (cumOp === 'multiply') {
variableCumOp = '*';
}
else if (cumOp === 'subtract') {
variableCumOp = '-';
}
else if (cumOp === 'divide') {
variableCumOp = '/';
}
}
persistentVarDB.updateElement(variableStore, funcVector[k], variableCumOp);
funcVector[k] = persistentVarDB.getElementValue(variableStore);
}
}
else if ((currentVariable != null) && (currentVariable.getType() == 'persistent')) {
var variableStore = currentVariable.getStore();
if (variableStore != null) {
persistentVarDB.updateElement(variableStore, funcVector[k], 'overwrite');
}
}
if (sirF.getScoreable() !== 'no') {
scoringTable().setValue(fn[k], null, funcVector[k]);
}
varFuncVars[k] = { 'name': sirF.getValue(), 'value': funcVector[k] };
fEval = fEval && cMng.evalPostConstraints(fn[k], varValueList, varFuncVars);
if (!fEval) {
fLastIteration = true;
}
if (currentVariable != null) {
if ((currentVariable.getType() == 'cumulative') || (currentVariable.getType() == 'persistent')) {
for (var l=0; l<varValueList.length; l++) {
if (varValueList[l].name === sirF.getValue()) {
varValueList[l].value = funcVector[k];
break;
}
}
}
else {
varValueList.push({ 'name': sirF.getValue(), 'value': funcVector[k] });
}
}
}
}
else {
var currentVariable = vMng.getVariableByName(sirF.getValue());
if ((currentVariable != null) && (currentVariable.getType() == 'cumulative')) {
var variableStore = currentVariable.getStore();
if (variableStore != null) {
funcVector[k] = persistentVarDB.getElementValue(variableStore);
}
if (sirF.getScoreable() !== 'no') {
scoringTable().setValue(fn[k], null, funcVector[k]);
}
varFuncVars[k] = { 'name': sirF.getValue(), 'value': funcVector[k] };
fEval = fEval && cMng.evalPostConstraints(fn[k], varValueList, varFuncVars);
if (!fEval) {
fLastIteration = true;
}
for (var l=0; l<varValueList.length; l++) {
if (varValueList[l].name === sirF.getValue()) {
varValueList[l].value = funcVector[k];
break;
}
}
}
}
}
result.push({ 'functions': evUtils.packFunctionforWhiteboard(fn, funcVector), 'variables': evUtils.packVariablesforWhiteboard(varValueList) });
if (fLastIteration || !cMng.evalPostConstraints('', varValueList, varFuncVars)) {
break;
}
}
}
if (result.length === 0) {
result.push({ 'functions': undefined, 'variables': undefined});
}
var lr = fMng.evaluateLFunctions(varValueList, varNames, varValues);
if (result.length >= 0) {
var r = result[0].functions;
if (r) {
for (p in lr) {
r[p] = lr[p];
}
}
}
var jr = fMng.evaluateJFunctions(varNames, varValues);
if (result.length >= 0) {
var r = result[0].functions;
if (r) {
for (var p in jr) {
r[p] = jr[p];
}
}
}
var fe = new SimParser.FilterEvaluation(evUnit);
result = fe.run(result);
if (result.length >= 0) {
var r = result[0].functions;
if (r) {
for (var p in r) {
if (p != 'undefined') {
scoringTable().setValue(p, null, r[p]);
}
}
}
}
return result;
}
function doEnd () {
var r = [], r1 = '', rs = evalResult, str, strCopy;
var fMng = evUnit.getFunctionManager();
for (var k = 0; k < rs.length; k++) {
str = rs[k].functions;
strCopy = {};
if (str !== undefined) {
for (var p in str) {
if (str.hasOwnProperty(p)) {
strCopy[p] = str[p];
if (str[p]) {
var sirF = fMng.getFunctionByName(p);
var prName = sirF.getProxyName();
if (prName) {
if (typeof str[p] === 'string') {
strCopy[prName] = str[p].replace(/:/g, '\\0x1G\\').replace(/,/g, '\\0x1H\\');
}
else {
strCopy[prName] = str[p];
}
if (p !== prName) delete strCopy[p];
}
}
}
}
r.push(JSON.stringify(strCopy).replace(/:/g, '\\0x1F\\').replace(/,/g, '\\0x1E\\') + '\\0x1D\\');
}
}
r1 = r.join('');
r1 = r1.replace(/\\0x1H\\/g, ',').replace(/\\0x1G\\/g, ':');
r1 = r1.replace(/{/g, '').replace(/}/g, '').replace(/;;/g, '');
r1 = unescape(r1);
if ((r1.length > 6)  && (r1.substring(r1.length-6, r1.length) === '\\0x1D\\')) {
r1 = r1.substring(0, r1.length-6);
}
key = evUtils.writeDataOnWhiteBoard(r1, key, 'evaluationOutput', 'output');
}
}

// FILE: EvaluationUnit.js (d78d7b2b) 3/7/2014 11:24:13 AM

SimParser.EvaluationUnit = function (sim) {
var source = 'EvaluationUnit';
var root;
var vMng = new SimParser.VariableManager(this);
var cMng = new SimParser.ConstraintManager(this);
var rMng = new SimParser.RangeManager(this);
var simInstance = sim;
var dbg = function() { return sim.getDebug(); };
var isRunning = false;
var eventElement = new Simulator.SimElement(sim);
this.getVariableManager = function () {
return vMng;
}
this.getConstraintManager = function () {
return cMng;
}
this.getRangeManager = function () {
return rMng;
}
this.getSimInstance = function () {
return simInstance;
}
var fMng = new SimParser.FunctionManager(this);
this.getFunctionManager = function () {
return fMng;
}
var fEvaluation = new SimParser.FunctionEvaluation(this);
this.evaluateFunction = function (funcName) {
var func = fMng.getFunctionByName(funcName);
var vars = func.getVarList();
var valueList = [];
var results = [];
for (var i = 0; i < vars.length; i++) {
valueList.push(vars[i].getValues());
}
var permList = SimParser.Permutation(valueList);
for (var i = 0; i < permList.length; i++) {
for (var j = 0; j < vars.length; j++) {
vars[j].setValue(permList[i][j]);
}
results.push({
params: permList[i],
result: func.evaluateEquation()
});
}
return results;
};
var runEvaluation = function () {
var result = false;
var d1 = new Date();
if (isRunning) {
return;
}
isRunning = true;
try {
try {
if (!root) {
Simulator.showAlertWarning('Evaluation Unit is not loaded');
}
else {
var fCount = fMng.getFunctions().length + fMng.getLFunctions().length + fMng.getJFunctions().length;
if (fCount > 0) {
fEvaluation.process('greedy');
result = true;
}
}
}
catch (e) {
EU.debug(e.message);
}
}
finally {
isRunning = false;
}
return result;
};
this.load = function (source) {
var d1 = new Date();
root = source;
rMng.setRanges(root);
vMng.setVariables(root);
fMng.setFunctions(root);
cMng.setConstraints(root);
this.setupEvents();
};
eventElement.handleEvent = function (event) {
var simulationMgr = sim.getSimulationManager();
var eventMgr = sim.getEventManager();
switch (event.type) {
case 'info':
if(simulationMgr.trialLimitReached()) {
return;
}
if (event.context === 'inputAvailable' || event.context === 'animationThreadFinished') {
if (runEvaluation()) {
eventMgr.postEvent(new Simulator.Event(this, 'info', 'outputAvailable', null, false));
}
break;
}
case 'command':
if(simulationMgr.trialLimitReached()) {
return;
}
if ((event.context === 'startTrial') || (event.context === 'startAnimation')) {
if (runEvaluation()) {
eventMgr.postEvent(new Simulator.Event(this, 'info', 'outputAvailable', null, false));
}
break;
}
default:
debug(this.getName() + ': Unhandled event type received: ' + event.toString());
return;
}
};
this.setupEvents = function () {
var r = root.getElementsByTagName('unit').item(0);
if (r !== undefined && r !== null) {
setEvents(eventElement, r);
}
};
this.getEvents = function () {
return eventElement;
};
function setEvents(element, node) {
var events = [];
var attributes;
var children = node.childNodes;
if (children != null && children != undefined) {
for ( var j = 0; j < children.length; j++) {
var id = children[j].nodeName;
if (id === 'event') {
attributes = children[j].attributes;
var eventInfo = createEvent(element, attributes);
element.addEvent(eventInfo['theEvent'], eventInfo['direction']);
}
}
}
return events;
}
function createEvent(obj, attributes) {
var response = [];
var data = '';
var ctx = '';
var dir = '';
var type = '';
var postOnChange = 'no';
var  completeWithoutOutput = false;
for ( var k = 0; k < attributes.length; k++) {
switch (attributes[k].nodeName) {
case 'direction':
dir = attributes[k].nodeValue;
break;
case 'data':
data = attributes[k].nodeValue;
break;
case 'context':
ctx = attributes[k].nodeValue;
break;
case 'type':
type = attributes[k].nodeValue;
break;
case 'postOnChange':
postOnChange = attributes[k].nodeValue;
break;
case 'completeWithoutOutput':
completeWithoutOutput = attributes[k].nodeValue === 'yes' ? true : false;
break;
}
}
response['theEvent'] = new Simulator.Event(obj, type, ctx, data, postOnChange, completeWithoutOutput); response['direction'] = dir;
return response;
}
function debug(str1, str2, trace) {
dbg().debug(source, str1, str2, trace);
}
function debugf(str1, str2, trace) {
dbg().debugf(source, str1, str2, trace);
}
};

// FILE: SimulationLoader2.js (017b4c08) 3/7/2014 11:24:14 AM

SimulationLoader = function(xmlText, callback)
{
this._xmlText = xmlText;
this._callback = callback;
};
SimulationLoader.prototype.start = function()
{
var imageFiles = SimulationLoader.parseImages(this._xmlText);
var flashFiles = SimulationLoader.parseFlash(this._xmlText);
this._callback(this._xmlText);
};
SimulationLoader._regex_images1 = /image[\s]*=[\s]*".*"/g;
SimulationLoader._regex_images2 = /src[\s]*=[\s]*".*(.jpg | .png | .gif)\s*"/g;
SimulationLoader._regex_flash1 = /flash[\s]*=[\s]*\".*\"/g;
SimulationLoader._regex_flash2 = /src[\s]*=[\s]*\".*(swf)\s*\"/g;
SimulationLoader._regex_flash3 = /altSrc[\s]*=[\s]*\".*(swf)\s*\"/g;
SimulationLoader._parse = function(xmlText, regex)
{
var values = [];
var matches = xmlText.match(regex);
if (matches != null)
{
var extractFile = function(str)
{
var index = str.indexOf('"');
var cleanStr = str.substring(index + 1);
index = cleanStr.indexOf('"');
cleanStr = cleanStr.substring(0, index);
return cleanStr;
}
for(var i = 0; i < matches.length; i++)
{
values.push(extractFile(matches[i]));
}
}
return values;
};
SimulationLoader.parseImages = function(xmlText)
{
var imageFiles = [];
imageFiles = imageFiles.concat(this._parse(xmlText, this._regex_images1));
imageFiles = imageFiles.concat(this._parse(xmlText, this._regex_images2));
for (var i = 0; i < imageFiles.length; i++)
{
imageFiles[i] = SimulationLoader.resolveUrl(imageFiles[i]);
}
return imageFiles;
};
SimulationLoader.parseFlash = function(xmlText)
{
var flashFiles = [];
flashFiles = flashFiles.concat(this._parse(xmlText, this._regex_flash1));
flashFiles = flashFiles.concat(this._parse(xmlText, this._regex_flash2));
flashFiles = flashFiles.concat(this._parse(xmlText, this._regex_flash3));
for (var i = 0; i < flashFiles.length; i++)
{
flashFiles[i] = SimulationLoader.resolveUrl(flashFiles[i]);
}
return flashFiles;
};
SimulationLoader.fixPaths = function(xmlText, baseUrl)
{
xmlText = xmlText.replace(/src=\"/g, 'src="' + baseUrl);
xmlText = xmlText.replace(/altSrc=\"/g, 'altSrc="' + baseUrl);
xmlText = xmlText.replace(/image=\"/g, 'image="' + baseUrl);
xmlText = xmlText.replace(/deleteRowImage=\"/g, 'deleteRowImage="' + baseUrl);
xmlText = xmlText.replace(/flash=\'"/g, 'flash="' + baseUrl);
return xmlText;
};
SimulationLoader.resolveUrl = function(url)
{
url = url.replace(/&amp;/g, '&');
url = url.split('&').join('&amp;').split('<').join('&lt;').split('"').join('&quot;');
var el = document.createElement('div');
el.innerHTML = '<a href="' + url + '">x</a>';
return el.firstChild.href;
};

// FILE: module_simulator2.js (8c355c81) 5/2/2014 12:55:57 PM

ContentManager.onItemEvent('available', function (page, item) {
if (!item.isResponseType('simulator')) return;
var pageDoc = page.getDoc();
var simContainer = pageDoc.getElementById('SimContainer_' + item.position);
var simXml = item.rendererSpec;
var createSimComponent = function (simulator, simContainer) {
var simComponent =
{
id: 'SIM_' + item.position,
focus: function () { Util.Dom.focus(simContainer); },
blur: function () { Util.Dom.blur(simContainer); }
};
item.addComponent(simComponent);
YUE.on(simContainer, 'click', function () {
item.setActiveComponent(simComponent);
});
};
var simImageFiles = SimulationLoader.parseImages(simXml);
for (var i = 0; i < simImageFiles.length; i++) {
var loaderImage = new ResourceLoader.Image(simImageFiles[i]);
page.addResourceLoader(loaderImage);
}
var simSWFFiles = SimulationLoader.parseFlash(simXml);
for (var i = 0; i < simSWFFiles.length; i++) {
var loaderBinary = new ResourceLoader.Binary(simSWFFiles[i]);
page.addResourceLoader(loaderBinary);
}
var responseXml;
if (typeof (window.TestShell) == 'object' && typeof (window.TestShell.PageManager) == 'object') {
var response = window.TestShell.PageManager.getResponse(item.position);
responseXml = response.getLastValue();
}
else {
responseXml = item.value;
}
var simulator = new Simulator.Simulator(simContainer, ContentManager.isAccessibilityEnabled());
Simulator.Animation.FlashAnimationInterface.MapInstance(simulator);
simulator.setAnimationShellPath(ContentManager.resolveBaseUrl('Scripts/Simulator2/Renderer/SWF/SimulationShell.swf'));
simulator.setAnimationExternalScriptsPath(ContentManager.resolveBaseUrl('Scripts/Libraries'));
simulator.loadXml(simXml, responseXml);
item.simulator = simulator;
var simWin = simulator.getWin();
var simDoc = simulator.getDoc();
createSimComponent(simulator);
var simZoomUpdate = function () {
var zoomInfo = page.getZoom();
zoomInfo._setDocumentLevel(simDoc, zoomInfo.currentLevel, true);
};
var zoomImage = function (img) {
YUD.addClass(img, 'Image');
simZoomUpdate();
};
YUD.batch(simDoc.getElementsByTagName('img'), function (img) {
if (Util.Dom.isImgLoaded(img)) {
zoomImage(img);
}
else {
YUE.on(img, 'load', function () {
zoomImage(img);
});
}
});
simulator.subscribe('info', 'imageEmbedded', function (evt) {
if (evt.data) YUD.addClass(evt.data, 'Image');
simZoomUpdate();
});
simulator.subscribe('info', 'animationEmbedded', function (evt) {
simZoomUpdate();
VideoManager.SWF.stopRightClick(evt.data);
});
simulator.subscribe('info', 'simulatorStateChange', function (evt) {
if (YAHOO.lang.isString(evt.data)) {
var eventType = evt.data.toUpperCase();
if (eventType == "READY") {
if (ContentManager.isReadOnly()) {
simulator.setReadOnlyState(true);
}
YUD.removeClass(simContainer, 'loading');
}
else if (eventType == "ERROR") {
YUD.addClass(simContainer, 'failed');
}
}
});
if (typeof TDS.Diagnostics == 'object') {
TDS.Diagnostics.addErrorHandler(simWin);
}
});
ContentManager.onItemEvent('zoom', function(page, item)
{
if (item.simulator == null) return;
var zoomInfo = page.getZoom();
var zoomFactor = (zoomInfo == null) ? 1 : zoomInfo.levels[zoomInfo.currentLevel].factor;
item.simulator.zoom(zoomFactor);
});
ContentManager.onItemEvent('show', function (page, item) {
if (!item.simulator) return;
item.simulator.setVisibilityAndAttachEvents(true);
});
ContentManager.onItemEvent('hide', function (page, item) {
if (!item.simulator) return;
item.simulator.setVisibilityAndAttachEvents(false);
});
ContentManager.onItemEvent('focus', function (page, item) {
if (item.simulator) {
item.simulator.focus();
}
});
ContentManager.onItemEvent('blur', function (page, item) {
if (item.simulator) {
item.simulator.blur();
}
});
(function()
{
var getter = function(item, response)
{
if (item.simulator == null) return;
response.value = item.simulator.getResponseXml();
response.isValid = item.simulator.isValid();
response.isSelected = response.isValid;
};
var setter = function(item, value)
{
if (item.simulator == null) return;
item.simulator.loadResponseXml(value);
};
ContentManager.registerResponseHandler('simulator', getter, setter);
})();

// FILE: control.js (3d452231) 7/23/2014 4:30:36 PM

9
var TDS = window.TDS || {};
TDS.LineReaderControl = {
Instance: null,
toggle: function(){
if(!TDS.LineReaderControl.Instance){
TDS.LineReaderControl.on();
}else{
TDS.LineReaderControl.off();
}
},
on: function(el){
if(!TDS.LineReaderControl.Instance){
var page = ContentManager.getCurrentPage();
if(page){
page.disableScroll();
}
var el = YAHOO.util.Selector.query("#contents")[0];
var root     = YAHOO.util.Selector.query('.showing');
var passages = YAHOO.util.Selector.query('.thePassage,.theQuestions', root[0]);
var stems    = YAHOO.util.Selector.query('.stemContainer', root[0]);
var fin = YAHOO.lang.isArray(el) ? el : passages.concat(stems);
var lr = new TDS.LineReader(fin);
lr.selectFirst();
TDS.LineReaderControl.Instance =  lr;
}
},
off: function(){
if(TDS.LineReaderControl.Instance){
if(window.ContentManager){
var page = ContentManager.getCurrentPage();
if(page){
page.enableScroll();
}
}
TDS.LineReaderControl.Instance.dispose();
delete TDS.LineReaderControl.Instance;
TDS.LineReaderControl.Instance = null;
}
},
reset: function(){
if (TDS.LineReaderControl.Instance) {
TDS.LineReaderControl.off();
TDS.LineReaderControl.on();
}
},
setupEvents: function(){
if(window.ContentManager){
ContentManager.onItemEvent('zoom', TDS.LineReaderControl.reset);
ContentManager.onPageEvent('hide', TDS.LineReaderControl.off);
ContentManager.onEntityEvent('menushow', TDS.LineReaderControl.off);
}
}
};
YAHOO.util.Event.onDOMReady(function(){
TDS.LineReaderControl.setupEvents();
});
TDS.LineReader = function (el) {
var LHR = 1.25,
DEBUG_LINE_CLASS = 'LINERREADERDEBUGLINE',
AUTOSCROLL_TOLERANCE = 44;
var that = this;
this.TheLine;
this._parsers = [];
this._arguments = arguments;
this._linesList = [];
this._parentContainers;
this._textContainers = [];
this._ignoreContainers = [];
this._scrollableContainers = [];
this._parentWindow = window;
this._activeLineIndex = -1;
this._savedBackgroundColor = 'transparent';
this._onLineMove =  new YAHOO.util.CustomEvent('onLineMove');
this._settings = {
lineColor: 'rgba(0, 191, 243, 0.2)',
lineBorder: 'none',
lineID: '#theLine',
lineZIndex: '-1',
debug: false,
onLineMove: null
};
this.line = function () {
this.element = null;
this.top = 0;
this.width = 0;
this.height = 0;
this.bottom = 0;
};
this._findElements = function (el) {
var _foundElementsArray = [];
var _criteria = function (x) {
var overflow = $(x.parentNode).css('overflow').toLowerCase();
if (overflow === 'auto' || overflow === 'scroll') {
that._scrollableContainers.push(x.parentNode);
}
overflow = null;
var p = that._get_parser(x.nodeName);
if (p) {
return p._criteria.call(that, x);
}
else {
return false;
}
},
_saveElementToTextContainers = function (x) {
if (that._ignoreContainers.indexOf(x) === -1 && _foundElementsArray.indexOf(x) === -1) {
_foundElementsArray.push(x);
}
};
YAHOO.util.Dom.getElementsBy(
_criteria,
'',
el,
_saveElementToTextContainers
);
return _foundElementsArray;
};
this._processElement = function (el) {
var p = that._get_parser(el.nodeName);
if (p && p._processLines instanceof Function) {
p._processLines.call(this,el);
}
};
this._selectLineAt = function(index){
if(this._linesList){
if(index >= 0 && index < this._linesList.length){
var l = this._linesList[index];
this._activeLineIndex = this._linesList.indexOf(l);
this._moveLine(l);
}
}
};
this._findLine = function (el, Y) {
for (var i = 0; i < this._linesList.length; i++) {
var l = this._linesList[i];
if (l.element === el && (l.top < Y && l.bottom > Y)) {
return l;
}
}
return null;
};
this._moveLine = function (line) {
if (line) {
var elY = YAHOO.util.Dom.getXY(line.element)[1];
YAHOO.util.Dom.setStyle(this.TheLine, 'top', line.top + 'px');
YAHOO.util.Dom.setStyle(this.TheLine, 'left', '0');
YAHOO.util.Dom.setStyle(this.TheLine, 'height', line.height + 'px');
YAHOO.util.Dom.setStyle(this.TheLine, 'width', line.width);
YAHOO.util.Dom.addClass(this.TheLine, 'TDS_Line_Reader_Active');
if (YAHOO.util.Dom.getStyle(this.TheLine, 'display') === 'none') {
YAHOO.util.Dom.setStyle(this.TheLine, 'display', 'block');
}
line.element.appendChild(this.TheLine);
this._onLineMove.fire();
}
};
this._hideLine = function() {
var ln = this._linesList[this._activeLineIndex];
if (this._activeLineIndex > -1 && ln && ln.element.nodeName === 'TR') {
YAHOO.util.Dom.setStyle(ln.element, 'background-color', that._savedBackgroundColor);
} else {
if (ln) {
YAHOO.util.Dom.setStyle(that.TheLine, 'display', 'none');
}
}
};
this._initialize = function () {
this._linesList = [];
this._textContainers = [];
this._scrollableContainers = [];
this._activeLineIndex = -1;
var textContArray = [];
for(var i = 0; i < this._parentContainers.length; ++i){
var els = this._findElements.call(this, this._parentContainers[i]);
if(els && els.length){
textContArray = textContArray.concat(els);
}
}
for (var j = 0; j < textContArray.length; j++) {
if (this._textContainers.indexOf(textContArray[j]) === -1) {
this._textContainers.push(textContArray[j]);
}
}
textContArray = null;
for (var i = 0; i < this._textContainers.length; i++) {
this._processElement(this._textContainers[i]);
}
for (var i = 0; i < this._textContainers.length; i++) {
var p = that._get_parser(this._textContainers[i].nodeName);
if (p && p._onClick) {
YAHOO.util.Event.on(this._textContainers[i], "click", p._onClick, null, this);
}
}
this._onKeyDownRef = YAHOO.util.Event.on(
this._parentContainers[0].ownerDocument,
'keydown',
this._onArrowKeyPress,
null,
this
);
if (this._settings.onLineMove) {
this._onLineMove.subscribe(this._settings.onLineMove);
}
this._createLine();
if (this._settings.debug) {
for (var i = 0; i < this._linesList.length; i++) {
var l = this._linesList[i];
if (l.element.nodeName !== 'TR') {
var div = document.createElement('div');
div.id = "LR_DEBUG_" + i;
div.title = "LR_DEBUG_" + i;
div.className = DEBUG_LINE_CLASS;
YAHOO.util.Dom.setStyle(div, 'position', 'absolute');
YAHOO.util.Dom.setStyle(div, 'top', l.top + 'px');
YAHOO.util.Dom.setStyle(div, 'height', '1px');
YAHOO.util.Dom.setStyle(div, 'width', l.width + 'px');
if (l.EXP) {
YAHOO.util.Dom.setStyle(div, 'background-color', '#0f0');
} else {
YAHOO.util.Dom.setStyle(div, 'background-color', '#f00');
}
YAHOO.util.Dom.setStyle(div, 'z-index', '-1');
YAHOO.util.Dom.setStyle(div, 'display', 'block');
l.element.appendChild(div);
}
else {
YAHOO.util.Dom.setStyle(l.element, 'border', '1px solid #00f');
}
}
}
};
this._dispose = function () {
for (var i = 0; i < this._textContainers.length; i++) {
var p = this._get_parser(this._textContainers[i].nodeName);
if (p._onClick) {
YAHOO.util.Event.removeListener(this._textContainers[i], "click", p._onClick);
}
}
YAHOO.util.Event.removeListener(this._parentContainers[0].ownerDocument,
'keydown',
this._onArrowKeyPress
);
var elements = YAHOO.util.Selector.query('.TDS_Line_Reader');
for(var j=0; j<elements.length; ++j){
var el = elements[j];
if(el && el.parentNode && typeof el.parentNode.removeChild == 'function'){
el.parentNode.removeChild(el);
}
}
for (var i = 0; i < this._linesList.length; i++) {
var l = this._linesList[i];
var debugLines = YAHOO.util.Dom.getChildrenBy(l.element,
function (x) {
return x.className === DEBUG_LINE_CLASS;
});
for (var j = 0; j < debugLines.length; j++) {
l.element.removeChild(debugLines[j]);
}
}
var elRelative = YAHOO.util.Selector.query('.TDS_Line_Reader_Relative_Pos');
for(var i=0; i<elRelative.length; ++i){
YAHOO.util.Dom.removeClass(elRelative[i], 'TDS_Line_Reader_Relative_Pos');
}
};
this._createLine = function () {
this.TheLine = YAHOO.util.Selector.query(this._settings.lineID).length > 0 ? YAHOO.util.Selector.query(this._settings.lineID)[0] : document.createElement('div');
if (YAHOO.util.Selector.query(this._settings.lineID).length === 0) {
this.TheLine.setAttribute("id", this._settings.lineID.replace('#', ''));
}
YAHOO.util.Dom.addClass(this.TheLine, 'TDS_Line_Reader');
};
this._applySettings = function (settings) {
if (settings) {
if (settings.lineColor) { this._settings.lineColor = settings.lineColor; }
if (settings.lineBorder) { this._settings.lineBorder = settings.lineBorder; }
if (settings.lineID) { this._settings.lineID = settings.lineID; }
if (settings.lineZIndex) { this._settings.lineZIndex = settings.lineZIndex; }
if (settings.onLineMove) { this._settings.onLineMove = settings.onLineMove; }
if (typeof settings.debug === 'boolean') { this._settings.debug = settings.debug; }
}
return true;
};
this._add_parser = function (parserObj) {
this._parsers.push(parserObj);
};
this._get_parser = function (nodeName) {
for (var i = 0; i < this._parsers.length; i++) {
var nodeNames = [];
if (this._parsers[i]._nodeName.indexOf(',') > -1) {
nodeNames = this._parsers[i]._nodeName.split(',');
}
else {
nodeNames.push(this._parsers[i]._nodeName);
}
for (var j = 0; j < nodeNames.length; j++) {
if (nodeNames[j].toUpperCase() === nodeName) {
nodeNames = null;
return this._parsers[i];
}
}
}
return null;
};
this._getSuperScriptOffset = function (el,fontSize) {
var measurement1 = 0;
var measurement1 = 0;
var experimentDiv = document.createElement('div');
experimentDiv.id = 'SUPERSCRIPT_TEST';
experimentDiv.innerHTML = 'this is a test';
YAHOO.util.Dom.setStyle(experimentDiv, 'font-size', 'inherit');
YAHOO.util.Dom.setStyle(experimentDiv, 'line-height', 'inherit');
var experimentSpan1 = document.createElement('span');
experimentSpan1.innerHTML = "1";
YAHOO.util.Dom.setStyle(experimentSpan1, 'vertical-align', 'super');
YAHOO.util.Dom.setStyle(experimentSpan1, 'font-size', fontSize);
var experimentSpan2 = document.createElement('span');
experimentSpan2.innerHTML = "2";
YAHOO.util.Dom.setStyle(experimentSpan1, 'font-size', fontSize);
experimentDiv.appendChild(experimentSpan1);
experimentDiv.appendChild(experimentSpan2);
el.appendChild(experimentDiv);
measurement1 = YAHOO.util.Dom.getY(experimentSpan2);
YAHOO.util.Dom.setStyle(experimentSpan1, 'vertical-align', 'bottom');
measurement2 = YAHOO.util.Dom.getY(experimentSpan2);
var diff = (parseFloat(measurement1) - parseFloat(measurement2)) + 1;
el.removeChild(experimentDiv);
return diff;
};
this._textContainerOnClick = function (e) {
var target = e.target || e.srcElement;
if (target.nodeName === 'SPAN') {
target = YAHOO.util.Dom.getAncestorBy(target, function () { return true; });
}
var Y = YAHOO.util.Event.getXY(e)[1];
var elY = YAHOO.util.Region.getRegion(target);
Y = Y - elY.top;
var l = this._findLine(target, Y);
if (l) {
this._activeLineIndex = this._linesList.indexOf(l);
this._moveLine(l);
}
};
this.up = function(){
if (this._activeLineIndex > 0) {
pOff = this._get_parser(this._linesList[this._activeLineIndex].element.nodeName);
pOff._onLineExit.call(this, this._linesList[this._activeLineIndex]);
}
if ((this._activeLineIndex -1) >= 0) {
this._activeLineIndex = this._activeLineIndex - 1;
pOn = this._get_parser(this._linesList[this._activeLineIndex].element.nodeName);
pOn._onLineEnter.call(this, this._linesList[this._activeLineIndex]);
}
};
this.down = function(){
if (this._activeLineIndex > -1 && this._activeLineIndex < (this._linesList.length - 1) ) {
pOff = this._get_parser(this._linesList[this._activeLineIndex].element.nodeName);
pOff._onLineExit.call(this,this._linesList[this._activeLineIndex]);
}
if (this._activeLineIndex < (this._linesList.length - 1)) {
this._activeLineIndex = this._activeLineIndex + 1;
pOn = this._get_parser(this._linesList[this._activeLineIndex].element.nodeName);
pOn._onLineEnter.call(this, this._linesList[this._activeLineIndex]);
}
};
this._onArrowKeyPress = function (e) {
if (e.keyCode === 38 || e.keyCode === 40) {
YAHOO.util.Event.stopEvent(e);
var target = e.target || e.srcElement;
var pOn;
var pOff;
var viewableOffset = 0;
var scrollableOffset = this._parentWindow.pageYOffset;
var scrollParent = null;
for (var i = 0; i < this._scrollableContainers.length; i++) {
if (this._activeLineIndex > -1 && YAHOO.util.Dom.isAncestor(this._scrollableContainers[i], this._linesList[this._activeLineIndex].element)) {
scrollParent = this._scrollableContainers[i];
break;
}
}
if (e.keyCode === 38) {
this.up();
}
if (e.keyCode === 40) {
this.down();
}
var currentLinePostion = (YAHOO.util.Dom.getY(this.TheLine) - YAHOO.util.Dom.getY(scrollParent));
var topOfViewableArea = YAHOO.util.Dom.getY(scrollParent);
var bottomofViewableArea = parseInt(YAHOO.util.Dom.getStyle(scrollParent, 'height'));
if (currentLinePostion < 1 || (currentLinePostion + AUTOSCROLL_TOLERANCE) > bottomofViewableArea) {
this.TheLine.scrollIntoView(true);
}
}
};
var par    = new TDS.LineReader.Parser('P,DIV,LI');
var exclude = {
'TD': true,
'BUTTON': true,
'H': true
};
var excludeClasses = [
'prompt',
'format_wb'
];
var excludeClass = function(el){
for(var i=0; i<excludeClasses.length; ++i){
if(el && YAHOO.util.Dom.hasClass(el, excludeClasses[i])){
return true;
}
}
};
var dfsText = function(x){
if(excludeClass(x)){return;}
var parEles = YAHOO.util.Dom.getAncestorBy(x, function (E) { return true; });
if (!exclude[parEles.nodeName] && !excludeClass(parEles)){
for (var i = 0; i < x.childNodes.length; i++) {
var cn = x.childNodes[i];
var nv = typeof cn.nodeValue == 'string' ? cn.nodeValue.trim() : '';
if (cn.nodeType === 3 && nv.length > 0) {
if(x.offsetWidth && x.offsetHeight) {
return true;
}
}else if(cn.nodeName == 'SPAN') {
if (!cn.textContent.trim() && x.childNodes[i + 1]) {
} else {
return dfsText(cn);
}
}
}
}
};
par._criteria = function (x) {
var parent = x.parentNode;
if(x.nodeName == 'P' && (
parent.nodeName == 'TH' ||
parent.nodeName == 'TD')
) {
return false;
}
return dfsText(x);
};
par._processLines = function (el) {
var el_h = el.clientHeight,
el_w = el.clientWidth,
el_y = YAHOO.util.Dom.getY(el),
el_padding = parseInt(YAHOO.util.Dom.getStyle(el, 'padding-top'));
var ln_height = 0;
var el_line_height = YAHOO.util.Dom.getStyle(el, 'line-height');
var el_font_size = YAHOO.util.Dom.getStyle(el, 'font-size');
var pfel_lh = parseFloat(el_line_height);
var pfel_fs = parseFloat(el_font_size);
if(isNaN(pfel_lh))
{
ln_height = pfel_fs * LHR;
}
else
{
if(el_line_height.indexOf('%') > -1)
{
ln_height = pfel_fs * (pfel_lh / 100);
}
else if(el_line_height.indexOf('in') > -1)
{
ln_height = pfel_fs * LHR;
}
else
{
ln_height = pfel_lh;
}
}
var curr_pos = 0,
pos = YAHOO.util.Dom.getStyle(el, 'position');
if (el.nodeName === 'SPAN') {
el_h = ln_height;
}
if (pos.toLowerCase() !== 'relative' && pos.toLowerCase() !== 'absolute') {
YAHOO.util.Dom.addClass(el, 'TDS_Line_Reader_Relative_Pos');
}
var x = 1;
var foundSpans = YAHOO.util.Dom.getElementsBy(function (fel) {
if (YAHOO.util.Dom.getStyle(fel, 'vertical-align') !=='baseline') {
return true;
}
return false;
},'span',el);
var spansArray = [];
for (var i = 0; i < foundSpans.length; i++) {
var topY = (YAHOO.util.Dom.getY(foundSpans[i]) - el_y);
var height = 2;
var bottom = topY + height;
spansArray.push({
obj: foundSpans[i],
bottom: bottom,
height: height,
topY: topY,
left: YAHOO.util.Dom.getX(foundSpans[i])
});
}
var ssOffset = 0;
var curSuperOffset = spansArray.length > 0 ? that._getSuperScriptOffset(el, YAHOO.util.Dom.getStyle(spansArray[0].obj, 'font-size')) : 0;
while (curr_pos < el_h) {
var linObj = new that.line();
linObj.height = ln_height;
linObj.width = el_w;
linObj.top = (curr_pos + el_padding) + ssOffset;
linObj.element = el;
linObj.bottom = linObj.top + linObj.height;
for (var i = 0; i < spansArray.length; i++) {
if (spansArray[i].bottom > linObj.top && spansArray[i].bottom < linObj.bottom) {
linObj.height += curSuperOffset;
linObj.EXP = true;
ssOffset += curSuperOffset;
break;
}
}
this._linesList.push(linObj);
curr_pos = curr_pos + ln_height;
if (el.nodeName === 'TR') {
break;
}
}
};
par._onClick = function (e) {
this._textContainerOnClick(e);
};
par._onLineEnter = function (line) {
this._moveLine(line);
};
par._onLineExit = function (line) {
};
this._add_parser(par);
par = new TDS.LineReader.Parser('TR');
par._criteria = function (x) {
return true;
};
par._processLines = function (el) {
var linObj = new that.line();
linObj.height = 0;
linObj.width = 0;
linObj.top = 0;
linObj.element = el;
linObj.bottom = 0;
this._linesList.push(linObj);
};
par._onClick = function (e) {
var target = e.target || e.srcElement;
if (target.nodeName === 'TD' || target.nodeName === 'P' || target.nodeName === 'DIV' || target.nodeName === 'SPAN') {
target = YAHOO.util.Dom.getAncestorByTagName(target, 'TR');
}
for (var i = 0; i <  this._linesList.length; i++) {
if (this._linesList[i].element === target){
this._activeLineIndex = i;
break;
}
}
YAHOO.util.Dom.addClass(target, 'TDS_Line_Reader_Active');
this._onLineMove.fire();
};
par._onLineEnter = function (line) {
if (that.TheLine) {
YAHOO.util.Dom.setStyle(that.TheLine, 'display', 'none');
that._settings.lineColor = YAHOO.util.Dom.getStyle(that.TheLine, 'background-color');
}
YAHOO.util.Dom.setStyle(line.element, 'background-color', that._settings.lineColor);
};
par._onLineExit = function (line) {
YAHOO.util.Dom.setStyle(line.element, 'background-color', that._savedBackgroundColor);
};
this._parentContainers = YAHOO.lang.isArray(arguments[0]) ? arguments[0] : [arguments[0]];
for (var i = 1; i < arguments.length; i++) {
if (arguments[i]) {
if (arguments[i].lineColor ||
arguments[i].lineBorder ||
arguments[i].lineID ||
arguments[i].lineZIndex ||
arguments[i].debug ||
arguments[i].onLineMove) {
}
if (arguments[i].toString().toLowerCase().indexOf('window') > -1) {
this._parentWindow = arguments[i];
}
if (arguments[i].toString().toLowerCase().indexOf('nodelist') > -1 || arguments[i].toString().toLowerCase().indexOf('htmlcollection') > -1) {
for (var j = 0; j < arguments[i].length; j++) {
this._ignoreContainers.push(arguments[i][j]);
}
}
if (arguments[i] instanceof Array) {
for (var j = 0; j < arguments[i].length; j++) {
this._add_parser(arguments[i][j]);
}
}
}
}
this._initialize();
return {
obj: this,
dispose: function() {
that._dispose.call(that);
return true;
},
refresh: function() {
if (!that.TheLine) {
that._dispose.call(that)
}
;
that._initialize.call(that);
return true;
},
applySettings: function(settings) {
that._applySettings.call(that, settings);
that._dispose.call(that);
that._initialize.call(that);
return true;
},
settings: this._settings,
addParser: function(p) {
that._add_parser.call(that, p);
that._dispose.call(that);
that._initialize.call(that);
return true;
},
selectFirst: function() {
that._selectLineAt(0);
},
parsers: this._parsers
};
};
TDS.LineReader.Parser = function (nodeName) {
this._nodeName = nodeName.toUpperCase();
this._criteria = {};
this._processLines = {};
this._onClick = {};
this._onLineEnter = {};
this._onLineExit = {};
};

// FILE: sm2-show.js (65952d82) 3/7/2014 11:24:14 AM

(function(){
var SM = soundManager;
var TDS = window.TDS || {};
var slide = {
id: 0,
Store: {},
Config: {
TimerMove: 1000
},
Tags: TDS.AriaSlideTags || {
Play: 'Play Slideshow',
Stop: 'Pause Slideshow',
Prev: 'Previous Slide',
Next: 'Next Slide'
}
};
function createEvent() {
return new Util.Event.Custom(this);
}
slide.onPlay = createEvent();
slide.onIdle = createEvent();
slide.scan = function(domOrId){
dom = typeof domOrId == 'string' ? document.getElementById(domOrId) : domOrId;
dom = dom && dom.querySelectorAll ? dom : document.body;
return dom.querySelectorAll('.slides_config');
};
slide.build = function(domOrId){
var domOrIds = typeof domOrId == 'string' ? [domOrId] : domOrId;
var built = [];
for(var i = 0; i < domOrIds.length; ++i){
var d = domOrIds[i];
d = typeof d == 'string' ? document.getElementById(d) : d;
if(!d || !d.className || d.className.match('slides_parsed')) {
continue;
}
var conf = slide.parseConfig(d);
built.push(new slide.Show(conf));
}
return built;
};
slide.parseConfig  = function(container){
if(!container) return;
return {
container: container,
audio: container.querySelector('.slides_audio'),
slides: container.querySelectorAll('.slide')
};
};
slide.scanAndBuild = function(domOrId){
var build = slide.scan(domOrId);
if(build.length){
return slide.build(build);
}
};
slide.pauseAll = function(){
try{
var store = slide.Store;
for (var i in store){
var s = store[i];
s.pauseBtnClick();
}
}catch(e){
console.error("Failed to pause all the slideshows.", e);
}
};
slide.Element = function (type,def,contents) {
var obj = document.createElement(type);
if (def) {
if (def.style) {
var style = def.style; def.style = {};
for (var id in style) {if (style.hasOwnProperty(id))
{def.style[id.replace(/-([a-z])/g,this.ucMatch)] = style[id]}}
}
slide.Insert(obj,def);
}
if (contents) {
if (!(contents instanceof Array)) {contents = [contents]}
for (var i = 0; i < contents.length; i++) {
if (contents[i] instanceof Array) {
obj.appendChild(slide.Element(contents[i][0],contents[i][1],contents[i][2]));
} else {
obj.appendChild(document.createTextNode(contents[i]));
}
}
}
return obj;
};
slide.addElement = function (el,type,def,contents) {
return el.appendChild(slide.Element(type,def,contents))
};
slide.ucMatch = function (match,c) {
return c.toUpperCase()
};
slide.Insert = function (dst,src) {
for (var id in src) {if (src.hasOwnProperty(id)) {
if (typeof src[id] === 'object' && !(src[id] instanceof Array) &&
(typeof dst[id] === 'object' || typeof dst[id] === 'function')) {
this.Insert(dst[id],src[id]);
} else {
dst[id] = src[id];
}
}}
return dst;
};
var S = function(args){
this.id = 'slideshow' + (++(slide.id));
this.intervals = [];
this.pointer   = 0;
this.slides    = [];
if(args){
this.init(args);
}
slide.Store[this.id] = this;
};
S.prototype.init = function(args){
try {
this.container = args.container;
this.audio     = args.audio;
this.slides    = args.slides;
this.initSlideVisibility(this.slides);
this.initSoundManager(this.audio);
if(!this.sm){
return;
}
this.container.id = this.id;
this.bindSlideToSound(this.sm, this.intervals, this.slides);
YAHOO.util.Dom.removeClass(this.container, 'hidden');
this.createControls(this.audio);
this.audio.parentNode.removeChild(this.audio);
} catch (e) {
console.error("Failed to hide?", e);
}finally{
YAHOO.util.Dom.addClass(this.container, 'slides_parsed');
}
};
S.prototype.stopEvt = function(evt){
evt = evt || window.event;
if(evt){
YAHOO.util.Event.stopEvent(evt);
}
};
S.prototype.initSlideVisibility = function(slides) {
slides = slides || this.slides;
if(!slides || !slides.length ) return;
for(var i = 0; i < slides.length; ++i){
var s = slides[i];
if(s){
YAHOO.util.Dom.addClass(s, 'hidden');
}
var t = s.getAttribute('data-begin');
if (!isNaN(t)) {
if (t.length === 6) {
var tHour = parseInt(t.substr(0, 2)),
tMin = parseInt(t.substr(2, 2)),
tSec = parseInt(t.substr(4, 2));
if (tHour <= 23 && tMin <= 59 && tSec <= 59) {
t = tHour * 3600 + tMin * 60 + tSec * 1;
}
} else {
console.log('The data-begin attribute is not in hhmmss format.');
}
this.intervals.push(t * 1000);
}
}
YAHOO.util.Dom.removeClass(slides[0], 'hidden');
console.log("Slideshow intervals.", this.intervals);
};
S.prototype.initSoundManager = function(audio){
audio   = audio || this.audio;
this.sm = null;
if(audio) {
for(var i = 0; i < audio.children.length; ++i){
var source = audio.children[i];
var src    = source.src ? decodeURIComponent(source.src) : null;
if(src && SM.canPlayURL(src)){
this.sm = SM.createSound({
id: this.id,
url: src,
whileplaying: this.audioMoveSlider.bind(this)
});
if(this.sm){
this.sm.load();
break;
}
}
}
}
if(!this.sm){
console.error("The sound was NOT initialized correctly, no sound.", audio, this.sm);
}
return this.sm;
};
S.prototype.bindSlideToSound = function(sm, intervals, slides){
sm       = sm        || this.sm;
intevals = intervals || this.intervals;
slides   = slides    || this.slides;
if(!sm || !intervals || !slides) return;
for(var i = 0; i < intervals.length; ++i){
var t = intervals[i];
}
};
S.prototype.createControls = function(insertBefore){
insertBefore = insertBefore || this.audio;
var main = slide.Element('span', {
className: 'slide_controls_contain'
});
main.setAttribute('aria-controls', this.id);
this.prevBtn = slide.addElement(main, 'button', {
className: 'slide_controls_btn slide_controls_prev_btn',
type: 'button', onclick: this.prev.bind(this)
}, '<');
this.prevBtn.setAttribute('aria-label', slide.Tags.Prev);
this.playBtn = slide.addElement(main, 'button', {
className: 'slide_controls_btn slide_controls_play_btn',
type: 'button', onclick:  this.playBtnClick.bind(this)
}, '►');
this.playBtn.setAttribute('aria-label', slide.Tags.Play);
this.pauseBtn = slide.addElement(main, 'button', {
className: 'slide_controls_btn slide_controls_stop_btn hidden',
type: 'button', onclick: this.pauseBtnClick.bind(this)
}, '❚❚');
this.pauseBtn.setAttribute('aria-label', slide.Tags.Stop);
this.nextBtn = slide.addElement(main, 'button', {
className: 'slide_controls_btn slide_controls_next_btn',
type: 'button', onclick: this.next.bind(this)
}, '>');
this.nextBtn.setAttribute('aria-label', slide.Tags.Next);
var sliderDom = this.createSlider();
main.appendChild(sliderDom);
this.container.insertBefore(main, insertBefore);
};
S.prototype.createSlider = function(dom){
var maxWidth = 190;
var d   = slide.Element('div', {
className: 'slide_controls_slider yui-h-slider',
style: {width: maxWidth + 'px'}
});
try{
var idBg  = 'slider_bg_' + this.id;
var idImg = 'slider_image_' + this.id;
var bg  = slide.addElement(d, 'div'  , {id: idBg, className: 'slide_controls_slider_bg'});
var img = slide.addElement(bg, 'span' , {
id: idImg,
className: 'slide_controls_img'
});
var slider   = YAHOO.widget.Slider.getHorizSlider(idBg, idImg, 0, maxWidth);
slider.maxWidth = maxWidth;
this.slider = slider;
this.subscribeAll(this.slider);
} catch(e){
console.error('Failed to create a slider?', e);
}
return d;
};
S.prototype.subscribeAll = function(slider){
slider.subscribe('change', this.sliderChange.bind(this));
slider.subscribe('slideEnd', this.sliderEnd.bind(this));
};
S.prototype.sliderEnd = function(evt){
if(this.slider.valueChangeSource == 1){
if(this.offset == null){
return;
}
var change = (this.offset / this.slider.maxWidth);
var time   = this.sm.durationEstimate * change;
this.setPosition(time);
}
};
S.prototype.lock = function(){
this.SliderMove = true;
};
S.prototype.unlock = function(immediate){
if(!this.unlockCb){
this.unlockCb = function(){
this.unlockCb = null;
this.SliderMove = false;
}.bind(this);
if(!immediate){
setTimeout(this.unlockCb, slide.Config.TimerMove);
}else{
this.unlockCb();
}
}
};
S.prototype.isLocked = function(){
return this.SliderMove;
};
S.prototype.sliderChange = function(offset){
try{
this.lock();
if(this.slider.valueChangeSource == 1){
this.offset = offset;
}else{
this.offset = null;
}
}catch(e){
console.error("Failed to slider change the position of the audio.", e);
}
this.unlock();
};
S.prototype.setPauseCb = function(cb){
this.audioPauseCb = cb;
};
S.prototype.audioPause = function(time){
if(typeof this.audioPauseCb == 'function'){
try{
this.audioPauseCb();
}catch(e){
console.error("Failed to run the audio callback.", e);
}
this.audioPauseCb = null;
}
};
S.prototype.audioMoveSlider = function(time){
if(this.isLocked()) return;
try{
time     = time || this.sm.position || this.time;
var pos  = this.slider.maxWidth * (this.sm.position / this.sm.durationEstimate);
this.slider.setValue(Math.floor(pos));
this.setSlideByTime(time);
}catch(e){
console.error("Failed to move the slider.", e);
}
};
S.prototype.playBtnClick = function(evt, time){
try{
this.play(time);
this.stopEvt(evt || window.event);
YAHOO.util.Dom.removeClass(this.pauseBtn, 'hidden');
YAHOO.util.Dom.addClass(this.playBtn, 'hidden');
} catch(e){
console.error("Failed to start play.", e);
}
};
S.prototype.pauseBtnClick = function(evt, cb){
try {
this.pause(cb);
this.stopEvt(evt || window.event);
YAHOO.util.Dom.removeClass(this.playBtn, 'hidden');
YAHOO.util.Dom.addClass(this.pauseBtn, 'hidden');
}catch(e){
console.error("Failed to pause the audio.", e);
}
};
S.prototype.next = function(evt) {
try{
this.stopEvt(evt);
var index = this.getSlideIndexByTime(this.sm.position);
if ((index+1) < this.slides.length) {
var t = this.intervals[index+1];
this.setPosition(t);
}
}catch(e){
console.error("Failed to set position again?", e);
}
};
S.prototype.prev = function(evt) {
try{
this.stopEvt(evt);
var index = this.getSlideIndexByTime(this.sm.position);
if ((index-1) >= 0) {
this.setPosition(this.intervals[index-1]);
}
}catch(e){
console.error("Failed to set the previous position.", e);
}
};
S.prototype.setPosition = function(time){
time = !isNaN(time) && time != null ?  time : (this.time || this.sm.position);
try{
time = Math.ceil(time);
var playAtPosition = function(time){
this.lock();
this.time = time;
this.setSlideByTime(time);
this.sm.setPosition(time);
this.playBtnClick(null, time);
this.unlock();
}.bind(this, time);
this.pause(playAtPosition);
}catch(e){
console.error("Failed to setPosition on the slider.", e);
}
};
S.prototype.getSlideIndexByTime = function(t){
var len = this.intervals.length
for (var i=1; i < len; ++i){
if(t <= this.intervals[i]){
return i-1;
}
}
return len-1;
};
S.prototype.setSlideByTime = function(t) {
this.setSlide(this.getSlideIndexByTime(t));
};
S.prototype.hideAll = function(exceptAtIndex) {
try {
for(var i = 0; i < this.slides.length; ++i) {
if(exceptAtIndex != null && i != exceptAtIndex){
YAHOO.util.Dom.addClass(this.slides[i], 'hidden');
}
}
} catch (e) {
console.error("Failed to hide all the slides.", e);
}
};
S.prototype.setSlide = function(index) {
if(index != this.position){
this.position = index;
this.hideAll(index);
YAHOO.util.Dom.removeClass(this.slides[index], 'hidden');
}
};
S.prototype.resetAudio = function(){
try{
var timeH = 1000;
this.unlock(true);
this.sm.setPosition(timeH);
this.audioMoveSlider(timeH);
this.time = timeH;
}catch(e){
console.error("Failed to reset the audio.", e);
}
};
S.prototype.onFinish = function(){
this.pauseBtnClick(null, this.resetAudio.bind(this));
slide.onIdle.fire();
};
S.prototype.play = function(time) {
try{
time = !isNaN(time) && time != null ? time : (this.time || this.sm.position || 0);
this.sm && this.sm.play({
position: time,
onpause: this.audioPause.bind(this),
whileplaying: this.audioMoveSlider.bind(this),
onfinish: this.onFinish.bind(this)
});
slide.onPlay.fire();
}catch(e){
console.error("Failed to play the file.", e);
slide.onIdle.fire();
}
};
S.prototype.pause = function(cb) {
if(!this.sm.paused && this.sm.playState){
this.setPauseCb(cb);
this.sm && this.sm.pause();
slide.onIdle.fire();
}else if(typeof cb == 'function'){
cb();
}
};
window.slide      = slide;
window.slide.Show = S;
})();

// FILE: module_slideshow.js (6277ad14) 3/7/2014 11:24:06 AM

ContentManager.onPageEvent('loaded', function(page) {
if (page && window.slide && window.slide.scanAndBuild) {
var doc = page.getElement();
if (doc) {
soundManager.onready(slide.scanAndBuild.bind(slide, doc.body || doc));
}
}
});
ContentManager.onPageEvent('hide', function(page) {
if (page && window.slide) {
slide.pauseAll();
}
});

// FILE: edit.interaction.js (b9b4b91e) 3/7/2014 11:24:06 AM

EditItem = (typeof (EditItem) == "undefined") ? {} : EditItem;
EditItem.InteractionSet = function () {
var self = this;
this.interactions = [];
this.forEachInteraction = function (ftor) {
for (var i = 0; i < self.interactions.length; ++i) {
ftor.call(this,self.interactions[i]);
}
};
this.getInteraction = function (ctor) {
for (var i = 0; i < self.interactions.length; ++i) {
if (ctor.call(this,self.interactions[i]))
return self.interactions[i];
}
return null;
};
this.push = function (interaction) {
self.interactions.push(interaction);
};
this.get = function (i) {
return self.interactions[i];
};
this.getXmlResponse = function () {
var responseBody = '';
this.forEachInteraction(function (interaction) {
responseBody = responseBody + interaction.getXmlResponse();
});
if (responseBody.length == 0)
return '';
var rv = '<testeeResponse>' + responseBody + '</testeeResponse>';
return rv;
};
this.setXmlResponse = function (xmlString) {
var xmlDoc = Util.Xml.parseFromString(xmlString);
var nodeAr = xmlDoc.getElementsByTagName('value');
for (var i = 0; nodeAr && i < nodeAr.length; ++i) {
var matchInteraction = self.getInteraction(function (interaction) {
var id = nodeAr[i].getAttribute('responseIdentifier');
return interaction.getId() == id;
});
if (matchInteraction) {
var node = nodeAr[i];
var newValue = '';
if (!node.getAttribute('choiceIdentifier')) {
for (var j = 0; j < node.childNodes.length; ++j) {
var inner = node.childNodes[j];
newValue = newValue + Util.Xml.serializeToString(inner);
}
} else {
newValue = newValue + node.getAttribute('choiceIdentifier');
}
matchInteraction.setXmlResponse(newValue);
}
}
this.redisplay();
};
};
EditItem.Interaction = function (parentIdentifier, identifier) {
this.getId = function () {
return identifier;
};
this.getParentId = function () {
return parentIdentifier;
};
};
EditItem.Interaction.Choice = function (parentId, identifier, shuffle, inlineChoices) {
var self = this;
this._inlineChoices = inlineChoices;
EditItem.Interaction.call(this, parentId, identifier);
this.forEachInlineChoice = function (ftor) {
for (var j = 0; j < inlineChoices.length; ++j) {
ftor.call(this,inlineChoices[j]);
}
};
this.getInlineChoice = function (comparator) {
for (var j = 0; j < inlineChoices.length; ++j) {
if (comparator.call(this,inlineChoices[j])) {
return inlineChoices[j];
}
}
return null;
};
this.getDefaultChoice = function () {
var rv = this.getInlineChoice(function (choice) {
return choice.showDefault;
});
return rv;
};
this.createDivId = function () {
return self.getParentId() + '-' + 'inlineChoiceInteraction' + '-' + self.getId();
};
this.get = function (i) {
return (inlineChoices.length > i) ? inlineChoices[i] : null;
};
this.setXmlResponse = function (string) {
this.forEachInlineChoice(function(choice) {
choice.selected = false;
if (choice.identifier == string) {
choice.selected = true;
}
});
};
this.getXmlResponse = function () {
var responseBody = '';
this.forEachInlineChoice(function (choice) {
if ((choice.selected === true) && (choice.showDefault === false))
responseBody = '<value responseIdentifier="' + this.getId() + '" choiceIdentifier="' + choice.identifier + '">' + choice.identifier + '</value>\n';
});
return responseBody;
};
};
EditItem.Interaction.Text = function (parentId, identifier, content) {
var self = this;
this.responseValue = '';
EditItem.Interaction.call(this, parentId, identifier);
this.setXmlResponse= function (xmlString) {
this.responseValue = xmlString;
};
this.createDivId = function () {
return this.getParentId() + '-' + 'textEntryInteraction' + '-' + this.getId();
};
this.getContent = function () {
return content;
};
this.getXmlResponse = function () {
if (self.responseValue && /\S/.test(self.responseValue))
return '<value responseIdentifier="' + this.getId() + '">' + self.responseValue + '</value>\n';
return '';
};
};

// FILE: edit.parse.js (fd1db5d2) 3/7/2014 11:24:06 AM

EditItem = (typeof (EditItem) == "undefined") ? {} : EditItem;
EditItem.Parse = function (id) {
this.mid = id;
var self = this;
this.choiceInteractions = new EditItem.Html.Choice();
this.textInteractions = new EditItem.Html.Text();
this.createFromFile = function (xmlUrl) {
var xmlhttp;
if ((typeof (window.XMLHttpRequest) == "function") ||
(typeof (window.XMLHttpRequest) == "object")) {
xmlhttp = new XMLHttpRequest();
}
else {
xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
}
xmlhttp.open("GET", xmlUrl, false);
xmlhttp.send();
var xmlDoc = xmlhttp.responseText;
return this.createFromXml(xmlDoc);
};
this.createDivId = function (nodeType, identifier) {
return self.mid + '-' + nodeType + '-' + identifier;
};
var fixXmlTasks;
var fixXmlRecurse = function (parentNode) {
for (var i = 0; i < parentNode.childNodes.length; ++i) {
var childNode = parentNode.childNodes[i];
if ((childNode.nodeName == 'inlineChoiceInteraction') ||
(childNode.nodeName == 'textEntryInteraction')) {
var obj = {
parent: parentNode,
child: childNode
};
fixXmlTasks.push(obj);
} else
fixXmlRecurse(childNode);
}
};
var fixXml = function (xmlDoc, parentNode) {
fixXmlTasks = [];
fixXmlRecurse(parentNode);
for (var i = 0; i < fixXmlTasks.length; ++i) {
var span = xmlDoc.createElement('span');
var parent = fixXmlTasks[i].parent;
var child = fixXmlTasks[i].child;
var identifier = YUD.getAttribute(child, 'responseIdentifier');
var nid = self.createDivId(child.nodeName, identifier);
span.setAttribute('id', nid);
Util.Dom.setTextContent(span, ' ');
parent.replaceChild(span, child);
}
};
var removeItemBody = function (doc) {
var itemBody = doc.getElementsByTagName('itemBody');
if (itemBody && itemBody.length) {
if (itemBody && itemBody.length == 1) {
var bodyElement = itemBody[0];
var ndiv = doc.createElement('div');
var bodyChildren = YUD.getChildren(bodyElement);
for (var j = 0; j < bodyChildren.length; ++j) {
var childNode = bodyChildren[j];
var childClone = childNode.cloneNode(true);
ndiv.appendChild(childClone);
}
bodyElement.parentNode.replaceChild(ndiv, bodyElement);
}
}
};
var parseChoiceInteractions = function (xmlElements) {
var interactionElements = xmlElements.getElementsByTagName('inlineChoiceInteraction');
for (var i = 0; i < interactionElements.length; ++i) {
var interactionElement = interactionElements[i];
var choices = interactionElement.getElementsByTagName('inlineChoice');
var interactionObj = {
identifier: YUD.getAttribute(interactionElement, 'responseIdentifier'),
shuffle: YUD.getAttribute(interactionElement, 'shuffle'),
inlineChoices: []
};
for (var j = 0; j < choices.length; ++j) {
var choice = choices[j];
var obj = {
identifier: YUD.getAttribute(choice, 'identifier'),
showDefault: ((YUD.getAttribute(choice, 'default') == 'true') ? true : false),
content: ''
};
for (var k = 0; k < choice.childNodes.length; ++k) {
var cnode = choice.childNodes[k];
var cstr = Util.Xml.serializeToString(cnode);
obj.content = obj.content + cstr;
}
interactionObj.inlineChoices.push(obj);
}
var choiceInteraction = new EditItem.Interaction.Choice(
id, interactionObj.identifier, interactionObj.shuffle, interactionObj.inlineChoices);
self.choiceInteractions.push(choiceInteraction);
}
};
var parseTextInteractions = function (xmlElements) {
var interactionElements = xmlElements.getElementsByTagName('textEntryInteraction');
for (var i = 0; i < interactionElements.length; ++i) {
var interactionElement = interactionElements[i];
var interactionObj = {
identifier: YUD.getAttribute(interactionElement, 'responseIdentifier'),
content: ''
};
for (var k = 0; k < interactionElement.childNodes.length; ++k) {
var cnode = interactionElement.childNodes[k];
var cstr = Util.Xml.serializeToString(cnode);
interactionObj.content = interactionObj.content + cstr;
}
var editObj = new EditItem.Interaction.Text(id, interactionObj.identifier, interactionObj.content);
self.textInteractions.push(editObj);
}
};
this.createFromXml = function (xmlString,container) {
var xmlDoc = Util.Xml.parseFromString(xmlString);
removeItemBody(xmlDoc);
var xmlNodes = xmlDoc.documentElement;
parseChoiceInteractions(xmlNodes);
parseTextInteractions(xmlNodes);
fixXml(xmlDoc, xmlNodes);
var aDiv = document.createElement('div');
aDiv.innerHTML = Util.Xml.serializeToString(xmlNodes);
container.innerHTML = aDiv.childNodes[0].innerHTML;
};
};

// FILE: edit.html.js (d99c1b3c) 3/7/2014 11:24:06 AM

EditItem = (typeof (EditItem) == "undefined") ? {} : EditItem;
EditItem.Html = function () {
if (EditItem.Html._activeDbInstance === undefined) {
EditItem.Html._activeDbInstance = {
interaction: null,
okHandler: null,
enterHandler: null,
choiceSpans: [],
textSpan: null
};
}
var self = this;
EditItem.InteractionSet.call(this);
this.getInteractionFromSpan = function (span) {
var spanId = span.getAttribute('id');
var nameAr = spanId.split('-');
return self.getInteraction(function (interaction) {
return interaction.getId() == nameAr[2];
});
};
this.createCrossoutSpan = function (crossoutContent, replaceContent, parentDiv) {
parentDiv.innerHTML = '';
YUD.setAttribute(parentDiv, 'tabindex', '0');
var crossoutSpan = document.createElement('span');
var replacementSpan = document.createElement('span');
crossoutSpan.innerHTML = crossoutContent;
parentDiv.setAttribute('role', 'button');
parentDiv.setAttribute('title', 'click to correct');
if (replaceContent) {
YUD.addClass(crossoutSpan, 'edit-crossout');
crossoutSpan.setAttribute('title', 'crossed-out text');
YUD.addClass(replacementSpan, 'edit-newtext');
} else {
YUD.addClass(crossoutSpan, 'edit-originaltext');
}
parentDiv.appendChild(crossoutSpan);
if (replaceContent) {
Util.Dom.setTextContent(replacementSpan, replaceContent);
parentDiv.appendChild(replacementSpan);
}
};
this.createLabel = function (defaultPhrase, parentDiv, id) {
var stemLabel = document.createElement('label');
stemLabel.innerHTML = 'Replace "' + defaultPhrase + '" with:';
YUD.addClass(stemLabel, 'edit-db-stem');
YUD.setAttribute(stemLabel, 'for', id);
parentDiv.appendChild(stemLabel);
};
this.setDbPosition = function () {
if (EditItem.Html._activeDbInstance.activeSpan && EditItem.Html._activeDbInstance.panelWidget) {
var spanRegion = YUD.getRegion(EditItem.Html._activeDbInstance.activeSpan);
EditItem.Html._activeDbInstance.panelWidget.cfg.setProperty('xy', [spanRegion.x, spanRegion.y + spanRegion.height]);
}
};
this.handleKeyEvent = function(span, evt) {
if ((span) && (evt)) {
if (evt.key == 'Enter') {
if (typeof this.keyHandlerArray[span.id] == 'function') {
evt.stopPropagation();
evt.preventDefault();
YUD.addClass(span, 'TDS_EDIT_SPAN_HOVER');
this.keyHandlerArray[span.id]();
}
} else if (evt.key == 'Esc') {
evt.stopPropagation();
EditItem.Dialog._handleCancelButton(evt);
}
}
};
this.populateDialogBox = function (dialog, interaction) {
dialog.setHeader('Edit Tool');
YUD.addClass(dialog.header, 'edit-db-header');
var parentForm = this.createInteractionCore(interaction);
dialog.setBody(parentForm);
dialog.render(document.body);
};
};
EditItem.Dialog = {
textDialog: null,
choiceDialog: null,
getTextDialog: function () {
if (this.textDialog == null) {
this.textDialog = this._buildEditDialog('EditTaskTextDialog');
YUD.addClass(this.textDialog.element, 'edit-text itemMessage editTaskMessage');
}
return this.textDialog;
},
getChoiceDialog: function () {
if (this.choiceDialog == null) {
this.choiceDialog = this._buildEditDialog('EditTaskChoiceDialog');
YUD.addClass(this.choiceDialog.element, 'edit-text itemMessage editTaskMessage');
}
return this.choiceDialog;
},
_handleCancelButton: function (ev) {
if (EditItem.Html._activeDbInstance.panelWidget)  {
EditItem.Html._activeDbInstance.choiceSpans = [];
EditItem.Html._activeDbInstance.panelWidget.hide();
YUD.removeClass(EditItem.Html._activeDbInstance.activeSpan, 'TDS_EDIT_SPAN_HOVER');
}
EditItem.Html._activeDbInstance.interaction = null;
},
_handleOkButton : function (ev) {
if (EditItem.Html._activeDbInstance.interaction &&
EditItem.Html._activeDbInstance.panelWidget &&
EditItem.Html._activeDbInstance.okHandler) {
var interaction = EditItem.Html._activeDbInstance.interaction;
EditItem.Html._activeDbInstance.okHandler(interaction);
EditItem.Html._activeDbInstance.choiceSpans = [];
EditItem.Html._activeDbInstance.textSpan = null;
EditItem.Html._activeDbInstance.panelWidget.hide();
YUD.removeClass(EditItem.Html._activeDbInstance.activeSpan, 'TDS_EDIT_SPAN_HOVER');
}
EditItem.Html._activeDbInstance.interaction = null;
},
_addOkCancel : function () {
EditItem.Html.submit = EditItem.Dialog._handleOkButton;
var buttons = [
{ text: 'OK', handler: EditItem.Dialog._handleOkButton },
{ text: 'Cancel', handler: EditItem.Dialog._handleCancelButton }];
return buttons;
},
_buildEditDialog : function(label) {
var buttons = this._addOkCancel();
var editDialog = new YAHOO.widget.Dialog(label,
{
width: "320px",
constraintoviewport: true,
modal: true,
visible: false,
draggable: true,
close: false,
postmethod: 'none',
usearia: true,
buttons: buttons,
role: 'dialog'
});
editDialog.showEvent.subscribe(function () {
YUD.addClass(document.body, 'showingDialog');
editDialog.focusFirst();
editDialog.setTabLoop(editDialog.firstElement, editDialog.lastElement);
});
editDialog.hideEvent.subscribe(function () {
YUD.removeClass(document.body, 'showingDialog');
});
this._setTabIndexOnDialog(editDialog);
return editDialog;
},
_setTabIndexOnDialog: function (dialog) {
dialog.beforeShowEvent.subscribe(function () {
this.setFirstLastFocusable();
for (var i = 0; i < dialog.focusableElements.length; i++) {
var focusableElement = dialog.focusableElements[i];
focusableElement.setAttribute('tabindex', 0);
}
var usearia = dialog.cfg.getProperty('usearia');
if (usearia) {
var id = dialog.body.id || YUD.generateId(dialog.body);
dialog.cfg.setProperty('describedby', id);
}
});
}
};

// FILE: edit.html.text.js (d3e22def) 3/7/2014 11:24:06 AM

EditItem = (typeof (EditItem) == "undefined") ? {} : EditItem;
EditItem.Html.Text = function () {
EditItem.Html.call(this);
var self = this;
var addComponentArray = [];
this.keyHandlerArray = [];
this.textDialog = YUD.get('EditTaskTextDialog');
this.textDialog = (typeof(this.textDialog) == "undefined") ? 'EditTaskTextDialog' : this.textDialog;
this.showItem = function () {
this.forEachInteraction(function (interaction) {
var aDiv = YUD.get(interaction.createDivId());
YUD.addClass(aDiv, 'TDS_EDIT_SPAN ');
this.createCrossoutSpan(interaction.getContent(), null, aDiv);
YUE.addListener(aDiv, "click", clickOnTextItem, this);
if (aDiv) {
self.keyHandlerArray[aDiv.id] = function() {
clickOnTextItem.call(aDiv);
};
addComponentArray.push(aDiv);
}
YUD.addClass(aDiv, "TTS speakAs");
aDiv.setAttribute("ssml", "sub");
aDiv.setAttribute("ssml_alias", "{silence:1000}");
});
};
this.getComponentArray = function () {
return addComponentArray;
};
var entityEncode = function (text) {
if (text && typeof text == 'string') {
var textElement = document.createElement('span');
Util.Dom.setTextContent(textElement, text);
return textElement.innerHTML;
} else return;
};
var entityDecode = function (text, code) {
if (text && typeof text == 'string') {
var textElement = document.createElement('span');
textElement.innerHTML = text
text = Util.Dom.getTextContent(textElement);
return text;
} else return;
};
this.createInteractionCore = function(interaction) {
var parentForm = document.createElement('form');
YUD.addClass(parentForm, 'edit-text');
this.createLabel(interaction.getContent(), parentForm, 'edit-textarea');
YUD.setAttribute(parentForm, 'onSubmit', 'EditItem.Html.submit()');
var textInput = document.createElement('input');
var textValue = entityDecode(interaction.responseValue);
if (textValue && typeof textValue == 'string') textInput.value = textValue;
YUD.addClass(textInput, 'edit-textarea');
YUD.setAttribute(textInput, 'id', 'edit-textarea');
parentForm.appendChild(textInput);
interaction.textSpan = textInput;
return parentForm;
};
var createTextInteractionMarkup = function (interaction) {
var dialog = EditItem.Dialog.getTextDialog();
this.populateDialogBox(dialog, interaction);
EditItem.Html._activeDbInstance.interaction = interaction;
EditItem.Html._activeDbInstance.textSpan = interaction.textSpan;
EditItem.Html._activeDbInstance.okHandler = handleOkButtonText;
EditItem.Html._activeDbInstance.panelWidget = dialog;
dialog.show();
dialog.cfg.setProperty('zindex', 1005);
inputPos(interaction.textSpan);
setTimeout(this.setDbPosition, 1);
};
var inputPos = function (node) {
var position = 0;
if ((node) && (node.value)) {
position = node.value.length;
}
if (node.setSelectionRange) {
node.focus();
node.setSelectionRange(0, position);
} else if (node.createTextRange) {
var range = node.createTextRange();
range.collapse(true);
range.moveEnd('character', position);
range.moveStart('character', 0);
range.select();
}
};
this.redisplay = function () {
this.forEachInteraction(function (interaction) {
var textSpan = YUD.get(interaction.createDivId());
var text = entityDecode(interaction.responseValue);
this.createCrossoutSpan(interaction.getContent(), text, textSpan);
});
};
var handleOkButtonText = function (ev) {
var text = EditItem.Html._activeDbInstance.textSpan.value;
if (!/\S/.test(text)) {
text = null;
}
var interaction = EditItem.Html._activeDbInstance.interaction;
self.createCrossoutSpan(interaction.getContent(), text, YUD.get(interaction.createDivId()));
interaction.responseValue = entityEncode(text);
};
var clickOnTextItem = function (ev) {
var span = this;
if (EditItem.Html._activeDbInstance.interaction)
return;
var interaction = self.getInteractionFromSpan(span);
YUD.addClass(span, 'TDS_EDIT_SPAN_HOVER');
EditItem.Html._activeDbInstance.activeSpan = span;
if (interaction) {
createTextInteractionMarkup.call(self, interaction);
}
};
};

// FILE: edit.html.choice.js (c3cbe255) 3/7/2014 11:24:06 AM

EditItem = (typeof (EditItem) == "undefined") ? {} : EditItem;
EditItem.Html = (typeof (EditItem.Html) == "undefined") ? {} : EditItem.Html;
EditItem.Html.Choice = function () {
EditItem.Html.call(this);
var self = this;
var addComponentArray = [];
this.keyHandlerArray = [];
var forAllInlineChoices = function (ftor) {
self.forEachInteraction(function (interaction) {
interaction.forEachInlineChoice(function (choice) {
ftor(choice);
});
});
};
var initializeChoiceInteractions = function () {
forAllInlineChoices(function (choice) {
if (choice.showDefault) {
choice.selected = true;
} else {
choice.selected = false;
}
});
};
this.showItem = function () {
initializeChoiceInteractions();
self.forEachInteraction(function (interaction) {
var aDiv = YUD.get(interaction.createDivId());
var aChoice = interaction.getDefaultChoice();
if (aDiv && aChoice) {
aDiv.innerHTML = aChoice.content;
YUD.addClass(aDiv, 'TDS_EDIT_SPAN ');
YUD.addClass(aDiv, 'edit-originaltext');
YUE.addListener(aDiv, "click", clickOnChoiceItem, this);
self.keyHandlerArray[aDiv.id] = function () {
clickOnChoiceItem.call(aDiv);
};
addComponentArray.push(aDiv);
YUD.addClass(aDiv, "TTS speakAs");
aDiv.setAttribute("ssml", "sub");
aDiv.setAttribute("ssml_alias", "{silence:1000}");
}
});
this.getComponentArray = function () {
return addComponentArray;
};
};
var getInlineChoiceId = function (interaction, choice) {
var iid = interaction.createDivId();
return iid + '-' + choice.identifier + '-value';
};
var clickOnChoiceItem = function (ev) {
var span = this;
if (EditItem.Html._activeDbInstance.interaction)
return;
var interaction = self.getInteractionFromSpan(span);
YUD.addClass(span, 'TDS_EDIT_SPAN_HOVER');
EditItem.Html._activeDbInstance.activeSpan = span;
if (interaction) {
createChoiceInteractionMarkup(interaction);
}
};
var hideDropdown = function () {
var selectNode = EditItem.Html._activeDbInstance.activeSelect;
if (YUD.hasClass(selectNode, 'edit-nav-opened')) {
YUD.removeClass(selectNode, 'edit-nav-opened');
YUD.addClass(selectNode, 'edit-nav-closed');
}
YUE.removeListener(this, 'click', hideDropdown);
};
this.redisplay = function () {
this.forEachInteraction(function (interaction) {
var choiceSpan = YUD.get(interaction.createDivId());
var selectedValue = '';
interaction.forEachInlineChoice(function(choice) {
if (choice.selected && !choice.showDefault) {
selectedValue = choice.content;
}
});
this.createCrossoutSpan(interaction.getDefaultChoice().content, selectedValue, choiceSpan);
});
};
var handleOkButtonChoice = function (interaction) {
var responseContent = EditItem.Html._activeDbInstance.activeSelect.value;
var choiceSpan = YUD.get(interaction.createDivId());
var defaultChoice = interaction.getDefaultChoice();
self.createCrossoutSpan(defaultChoice.content, responseContent, choiceSpan);
var choiceSpans = EditItem.Html._activeDbInstance.choiceSpans;
for (var i = 0; i < choiceSpans.length; i++) {
if (choiceSpans[i].selected == true) {
var choiceId = choiceSpans[i].id.split('-')[3];
interaction.forEachInlineChoice(function(choice) {
if (choice.identifier == choiceId) {
choice.selected = true;
} else {
choice.selected = false;
}
});
}
}
};
var createChoiceInteractionMarkup = function (interaction) {
var dialog = EditItem.Dialog.getChoiceDialog();
EditItem.Html._activeDbInstance.okHandler = handleOkButtonChoice;
EditItem.Html._activeDbInstance.interaction = interaction;
EditItem.Html._activeDbInstance.panelWidget = dialog;
self.populateDialogBox(dialog, interaction);
dialog.show();
};
this.createInteractionCore = function(interaction) {
var parentForm = document.createElement('form');
YUD.addClass(parentForm, 'edit-nav');
YUD.setAttribute(parentForm, 'onSubmit', 'EditItem.Html.submit()');
var defaultChoice = interaction.getDefaultChoice();
this.createLabel(defaultChoice.content, parentForm, 'edit-select');
var select = document.createElement('select');
YUD.addClass(select, 'first-of-type');
YUD.addClass(select, 'edit-nav-closed');
YUD.setAttribute(select, 'id', 'edit-select');
EditItem.Html._activeDbInstance.activeSelect = select;
var i = 0;
interaction.forEachInlineChoice(function (choice) {
if (!choice.showDefault && !choice.selected) {
var li = document.createElement('option');
YUD.addClass(li, 'yuimenuitem edit-nav');
if (choice.selected) {
YUD.addClass(li, 'edit-list-selected');
YUD.setAttribute(li, 'selected', 'selected');
}
YUD.setAttribute(li, 'id', getInlineChoiceId(interaction, choice));
YUD.setAttribute(li, 'groupindex', 0);
YUD.setAttribute(li, 'index', i.toString());
YUD.setAttribute(li, 'value', choice.content);
li.innerHTML = choice.content;
if (choice.selected && select.firstChild) {
YUD.insertBefore(li, select.firstChild);
} else {
select.appendChild(li);
}
EditItem.Html._activeDbInstance.choiceSpans.push(li);
}
i++;
});
parentForm.appendChild(select);
return parentForm;
};
};

// FILE: module_edittask.js (faa688b6) 3/7/2014 11:24:06 AM

(function() {
function isEditTaskText(item) {
return item.isResponseType('EditTask');
}
function isEditTaskChoice(item) {
return item.isResponseType('EditTaskChoice');
}
function isEditTask(item) {
return isEditTaskText(item) || isEditTaskChoice(item);
}
function init(page, item) {
item.getStemElement = function() {
var compoundEl = page.getCompoundElement();
if (compoundEl) {
return compoundEl;
} else {
return item.getElement();
}
};
}
function process(page, item) {
ContentManager.log("EditItem: processing item " + item.getID());
var pageDoc = page.getDoc();
var container = pageDoc.getElementById('EditContainer_' + item.position);
if (container == null) {
console.warn('EditItem: Could not find the container for item ' + item.getID());
return;
}
var qtiXml = (item.qti) ? item.qti.xml : null;
if (qtiXml == null) {
console.warn('EditItem: Could not find QTI for item ' + item.getID());
return;
}
var ei = new EditItem.Parse(item.position);
ei.createFromXml(qtiXml,container);
YUD.removeClass(container, 'loading');
YUD.addClass(container, 'edit-container');
var editChoiceInstance = ei.choiceInteractions;
var editTextInstance = ei.textInteractions;
var editing = {
editText: editTextInstance,
editChoice: editChoiceInstance
};
item.editing = editing;
var onresize = window.onresize;
window.onresize = function () {
if (onresize != null)
onresize();
if (item.editing && item.editing.editText)
item.editing.editText.setDbPosition();
};
editChoiceInstance.showItem();
editTextInstance.showItem();
var componentArray = editTextInstance.getComponentArray();
componentArray.push.apply(componentArray, editChoiceInstance.getComponentArray());
for (var i = 0; i < componentArray.length; ++i) {
item.addComponent(componentArray[i]);
}
if (item.value != null) {
if (isEditTaskText(item)) {
editTextInstance.setXmlResponse(item.value);
}
else if (isEditTaskChoice(item)) {
editChoiceInstance.setXmlResponse(item.value);
}
}
}
function processKey(page, item, evt) {
if (item == null || item.editing == null) return;
if (evt.type != 'keydown') return;
if (evt.ctrlKey || evt.altKey) return;
if (ContentManager.isReadOnly()) return;
var componentEl = item.getActiveComponent(evt);
if (componentEl == null) {
return;
}
var edits = null;
if (isEditTaskText(item)) {
edits = item.editing.editText;
}
else if (isEditTaskChoice(item)) {
edits = item.editing.editChoice;
}
if (edits) {
edits.handleKeyEvent.call(edits, componentEl, evt);
}
}
ContentManager.onItemEvent('init', function (page, item) {
if (isEditTask(item)) {
init(page, item);
}
});
ContentManager.onItemEvent('available', function (page, item) {
if (isEditTask(item)) {
process(page, item);
}
});
ContentManager.onItemEvent('keyevent', processKey);
ContentManager.onItemEvent('zoom', function (page, item) {
if (item.editing && item.editing.editText) {
item.editing.editText.setDbPosition();
}
});
ContentManager.onItemEvent('hide', function (page, item) {
if (item.editing) {
var activeInstance = EditItem.Html._activeDbInstance;
if (activeInstance.panelWidget) {
activeInstance.panelWidget.hide();
activeInstance.interaction = null;
if (activeInstance.activeSpan) {
YUD.removeClass(activeInstance.activeSpan, 'TDS_EDIT_SPAN_HOVER');
activeInstance.activeSpan = null;
}
}
}
});
})();
(function () {
var getter = function (item, response) {
var value = '';
if (item && item.editing) {
var editType = (item.responseType == 'EditTask') ? item.editing.editText : item.editing.editChoice;
value = editType.getXmlResponse();
}
response.value = value;
response.isAvailable = true;
var validResponse = (value && value.length > 0) ? true : false;
response.isSelected = validResponse;
response.isValid = validResponse;
};
var setter = function (item, value) {
if (item && item.editing) {
var editType = (item.responseType == 'EditTask') ? item.editing.editText : item.editing.editChoice;
editType.setXmlResponse(value);
}
};
ContentManager.registerResponseHandler('EditTask', getter, setter);
ContentManager.registerResponseHandler('EditTaskChoice', getter, setter);
})();

// FILE: asi.parse.js (16226dcc) 3/7/2014 11:24:13 AM

AsiItem = (typeof (AsiItem) == "undefined") ? {} : AsiItem;
AsiItem.Parse = function (item) {
var YUD = YAHOO.util.Dom;
var YUE = YAHOO.util.Event;
this.mid = item.position;
this.createAsiChoices = function () {
var stem = item.getStemElement();
var answers = YUD.get('ScaffoldingContainer_' + this.mid);
this.identifier = 'ScaffoldingItemId_' + this.mid;
this.stem = stem;
this.asiContent = this.processNodes(stem, answers);
this.minSelection = 1;
this.maxAttempts = (this.asiContent.choices.length) - 1;
answers.innerHTML = '';
};
};
AsiItem.Parse.prototype.processNodes = function (aStem, aAnswers) {
aStem.audioCue = this.processSoundLinks(this.stem);
var choiceAr = [];
var feedbackAr = [];
var choiceElems = aAnswers.getElementsByTagName('div');
for (var j = 0; j < choiceElems.length; ++j) {
var choice = choiceElems[j];
var id = YUD.getAttribute(choice, 'data-asi-identifier');
if (id && id.length > 0) {
var feedback = this.readFeedbackContent(choice, j);
if (feedback) {
feedbackAr[feedback.identifier] = feedback;
}
}
}
for (j = 0; j < choiceElems.length; ++j) {
choice = choiceElems[j];
id = YUD.getAttribute(choice, 'data-asi-identifier');
if (id && id.length > 0)
{
var choiceContent = {
identifier: id,
complete: choice.getAttribute('data-asi-complete'),
audioCue: this.processSoundLinks(choice),
content: {
htmlContent: this.readChoiceContent(choice, j),
feedback: feedbackAr[id]
}
};
if (choiceContent.audioCue != null)
choiceAr.push(choiceContent);
}
}
return {
stem: this.stem,
choices: choiceAr
};
};
AsiItem.Parse.prototype.processSoundLinks = function (parentSpan) {
var anchors = parentSpan.getElementsByTagName('a');
for (var i = 0; i < anchors.length; ++i) {
var anchor = anchors[i];
var source = Util.Audio.getPlayableSource(anchor);
if (source != null) {
anchor.parentNode.removeChild(anchor);
return source.url;
}
}
return null;
};
AsiItem.Parse.prototype.readChoiceContent = function (choice, index) {
var choiceChildNodes = choice.childNodes;
var htmlContent;
var htmlContentString = '';
for (var k = 0; k < choiceChildNodes.length; ++k) {
if (choiceChildNodes[k].nodeType == 1) {
var childNode = choiceChildNodes[k];
var feedbackId = YUD.getAttribute(childNode, 'data-feedback-identifier');
if (feedbackId && feedbackId.length > 0) {
continue;
}
else {
htmlContentString = htmlContentString + Util.Xml.serializeToString(choiceChildNodes[k]);
}
}
}
htmlContent = document.createElement('div');
AsiItem.Html.setSpanId(htmlContent,this.mid, index);
htmlContent.innerHTML = htmlContentString;
return htmlContent;
};
AsiItem.Parse.prototype.readFeedbackContent = function (choice, index) {
var choiceChildNodes = choice.childNodes;
var feedback = null;
for (var k = 0; k < choiceChildNodes.length; ++k) {
if (choiceChildNodes[k].nodeType == 1) {
var childNode = choiceChildNodes[k];
var feedbackId = YUD.getAttribute(childNode, 'data-feedback-identifier');
if (feedbackId && feedbackId.length > 0) {
feedback = this.getFeedback(childNode, feedbackId);
}
}
}
return feedback;
};
AsiItem.Parse.prototype.getFeedback = function (feedbackElement, identifier) {
var feedbackContainer = document.createElement('div');
feedbackContainer.appendChild(feedbackElement);
var feedback = {
identifier: identifier,
audioCue: this.processSoundLinks(feedbackElement),
feedbackContainer: feedbackContainer
};
return feedback;
};

// FILE: asi.audio.js (386baf7a) 3/7/2014 11:24:13 AM

AsiItem = (typeof (AsiItem) == "undefined") ? {} : AsiItem;
AsiItem.AudioInterface = function () {
this._tracksToPlay = [];
this._lastPlayed = 0;
this._audioQ = Util.Audio.createQueue();
var self = this;
this.disposed = false;
this.add = function (url, id, startFunction, stopFunction, instance) {
var obj = {
url: url,
id: id,
startFunction: startFunction,
stopFunction: stopFunction,
instance: instance
};
this._tracksToPlay.push(obj);
var audioData = AsiItem.AudioInterface.audioData[id];
if (audioData == null) {
audioData = Util.Audio.createSound(id, url);
AsiItem.AudioInterface.audioData[id] = audioData;
}
audioData.onPlay.subscribe(function () {
if (self.disposed)
return;
self.onStart();
});
audioData.onIdle.subscribe(function () {
if (self.disposed)
return;
self.onStop();
});
this._audioQ.add(audioData);
};
};
AsiItem.AudioInterface.prototype.dispose = function () {
AsiItem.EventLog('AudioInterface - dispose');
this._audioQ.dispose();
this.disposed = true;
};
AsiItem.AudioInterface.prototype.start = function () {
this._audioQ.start();
};
AsiItem.AudioInterface.prototype.stop = function () {
this._audioQ.stop();
};
AsiItem.AudioInterface.prototype.onStop = function () {
if ((this._lastPlayed > 0) && (this._tracksToPlay.length > this._lastPlayed - 1)) {
var current = this._tracksToPlay[this._lastPlayed - 1];
var spid = current.id;
var instance = current.instance;
if (current.stopFunction)
current.stopFunction(spid, instance);
}
};
AsiItem.AudioInterface.prototype.onStart = function () {
if (this._tracksToPlay.length > this._lastPlayed) {
var current = this._tracksToPlay[this._lastPlayed];
var spid = current.id;
var instance = current.instance;
if (current.startFunction) {
current.startFunction(spid, instance);
}
}
this._lastPlayed++;
};
AsiItem.AudioInterface.audioData = [];

// FILE: asi.wapiaudio.js (39f5a052) 3/7/2014 11:24:13 AM

AsiItem = (typeof (AsiItem) == "undefined") ? {} : AsiItem;
AsiItem.WAPIAudioInterface = function (context) {
this._tracksToPlay = [];
this._currentTrack = 0;
this.disposed = false;
this._context = context;
this._source = null;
this._isPlaying = false;
this._timer = null;
};
AsiItem.WAPIAudioInterface.prototype.add = function (url, id, startFunction, stopFunction, instance) {
var buffer = AsiItem.WAPIAudioInterface.audioDataHash[url];
if (buffer === 'undefined') {
AsiItem.EventLog("WAPIAudioInterface.add - Audio is not preloaded.");
return;
}
var track = {
url: url,
id: id,
startFunction: startFunction,
stopFunction: stopFunction,
instance: instance,
audioData: buffer
};
this._tracksToPlay.push(track);
};
AsiItem.WAPIAudioInterface.prototype.start = function () {
if (this._isPlaying) {
this.stop();
}
AsiItem.EventLog("WAPI Interface start - Intialize player for playing");
this._currentTrack = 0;
this._isPlaying = true;
this.playCurrentTrack();
};
AsiItem.WAPIAudioInterface.prototype.createSource = function (buffer) {
var source = this._context.createBufferSource();
source.buffer = buffer;
source.connect(this._context.destination);
return source;
};
AsiItem.WAPIAudioInterface.prototype.playCurrentTrack = function () {
var audioData = AsiItem.WAPIAudioInterface.audioDataHash[this._tracksToPlay[this._currentTrack].url];
if (!audioData) {
AsiItem.EventLog("WAPIAudioInterface.playCurrentTrack - audioData no longer available.");
while (this._currentTrack < this._tracksToPlay.length) {
var current = this._tracksToPlay[this._currentTrack];
current.startFunction(current.id, current.instance);
current.stopFunction(current.id, current.instance);
this._currentTrack += 1;
}
return;
}
var source = this.createSource(audioData);
var duration = audioData.duration;
this._source = source;
source.start ? source.start(0) : source.noteOn(0);
this.onTrackStarted();
var self = this;
var recurse = arguments.callee;
var delayInSeconds = 1;
this._timer = setTimeout(function() {
self.onTrackEnded();
self._currentTrack += 1;
if (self._currentTrack < self._tracksToPlay.length) {
recurse.call(self);
} else {
self.stop();
}
},
(duration + delayInSeconds) * 1000);
};
AsiItem.WAPIAudioInterface.prototype.stop = function () {
clearTimeout(this._timer);
if (this._source && this._isPlaying) {
this._source.stop ? this._source.stop(0) : this._source.noteOff(0);
}
this._isPlaying = false;
};
AsiItem.WAPIAudioInterface.prototype.dispose = function () {
this._tracksToPlay = [];
this.disposed = true;
this._context = null;
this._source = null;
this._isPlaying = false;
this._timer = null;
this.audioDataHash = {};
};
AsiItem.WAPIAudioInterface.prototype.onTrackStarted = function () {
if (this._currentTrack < this._tracksToPlay.length) {
var current = this._tracksToPlay[this._currentTrack];
if (current.startFunction) {
current.startFunction(current.id, current.instance);
}
}
};
AsiItem.WAPIAudioInterface.prototype.onTrackEnded = function () {
if (this._currentTrack < this._tracksToPlay.length && this._isPlaying) {
var current = this._tracksToPlay[this._currentTrack];
if (current.stopFunction) {
current.stopFunction(current.id, current.instance);
}
}
};
AsiItem.WAPIAudioInterface.audioDataHash = {};

// FILE: asi.audiofactory.js (2b04d490) 3/7/2014 11:24:13 AM

AsiItem = (typeof (AsiItem) == "undefined") ? {} : AsiItem;
AsiItem.AudioPlayerFactory = function () {
if (AsiItem.AudioPlayerFactory.Context === undefined) {
AsiItem.AudioPlayerFactory.Context = null;
window.AudioContext = window.AudioContext || window.webkitAudioContext;
if (!window.AudioContext) {
AsiItem.EventLog('Web Audio API is not supported in this browser.');
} else {
try {
var audioContext = new window.AudioContext();
AsiItem.AudioPlayerFactory.Context = audioContext;
} catch (e) {
AsiItem.EventLog('Web Audio API not supported on this browser');
}
}
}
if (AsiItem.AudioPlayerFactory.Context !== null) {
this.context = AsiItem.AudioPlayerFactory.Context;
this.EnvSupportsWebAPI = true;
} else {
this.EnvSupportsWebAPI = false;
}
};
AsiItem.AudioPlayerFactory.prototype.createAudioInterface = function () {
if (this.EnvSupportsWebAPI) {
return new AsiItem.WAPIAudioInterface(this.context);
} else {
return new AsiItem.AudioInterface();
}
};
AsiItem.AudioPlayerFactory.prototype.onReady = function (playerContent, onReady) {
if (!this.EnvSupportsWebAPI) {
onReady();
return;
}
try {
var loader = new AsiItem.AudioPlayerFactory.BufferLoader(
this.context,
playerContent,
function() {
AsiItem.EventLog('onReady - ASI audio content loaded');
onReady();
});
} catch (e) {
AsiItem.EventLog('Failed to load audio tracks for Web Audio API... reverting to SM2 audio');
this.EnvSupportsWebAPI = false;
onReady();
}
};
AsiItem.AudioPlayerFactory.BufferLoader = function (context, playerContent, callback) {
this.context = context;
this.onLoadComplete = callback;
this.loadCount = 0;
var len = playerContent ? playerContent.length : 0;
var loadInitiated = {};
for (var i = 0; i < len; ++i) {
if (typeof loadInitiated[playerContent[i].url] === 'undefined') {
loadInitiated[playerContent[i].url] = true;
this.loadBuffer(playerContent[i], playerContent.length);
} else {
this.loadCount += 1;
}
}
};
AsiItem.AudioPlayerFactory.BufferLoader.prototype.loadBuffer = function (track, numTracks) {
var request = new XMLHttpRequest();
request.open("GET", track.url, true);
request.responseType = "arraybuffer";
var self = this;
request.onload = function() {
self.context.decodeAudioData(
request.response,
function(decodedBuffer) {
if (!decodedBuffer) {
AsiItem.EventLog('BufferLoader.loadBuffer: Error decoding file data');
return;
}
AsiItem.EventLog('BufferLoader.loadBuffer: Buffer decoded successfully (' + self.loadCount + ')');
if (typeof AsiItem.WAPIAudioInterface.audioDataHash[track.url] !== 'undefined') {
AsiItem.EventLog('BufferLoader.loadBuffer: Track ' + track.url + ' already loaded');
}
AsiItem.WAPIAudioInterface.audioDataHash[track.url] = decodedBuffer;
self.loadCount += 1;
if (self.loadCount === numTracks) {
self.onLoadComplete();
}
},
function(error) {
AsiItem.EventLog('BufferLoader.loadBuffer: decodeAudioData error');
}
);
};
request.onerror = function () {
AsiItem.EventLog('BufferLoader.loadBuffer: XHR error');
};
request.send();
};

// FILE: asi.html.js (0c30bd88) 7/23/2014 4:30:37 PM

AsiItem = (typeof (AsiItem) == "undefined") ? {} : AsiItem;
AsiItem.EventLog = function(str) {
if (AsiItem.EventLog.enabled) {
ContentManager.log('ASI: ' + str);
}
};
AsiItem.EventLog.enabled = true;
AsiItem.Html = function (parser, parentDiv) {
this._parentDiv = parentDiv;
this._parser = parser;
this._stemCell = parser.stem;
this.setSpanId(this._stemCell, 'asiStem');
};
AsiItem.Html.prototype.getStemCell = function () {
return this._stemCell;
};
AsiItem.Html.prototype.getParentDiv = function() {
return this._parentDiv;
};
AsiItem.Html.prototype.resetInteractions = function(responseSpanIds) {
for (var i = 0; i < responseSpanIds.length; ++i) {
YUD.addClass(responseSpanIds, 'asi-response-hidden');
YUD.removeClass(responseSpanIds, 'asi-response-shown');
YUD.removeClass(responseSpanIds, 'asi-response-subdued');
}
};
AsiItem.Html.prototype.showFeedbackHideResponse = function (fSpan, rSpan) {
var region = YUD.getRegion(rSpan);
YUD.removeClass(rSpan, 'asi-response-shown');
YUD.removeClass(fSpan, 'asi-response-hidden');
YUD.addClass(rSpan, 'asi-response-hidden');
YUD.addClass(fSpan, 'asi-feedback-shown');
YUD.setStyle(fSpan, 'width', region.width.toString() + 'px');
YUD.setStyle(fSpan, 'height', region.height.toString() + 'px');
};
AsiItem.Html.prototype.createAudioButton = function () {
var audioWidget = document.createElement('button');
audioWidget.type = 'button';
this.setPlayIcon(audioWidget);
YUD.addClass(audioWidget, 'asi-playback-span');
return audioWidget;
};
AsiItem.Html.prototype.allowInteractiveGui = function () {
YUD.addClass(this._stemCell, 'stemContainer contextAreaFocus asi-stem');
};
AsiItem.Html.prototype.setPlayIcon = function (widget) {
AsiItem.EventLog('setPlayIcon');
YUD.removeClass(widget, 'asi-stop-button');
YUD.addClass(widget, 'asi-playback-button');
YUD.removeClass(widget, 'asi-response-subdued');
};
AsiItem.Html.prototype.subduePlayIcon = function (widget) {
AsiItem.EventLog('subduePlayIcon');
YUD.addClass(widget, 'asi-response-subdued');
};
AsiItem.Html.prototype.setStopIcon = function (widget) {
AsiItem.EventLog('setStopIcon');
YUD.removeClass(widget, 'asi-playback-button');
YUD.addClass(widget, 'asi-stop-button');
YUD.removeClass(widget, 'asi-response-subdued');
};
AsiItem.Html.prototype.enableResponses = function (responseArray) {
AsiItem.EventLog('enableResponses');
for (var i = 0; i < responseArray.length; ++i) {
var span = YUD.get(responseArray[i]);
AsiItem.EventLog('enableResponses span ' + YUD.getAttribute(span, 'id'));
YUD.removeClass(span, 'asi-response-subdued');
YUD.removeClass(span, 'asi-response-emphasis');
YUD.addClass(span, 'asi-response-enabled');
var audioResponse = this.getAudioSpanFromResponseSpan(span);
if (audioResponse) {
YUD.removeClass(audioResponse, 'asi-response-subdued');
YUD.removeClass(audioResponse, 'asi-stop-button');
YUD.addClass(audioResponse, 'asi-playback-button');
}
}
};
AsiItem.Html.prototype.emphasizeResponse = function(span) {
YUD.addClass(span, 'asi-response-emphasis');
YUD.addClass(span, 'asi-response-shown');
YUD.removeClass(span, 'asi-response-subdued');
YUD.removeClass(span, 'asi-response-hidden');
};
AsiItem.Html.prototype.disableResponses = function (responseArray) {
AsiItem.EventLog('disableResponses');
for (var i = 0; i < responseArray.length; ++i) {
var span = YUD.get(responseArray[i]);
AsiItem.EventLog('disableResponses span ' + YUD.getAttribute(span, 'id'));
YUD.removeClass(span, 'asi-response-enabled');
YUD.removeClass(span, 'asi-response-emphasis');
}
};
AsiItem.Html.prototype.subdueSpan = function (span) {
YUD.addClass(span, 'asi-response-subdued');
YUD.removeClass(span, 'asi-response-emphasis');
};
AsiItem.Html.prototype.subdueResponses = function (responseArray) {
AsiItem.EventLog('subdueResponses');
for (var i = 0; i < responseArray.length; ++i) {
var span = YUD.get(responseArray[i]);
AsiItem.EventLog('subdue span ' + YUD.getAttribute(span, 'id'));
this.subdueSpan(span);
}
};
AsiItem.Html.prototype.createSpanId = function (purpose) {
return AsiItem.Html.createSpanId(this._parser.mid, purpose);
};
AsiItem.Html.prototype.setSpanId = function (stemDiv, purpose) {
AsiItem.Html.setSpanId(stemDiv, this._parser.mid, purpose);
};
AsiItem.Html.createSpanId = function (itemId, purpose) {
return 'asi-' + itemId.toString() + '-' + purpose;
};
AsiItem.Html.setSpanId = function (spanId, itemId, purpose) {
YUD.setAttribute(spanId, 'id', AsiItem.Html.createSpanId(itemId, purpose));
};
AsiItem.Html.prototype.getResponseIndex = function (span) {
var id = '';
if (typeof (span) == "string") {
id = span;
} else {
id = YUD.getAttribute(span, 'id');
}
var idSplit = id.split('-');
if (idSplit.length >= 4) {
return idSplit[3];
}
return '';
};
AsiItem.Html.prototype.getRelatedFeedbackSpan = function (span) {
var fid = AsiItem.Html.createSpanId(this._parser.mid, 'feedback-' + this.getResponseIndex(span));
var fspan = YUD.get(fid);
return fspan;
};
AsiItem.Html.prototype.getResponseSpanFromIdentifier = function (identifier) {
var choiceContent = this._parser.asiContent.choices;
for (var i = 0; i < choiceContent.length; i++) {
var choice = choiceContent[i];
if (choice.identifier == identifier) {
var spid = this.createSpanId('response-' + i.toString());
return YUD.get(spid);
}
}
return null;
};
AsiItem.Html.prototype.getAudioSpanFromResponseSpan = function (responseSpan) {
var id = responseSpan;
if (typeof (responseSpan) == 'object') {
id = responseSpan.id;
}
var rindex = this.getResponseIndex(id);
var responseAudioSpanIndex = this.createSpanId('audioResponse-' + rindex);
var responseAudioSpan = YUD.get(responseAudioSpanIndex);
return responseAudioSpan;
};

// FILE: asi.interaction.js (cf0b7512) 7/23/2014 4:30:37 PM

AsiItem.Interaction = function (asiHtmlObject, parser,voiceGuidance) {
this._html = asiHtmlObject;
this._parser = parser;
this._voiceGuidance = voiceGuidance;
this._playSourceFromResponse = false;
this._player = null;
this._responsePlayer = null;
this._isPlaying = false;
this._isResponsePlaying = false;
this._isFeedbackPlaying = false;
this._attempts = [];
this._terminateEvent = new YAHOO.util.CustomEvent('onTerminate', this);
this._responseSpanIds = [];
this.complete = false;
this.responsesLeft = parser.maxAttempts;
this.isReadOnly = function() { return false; };
this._html.setSpanId(this._stemCell, 'asiStem');
this._playbackInfo = {
stemId: YUD.getAttribute(this._html.getStemCell(), 'id'),
stemAudio: parser.asiContent.stem.audioCue,
playStemAudio: true,
responseAudio: []
};
this._terminalSpanIds = [];
this._spanToIdentifierMap = [];
this.audioWidget = null;
this._responseButtons = [];
this.hasPlayedOnce = false;
this._feedbackCues = [];
this._responseIdentifiers = [];
this._audioFactory = new AsiItem.AudioPlayerFactory();
};
AsiItem.Interaction.prototype.hidePage = function () {
if (this.complete)
return;
if (this._isPlaying && this._player) {
this._player.stop();
this._player.dispose();
this._player = null;
this._isPlaying = false;
}
if (this._isResponsePlaying && this._responsePlayer) {
this._responsePlayer.stop();
this._responsePlayer.dispose();
this._responsePlayer = null;
this._isResponsePlaying = false;
}
if (this._voiceGuidance && this.hasPlayedOnce) {
this._html.enableResponses(this._responseSpanIds);
this._html.setPlayIcon(this.audioWidget);
} else if (this._voiceGuidance) {
this._html.resetInteractions(this._responseSpanIds);
this._html.setPlayIcon(this.audioWidget);
}
};
AsiItem.Interaction.prototype.startInteraction = function (valueToRestore) {
var self = this;
if (this._voiceGuidance) {
var playerContent = [];
var stemId = YUD.getAttribute(this._html.getStemCell(), 'id');
var stemAudio = this._parser.asiContent.stem.audioCue;
var track = {
id: stemId,
url: stemAudio,
audioData: null
};
playerContent.push(track);
var choiceContent = this._parser.asiContent.choices;
for (var i = 0; i < choiceContent.length; i++) {
var respSpanId = this._html.createSpanId('response-' + i.toString());
track = {
id: respSpanId,
url: choiceContent[i].audioCue,
audioData: null
};
playerContent.push(track);
var feedbackSpanId = this._html.createSpanId('feedback-' + i.toString());
if (choiceContent[i].audioCue) {
track = {
id: feedbackSpanId,
url: choiceContent[i].audioCue,
audioData: null
};
playerContent.push(track);
}
}
this._audioFactory.onReady(playerContent, function() {
self.constructAudioTag(self._html.getStemCell());
self.populateResponses(self._parentDiv, self._voiceGuidance);
self._html.allowInteractiveGui();
self._playSourceFromResponse = false;
if (valueToRestore) {
self.setResponse(valueToRestore);
}
});
} else {
this.populateResponses(this._parentDiv, this._voiceGuidance);
this._html.allowInteractiveGui();
if (valueToRestore) {
self.setResponse(valueToRestore);
}
}
};
AsiItem.Interaction.prototype.playStory = function () {
AsiItem.EventLog('AsiItem.Interaction.prototype.playStory');
this._html.setPlayIcon(this.audioWidget);
};
AsiItem.Interaction.prototype.getResponse = function () {
var rv = '';
for (var i = 0; i < this._responseIdentifiers.length; ++i) {
if (rv.length > 0) {
rv = rv + ' ';
}
rv = rv + this._responseIdentifiers[i];
}
return rv;
};
AsiItem.Interaction.prototype.setResponse = function (value) {
var values = value.split(' ');
this.hasPlayedOnce = true;
this.displayResponses(this._responseSpanIds);
this._html.enableResponses(this._responseSpanIds);
for (var i = 0; i < values.length; ++i) {
var span = this._html.getResponseSpanFromIdentifier(values[i]);
if (span) {
this._responseIdentifiers.push(values[i]);
var fSpan = this._html.getRelatedFeedbackSpan(span);
if (fSpan) {
this.responsesLeft--;
this._html.showFeedbackHideResponse(fSpan, span);
if (this._terminalSpanIds[YUD.getAttribute(span, 'id')]) {
this.complete = true;
this.terminateInteraction();
}
if (this.responsesLeft == 0) {
this.complete = true;
this.terminateInteraction();
}
}
}
}
};
AsiItem.Interaction.prototype.onTerminate = function (callback) {
this._terminateEvent.subscribe(callback, this);
};
AsiItem.Interaction.prototype.terminateInteraction = function () {
this._html.subdueResponses(this._responseSpanIds);
this._html.disableResponses(this._responseSpanIds);
this._html.subduePlayIcon(this.audioWidget);
this._terminateEvent.fire();
if (this._player && this._player._tracksToPlay) {
var tracks = this._player._tracksToPlay;
for (var i = 0; i < tracks.length; i ++) {
var track = tracks[i];
if (AsiItem.WAPIAudioInterface.audioDataHash[track.url]) {
delete AsiItem.WAPIAudioInterface.audioDataHash[track.url];
}
}
}
};
AsiItem.Interaction.prototype.constructAudioTag = function (parentDiv) {
var audioWidgetSpan = document.createElement('span');
this.audioWidget = this._html.createAudioButton();
audioWidgetSpan.appendChild(this.audioWidget);
parentDiv.appendChild(audioWidgetSpan);
YUE.addListener(audioWidgetSpan, 'click', AsiItem.Interaction.handlePlayAudioButton, this);
};
AsiItem.Interaction.prototype.processResponse = function (span) {
if (this._isPlaying || this._isResponsePlaying || this._isFeedbackPlaying)
return;
this.responsesLeft--;
var fspan = this._html.getRelatedFeedbackSpan(span);
var spid = YUD.getAttribute(span, 'id');
this._responseIdentifiers.push(this._spanToIdentifierMap[spid]);
if (this._terminalSpanIds[spid]) {
this.complete = true;
this.terminateInteraction();
} else if ((this.complete == false) && (this.responsesLeft == 0)) {
this.complete = true;
this.terminateInteraction();
}
if ((fspan) && (this.complete != true)) {
var fid = YUD.getAttribute(fspan, 'id');
this._html.showFeedbackHideResponse(fspan, span);
if (this._feedbackCues[fid]) {
this._isFeedbackPlaying = true;
this._html.subdueResponses(this._responseSpanIds);
this._html.disableResponses(this._responseSpanIds);
this._html.subduePlayIcon(this.audioWidget);
var hap = new AsiItem.AudioInterface();
hap.add(this._feedbackCues[fid], fid, null,
AsiItem.Interaction.handleEndFeedbackAudio, this);
hap.start();
} else {
AsiItem.Interaction.handleEndFeedbackAudio(fid, this);
}
}
};
AsiItem.Interaction.prototype.processResponse_noVoiceGuidance = function (span) {
this.responsesLeft--;
var fspan = this._html.getRelatedFeedbackSpan(span);
var spid = YUD.getAttribute(span, 'id');
this._responseIdentifiers.push(this._spanToIdentifierMap[spid]);
if (this._terminalSpanIds[spid]) {
this.complete = true;
this.terminateInteraction();
} else if ((this.complete == false) && (this.responsesLeft == 0)) {
this.complete = true;
this.terminateInteraction();
} else {
YUD.removeClass(span, 'asi-response-shown');
YUD.removeClass(span, 'asi-response-enabled');
YUD.addClass(span, 'asi-response-hidden');
}
};
AsiItem.Interaction.handleResponseCallback = function (ev, instance) {
if (instance.isReadOnly() || instance._isPlaying || instance._isFeedbackPlaying || instance._isResponsePlaying)
return;
if (instance.complete)
return;
var span = this;
instance._playSourceFromResponse = true;
instance.processResponse(span);
};
AsiItem.Interaction.handleResponseCallback_noVoiceGuidance = function (ev, instance) {
if (instance.isReadOnly() || instance.complete)
return;
var span = this;
instance.processResponse_noVoiceGuidance(span);
};
AsiItem.Interaction.handleEndFeedbackAudio = function (spid, instance) {
AsiItem.EventLog('handleEndFeedbackAudio');
instance._isFeedbackPlaying = false;
if ((!instance.complete) && (instance.responsesLeft > 0)) {
instance.populateResponseAudio(instance._playbackInfo);
instance._html.setStopIcon(instance.audioWidget);
instance.playAudio(instance._playbackInfo);
} else if ((instance.complete == false) && (instance.responsesLeft == 0)) {
instance.complete = true;
instance.terminateInteraction();
}
};
AsiItem.Interaction.prototype.displayResponses = function (responseArray) {
AsiItem.EventLog('subdueResponses');
for (var i = 0; i < responseArray.length; ++i) {
var span = YUD.get(responseArray[i]);
AsiItem.EventLog('display span ' + YUD.getAttribute(span, 'id'));
YUD.addClass(span, 'asi-response-shown');
YUD.removeClass(span, 'asi-response-hidden');
}
};
AsiItem.Interaction.handlePlayAudioButton = function (ev, instance) {
if (instance.isReadOnly()) return;
AsiItem.EventLog('Main story button pressed');
instance._playSourceFromResponse = false;
instance.playAudio(instance._playbackInfo);
};
AsiItem.Interaction.handleResponseAudioButton = function (ev, instance) {
if (instance.isReadOnly())
return;
YUE.stopEvent(ev);
if ((instance._isResponsePlaying) && (instance._responsePlayer)) {
AsiItem.EventLog('handleResponseAudioButton - playing, treat like stop');
instance._responsePlayer.stop();
return;
}
if (instance.complete)
return;
AsiItem.EventLog('handleResponseAudioButton');
var responseIndex = instance._html.getResponseIndex(this);
var playbackInfo = {
stemId: null,
stemAudio: null,
responseAudio: []
};
var audioObject = {
audioCue: instance._parser.asiContent.choices[responseIndex].audioCue,
spanId: YUD.getAttribute(this, 'id')
};
playbackInfo.responseAudio[responseIndex] = audioObject;
instance._html.subdueResponses(instance._responseSpanIds);
instance._html.subduePlayIcon(instance.audioWidget);
var responseId = instance._html.createSpanId('response-' + responseIndex);
YUD.addClass(responseId, 'asi-response-emphasis');
YUD.removeClass(responseId, 'asi-response-subdued');
instance.populateResponseAudio(playbackInfo, responseIndex);
instance.playAudioResponse(playbackInfo);
};
AsiItem.Interaction.prototype.playAudioResponse = function (audioArray) {
if ((this._isPlaying === true) || (this._isResponsePlaying) || (this._isFeedbackPlaying)) {
AsiItem.EventLog('no audio response - playing already');
return;
}
if (this.complete === true) {
AsiItem.EventLog('complete');
return;
}
this._responsePlayer = new AsiItem.AudioInterface();
var self = this;
var startPlaying = function () {
AsiItem.EventLog('playAudioResponse - startPlaying');
self._isResponsePlaying = true;
self._html.setStopIcon(responseSpan);
};
var stopPlaying = function () {
AsiItem.EventLog('playAudioResponse - stopPlaying');
self._isResponsePlaying = false;
self._html.setPlayIcon(responseSpan);
self._html.enableResponses(self._responseSpanIds);
self._html.setPlayIcon(self.audioWidget);
};
AsiItem.EventLog('playAudioResponse - setting up audio');
for (var i = 0; i < audioArray.responseAudio.length; ++i) {
var responseInfo = audioArray.responseAudio[i];
if (responseInfo.audioCue) {
var responseSpanId = responseInfo.spanId;
var responseSpan = YUD.get(responseSpanId);
if (responseSpan && (YUD.getStyle(responseSpan, 'display') != 'none')) {
this._responsePlayer.add(responseInfo.audioCue, responseInfo.spanId, startPlaying, stopPlaying);
}
}
}
this._responsePlayer.start();
};
AsiItem.Interaction.prototype.playAudio = function (audioArray) {
var self = this;
if ((this._isResponsePlaying) || (this._isFeedbackPlaying)) {
AsiItem.EventLog('playAudio - already playing response');
return;
}
if (this.hasPlayedOnce == false && this._isPlaying === true) {
AsiItem.EventLog('playAudio - already playing first time, replay entire story ');
}
if ((this._isPlaying === true) && (this._player)) {
AsiItem.EventLog('playAudio - already playing, treat like stop');
this._player.stop();
this._player.dispose();
this._player = null;
this._isPlaying = false;
this._html.setPlayIcon(this.audioWidget);
this._html.enableResponses(this._responseSpanIds);
if (this.hasPlayedOnce == false) {
setTimeout(function () {
self.populateResponseAudio(audioArray);
self.playAudio(audioArray);
}, 1);
}
return;
}
if (this._player) {
this._player.stop();
this._player.dispose();
this._player = null;
}
if (this.complete === true) {
AsiItem.EventLog('playAudio - complete');
return;
}
this._player = this._audioFactory.createAudioInterface();
this._html.subdueResponses(this._responseSpanIds);
var stopAudioCallback = function (id) {
if (self._isPlaying == false) {
AsiItem.EventLog('playAudio - stopAudioCallback late stop event, enabling');
self._html.enableResponses(self._responseSpanIds);
return;
}
AsiItem.EventLog('playAudio - stopAudioCallback');
var span = YUD.get(id);
if (/asiStem/.test(id)) {
if (audioArray.responseAudio.length == 0) {
AsiItem.EventLog('playAudio - finished palying stem and no responses');
self._isPlaying = false;
self._html.enableResponses(self._responseSpanIds);
self._html.setPlayIcon(self.audioWidget);
}
AsiItem.EventLog('playAudio - finished palying stem');
return;
}
if (span) {
AsiItem.EventLog('playAudio - finished playing response ' + id + ', remove emphasis');
YUD.removeClass(span, 'asi-response-emphasis');
}
var idx = self._html.getResponseIndex(id);
if (audioArray.highestIndexToPlay == idx) {
AsiItem.EventLog('playAudio - playing last response ' + id + ', enabling');
self._isPlaying = false;
self._html.enableResponses(self._responseSpanIds);
self._html.setPlayIcon(self.audioWidget);
self.hasPlayedOnce = true;
} else {
AsiItem.EventLog('playAudio - finished playing response ' + id + ', subdue');
YUD.addClass(span, 'asi-response-subdued');
}
};
var startAudioCallback = function (id) {
var span = YUD.get(id);
if (/asiStem/.test(id)) {
AsiItem.EventLog('playAudio - starting stem');
return;
}
AsiItem.EventLog('playAudio - starting a response  ' + id);
if (span) {
self._html.emphasizeResponse(span);
var responseAudioSpan = self._html.getAudioSpanFromResponseSpan(span);
if (responseAudioSpan) {
self._html.subduePlayIcon(responseAudioSpan);
}
}
};
AsiItem.EventLog('playAudio - populating player');
if ((audioArray.playStemAudio) || (self._playSourceFromResponse == false)) {
this._player.add(audioArray.stemAudio, audioArray.stemId, startAudioCallback, stopAudioCallback);
}
for (var i = 0; i < audioArray.responseAudio.length; ++i) {
var responseInfo = audioArray.responseAudio[i];
if (responseInfo.audioCue) {
var responseSpanId = responseInfo.spanId;
var responseSpan = YUD.get(responseSpanId);
if (responseSpan && ((this.hasPlayedOnce == false) || YUD.getStyle(responseSpan, 'display') != 'none')) {
this._player.add(responseInfo.audioCue, responseInfo.spanId, startAudioCallback, stopAudioCallback);
}
}
}
this._isPlaying = true;
if (this.hasPlayedOnce == false) {
this._html.setStopIcon(this.audioWidget);
this._html.subduePlayIcon(this.audioWidget);
} else {
this._html.setStopIcon(this.audioWidget);
}
this._player.start();
};
AsiItem.Interaction.prototype.hasResponseBeenChosen = function (spid) {
for (var i = 0; i < this._responseIdentifiers.length; ++i) {
var responseSpan = this._html.getResponseSpanFromIdentifier(this._responseIdentifiers[i]);
if (responseSpan != null && responseSpan.id == spid) {
return true;
}
}
return false;
};
AsiItem.Interaction.prototype.populateResponseAudio = function (audioObject, responseId) {
var ar = [];
audioObject.highestIndexToPlay = 0;
for (var i = 0; i < this._responseSpanIds.length; ++i) {
var spid = this._responseSpanIds[i];
var span = YUD.get(spid);
var index = this._html.getResponseIndex(spid);
if ((responseId == null) || (responseId == index)) {
if (this.hasResponseBeenChosen(spid) == false) {
if (audioObject.responseAudio[i]) {
ar.push(audioObject.responseAudio[i]);
if (index > audioObject.highestIndexToPlay) {
audioObject.highestIndexToPlay = index;
}
}
}
}
}
audioObject.responseAudio = ar;
};
AsiItem.Interaction.prototype.populateResponses = function (parentDiv) {
var choiceContent = this._parser.asiContent.choices;
var answerCell = document.createElement('div');
this._html.setSpanId(answerCell, 'responses');
this._playbackInfo.highestIndexToPlay = 0;
for (var i = 0; i < choiceContent.length; i++) {
var responseContent = choiceContent[i].content.htmlContent;
var responseSpan = document.createElement('div');
if (!this._voiceGuidance) {
YUD.addClass(responseSpan, 'asi-response-shown asi-response-enable');
}
var spanId = this._html.createSpanId('response-' + i.toString());
this._spanToIdentifierMap[spanId] = choiceContent[i].identifier;
this._responseSpanIds.push(spanId);
var audioTag = choiceContent[i].audioCue;
var audioObject = {
audioCue: audioTag,
spanId: spanId
};
if (audioObject.audioCue) {
this._playbackInfo.responseAudio.push(audioObject);
if (i > this._playbackInfo.highestIndexToPlay) {
this._playbackInfo.highestIndexToPlay = i;
}
}
if (/true/i.test(choiceContent[i].complete)) {
this._terminalSpanIds[spanId] = true;
}
this._html.setSpanId(responseSpan, 'response-' + i.toString());
responseSpan.innerHTML = Util.Xml.serializeToString(responseContent);
YUD.setAttribute(responseSpan, 'tabIndex', '0');
if (this._voiceGuidance) {
YUD.addClass(responseSpan, 'asi-response-hidden');
}
var responseAudioButton = this._html.createAudioButton();
this._html.setPlayIcon(responseAudioButton);
this._html.setSpanId(responseAudioButton, 'audioResponse-' + i.toString());
YUE.addListener(responseAudioButton, 'click', AsiItem.Interaction.handleResponseAudioButton, this);
if (this._voiceGuidance) {
responseSpan.appendChild(responseAudioButton);
this._responseButtons.push(responseAudioButton);
}
var feedbackContent = choiceContent[i].content.feedback;
var feedbackSpan = document.createElement('div');
YUD.addClass(feedbackSpan, 'asi-feedback-hidden');
this._html.setSpanId(feedbackSpan, 'feedback-' + i.toString());
if (feedbackContent.audioCue) {
this._feedbackCues[this._html.createSpanId('feedback-' + i.toString())] = feedbackContent.audioCue;
this._playbackInfo.playStemAudio = false;
}
if (feedbackContent.feedbackContainer)
feedbackSpan.innerHTML = Util.Xml.serializeToString(feedbackContent.feedbackContainer);
answerCell.appendChild(responseSpan);
answerCell.appendChild(feedbackSpan);
if (this._voiceGuidance) {
YUE.addListener(responseSpan, 'click', AsiItem.Interaction.handleResponseCallback, this);
} else {
YUE.addListener(responseSpan, 'click', AsiItem.Interaction.handleResponseCallback_noVoiceGuidance, this);
}
}
this._html.getParentDiv().appendChild(answerCell);
};

// FILE: module_scaffolding.js (7e3ac4d2) 7/23/2014 4:30:36 PM

(function (ContentManager) {
ContentManager.onItemEvent('available', function(page, item) {
if (!item.isResponseType('Scaffolding') &&
!item.isResponseType('Scaffolding Vertical')) {
return;
}
var pageDoc = page.getDoc();
var container = pageDoc.getElementById('ScaffoldingContainer_' + item.position);
var accProps = page.getAccommodationProperties();
var voiceGuidance = accProps.hasASIVoiceGuidance();
var stem = item.getStemElement();
if (stem) {
var exitAudioCue = processExitAudioLink(stem, voiceGuidance);
var exitAudioPlayer = new AsiItem.AudioInterface();
var exitAudioPlayerId = 'asi-' + item.position + 'exitAudio';
exitAudioPlayer.add(exitAudioCue, exitAudioPlayerId);
}
var onTerminate = function (type, args, instance) {
var questionSpan = container;
while (questionSpan) {
if ((/div/i.test(questionSpan.tagName)) && (YUD.hasClass(questionSpan, 'theQuestions'))) {
break;
} else {
questionSpan = questionSpan.parentNode;
}
}
if (questionSpan) {
var completeDiv = document.createElement('div');
YUD.addClass(completeDiv, 'asi-complete-span');
questionSpan.parentNode.insertBefore(completeDiv, questionSpan);
var nextFunction = ContentManager.setItemCompleted;
if (nextFunction && item) {
YUE.addListener(completeDiv, 'click', function() { nextFunction(item); });
}
}
exitAudioPlayer.start();
};
ContentManager.log('ASI: Processing item. ');
var asi = new AsiItem.Parse(item);
asi.createAsiChoices();
var html = new AsiItem.Html(asi, container);
item.scaffolding = new AsiItem.Interaction(html, asi, voiceGuidance);
item.scaffolding.isReadOnly = item.isReadOnly;
item.scaffolding.onTerminate(onTerminate);
item.scaffolding.startInteraction(item.value);
});
ContentManager.onItemEvent('hide', function (page, item) {
if (item.scaffolding) {
item.scaffolding.hidePage();
}
});
})(ContentManager);
function processExitAudioLink(parentSpan, hasVoiceGuide) {
var anchors = parentSpan.getElementsByTagName('a');
for (var i = 0; i < anchors.length; i++) {
var anchor = anchors[i];
var source = Util.Audio.getPlayableSource(anchor);
var anchorExitAudioAttr = YUD.getAttribute(anchor, 'data-its-exitaudio');
if (anchorExitAudioAttr == 'true' && source != null) {
anchor.parentNode.removeChild(anchor);
return hasVoiceGuide ? source.url : null;
}
}
return null;
};
(function () {
var getter = function (item, response) {
var value = '';
if (item && item.scaffolding) {
value = item.scaffolding.getResponse();
}
response.value = value;
response.isAvailable = true;
var validResponse = (value && (value.length > 0) && (item.scaffolding) && (item.scaffolding.complete)) ? true : false;
var str = 'ASI: getter for item ' + item.position + '. valid =' + validResponse + ' ';
if (response.value)
str = str + value;
ContentManager.log(str);
response.isSelected = validResponse;
response.isValid = validResponse;
};
var setter = function (item, value) {
if (item && item.scaffolding) {
item.scaffolding.setResponse(value);
}
};
ContentManager.registerResponseHandler('Scaffolding', getter, setter);
ContentManager.registerResponseHandler('Scaffolding Vertical', getter, setter);
})();

// FILE: main.js (e2bce646) 5/2/2014 12:55:58 PM

TDS = window.TDS || {};
var YUD = YAHOO.util.Dom;
TDS.Mask = {
Config: {
minH: 8,
minW: 10,
Debug: true,
Enabled: true,
altEventName: '',
eventName: '',
cls: {
INIT: 'tds_mask_init',
MOVE: 'tds_mask_move',
FIN:  'tds_mask_fin'
},
DialogClass: 'TDS.Mask.Dialog',
EnableClickClass: true,
ClickClasses:[
'thePassage',
'theQuestions',
'layoutColumnLeft',
'layoutColumnRight',
'itemContainer'
],
isScrollable: function(el){
if (YUD.hasClass(el, 'thePassage') === true || YUD.hasClass(el, 'theQuestions') === true) {
return true;
} else return false;
},
isTouchScreen: 'ontouchstart' in window ? true : false
},
EVENTS:  null,
CONTROL: null,
STATUS: 'off',
PAGE: null,
initialize: function(){
var ctrl =  new TDS.Mask.Control();
ctrl.setDialogClass(TDS.Mask.Config.DialogClass);
TDS.Mask.CONTROL = ctrl;
var em   = new TDS.Mask.EventManager();
em.setControl(ctrl);
TDS.Mask.EVENTS  = em;
},
getControl: function(){
return TDS.Mask.CONTROL;
},
getEvents: function(){
return TDS.Mask.EVENTS;
},
setPageDom: function(pageDom){
TDS.Mask.PAGE = pageDom;
},
setPageId: function(pageId){
var ctrl = TDS.Mask.getControl();
if(ctrl){
var pId = ctrl.getActivePageId();
ctrl.setActivePageId(pageId);
if(pId != pageId){
ctrl.off();
}
}
},
create: function(pageDom, pageId, evt){
var ctrl = TDS.Mask.getControl();
if(!ctrl){ return;}
pageDom = pageDom || TDS.Mask.PAGE;
ctrl.newMask(pageDom, pageId, evt);
this.on(null, pageId);
this.STATUS = 'on';
},
on: function(id, pageId, win){
win = win || window;
var ctrl = TDS.Mask.getControl(); if(!ctrl){return;}
(id || pageId) ? ctrl.on({id: id, pageId: pageId}) : ctrl.on();
var eM = TDS.Mask.getEvents(); if(!eM){return;}
eM.setPageId(pageId);
eM.listen(TDS.Mask.PAGE);
},
off: function(id, pageId){
var ctrl = TDS.Mask.getControl();
if(!ctrl){ return;}
ctrl.off({id: id, pageId: pageId});
this.STATUS = 'off';
},
hide: function (id, pageId) {
var ctrl = TDS.Mask.getControl();
if (!ctrl) { return; }
ctrl.hide({ id: id, pageId: pageId });
this.getEvents().sleep();
this.STATUS = 'off';
},
clear: function(instanceOrId){
},
toggle: function() {
if (this.STATUS === 'off') {
this.create();
} else {
this.off();
}
}
};

// FILE: control.js (d29ad7a5) 5/2/2014 12:55:58 PM

(function(){
var YUD = YAHOO.util.Dom;
var CFG = TDS.Mask.Config || {};
TDS.Mask.Control = function(args){
args = args || {};
this.setActivePageId(args.pageId);
this.setDialogClass(args.dialogClass || TDS.Mask.Config.DialogClass);
this._maskInCreation = null;
this.sequence = 0;
};
C = TDS.Mask.Control;
C.prototype.setDialogClass = function(str){
var cls = null;
if(typeof str == 'string'){
var cmp = str.split('.');
var ref = window;
for(var i=0; i<cmp.length; ++i){
if(ref[cmp[i]]){
ref = ref[cmp[i]];
}
}
CFG.Debug && console.log("lookup the class?", ref);
}
this._dialogClass = str;
};
C.prototype.getScrollParent = function(el){
if(!el){return;}
var pScroll = CFG.isScrollable(el) ? el : null;
while(!pScroll && el && el.parentNode && !el.nodeName != 'BODY'){
el = el.parentNode;
if(CFG.isScrollable(el)){
pScroll = el;
}
}
return pScroll;
};
C.prototype.genId = function(){
return 'tds_mask_' + (this.sequence++);
};
C.prototype.createMask = function(page, x, y, w, h, debugMsg){
var dialog = null;
var id = this.genId();
if(typeof this._dialogClass == 'function'){
dialog = new this._dialogClass(x, y, w, h, debugMsg);
dialog.id = id;
dialog.close = this.close.bind(this, id);
}else{
dialog =  document.createElement('div');
dialog.id = id;
dialog.innerHTML = debugMsg || '';
YUD.addClass(dialog, "tds_mask_container");
var close = document.createElement('button');
close.innerHTML = 'x';
close.onclick   = this.close.bind(this, id);
YUD.addClass(close, 'tds_mask_close');
dialog.appendChild(close);
CFG.Debug && console.log("createMask div (page, dialog, x, y, w, h)", page, dialog, x, y, w, h);
YUD.setStyle(dialog, 'position', 'fixed');
YUD.setStyle(dialog, 'left', x + 'px');
YUD.setStyle(dialog, 'top', y + 'px');
YUD.setStyle(dialog, 'width', w + 'px');
YUD.setStyle(dialog, 'height', h + 'px');
document.body.appendChild(dialog);
}
return dialog;
};
C.prototype.close = function(id){
console.log("Close this item.", id);
var dialog = TDS.Mask.Store.get(id);
if(dialog && typeof dialog.close == 'function'){
dialog.close();
delete dialog;
}else if(dialog.parentNode){
dialog.parentNode.removeChild(dialog);
}
TDS.Mask.Store.remove(id);
};
C.prototype.hide = function(optionalQuery){
var masks = TDS.Mask.Store.query(optionalQuery);
console.log("What came from masks?", masks);
if(!masks){return;}
for(var i = 0; i<masks.length; ++i){
var mask = masks[i];
if(mask && typeof mask.hide == 'function'){
mask.hide();
}else{
YUD.addClass(mask, 'hidden');
}
}
this.removeIndicateDrawingContainer();
};
C.prototype.show = function(optionalQuery){
var masks = TDS.Mask.Store.query(optionalQuery);
if(!masks){return;}
CFG.Debug && console.log("Should show these (masks, query)", masks, optionalQuery);
for(var i = 0; i<masks.length; ++i){
var mask = masks[i];
if(mask && typeof mask.show == 'function'){
mask.hide();
}else{
YUD.removeClass(mask, 'hidden');
}
}
};
C.prototype.on = function(query){
try{
query = query || {pageId: this.getActivePageId()};
CFG.Debug && console.log("TDS.Mask.Conrol.on with query: ", query);
this.show(query);
}catch(e){
console.error("Failed to turn on the masks for this query.", query, e);
}
};
C.prototype.off = function(query){
try{
console.log("Turn off the items.", query);
this.removeAllListeners();
}catch(e){
console.error("Failed to turn off the masks for this query.", query);
}
this.removeIndicateDrawingContainer();
};
C.prototype.move = function(x, y, scrollDomSource, pageId){
CFG.Debug && console.log("Move the masks (x, y, el, pageId)", x, y, scrollDomSource, pageId);
pageId = pageId || this.getActivePageId();
var masks = TDS.Mask.Store.query({pageId: pageId});
if(masks && masks.length){
var mask = null;
for(var i=0; i<masks.length; ++i){
mask = masks[i];
if((scrollDomSource == mask.scrollDomSource) && mask.scrollDomSource){
var initX = YUD.getAttribute(mask, 'initialX');
var initY = YUD.getAttribute(mask, 'initialY');
YUD.setStyle(mask, 'top',  (initY - y) + 'px');
YUD.setStyle(mask, 'left', (initX - x) + 'px');
}
}
}
};
C.prototype.newMask  = function(page, pageId, evt){
page   = page   || TDS.Mask.PAGE        || document.body;
pageId = pageId || this.getActivePageId() || page.id;
if(pageId){
this.setActivePageId(pageId);
}
CFG.Debug  && console.log("newMask (page, pageId, evt)", page, pageId, evt);
this.removeAllListeners();
this.createListeners(
this.getClickElements(page),
this.initMaskClick.bind(this),
'mousedown',
CFG.cls.INIT
);
};
C.prototype.getActiveMasks = function(){
return TDS.Mask.Store.query({pageId: this.getActivePageId()});
};
C.prototype.getClickElements = function(page){
if(!CFG.EnableClickClass){return [page];}
var cls = null;
var elements = [];
for(var i=0; i<CFG.ClickClasses.length; ++i){
cls = CFG.ClickClasses[i];
var s = YAHOO.util.Selector.query('.' + cls, page)
if(s && s.length){
elements = elements.concat(s);
}
}
if(!elements.length){
elements = [page];
}
return elements;
};
C.prototype.stopEvt = function(evt){
evt = evt || window.event;
if(evt){
evt.stopPropagation ? evt.stopPropagation() : evt.cancelBubble = true;
evt.preventDefault  ? evt.preventDefault() : evt.returnValue = false;
}
};
C.prototype.createListeners = function(elements, func, evtName, cls){
if(!elements || typeof func != 'function'){return;}
if(!YAHOO.lang.isArray(elements)){
elements = [elements];
}
evtName = evtName || 'click';
if(!this.pageListeners){
this.pageListeners = [];
}
var scopeIt = function(el, cb, evt){ cb(el, evt); };
var el = null;
var listener = null;
for(var i=0; i<elements.length; ++i){
el = elements[i];
if(el){
listener =  scopeIt.bind(this, el, func);
var lsnr = this.addMouseListener(el, evtName, listener);
if (CFG.altEventName) {
this.pageListeners.push({
el: el,
evtName: CFG.altEventName,
listener: lsnr
});
}
this.pageListeners.push({
el: el,
evtName: CFG.eventName,
listener: lsnr
});
cls && YUD.addClass(el, cls);
}
}
return this.pageListeners;
};
C.prototype.addMouseListener = function (target, name, fn) {
var touchScreen = 'ontouchstart' in window;
var touchEvents = {
'mousedown': 'touchstart',
'mouseup': 'touchend',
'mousemove': 'touchmove'
};
var mouseEvents = {
'mousedown': 'mousedown',
'mouseup': 'mouseup',
'mousemove': 'mousemove'
};
var getWindowsNTVersion = function () {
var matches = navigator.userAgent.match(/Windows NT (\d+\.\d+)/);
var value;
if (matches && matches[1]) {
value = parseFloat(matches[1]);
}
return value || 0;
};
var supportsTouchAndMouse = function () {
return (touchScreen && getWindowsNTVersion() >= 6.1);
};
var normalizeTouchEvent = function (evt) {
if (evt.changedTouches) {
var touches = evt.changedTouches;
for (var i = 0, ii = touches.length; i < ii; i++) {
if (touches[i].target == evt.target) {
var oldevt = evt;
evt = touches[i];
evt.preventDefault = function () {
return oldevt.preventDefault();
};
evt.stopPropagation = function () {
return oldevt.stopPropagation();
};
return evt;
}
}
}
return evt;
};
var touchAndMouse = supportsTouchAndMouse();
var eventName, altEventName;
if (touchScreen) {
eventName = (touchEvents[name] || name);
if (touchAndMouse) {
altEventName = (mouseEvents[name] || name);
}
} else {
eventName = (mouseEvents[name] || name);
}
var processEvent = function (evt) {
if (touchAndMouse) {
evt.preventDefault();
}
if (touchScreen) {
evt = normalizeTouchEvent(evt);
}
fn(evt);
};
if (eventName) {
target.addEventListener(eventName, processEvent, false);
if (altEventName) {
target.addEventListener(altEventName, processEvent, false);
}
}
CFG.eventName = eventName;
if (altEventName) {
CFG.altEventName = altEventName;
}
return processEvent;
};
C.prototype.removeMaskClasses = function(elements){
if(!elements || !elements.length){return;}
var el = null;
for(var i=0; i<elements.length; ++i){
el = elements[i];
YUD.removeClass(el, CFG.cls.INIT);
YUD.removeClass(el, CFG.cls.MOVE);
YUD.removeClass(el, CFG.cls.FIN);
}
};
C.prototype.removeAllListeners = function(){
if(this.pageListeners){
for(var i=0; i<this.pageListeners.length; ++i){
try{
var cfg = this.pageListeners[i];
if(cfg && cfg.el && cfg.listener){
cfg.el.removeEventListener(cfg.evtName, cfg.listener, false);
this.removeMaskClasses([cfg.el]);
}
}catch(e){
CFG.Debug && console.error("Failed to remove event listener. cfg, e", cfg, e);
}
}
}
this.pageListeners = null;
};
C.prototype.initMaskClick = function(page, evt){
this.stopEvt(evt);
this.removeAllListeners();
this.firstClick = evt;
if (CFG.isTouchScreen) {
this.firstClick = {
clientX: evt.clientX,
clientY: evt.clientY
};
}
this.createListeners(this.getClickElements(page),
this.mouseMove.bind(this),
'mousemove'
);
this.createListeners(
this.getClickElements(page),
this.mouseUp.bind(this),
'mouseup',
CFG.cls.MOVE
);
};
C.prototype.mouseMove = function (page, evt) {
this.stopEvt(evt);
if (!this.firstClick) return;
this.indicateDrawing(this.firstClick, evt);
};
C.prototype.indicateDrawing = function (a, b) {
if (!a || !b) { return; }
var deltaY = 10,
deltaH = -10;
var x = a.clientX <= b.clientX ? a.clientX : b.clientX;
var y = a.clientY <= b.clientY ? a.clientY : (b.clientY + deltaY);
var w = Math.abs(a.clientX - b.clientX);
var h = Math.abs(a.clientY - b.clientY) + deltaH;
var iDrawing = document.getElementById('indicateDrawingContainer');
if (!iDrawing) {
iDrawing = document.createElement('div');
iDrawing.setAttribute('id', 'indicateDrawingContainer');
YUD.setStyle(iDrawing, 'position', 'fixed');
YUD.addClass(iDrawing, 'tds_mask_container tds_mask_container_drawing');
document.body.appendChild(iDrawing);
}
YUD.setStyle(iDrawing, 'left', x + 'px');
YUD.setStyle(iDrawing, 'top', y + 'px');
YUD.setStyle(iDrawing, 'width', w + 'px');
YUD.setStyle(iDrawing, 'height', h + 'px');
};
C.prototype.mouseUp = function (page, evt) {
var box = this.determineBox(this.firstClick, evt);
if(box){
this.finishMaskClick(page, evt);
}else {
this.removeAllListeners();
this.createListeners(
this.getClickElements(page),
this.finishMaskClick.bind(this),
'mousedown',
CFG.cls.FIN
);
if (!CFG.isTouchScreen) {
this.createListeners(
this.getClickElements(page),
this.mouseMove.bind(this),
'mousemove'
);
}
}
};
C.prototype.finishMaskClick = function (page, evt) {
try {
this.stopEvt(evt);
this.removeAllListeners();
this.removeIndicateDrawingContainer();
this.secondClick = evt;
CFG.Debug && console.log("Finish mask click", page, this.firstClick, this.secondClick);
var box = this.determineBox(this.firstClick, this.secondClick);
if (box) {
this.initializeBox(page, box);
}
TDS.Mask.create();
} catch (e) {
console.error("Cannot finish mask click.", e);
}
};
C.prototype.removeIndicateDrawingContainer = function () {
var iDrawing = document.getElementById('indicateDrawingContainer');
if (iDrawing) {
document.body.removeChild(iDrawing);
}
};
C.prototype.determineBox = function(a, b){
if (!a || !b) { return; }
var dY = 10, dH = -10;
var box = {
tX: a.clientX <= b.clientX ? a.clientX : b.clientX,
tY: a.clientY <= b.clientY ? a.clientY : (b.clientY + dY),
bX: a.clientY <= b.clientX ? b.clientX : a.clientX,
bY: a.clientY <= b.clientX ? b.clientY : a.clientY,
w: Math.abs(a.clientX - b.clientX),
h: Math.abs(a.clientY - b.clientY) + dH
};
if(box && (box.w > CFG.minW) && (box.h > CFG.minH)){
return box;
}
};
C.prototype.initializeBox = function(page, box){
try {
var dialog = this.createMask(page, box.tX, box.tY, box.w, box.h);
if(dialog){
var pScroll = this.getScrollParent(page);
if(pScroll){
box.tX += (pScroll.scrollLeft || 0);
box.tY += (pScroll.scrollTop  || 0);
dialog.scrollDomSource = pScroll;
}
YUD.setAttribute(dialog, 'initialX',  box.tX);
YUD.setAttribute(dialog, 'initialY',  box.tY);
dialog.pageId = this.getActivePageId() || page.id;
TDS.Mask.Store.set(dialog);
}
}catch(e){
console.error("Failed to initialize basic box model.", e);
}
};
C.prototype.abortMask = function(){
};
C.prototype.setActivePageId = function(pageId){
this._pageId = pageId;
};
C.prototype.getActivePageId = function(){
return this._pageId;
};
TDS.Mask.Store = {
Instances: {
},
get: function(id){
return TDS.Mask.Store.Instances[id];
},
remove: function(id){
if(TDS.Mask.Store.Instances[id]){
delete TDS.Mask.Store.Instances[id];
}
},
set: function(obj, id){
if(obj){
if(!obj.id){
obj.id = obj.id || id || ('tds_mask_' + (++TDS.Mask.Store.id));
}
TDS.Mask.Store.Instances[id || obj.id] = obj;
}
},
match: function(q, obj){
if(!obj || !obj.id){return;}
if((!q.id     || (q.id     == '*' || q.id.indexOf(obj.id) != -1)) &&
(!q.pageId || (q.pageId == '*' || q.pageId.indexOf(obj.pageId) != -1))){
return true;
}
},
query: function(q, matchFunc){
q = q || {id: '*'};
if(q && (q.id || q.pageId)){
if(q.id && q.id != '*' && !YAHOO.lang.isArray(q.id)){
q.id = [q.id];
}
if(q.pageId && !YAHOO.lang.isArray(q.pageId)){
q.pageId = [q.pageId];
}
}
if(typeof matchFunc != 'function'){
matchFunc = TDS.Mask.Store.match;
}
var results = [];
for(var k in TDS.Mask.Store.Instances){
if(k && typeof k != 'function'){
var obj = TDS.Mask.Store.Instances[k];
if(matchFunc(q, obj)){
results.push(obj);
}
}
}
return results;
}
};
})();

// FILE: events.js (cba4facd) 3/7/2014 11:24:13 AM

(function(){
var CFG = TDS.Mask.Config;
TDS.Mask.EventManager = function(ctrl, doc){
this._listeners = null;
this.setControl(ctrl);
this.setScrollDocument(doc);
};
var eM = TDS.Mask.EventManager;
eM.prototype.getPageId = function(){
return this._pageId;
};
eM.prototype.setPageId = function(pageId){
this._pageId = pageId;
};
eM.prototype.getControl = function(){
return this._ctrl;
};
eM.prototype.setControl = function(ctrl){
this._ctrl = ctrl;
};
eM.prototype.setScrollDocument = function(doc){
doc = doc || document;
this._document = doc;
};
eM.prototype.getScrollDocument = function(){
return this._document || document.body;
}
eM.prototype.isElScrollable = function(dom){
if(!dom){return;}
var hasHorizontalScrollbar = dom.scrollWidth>div.clientWidth;
var hasVerticalScrollbar   = dom.scrollHeight>div.clientHeight;
if(hasHorizontalScrollbar || hasVerticalScrollbar){
return {
vertical: hasVerticalScrollbar,
horizontal: hasHorizontalScrollbar
};
}
return false;
};
eM.prototype.applyScroll = function(x, y, scrollContainer){
var ctrl = this.getControl();
if(ctrl){
ctrl.move(x, y, scrollContainer);
}
};
eM.prototype.findScrollable = function(dom){
if(dom && CFG.isScrollable(dom)){
return true;
}
return false;
};
eM.prototype.dfs = function(el, match, results){
if(!el){return;}
match   = typeof match == 'function' ? match : function(){return true};
results = results || [];
if(match(el)){
results.push(el);
}
var children = el.childNodes;
if(children){
for(var i=0; i<children.length; ++i){
this.dfs(children[i], match, results);
}
}
return results;
};
eM.prototype.stopEvt = function(evt){
evt = evt || window.event;
if(evt){
evt.stopPropagation ? evt.stopPropagation() : evt.cancelBubble = true;
evt.preventDefault  ? evt.preventDefault() : evt.returnValue = false;
}
};
eM.prototype.scrollDiff = function(el, evt){
try{
var sD = this.getScrollDocument();
var doc = sD && sD.documentElement ? sD.documentElement : document.documentElement;
var left = (window.pageXOffset  || doc.scrollLeft) - (doc.clientLeft || 0);
var top  = (window.pageYOffset  || doc.scrollTop)  - (doc.clientTop || 0);
var elTop  = el ? el.scrollTop  : 0;
var elLeft = el ? el.scrollLeft : 0;
var ctrl = this.getControl();
ctrl.move(left + elLeft, top + elTop, el)
}catch(e){
console.error("Failed to scroll correctly.", e);
}
};
eM.prototype.listen = function(docOrDom, cb, evtName){
if(this._listeners && this._listeners.length) { return; }
CFG.Debug && console.log("What is in eventManager listen?", docOrDom, cb);
evtName  = evtName || 'scroll';
docOrDom = docOrDom || this.getScrollDocument();
docOrDom = docOrDom && docOrDom.body ? docOrDom.body : docOrDom;
cb  = typeof cb == 'function' ? cb : this.scrollDiff;
var results = this.dfs(docOrDom, this.findScrollable);
CFG.Debug && console.log("Tried to find scrollable elements, results (docOrDom, results) ", docOrDom, results);
if(!results || !results.length){
results = [this.getScrollDocument()];
}
this._listeners = [];
for(var i=0; i<results.length; ++i){
var el     = results[i];
var listen = cb.bind(this, el);
el.addEventListener(evtName, listen, false);
this._listeners.push({
evtName: evtName,
el: el,
listen: listen
});
}
};
eM.prototype.sleep = function(){
if(!this._listeners){ return; }
for(var i=0; i<this._listeners.length;++i){
var cfg = this._listeners[i];
if(cfg && cfg.el && typeof cfg.listen == 'function'){
cfg.el.removeEventListener(cfg.evtName, cfg.listen, false);
}
}
this._listeners = null;
};
})();

// FILE: module_mask.js (eef3fe36) 3/7/2014 11:24:06 AM

YAHOO.util.Event.onDOMReady(function(){
if(window.TDS && !window.TDS.Mask){ return; }
var accProps = ContentManager.getAccommodationProperties();
if(accProps.getSelectedCode('Masking') == 'TDS_Masking0'){
console.warn("Masking not enabled.");
return;
}
TDS.Mask.Config.Debug = true;
TDS.Mask.initialize();
ContentManager.onPageEvent('show', function(page) {
if(!page){return;}
var doc    = page.getElement();
var pageId = page.id;
TDS.Mask.setPageId(pageId);
TDS.Mask.setPageDom(doc);
});
ContentManager.onPageEvent('hide', function(page) {
console.log("Turn of masking on a hide.");
TDS.Mask.hide();
});
});

// FILE: base.js (641e70ff) 3/7/2014 11:24:14 AM

TDS = window.TDS || {};
(function (TDS) {
var TI = function (el, useTextArea) {
this._tableEl = el;
this._useTextArea = useTextArea || false;
this._columnIds = [];
this._inputValidators = [];
};
TI.CSS_INPUT = 'ti-input';
TI.CSS_EDITABLE = 'ti-editable';
TI.CSS_ACTIVE = 'ti-active';
TI.CSS_INVALID = 'ti-invalid';
var globalValidator;
TI.setValidator = function(fn) {
globalValidator = fn;
};
TI.prototype.getColumnIds = function () {
return this._columnIds;
};
TI.prototype.getElement = function() {
return this._tableEl;
};
TI.prototype.getInputs = function () {
var tableEl = this.getElement();
return $('.' + TI.CSS_INPUT, tableEl);
};
TI.prototype.validateInputs = function() {
this._inputValidators.forEach(function(inputValidator) {
inputValidator();
});
};
TI.prototype._processTag = function (idx, tagEl) {
var $tag = $(tagEl);
var validationRule = $tag.data('itsValidationrule');
var includedInResponse = ($tag.data('itsIncludedinresponse') === true);
var tagName = this._useTextArea ? 'textarea' : 'input';
var $input = $(document.createElement(tagName));
$input.attr('type', 'text')
.attr('autocomplete', 'off')
.attr('autocorrect', 'off')
.attr('autocapitalize', 'off')
.attr('spellcheck', 'false');
$input.addClass(TI.CSS_INPUT);
if ($tag.parent().css('text-align') == 'center') {
$input.css('text-align', 'center');
}
var tableEl = this.getElement();
var $cell = $tag.closest('td, th', tableEl);
$cell.addClass(TI.CSS_EDITABLE);
$input.focus(function() {
$cell.addClass(TI.CSS_ACTIVE);
}).blur(function() {
$cell.removeClass(TI.CSS_ACTIVE);
});
if (includedInResponse) {
var tagText = $tag.text().trim();
if (tagText) {
$input.val(tagText);
}
}
$input.data('originalResponse', $input.val());
if (typeof globalValidator == 'function') {
var inputValidator = globalValidator.bind(this, $input, $cell, validationRule);
$input.on('input', inputValidator);
this._inputValidators.push(inputValidator);
}
$tag.replaceWith($input);
};
TI.prototype.render = function() {
var tableEl = this.getElement();
$('thead th', tableEl).each(function (idx, thEl) {
var $cell = $(thEl);
if ($cell.prop('tagName') == 'TH') {
var id = $cell.data('itsIdentifier');
this._columnIds.push(id);
}
}.bind(this));
$('span[data-its-input="true"]', tableEl)
.each(this._processTag.bind(this));
};
TDS.TableInput = TI;
})(TDS);

// FILE: validator.js (e5760aee) 3/7/2014 11:24:14 AM

(function (TI) {
var Rules = {
'alphaOnly': /^[a-zA-Z]+$/i,
'numericOnly': /^(\+|-)?(\d+)?([.]?\d*)?$/,
'alphaNumericOnly': /[a-zA-Z0-9]/i,
'textOnly': null
};
function showAlert(msg) {
if (TDS.Dialog) {
TDS.Dialog.showWarning(msg);
} else {
alert(msg);
}
}
function validator($input, $cell, rule, evt) {
var textValid = true;
var re = Rules[rule];
if (re) {
var text = $input.val().trim();
if (text) {
textValid = re.test(text);
}
}
var styleInvalid = $cell.hasClass(TI.CSS_INVALID);
if (textValid && styleInvalid) {
$cell.removeClass(TI.CSS_INVALID);
} else if (!textValid && !styleInvalid) {
$cell.addClass(TI.CSS_INVALID);
if (evt) {
setTimeout(function() {
showAlert('TI.InvalidInput.' + rule);
}, 0);
}
}
}
TI.setValidator(validator);
})(TDS.TableInput);

// FILE: response.js (f92e84ca) 3/7/2014 11:24:14 AM

(function (TI) {
TI.prototype.getResponseXml = function () {
var xmlDoc = Util.Xml.createDocument('responseSpec');
var rootEl = xmlDoc.documentElement;
var tableNode = xmlDoc.createElement('responseTable');
var tableEl = this.getElement();
$('tr', tableEl).each(function (rowIdx, rowEl) {
var rowNode = xmlDoc.createElement('tr');
$('th, td', rowEl).each(function (colIdx, colEl) {
var colName = colEl.nodeName.toLowerCase();
var colNode = xmlDoc.createElement(colName);
var id = $(colEl).data('itsIdentifier');
if (id) {
$(colNode).attr('id', id);
}
var response = $('.' + TI.CSS_INPUT, colEl).first().val();
if (response) {
$(colNode).text(response);
}
rowNode.appendChild(colNode);
});
tableNode.appendChild(rowNode);
});
rootEl.appendChild(tableNode);
return xmlDoc;
};
TI.prototype.getResponse = function() {
var xmlDoc = this.getResponseXml();
var xmlStr = Util.Xml.serializeToString(xmlDoc);
return xmlStr;
};
TI.prototype.setResponseXml = function (xmlDoc) {
var tableEl = this.getElement();
var $htmlRows = $('tr', tableEl);
var $xmlRows = $('tr', xmlDoc);
for (var i = 0, ii = $htmlRows.length; i < ii; i++) {
var $htmlCols =  $('th, td', $htmlRows[i]);
var $xmlCols = $('th, td', $xmlRows[i]);
for (var j = 0, jj = $htmlCols.length; j < jj; j++) {
var $htmlCol = $($htmlCols[j]);
var $xmlCol = $($xmlCols[j]);
var $input = $('.' + TI.CSS_INPUT, $htmlCol).first();
if ($input) {
var response = $xmlCol.text();
$input.val(response || '');
}
}
}
};
TI.prototype.setResponse = function (xmlStr) {
var xmlDoc = Util.Xml.parseFromString(xmlStr);
this.setResponseXml(xmlDoc);
};
TI.prototype.isResponseValid = function () {
var $inputs = this.getInputs();
if ($inputs.length == 0) return false;
var valid = true;
$inputs.each(function (idx, inputEl) {
var originalResponse = $(inputEl).data('originalResponse');
var currentResponse = $(inputEl).val().trim();
if (originalResponse === currentResponse) {
valid = false;
return false;
}
});
return valid;
};
})(TDS.TableInput);

// FILE: module.js (33bf0998) 5/2/2014 12:55:58 PM

(function (CM) {
function processItem(page, item) {
var itemEl = item.getElement();
var tableEls = $('table.tableItem', itemEl).first();
if (tableEls.length == 0) return;
var tableEl = tableEls[0];
var tableContainer = document.getElementById('TableContainer_' + item.position);
if (tableContainer) {
tableContainer.appendChild(tableEl);
}
var useTextArea = item.isResponseType('TableInputExt');
var ti = new TDS.TableInput(tableEl, useTextArea);
ti.render();
if (item.value) {
ti.setResponse(item.value);
ti.validateInputs();
}
item.table = ti;
var inputEls = ti.getInputs();
for (var i = 0; i < inputEls.length; ++i) {
item.addComponent(inputEls[i]);
}
var readOnlyFunc = function (evt) {
if (item.isReadOnly()) {
YUE.stopEvent(evt);
}
};
YUE.on(tableContainer, 'keypress', readOnlyFunc);
YUE.on(tableContainer, 'mousedown', readOnlyFunc);
};
CM.onItemEvent('available', function (page, item) {
if (item.isResponseType('TableInput') ||
item.isResponseType('TableInputExt')) {
processItem(page, item);
}
});
var responseGetter = function (item, response) {
if (item.table) {
response.value = item.table.getResponse();
response.isValid = item.table.isResponseValid();
response.isSelected = response.isValid;
}
};
var responseSetter = function (item, value) {
if (item.table) {
item.table.setResponse(value);
}
};
CM.registerResponseHandler('TableInput', responseGetter, responseSetter);
CM.registerResponseHandler('TableInputExt', responseGetter, responseSetter);
})(ContentManager);

// FILE: main.js (4554fcdd) 3/7/2014 11:24:13 AM

TDS = window.TDS || {};
TDS.Notes = {
Store: {},
Debug: true,
Sequence: { id: 0 },
_Factory:  null,
Events: {
Load: new YAHOO.util.CustomEvent('load'),
Save: new YAHOO.util.CustomEvent('save')
},
Types: {
Global: 'global',
DropDown: 'DropDown',
TextArea: 'TextArea',
ScratchPad: 'ScratchPad',
Equation: 'Equation'
},
close: function(obj){
var id = TDS.Notes.getIdFromObj(obj);
if(id){
var notes = TDS.Notes.Store[id];
if(notes){
notes.close();
}
}
},
get: function(id){
return TDS.Notes.Store[id];
},
open: function(obj){
var id = TDS.Notes.getIdFromObj(obj);
var notes = null;
if(id){
notes = TDS.Notes.Store[id];
if(!notes){
notes = TDS.Notes.getInstance(obj, id);
TDS.Notes.Store[id] = notes;
}
if(notes){
notes.open();
}else{
console.error('This object type could note create a valid notes instance?', obj);
}
}
return notes;
},
closeAll: function(){
for(var key in TDS.Notes.Store){
var notes = TDS.Notes.Store[key];
if(notes && notes.close && typeof notes == 'object'){
notes.close();
}
}
},
getInstance: function(obj, id){
return TDS.Notes.getFactory().buildNotes(obj, id);
},
setFactoryConfig: function(cfg){
this.getFactory().setConfig(cfg);
},
getFactory: function(){
if(!TDS.Notes._Factory){
TDS.Config = window.TDS.Config || {};
var fact   = new TDS.Notes.Factory();
fact.setConfig(TDS.Config.NotesConfig);
TDS.Notes._Factory = fact;
}
return TDS.Notes._Factory;
},
setFactory: function(factory){
TDS.Notes._Factory = factory;
},
getIdFromObj: function(obj){
if(!obj){
return TDS.Notes.Types.Global;
}else if(typeof obj == 'string'){
return obj;
}else if (typeof obj == 'number'){
return obj + '';
}else if(obj.id){
return obj.id + '_notes';
}else if(obj.position){
return obj.position + '_notes';
}
}
};

// FILE: dialog.js (a31296e9) 3/7/2014 11:24:13 AM

TDS.Notes.Dialog = function(args) {
args = args || {};
this.dom = args.dom;
this.cfg = args.cfg;
this._yuiDialog = null;
this._impl = args.impl;
};
Messages = window.Messages || { get: function(str) { return str; } };
TDS.Notes.Dialog.prototype.setInstance = function(impl) {
this._impl = impl;
};
TDS.Notes.Dialog.prototype._onShow = function() {
};
TDS.Notes.Dialog.prototype.loading = function() {
};
TDS.Notes.Dialog.prototype.loadingComplete = function() {
};
TDS.Notes.Dialog.prototype._onBeforeShow = function() {
};
TDS.Notes.Dialog.prototype._onHide = function() {
};
TDS.Notes.Dialog.prototype.loadCb = function(response) {
TDS.Notes.Debug && console.log("Load Callback for (this, response)", this, response);
this.loadingComplete();
if (this._impl.unserialize(response)) {
this._impl.saveState(response);
}
};
TDS.Notes.Dialog.prototype.load = function() {
var args = {
id: this.getId(),
data: {
type: this._impl.type,
id: this.getId()
},
cb: this.loadCb.bind(this)
};
TDS.Notes.Debug && console.log('Loading information for this Notes instance', this, args);
TDS.Notes.Events.Load.fire(args);
return args;
};
TDS.Notes.Dialog.prototype.preSave = function(args){
return true;
};
TDS.Notes.Dialog.prototype.submit = function() {
var args = {
id: this.getId(),
data: {
type: this._impl.type,
comment: this._impl.serialize()
},
cb: this.saveCb.bind(this)
};
if(this.preSave(args)){
this._impl.saveState(args.data.comment);
TDS.Notes.Debug && console.log('Saving information for this Notes instance', this, args);
TDS.Notes.Events.Save.fire(args);
this.close(true);
}
return args;
};
TDS.Notes.Dialog.prototype.saveCb = function(response) {
TDS.Notes.Debug && console.log('Save cb for the notes has been called, (this, response)', this, response);
};
TDS.Notes.Dialog.prototype.close = function (preventRevert) {
if (this._yuiDialog) {
this._yuiDialog.hide();
}
if (typeof this.preClose == 'function') {
this.preClose();
}
if (preventRevert !== true) {
this._impl.revertState();
}
};
TDS.Notes.Dialog.prototype.open = function() {
if (!this._yuiDialog) {
this.create();
}
this._yuiDialog.render(document.body);
this._yuiDialog.show();
if(this._impl){
this._impl.focus();
}
};
TDS.Notes.Dialog.prototype.getId = function() {
if (this.dom) {
return this.dom.id;
}
};
TDS.Notes.Dialog.prototype.create = function() {
var id = this.getId();
if (!id) {
console.error('Cannot create a dialog without a valid dom element (id, this): ', id, this);
return;
}
var dialog = new YAHOO.widget.Dialog(id, {
visible: true,
draggable: false,
modal: true,
close: false,
fixedcenter: true,
width: this.cfg.width,
height: this.cfg.height,
zIndex: 1,
postmethod: 'none'
});
dialog.setHeader(this.cfg.label || 'Comments');
dialog.beforeShowEvent.subscribe(this._onBeforeShow, this, true);
dialog.showEvent.subscribe(this._onShow, this, true);
dialog.hideEvent.subscribe(this._onHide, this, true);
var buttons = [
{ text: Messages.get('Cancel'), handler: { fn: this.close, scope: this } },
{ text: Messages.get('Submit and Close'), handler: { fn: this.submit, scope: this }, isDefault: true }
];
dialog.cfg.queueProperty('buttons', buttons);
YAHOO.util.Dom.addClass(dialog.element, 'TDS_Notes_dialog');
YAHOO.util.Dom.addClass(dialog.innerElement, 'comment');
YAHOO.util.Dom.addClass(dialog.header, 'comment-header');
YAHOO.util.Dom.addClass(dialog.body, 'comment-body');
YAHOO.util.Dom.addClass(dialog.form, 'comment-form');
this._yuiDialog = dialog;
return dialog;
};

// FILE: base.js (1e3060f9) 3/7/2014 11:24:13 AM

TDS.Notes.Base = function(){
this._saveState = ' ';
};
TDS.Notes.Base.prototype.create = function(){
TDS.Notes.Debug && console.log("Notes.Base class method, should be overriden: create");
};
TDS.Notes.Base.prototype.serialize   = function(){
TDS.Notes.Debug && console.log("Notes.Base class method, should be overriden: serialize");
};
TDS.Notes.Base.prototype.unserialize = function(response){
TDS.Notes.Debug && console.log("Notes.Base class method, should be overriden: unserialize");
};
TDS.Notes.Base.prototype.saveState = function(state){
this._saveState = state;
};
TDS.Notes.Base.prototype.getState = function(){
return this._saveState;
};
TDS.Notes.Base.prototype.revertState = function(){
this.unserialize(this.getState());
};
TDS.Notes.Base.prototype.focus = function(){
};
TDS.Notes.Base.prototype.unfocus = function(){
};

// FILE: textarea.js (1291c0c9) 3/7/2014 11:24:13 AM

TDS.Notes.TextArea = function(args){
args = args || {};
this.dom = args.dom;
this.type = TDS.Notes.Types.TextArea;
};
YAHOO.lang.extend(TDS.Notes.TextArea, TDS.Notes.Base);
TDS.Notes.TextArea.prototype.serialize = function(){
return this.note.value;
};
TDS.Notes.TextArea.prototype.unserialize = function(response){
if(typeof response != 'string'){return;}
return (this.note.value = response);
};
TDS.Notes.TextArea.prototype.create = function()
{
var ta = document.createElement('textarea');
ta.className = 'comment-input comment-textbox';
ta.rows = 4;
YAHOO.util.Dom.setStyle(ta, 'resize', 'none');
document.getElementById('note_container_' + this.dom.id).appendChild(ta);
this.note = ta;
return this.note;
};
TDS.Notes.TextArea.prototype.unfocus = function()
{
if(this.note){
this.note.unfocus();
}
}
TDS.Notes.TextArea.prototype.focus = function()
{
if(this.note){
this.note.focus();
}
};

// FILE: scratchpad.js (805022dd) 3/7/2014 11:24:13 AM

TDS.Notes.ScratchPad = function(args){
args = args || {};
this.dom = args.dom;
this.type = TDS.Notes.Types.ScratchPad;
};
YAHOO.lang.extend(TDS.Notes.ScratchPad, TDS.Notes.Base);
TDS.Notes.ScratchPad.prototype.serialize = function(){
return this.note.save();
};
TDS.Notes.ScratchPad.prototype.unserialize = function(response){
if(!response){return;}
if(typeof response == 'string' && response){
response = JSON.parse(response);
}
if(response){
this.note.load('list', response);
}
return true;
};
TDS.Notes.ScratchPad.prototype.create = function(){
var SPF = ScratchPad.Factory.getInstance();
var cId = 'note_container_' + this.dom.id;
this.note = SPF.getOrCreateScratchPadById(cId);
return this.note;
};

// FILE: dropdown.js (5aab6ee6) 3/7/2014 11:24:13 AM

TDS.Notes.DropDown = function(args){
args = args || {};
this.comments = args.DropComments || TDS.Comments || [];
this.dom = args.dom;
this.type = TDS.Notes.Types.DropDown;
};
YAHOO.lang.extend(TDS.Notes.DropDown, TDS.Notes.Base);
TDS.Notes.DropDown.prototype.serialize = function(){
return this.note.value;
};
TDS.Notes.DropDown.prototype.unserialize = function(response){
if(typeof response != 'string'){return;}
return (this.note.value = response);
};
TDS.Notes.DropDown.prototype.create = function()
{
var selectBox = document.createElement('select');
selectBox.className = 'comment-input comment-selectbox';
for(var i = 0; i < this.comments.length; ++i){
var commentLine = this.comments[i];
var option = document.createElement('option');
option.text  = commentLine;
option.value = commentLine;
selectBox.appendChild(option);
}
document.getElementById('note_container_' + this.dom.id).appendChild(selectBox);
this.note = selectBox;
if (this.comments.length > 0) {
this.saveState(this.comments[0]);
}
return selectBox;
};

// FILE: equation.js (a1770d4d) 3/7/2014 11:24:13 AM

TDS.Notes.Equation = function(args){
args = args || {};
this.dom = args.dom;
this.type = TDS.Notes.Types.Equation;
};
YAHOO.lang.extend(TDS.Notes.Equation, TDS.Notes.Base);
TDS.Notes.Equation.prototype.serialize = function(){
TDS.Notes.Debug && console.log("What save callback exists here?");
return this.note.serializeSettings();
};
TDS.Notes.Equation.prototype.unserialize = function(response){
if(!response){return;}
if(typeof response == 'string'){
response = JSON.parse(response);
}
TDS.Notes.Debug && console.log("What is in the response?", response);
if(this.note && response){
this.note.remove();
response.containerId = 'note_container_' + this.dom.id;
this.note = new MathJax.Editor.Widget(response);
}
return true;
};
TDS.Notes.Equation.prototype.create = function(){
this.note = new MathJax.Editor.Widget({
containerId: 'note_container_' + this.dom.id,
RestrictKeysToContent: true,
tabs: true,
tabConfig: {
Order: ['Algebra', 'Basic']
}
});
};

// FILE: factory.js (4ae1fd5a) 3/7/2014 11:24:13 AM

TDS.Notes.TypeConfig = TDS.Notes.TypeConfig || {
Default: {
width: '450px',
height: '150px'
},
ScratchPad: {
width: '790px',
height: '780px'
},
Equation: {
width: '500px',
height: '331px',
label: 'Equation Editor'
}
};
TDS.Notes.Factory = function(cfg) {
this.setConfig(cfg);
};
TDS.Notes.Factory.prototype.setConfig = function(cfg) {
cfg = cfg || {};
cfg.GlobalClass = cfg.GlobalClass || TDS.Notes.Types.TextArea;
cfg.GlobalLabel = cfg.GlobalLabel || "Global Comments";
TDS.Notes['global'] = TDS.Notes[cfg.GlobalClass];
cfg.DefaultClass = cfg.DefaultClass || TDS.Notes.Types.TextArea;
cfg.DefaultLabel = cfg.DefaultLabel || "Comments";
TDS.Notes.Debug && console.log("Setting the Notes Factory config with cfg:", cfg);
this.cfg = cfg;
};
TDS.Notes.Factory.prototype.getConfig = function() {
return this.cfg;
};
TDS.Notes.Factory.prototype.getDialogConfigForType = function(type) {
var cfg = JSON.parse(JSON.stringify(TDS.Notes.TypeConfig[type] || TDS.Notes.TypeConfig.Default));
cfg.label = (type == TDS.Notes.Types.Global) ? this.cfg.GlobalLabel : (cfg.label ? cfg.label : this.cfg.DefaultLabel);
return cfg;
};
TDS.Notes.Factory.prototype.getNotesType = function(obj) {
if (obj && obj.NotesType && TDS.Notes.Types[obj.NotesType]) {
return TDS.Notes.Types[obj.NotesType];
}
return this.cfg.DefaultClass || TDS.Notes.Types.TextArea;
};
TDS.Notes.Factory.prototype.buildNotes = function(obj, id) {
var type = null;
if(!obj){
type = TDS.Notes.Types.Global;
}else if(typeof obj == 'string') {
type = obj;
}else if (obj) {
type = this.getNotesType(obj);
}
if (typeof TDS.Notes[type] == 'function') {
TDS.Notes.Debug && console.log("Building notes for (obj, id, type)", id, type);
return this.createNotesType(id, type);
}else{
console.error("Cannot build notes with this type: ", type);
}
};
TDS.Notes.Factory.prototype.createNotesType = function(id, type) {
var dom = this.getContainer(id, type);
var notes = new TDS.Notes[type]({ dom: dom });
notes.saveState('');
var dialog = new TDS.Notes.Dialog({
cfg: this.getDialogConfigForType(type),
dom: dom,
impl: notes
});
TDS.Notes.Debug && console.log("Creating an instance of this notes (id, type, dialog, notes)", id, type, dialog, notes);
dialog.create();
notes.create();
return dialog;
};
TDS.Notes.Factory.prototype.getContainer = function(id, type) {
var dom = document.getElementById(id);
if (!dom) {
dom = document.createElement('form');
dom.id = id;
dom.className += 'notes_dialog_form notes_dialog_form_' + type;
document.body.appendChild(dom);
}
var cId = 'note_container_' + id;
var c = document.getElementById(cId);
if (!c) {
c = document.createElement('div');
c.className = 'notes_dialog_container';
c.id = cId;
dom.appendChild(c);
}
return dom;
};

// FILE: mc.group.js (e26207eb) 3/7/2014 11:24:13 AM

var ContentMCGroup = function(item)
{
this._item = item;
this._options = [];
this._optionHash = {};
};
ContentMCGroup.prototype.getItem = function() { return this._item; };
ContentMCGroup.prototype.addOption = function(option)
{
this._options.push(option);
this._optionHash[option.key] = option;
};
ContentMCGroup.prototype.getOptions = function() { return this._options; };
ContentMCGroup.prototype.getOption = function(optionKey)
{
var option = null;
if (YLang.isString(optionKey))
{
optionKey = optionKey.toUpperCase();
option = this._optionHash[optionKey] || null;
}
else if (YLang.isNumber(optionKey))
{
option = this._options[optionKey - 1] || null;
}
return option;
};
ContentMCGroup.prototype.getSelected = function()
{
for (var i = 0; i < this._options.length; i++)
{
if (this._options[i].isSelected()) return this._options[i];
}
return null;
};
ContentMCGroup.prototype.clear = function() {
var selected = this.getSelected();
if (selected != null) selected.deselect();
};
ContentMCGroup.prototype.getValue = function()
{
var option = this.getSelected();
return (option) ? option.key : null;
};
ContentMCGroup.prototype.setValue = function(optionKey)
{
var option = this.getOption(optionKey);
if (!option) return false;
option.select();
return true;
};
ContentMCGroup.prototype.getFocusedOption = function()
{
var focusedComponent = this.getItem().getActiveComponent();
for (var i = 0; i < this._options.length; i++)
{
var option = this._options[i];
if (option.getElement() == focusedComponent) return option;
}
return null;
};

// FILE: mc.option.js (22ed4919) 3/7/2014 11:24:13 AM

var ContentMCOption = function(options, key)
{
this._options = options;
this.key = key;
this.audioLink = null;
this.tts = null;
this.feedback = null;
};
ContentMCOption.prototype.toString = function() { return this.key; };
ContentMCOption.prototype.getElement = function()
{
var item = this._options.getItem();
var doc = item.getPage().getDoc();
return doc.getElementById('Item_OptionContainer_Response_MC_' + item.position + '_' + this.key);
};
ContentMCOption.prototype.getRadioGroup = function()
{
var item = this._options.getItem();
var form = item.getPage().getForm();
return form['Item_Response_MC_' + item.position];
};
ContentMCOption.prototype.getRadioButton = function()
{
var item = this._options.getItem();
var form = item.getPage().getForm();
return form['Item_Response_MC_' + item.position + '_' + this.key];
};
ContentMCOption.prototype.getSoundLink = function()
{
var item = this._options.getItem();
var doc = item.getPage().getDoc();
var soundDIV = doc.getElementById('Item_OptionSound_Response_MC_' + item.position + '_' + this.key);
if (soundDIV == null) return null;
var soundLink = soundDIV.getElementsByTagName('a')[0];
return soundLink;
};
ContentMCOption.prototype.getContentElement = function()
{
var optionElement = this.getElement();
return YUD.getElementsByClassName('optionContent', 'div', optionElement);
};
ContentMCOption.prototype.getFeedbackElement = function()
{
var optionElement = this.getElement();
return Util.Dom.getElementByClassName('optionFeedback', 'div', optionElement);
};
ContentMCOption.prototype.showFeedback = function()
{
var feedbackElement = this.getFeedbackElement();
if (feedbackElement != null)
{
YUD.addClass(feedbackElement, 'showing');
}
};
ContentMCOption.prototype.hideFeedback = function()
{
var feedbackElement = this.getFeedbackElement();
if (feedbackElement != null)
{
YUD.removeClass(feedbackElement, 'showing');
}
};
ContentMCOption.prototype.select = function(force)
{
var currentSelection = this._options.getSelected();
if (currentSelection == this && force !== true) return false;
if (force)
{
var options = this._options.getOptions();
Util.Array.each(options, function(option)
{
option.deselect();
});
}
else if (currentSelection)
{
currentSelection.deselect();
}
var radioButton = this.getRadioButton();
if (!radioButton.checked)
{
radioButton.checked = true;
}
YUD.addClass(this.getElement(), 'optionSelected');
var page = this._options._item.getPage();
var pageAccProps = page.getAccommodationProperties();
if (pageAccProps != null && pageAccProps.showFeedback()) this.showFeedback();
if (typeof (window.tdsUpdateItemResponse) == 'function')
{
var position = this._options._item.position;
window.tdsUpdateItemResponse(position, this.key);
}
return true;
};
ContentMCOption.prototype.deselect = function()
{
var optionElement = this.getElement();
YUD.removeClass(optionElement, 'optionSelected');
var radioButton = this.getRadioButton();
radioButton.checked = false;
this.hideFeedback();
};
ContentMCOption.prototype.isSelected = function()
{
var radioButton = this.getRadioButton();
return (radioButton && radioButton.checked === true);
};
ContentMCOption.prototype.hasStrikethrough = function()
{
var element = this.getElement();
return (element && YUD.hasClass(element, 'strikethrough'));
};
ContentMCOption.prototype.toggleStrikethrough = function()
{
var element = this.getElement();
if (element) YUD.toggleClass(element, 'strikethrough');
};
ContentMCOption.prototype.toString = function() { return this.key; };

// FILE: ms.group.js (131c3035) 3/7/2014 11:24:13 AM

var ContentMSGroup = function(item)
{
this._minChoices = 0;
this._maxChoices = 0;
ContentMSGroup.superclass.constructor.call(this, item);
};
YAHOO.lang.extend(ContentMSGroup, ContentMCGroup);
ContentMSGroup.prototype.setMinChoices = function(num) {
this._minChoices = num;
};
ContentMSGroup.prototype.getMinChoices = function () {
return this._minChoices;
};
ContentMSGroup.prototype.setMaxChoices = function (num) {
this._maxChoices = num;
};
ContentMSGroup.prototype.getMaxChoices = function () {
return this._maxChoices;
};
ContentMSGroup.prototype.getSelected = function()
{
var selectedOptions = [];
for (var i = 0; i < this._options.length; i++)
{
if (this._options[i].isSelected()) {
selectedOptions.push(this._options[i]);
}
}
return selectedOptions;
};
ContentMSGroup.prototype.clear = function() {
var selected = this.getSelected();
for (var i = 0; i < selected.length; i++) {
selected[i].deselect();
}
};
ContentMSGroup.prototype.getValue = function()
{
var options = this.getSelected();
return options.join(',');
};
ContentMSGroup.prototype.setValue = function(value) {
this.clear();
if (value == null) {
return false;
}
var optionKeys = value.split(',');
for (var i = 0; i < optionKeys.length; i++) {
var optionKey = optionKeys[i];
var option = this.getOption(optionKey);
if (option != null) option.select();
}
return true;
};

// FILE: ms.option.js (5083e379) 3/7/2014 11:24:13 AM

var ContentMSOption = function(options, key)
{
ContentMSOption.superclass.constructor.call(this, options, key);
};
YAHOO.lang.extend(ContentMSOption, ContentMCOption);
ContentMSOption.prototype._validateSelection = function() {
var maxChoices = this._options.getMaxChoices();
var selected = this._options.getSelected();
var selectedCount = selected.length;
if (maxChoices == 1 && selectedCount > 0) {
selected[0].deselect();
} else if (maxChoices > 0 && maxChoices <= selectedCount) {
return false;
}
return true;
};
ContentMSOption.prototype.select = function()
{
var checkbox = this.getRadioButton();
if (checkbox.checked) {
this.deselect();
} else {
if (!this._validateSelection()) {
return false;
}
checkbox.checked = true;
YUD.addClass(this.getElement(), 'optionSelected');
var page = this._options._item.getPage();
var pageAccProps = page.getAccommodationProperties();
if (pageAccProps != null && pageAccProps.showFeedback()) this.showFeedback();
}
return true;
};

// FILE: module_mc.js (93681727) 5/2/2014 12:55:57 PM

ContentManager.onItemEvent('init', function(page, item, itsItem) {
if (item.isResponseType('Scaffolding')) return;
var format = item.format.toUpperCase();
if ((format != 'MS') && (format != 'MC') && (format != 'SI')) return;
if (itsItem.options == null) return;
var options;
if (item.format != null && item.format.toUpperCase() == 'MS') {
options = new ContentMSGroup(item);
options.setMinChoices(itsItem.optionsConfig.minChoices);
options.setMaxChoices(itsItem.optionsConfig.maxChoices);
} else {
options = new ContentMCGroup(item);
}
Util.Array.each(itsItem.options, function(itsOption)
{
var optionKey = itsOption.key.toUpperCase();
var option;
if (item.format != null && item.format.toUpperCase() == 'MS') {
option = new ContentMSOption(options, optionKey);
} else {
option = new ContentMCOption(options, optionKey);
}
options.addOption(option);
option.tts = itsOption.tts;
option.feedback = itsOption.feedback;
});
item.MC = options;
});
ContentManager.onItemEvent('available', function(page, item)
{
if (item.MC == null) return;
if (page.layout == 'wai' && item.format == 'MS') {
var itemDiv = item.getElement();
YUD.addClass(itemDiv, 'multipleChoiceItem format_ms');
}
var options = item.MC.getOptions();
Util.Array.each(options, function(option)
{
var optionContainer = option.getElement();
var radioButton = option.getRadioButton();
var radioButtonGroup = option.getRadioGroup();
if (ContentManager.enableARIA)
{
radioButton.setAttribute('aria-label', 'Option ' + option.key);
}
item.addComponent(optionContainer);
if (option.feedback != null)
{
var pageAccProps = page.getAccommodationProperties();
if (pageAccProps != null && pageAccProps.showFeedback())
{
var doc = item.getPage().getDoc();
var feedbackElement = doc.createElement('div');
YUD.addClass(feedbackElement, 'optionFeedback');
feedbackElement.innerHTML = option.feedback;
optionContainer.appendChild(feedbackElement);
if (option.isSelected()) option.showFeedback();
else option.hideFeedback();
}
}
YUE.on(radioButton, 'click', function(ev)
{
option.select(true);
});
YUE.on(radioButton, 'focus', function(ev)
{
YUD.setStyle(optionContainer, 'background-color', 'orange');
});
YUE.on(radioButton, 'blur', function(ev)
{
YUD.setStyle(optionContainer, 'background-color', '');
});
var clickType = (YAHOO.env.ua.webkit > 0 && YAHOO.env.ua.webkit <= 419.3) ? 'mousedown' : 'click';
YUE.on(optionContainer, clickType, function(clickEvent)
{
if (item.isReadOnly()) return;
if (clickEvent.altKey) return;
option.select();
});
});
});
ContentManager.onItemEvent('keyevent', function(page, item, evt)
{
if (!item.MC) return;
if (evt.type != 'keydown') return;
if (evt.ctrlKey || evt.altKey) return;
var options = item.MC;
if (evt.key == 'Enter')
{
if (ContentManager.isReadOnly()) return;
var option = options.getFocusedOption();
if (option) option.select();
}
});
ContentManager.onItemEvent('menushow', function(page, item, menu, evt)
{
if (!item.MC) return;
var optionGroup = item.MC;
var focusedOption = optionGroup.getFocusedOption();
if (!focusedOption) return;
var accProps = page.getAccommodationProperties();
if (accProps.hasStrikethrough())
{
var strikedthrough = YUD.hasClass(focusedOption.getElement(), 'strikethrough');
var menuLabel = { text: (focusedOption.hasStrikethrough() ? Messages.get('TDSMC.MenuLabel.UndoStrikethrough') : Messages.get('TDSMC.MenuLabel.Strikethrough')), classname: 'strikethrough' };
menu.addMenuItem('component', menuLabel, function()
{
focusedOption.toggleStrikethrough();
});
}
});
(function()
{
var getter = function(item, response)
{
var value = item.MC.getValue();
if (!value) return;
response.value = value;
response.isAvailable = true;
response.isSelected = true;
response.isValid = true;
};
var setter = function(item, value)
{
item.MC.setValue(value);
};
ContentManager.registerResponseHandler('vertical', getter, setter);
ContentManager.registerResponseHandler('vertical MS', getter, setter);
ContentManager.registerResponseHandler('horizontal', getter, setter);
ContentManager.registerResponseHandler('stacked', getter, setter);
ContentManager.registerResponseHandler('stackedB', getter, setter);
})();

// FILE: ebsr.js (5face77d) 3/7/2014 11:24:06 AM

var EBSR = function (xmlString, item) {
this._xmlString = xmlString;
var ebsrItem = this;
this._position = item.position;
var nodes = Util.Xml.parseFromString(xmlString);
var docElement = nodes.documentElement;
this.interactionsXml = docElement.getElementsByTagName('choiceInteraction');
this._interactions = [];
this._interactionHash = {};
$.each(this.interactionsXml, function (i, interactionXml) {
var contentOptionClass = [];
contentOptionClass["MS"] = EBSR.MSOption;
contentOptionClass["MC"] = EBSR.MCOption;
var interaction = new EBSR.QTI(interactionXml, item.position, contentOptionClass, i + 1);
interaction.options.getItem = function () {
return item;
};
ebsrItem.addInteraction(interaction);
});
};
EBSR.prototype.addInteraction = function(interaction) {
this._interactions.push(interaction);
this._interactionHash[interaction.responseId] = interaction;
};
EBSR.prototype.getInteractions = function() {
return this._interactions;
};
EBSR.prototype.getPrompts = function() {
var interactions = this.getInteractions();
var prompts = [];
Util.Array.each(interactions, function(interaction) {
var prompt = interaction.getPrompt();
if (prompt && prompt.length == 1) {
prompts.push(prompt[0]);
}
});
return prompts;
};
EBSR.prototype.getInteractionByKey = function (key) {
var interactions = this.getInteractions();
var targetInteraction = {};
Util.Array.each(interactions, function(interaction) {
if (interaction.key == key) {
targetInteraction = interaction;
}
});
return targetInteraction;
};
EBSR.prototype.getInteraction = function (key) {
return this._interactionHash[key];
};
EBSR.prototype.getFocusedOption = function (focusedComponent) {
for (var i = 0; i< this._interactions.length; i++) {
var options = this._interactions[i].getOptions();
for (var j = 0; j < options.length; j++) {
var option = options[j];
if (option.getElement() == focusedComponent) return option;
}
}
};
EBSR.prototype.populateStem = function () {
if (this._xmlString == null) return;
var xmlDoc = Util.Xml.parseFromString(this._xmlString);
var docEl = xmlDoc.documentElement;
var stemContent = $(docEl).children().not('choiceInteraction');
$("#Stem_" + this._position).html(stemContent.contents());
};
EBSR.prototype.generateHTML = function (answerContainer) {
var interactions = this.getInteractions();
Util.Array.each(interactions, function (interaction) {
interaction.generateInteractionHTML(answerContainer);
});
};
EBSR.prototype.getAllComponentLists = function () {
var componentList = [];
var interactions = this.getInteractions();
Util.Array.each(interactions, function (interaction) {
var interactionComponentList = interaction.getComponentList();
componentList = componentList.concat(interactionComponentList);
});
return componentList;
};
EBSR.prototype.getAllRadioButtons = function () {
var radioButtons = [];
var interactions = this.getInteractions();
Util.Array.each(interactions, function (interaction) {
var interactionRadioButtons = interaction.getRadioButtons();
radioButtons = radioButtons.concat(interactionRadioButtons);
});
return radioButtons;
};
EBSR.prototype.setValue = function (value) {
if (typeof value != 'string' ||
value.indexOf('<itemResponse>') == -1) {
return false;
}
var ebsr = this;
var nodes = Util.Xml.parseFromString(value);
var docElement = nodes.documentElement;
$('response', docElement).each(function (responseIdx, responseNode) {
var responseId = responseNode.getAttribute('id');
var interaction = ebsr.getInteraction(responseId);
if (interaction && interaction.options) {
interaction.options.clear();
$('value', responseNode).each(function (valueIdx, valueNode) {
var optionId = $(valueNode).text();
if (optionId) {
var option = interaction.options.getOption(optionId);
if (option) {
option.select(true);
}
}
});
}
});
return true;
};
EBSR.prototype.getResponse = function() {
var responseEl = ['<itemResponse>'];
var interactions = this.getInteractions();
var createSelectedNode = function (selected) {
if (selected) {
responseEl.push('<value>');
responseEl.push(selected);
responseEl.push('</value>');
}
};
Util.Array.each(interactions, function(interaction) {
responseEl.push('<response id="' + interaction.responseId + '">');
var selected = interaction.options.getSelected();
if (interaction.type.toUpperCase() == "MS") {
for (var i = 0; i < selected.length; i++) {
createSelectedNode(selected[i]);
}
} else {
createSelectedNode(selected);
}
responseEl.push('</response>');
});
responseEl.push('</itemResponse>');
return responseEl.join('');
};
EBSR.prototype.isValid = function() {
var interactions = this.getInteractions();
var response = true;
Util.Array.each(interactions, function (interaction) {
var selected = interaction.options.getSelected();
if (!selected || selected.length == 0) {
response = false;
}
});
return response;
};
EBSR.MCOption = function (options, key, interactionKey) {
EBSR.MCOption.superclass.constructor.call(this, options, key);
this._interactionKey = interactionKey;
};
YAHOO.lang.extend(EBSR.MCOption, ContentMCOption);
EBSR.MCOption.prototype.getElement = function () {
var item = this._options.getItem();
var doc = item.getPage().getDoc();
return doc.getElementById('Item_OptionContainer_Response_EBSR_' +
item.position + '_Part' + this._interactionKey + '_' + this.key);
};
EBSR.MCOption.prototype.getRadioGroup = function () {
var item = this._options.getItem();
var form = item.getPage().getForm();
return form['Item_Response_EBSR_' + item.position + '_Part' + this._interactionKey];
};
EBSR.MCOption.prototype.getRadioButton = function () {
var item = this._options.getItem();
var form = item.getPage().getForm();
return form['Item_Response_EBSR_' + item.position + '_Part' + this._interactionKey +
'_' + this.key];
};
EBSR.MCOption.prototype.getSoundLink = function () {
var item = this._options.getItem();
var doc = item.getPage().getDoc();
var soundDIV = doc.getElementById('Item_OptionSound_Response_EBSR_' + item.position +
'_Part' + this._interactionKey + '_' + this.key);
if (soundDIV == null) return null;
var soundLink = soundDIV.getElementsByTagName('a')[0];
return soundLink;
};
EBSR.MCOption.prototype.select = function (force) {
var currentSelection = this._options.getSelected();
if (currentSelection == this && force !== true) {
return false;
}
if (force) {
var options = this._options.getOptions();
Util.Array.each(options, function (option) {
option.deselect();
});
}
else if (currentSelection) {
currentSelection.deselect();
}
var radioButton = this.getRadioButton();
if (!radioButton.checked) {
radioButton.checked = true;
}
$(this.getElement()).addClass('optionSelected');
var page = this._options.getItem().getPage();
var pageAccProps = page.getAccommodationProperties();
if (pageAccProps != null && pageAccProps.showFeedback()) this.showFeedback();
return true;
};
EBSR.MSOption = function (options, key, interactionKey) {
EBSR.MSOption.superclass.constructor.call(this, options, key, interactionKey);
};
YAHOO.lang.extend(EBSR.MSOption, EBSR.MCOption);
EBSR.MSOption.prototype.select = function (force) {
var checkbox = this.getRadioButton();
if (checkbox.checked && !force) {
this.deselect();
} else {
checkbox.checked = true;
$(this.getElement()).addClass('optionSelected');
var page = this._options.getItem().getPage();
var pageAccProps = page.getAccommodationProperties();
if (pageAccProps != null && pageAccProps.showFeedback()) this.showFeedback();
}
return true;
};

// FILE: ebsr.qti.js (d03cebd7) 3/7/2014 11:24:06 AM

EBSR.QTI = function (interactionXml, itemKey, contentOptionClass, interactionKey) {
this._componentList = [];
if (contentOptionClass == null) {
contentOptionClass = [];
contentOptionClass["MS"] = ContentMSOption;
contentOptionClass["MC"] = ContentMCOption;
}
var options;
this.responseId = interactionXml.getAttribute('responseIdentifier');
this.maxChoice = interactionXml.getAttribute('maxChoice');
if (this.maxChoice && (this.maxChoice != "1")) {
this.type = "MS";
options = new ContentMSGroup();
} else {
this.type = "MC";
options = new ContentMCGroup();
};
this.itemKey = itemKey;
this.key = interactionKey;
var prompt = interactionXml.getElementsByTagName('prompt')[0];
var promptToHtml = Util.Xml.serializeToString(prompt);
this.promptText = $(promptToHtml).html();
var optionsXml = interactionXml.getElementsByTagName('simpleChoice');
var optionsArray = [];
var contentOption = contentOptionClass[this.type];
Util.Array.each(optionsXml, function (optionXml) {
var optionKey = optionXml.getAttribute('identifier').toUpperCase();
var option = new contentOption(options, optionKey, interactionKey);
options.addOption(option);
var parsedOption = {};
parsedOption.key = optionKey;
var optionToHtml = Util.Xml.serializeToString(optionXml);
parsedOption.innerHTML = $(optionToHtml).html();
optionsArray[optionKey] = parsedOption;
});
this.options = options;
this.parsedOptions = optionsArray;
};
EBSR.QTI.prototype.getOptions = function () {
return this.options.getOptions();
};
EBSR.QTI.prototype.getPrompt = function () {
return this._prompt;
};
EBSR.QTI.prototype.getHeader = function () {
return this._header;
};
EBSR.QTI.prototype.getComponentList = function () {
return this._componentList;
};
EBSR.QTI.prototype.generateInteractionHTML = function (answerContainer) {
var interactionHTML = $('<div></div')
.attr('id', 'Item_Container_EBSR_' + this.itemKey + '_' + this.key)
.addClass('interactionContainer')
.appendTo(answerContainer);
this.generatePromptHTML(interactionHTML);
this._componentList.push(this._prompt[0]);
var interaction = this;
var options = this.getOptions();
if (options && options.length > 0) {
Util.Array.each(options, function (option) {
var optionContainer = interaction.generateOptionHTML(interactionHTML, option);
interaction._componentList.push(optionContainer);
$(optionContainer).find('input')
.attr('aria-label', 'Option ' + option.key)
.bind('click', function(ev) {
option.select(true);
})
.bind('focus', function(ev) {
$(optionContainer).css({ 'background-color': 'orange' });
})
.bind('blur', function(ev) {
$(optionContainer).css({ 'background-color': '' });
});
var clickType = (YAHOO.env.ua.webkit > 0 && YAHOO.env.ua.webkit <= 419.3) ? 'mousedown' : 'click';
$(optionContainer).bind(clickType, function (clickEvent) {
if (clickEvent.altKey) return;
option.select();
});
});
}
};
EBSR.QTI.prototype.generatePromptHTML = function (parent) {
var headerKey = 'EBSR.Header.Part' + this.key;
var ttsKey = 'TDSTTS.Speak.EBSR.Part' + this.key;
var headerText = Messages.get(headerKey);
this._header = $('<h3>' + headerText + '</h3>').appendTo(parent);
if (Messages.has(ttsKey)) {
var ttsText = Messages.get(ttsKey);
this._header.attr('ssml', 'sub')
.attr('ssml_alias', ttsText)
.addClass('TTS')
.addClass('speakAs');
}
this._prompt = $('<div></div>')
.attr('id', 'Item_InteractionPrompt_Response_EBSR_' + this.itemKey + '_' + this.key)
.addClass('interactionPrompt')
.html(this.promptText)
.appendTo(parent);
};
EBSR.QTI.prototype.generateOptionHTML = function (parent, option) {
var optionIdString = this.itemKey + '_Part' + this.key;
var nodeId = 'Item_OptionContainer_Response_EBSR_' + optionIdString + '_' + option.key;
var nodeClass = "EBSR_" + this.type.toLowerCase();
var node = $('<div></div>')
.attr('id', nodeId)
.attr('title', Messages.get('EBSR.Header.Part' + this.key) + ' Option ' + option.key)
.addClass('optionContainer option' + option.key + ' ' + nodeClass)
.append('<span class="striked"></span>')
.append('<span class="optionClicker"></span>')
.appendTo(parent);
var inputButton = $('<input></input')
.attr('name', 'Item_Response_EBSR_' + optionIdString)
.attr('value', option.key)
.attr('id', 'Item_Response_EBSR_' + optionIdString + '_' + option.key)
.addClass('option')
.appendTo(node);
if (this.type.toUpperCase() == "MS") {
var type = 'checkbox';
inputButton.attr('data-tts-prefix', 'TDSTTS.Speak.Select' + option.key);
} else {
type = 'radio';
}
inputButton.prop('type', type);
$('<div></div>')
.addClass('optionContent')
.html(this.parsedOptions[option.key].innerHTML)
.appendTo(node);
return node[0];
};

// FILE: module_ebsr.js (8e8f1777) 7/23/2014 4:30:36 PM

(function(CM) {
CM.onItemEvent('available', function (page, item) {
if (!item.isResponseType('EBSR')) return;
var qtiXml = (item.qti) ? item.qti.xml : null;
if (qtiXml == null) {
console.warn('EBSR: Could not find QTI for item ' + item.getID());
return;
}
var ebsr = new EBSR(qtiXml, item);
item.EBSR = ebsr;
var ebsrEl = document.getElementById('EBSR_' + item.position);
ebsr.generateHTML(ebsrEl);
ebsr.populateStem();
var componentList = ebsr.getAllComponentLists();
if (componentList && componentList.length) {
for (var i = 0; i < componentList.length; i++) {
item.addComponent(componentList[i]);
}
}
if (item.value) {
ebsr.setValue(item.value);
}
});
CM.onItemEvent('keyevent', function (page, item, evt) {
var ebsr = item.EBSR;
if (!ebsr) return;
if (evt.type != 'keydown') return;
if (evt.ctrlKey || evt.altKey) return;
if (evt.key == 'Enter') {
if (CM.isReadOnly()) return;
var focusedComponent = item.getActiveComponent();
var option = ebsr.getFocusedOption(focusedComponent);
if (option) {
option.select();
}
}
});
function onMenuShowStrikethrough(page, item, menu, ebsr, interaction) {
var focusedComponent = item.getActiveComponent();
var focusedOption = ebsr.getFocusedOption(focusedComponent);
if (!focusedOption) return;
var accProps = page.getAccommodationProperties();
if (accProps && accProps.hasStrikethrough()) {
var menuText = focusedOption.hasStrikethrough() ? Messages.get('TDSMC.MenuLabel.UndoStrikethrough') : Messages.get('TDSMC.MenuLabel.Strikethrough');
var menuItem = { text: menuText, classname: 'strikethrough' };
menu.addMenuItem('component', menuItem, function () {
focusedOption.toggleStrikethrough();
});
}
};
function onMenuShowTTS(page, item, menu, ebsr, interaction, selection) {
var accProps = page.getAccommodationProperties();
if (!accProps.hasTTSItem()) return;
if (TDS.Audio.isActive()) return;
var pageWin = page.getActiveWin();
var languages = CM.getLanguage() == 'ESN' ? ['ESN', 'ENU'] : ['ENU'];
var focusedComponent = item.getActiveComponent();
var focusedOption = ebsr.getFocusedOption(focusedComponent);
var domToParse = [];
domToParse.push(interaction.getHeader()[0]);
domToParse.push(interaction.getPrompt()[0]);
var ttsMenu = new TTS.Menu(languages);
var menuCfg = ttsMenu.getMenuCfg(domToParse, selection, pageWin, item.stemTTS, page, item);
for (var i = 0; i < interaction.getOptions().length; ++i) {
var element = (interaction.getOptions())[i].getElement();
var testCfg = null;
var testMenu = new TTS.Menu(languages);
testCfg = testMenu.addFocusedOption(testCfg, element);
if (testCfg.PRI.cb) {
domToParse.push(element);
}
}
if (domToParse.length > 2) {
ttsMenu.addOptions(menuCfg, domToParse);
}
if (focusedOption && focusedOption.key) {
menuCfg.SEL_PRI = false;
menuCfg.SEL_SEC = false;
menuCfg.PRI.level = 'component';
menuCfg.SEC.level = 'component';
menuCfg.STOP.level = 'component';
menuCfg.PAUSE.level = 'component';
menuCfg.RESUME.level = 'component';
ttsMenu.addFocusedOption(menuCfg, item.getActiveComponent());
}
TTS.MenuSystem.addMenuSetup(menu, menuCfg);
TTS.Config.Debug && console.log("TTS On Item Menushow config", menuCfg);
}
function onMenuShowASL(page, item, menu, ebsr, interaction) {
var attachments = item.getAslAttachments();
if (attachments && attachments.length > 0) {
for (var i = 0; i < attachments.length; ++i) {
var at = attachments[i];
if (at.subType.toLowerCase() == 'targeted') {
var target = at.target;
if (interaction.responseId == target) {
var menuItem = {
text: Messages.get('TDSContentEventJS.Label.ASLItem'),
classname: 'ASL',
onclick: {
fn: function () {
AslModule.showImageDialog(at.url,page.getZoomFactor());
}
}
};
menu.addMenuItem('component', menuItem);
return;
}
}
}
}
}
function onMenuShowStemTTS(page, item, menu, ebsr, stem, selection) {
var accProps = page.getAccommodationProperties();
if (!accProps.hasTTSItem()) return;
if (TDS.Audio.isActive()) return;
var pageWin = page.getActiveWin();
var languages = CM.getLanguage() == 'ESN' ? ['ESN', 'ENU'] : ['ENU'];
var domToParse = [];
domToParse.push(stem);
var ttsMenu = new TTS.Menu(languages);
var menuCfg = ttsMenu.getMenuCfg(domToParse, selection, pageWin, item.stemTTS, page, item);
var interactions = ebsr.getInteractions();
for (var i = 0; i < interactions.length; i++) {
var interaction = interactions[i];
domToParse.push(interaction.getHeader()[0]);
domToParse.push(interaction.getPrompt()[0]);
for (var j = 0; j < interaction.getOptions().length; ++j) {
domToParse.push((interaction.getOptions())[j].getElement());
}
}
ttsMenu.addOptions(menuCfg, domToParse);
TTS.MenuSystem.addMenuSetup(menu, menuCfg);
TTS.Config.Debug && console.log("TTS On Item Menushow config", menuCfg);
}
CM.onItemEvent('menushow', function (page, item, menu, evt, selection) {
var ebsr = item.EBSR;
if (!ebsr) return;
function getClosestInteraction (target) {
var pageEl = page.getElement();
var $closestInteraction = $(target).closest('div.interactionContainer', pageEl);
return $closestInteraction;
};
var interaction = null;
var $interactionContainer = getClosestInteraction(evt.target);
if ($interactionContainer && $interactionContainer.length == 0) {
var componentEl = item.getActiveComponent();
$interactionContainer = getClosestInteraction(componentEl);
}
if ($interactionContainer.length > 0) {
var interactionId = $interactionContainer.attr('id');
if (interactionId) {
var interactionKey = interactionId.split('_').pop();
if (interactionKey) {
interaction = ebsr.getInteractionByKey(interactionKey);
}
}
}
if (interaction != null) {
onMenuShowStrikethrough(page, item, menu, ebsr, interaction);
onMenuShowTTS(page, item, menu, ebsr, interaction, selection);
onMenuShowASL(page, item, menu, ebsr, interaction);
}
var $stemContainer = $(evt.target).closest('div.stemContainer');
if ($stemContainer.length > 0) {
onMenuShowStemTTS(page, item, menu, ebsr, $stemContainer[0], selection);
}
});
function responseGetter(item, response) {
if (item.EBSR) {
response.value = item.EBSR.getResponse();
response.isValid = item.EBSR.isValid();
response.isSelected = response.isValid;
response.isAvailable = true;
} else {
response.isAvailable = false;
}
}
function responseSetter(item, value) {
if (item.EBSR) {
item.EBSR.setValue(value);
}
}
CM.registerResponseHandler('EBSR', responseGetter, responseSetter);
})(ContentManager);

// FILE: wl_item.js (9503d043) 5/2/2014 12:55:58 PM

WordListItem.tagType = ["div", "span"];
WordListItem.attributeName = "data-word-index";
WordListItem.groupAttributeName = "data-wl-group";
WordListItem.ClassNameString = "TDS_WORD_LIST";
WordListItem.ClassNameStringHover = "TDS_WORD_LIST_HOVER";
WordListItem.CTag = 0;
WordListItem.GTag = 0;
function WordListItem () {
var myPageSpans = [];
var myPageZOrders = {
current: -1,
total: 0
};
var spanCount = 0;
this.getSpanCount = function() { return spanCount;};
this.TagSingleSpan = function (span) {
YUD.addClass(span, WordListItem.ClassNameString);
var spanid = 'word-list-' + WordListItem.CTag;
WordListItem.CTag++;
YUD.setAttribute(span, 'id', spanid);
YAHOO.util.Event.addListener(span, 'mouseenter', WordListItem.mouseOver, this);
YAHOO.util.Event.addListener(span, 'mouseleave', WordListItem.mouseOut, this);
YAHOO.util.Event.addListener(span, 'click', WordListItem.clickHandler, this);
myPageSpans[spanCount] = span;
++spanCount;
myPageZOrders.total = spanCount;
};
this.TagSpans = (function (elements) {
var spans = [];
var dupSpans = [];
var tmpSpanCount = 0;
for (var i = 0; i < WordListItem.tagType.length; ++i) {
var divs = elements.getElementsByTagName(WordListItem.tagType[i]);
for (var j = 0; divs != null && j < divs.length; ++j) {
var div = divs[j];
if (YUD.getAttribute(div, WordListItem.attributeName) != null) {
spans[tmpSpanCount] = div;
++tmpSpanCount;
}
}
for (j = 0; j < spans.length; ++j) {
spans[j].setAttribute(WordListItem.groupAttributeName, "" + WordListItem.GTag);
var fff = new Retagger(spans[j]);
fff.Retag();
WordListItem.GTag++;
}
}
var itemKey = this.wl_res.itemKey;
var baseKey = this.wl_res.bankKey + '-' + this.wl_res.itemKey + '-';
WordListPanel.requestQ[itemKey] = [];
for (var i = 0; i < WordListItem.tagType.length; ++i) {
divs = elements.getElementsByTagName(WordListItem.tagType[i]);
for (var j = 0; divs != null && j < divs.length; ++j) {
div = divs[j];
var index = YUD.getAttribute(div, WordListItem.attributeName);
if (index != null) {
var key = baseKey + index.toString();
WordListPanel.requestQ[itemKey].push({ wl_item: this, span: div, key: key });
if (!dupSpans[parseInt(index)]) {
var indexString = WordListPanel.indexHdr + "=" + index.toString();
if (WordListPanel.indices == "") WordListPanel.indices = indexString;
else WordListPanel.indices = WordListPanel.indices + '&' + indexString;
dupSpans[parseInt(index)] = true;
}
}
}
}
WordListPanel.sendRequest(this);
WordListPanel.indices = '';
});
this.HandleKey = function (evt) {
var isHandled = false;
if ((evt.type == 'keyup') && (!evt.ctrlKey)) {
if (myPageZOrders != null) {
zo = myPageZOrders;
spans = myPageSpans;
if (zo.current >= 0) {
var div = spans[zo.current];
var entry = { wl_item: this, span: div };
WordListPanel.processClick(entry,
this.getGroupHtml(div));
this.AddClassToGroup(div,
WordListItem.ClassNameString, WordListItem.ClassNameStringHover);
isHandled = true;
}
}
}
if (evt.keyCode == 27)
{
if (WordListPanel.panel != null)
WordListPanel.panel.hide();
return isHandled;
}
if (!(evt.type == 'keydown'))
return isHandled;
if (!evt.ctrlKey) return;
if (evt.keyCode != 88)
return isHandled;
isHandled = true;
if ((WordListPanel.panel != null)  &&
(WordListPanel.panel.cfg.getProperty('visible') == true) &&
(WordListPanel.tabView != null) &&
(WordListPanel.tabCount > 0)) {
WordListPanel.tabCurrent = (WordListPanel.tabCurrent + 1) % WordListPanel.tabCount;
WordListPanel.tabView.selectTab(WordListPanel.tabCurrent);
return isHandled;
}
var spanGroupAttr = "";
if (myPageZOrders != null) {
var zo = myPageZOrders;
var spans = myPageSpans;
if (zo.current >= 0) {
spanGroupAttr = YUD.getAttribute(spans[zo.current],WordListItem.groupAttributeName);
this.AddClassToGroup(
spans[zo.current],WordListItem.ClassNameString, WordListItem.ClassNameStringHover);
}
zo.current = zo.current + 1;
while ((zo.current < zo.total) &&
(YUD.getAttribute(spans[zo.current],WordListItem.groupAttributeName) == spanGroupAttr)) {
zo.current = zo.current + 1;
}
if (zo.current == zo.total) {
zo.current = -1;
return isHandled;
}
this.AddClassToGroup(spans[zo.current],WordListItem.ClassNameStringHover, WordListItem.ClassNameString);
ContentManager.log("wordlist: focus span " + zo.current + " out of " + zo.total + " evt is " + evt.type);
}
return isHandled;
};
this.AddClassToGroup = function(div, classToAdd, classToRemove) {
var groupTag = YAHOO.util.Dom.getAttribute(div,WordListItem.groupAttributeName);
for (var j = 0; j < myPageSpans.length; ++j) {
if (YAHOO.util.Dom.getAttribute(myPageSpans[j],WordListItem.groupAttributeName) == groupTag) {
YAHOO.util.Dom.removeClass(myPageSpans[j], classToRemove);
YAHOO.util.Dom.addClass(myPageSpans[j], classToAdd);
}
}
};
this.getGroupHtml = function(div) {
var groupTag = YAHOO.util.Dom.getAttribute(div, WordListItem.groupAttributeName);
var rv = "";
for (var j = 0; j < myPageSpans.length; ++j) {
if (YAHOO.util.Dom.getAttribute(myPageSpans[j], WordListItem.groupAttributeName) == groupTag) {
rv = rv + myPageSpans[j].innerHTML;
}
}
return rv;
};
};
WordListItem.mouseOver = (function (event, wl) {
var div = this;
wl.AddClassToGroup(div,
WordListItem.ClassNameStringHover, WordListItem.ClassNameString);
});
WordListItem.mouseOut = (function (event, wl) {
var div = this;
wl.AddClassToGroup(div,
WordListItem.ClassNameString, WordListItem.ClassNameStringHover);
});
WordListItem.clickHandler = (function(event, wl) {
var div = this;
var entry = { wl_item: wl, span: div };
var headerText = wl.getGroupHtml(div);
WordListPanel.processClick(entry, headerText);
});

// FILE: wl_panel.js (d84d3da0) 7/23/2014 4:30:37 PM

function WordListPanel() {
}
WordListPanel.queryName = "key";
WordListPanel.bankKeyHdr = "bankKey";
WordListPanel.itemKeyHdr = "itemKey";
WordListPanel.indexHdr = "index";
WordListPanel.AccType = "Word List";
WordListPanel.AccNoAccs = "TDS_WL0";
WordListPanel.AccHdr = "TDS_ACCS";
WordListPanel.divId = "WordListTool";
WordListPanel.toolDiv = null;
WordListPanel.panel = null;
WordListPanel.tabView = null;
WordListPanel.tabCount = 0;
WordListPanel.tabCurrent = 0;
WordListPanel.requestQ = [];
WordListPanel.indices = '';
WordListPanel.LoadingPageString = "<div id=\"word-list-list-div\" class=\"yui-navset\">\r\n<ul class=\"yui-nav\"> " +
"<li class=\"selected\"><a href=\"#word-list-tab1\"><em>Loading</em></a></li></ul>\r\n" +
"   <div class=\"yui-content\"> " +
"<div id=\"word-list-tab1\"><p>Please Wait</p></div> </div> ";
WordListPanel.ErrorPageString = "<div id=\"word-list-list-div\" class=\"yui-navset\">\r\n<ul class=\"yui-nav\"> " +
"<li class=\"selected\"><a href=\"#word-list-tab1\"><em>Information</em></a></li></ul>\r\n" +
"   <div class=\"yui-content\"> " +
"<div id=\"word-list-tab1\"><p>Content Not Found.</p></div> </div> ";
WordListPanel.xhrUrl = "Pages/API/WordList.axd";
WordListPanel.xhrMethod = "resolve";
WordListPanel.tabbedDivName = "word-list-list-div";
WordListPanel.splitter = new RegExp("(\\d+):(\\w+)");
WordListPanel.contentWordCache = [];
WordListPanel.headerWordCache = [];
WordListPanel.message = [];
WordListPanel.failedRequest = [];
WordListPanel.getKeyFromQEntry = function(entry) {
var keyIndex = YUD.getAttribute(entry.span, WordListItem.attributeName);
var bankKey = entry.wl_item.wl_res.bankKey;
var itemKey = entry.wl_item.wl_res.itemKey;
return bankKey + '-' + itemKey + '-' + keyIndex;
};
WordListPanel.postCallback = {
success: (function (resp) {
var messages = YAHOO.lang.JSON.parse(resp.responseText);
for (var i = 0; messages != null && i < messages.length; ++i) {
var tabString = WordListPanel.RenderHtmlTabs(messages[i]);
var key = messages[i].EntryKey;
var itemKey = key.split('-')[1];
WordListPanel.contentWordCache[key] = tabString;
WordListPanel.message[key] = messages[i];
}
if (WordListPanel.requestQ[itemKey] == null) {
console.log("word list: server returned empty response, returning.");
return;
}
for (i = 0; i < WordListPanel.requestQ[itemKey].length; ++i) {
var entry = WordListPanel.requestQ[itemKey][i];
var cacheEntry = WordListPanel.message[entry.key];
if (cacheEntry && cacheEntry.EntryFound) {
entry.wl_item.TagSingleSpan(entry.span);
}
}
}),
argument: []
};
WordListPanel.processClick = (function (entry, headerText) {
if (entry != null) {
if ((WordListPanel.panel != null) && (WordListPanel.toolDiv != null)) {
var cacheKey = WordListPanel.getKeyFromQEntry(entry);
if (WordListPanel.contentWordCache[cacheKey] != null) {
WordListPanel.headerWordCache[cacheKey] = headerText;
WordListPanel.setPanel(WordListPanel.headerWordCache[cacheKey], WordListPanel.contentWordCache[cacheKey]);
} else {
ContentManager.log("WordList: errantly tagged span");
}
}
}
});
WordListPanel.sendRequest = (function (wl_item) {
var bankKey = wl_item.wl_res.bankKey;
var itemKey = wl_item.wl_res.itemKey;
if (typeof(WordListPanel.indices) != "string" || WordListPanel.indices.length < 1)
return;
var str = WordListPanel.bankKeyHdr + "=" + bankKey.toString();
str = str + "&" + WordListPanel.itemKeyHdr + "=" + itemKey.toString();
str = str + "&" + WordListPanel.indices;
var wlCodes = Accommodations.Manager.getCurrent().getType(WordListPanel.AccType).getCodes(true);
for (var i = 0, ii = wlCodes.length; i < ii; i++) {
var wlInner = wlCodes[i].split('&');
for (var j = 0; j < wlInner.length; ++j) {
str += "&" + WordListPanel.AccHdr + "=" + wlInner[j];
}
}
var urlString = TDS.baseUrl + WordListPanel.xhrUrl + "/" + WordListPanel.xhrMethod;
if (/^http/.test(WordListPanel.xhrUrl))
urlString = WordListPanel.xhrUrl + "/" + WordListPanel.xhrMethod;
YAHOO.util.Connect.asyncRequest('POST', urlString, WordListPanel.postCallback, str);
});
WordListPanel.IsWordListEnabled = (function () {
var atype = Accommodations.Manager.getCurrent().getType(WordListPanel.AccType);
if ((atype == null) || (atype.getValues().length == 0))
return false;
for (var i = 0; i < atype.getValues().length; ++i) {
var codes = atype.getValues()[i].getCodes();
for (var j = 0; j < codes.length; ++j) {
if (codes[j] == WordListPanel.AccNoAccs) {
return false;
}
}
}
return true;
});
WordListPanel.setPanel = function (hd, bd) {
if ((WordListPanel.panel != null) && (WordListPanel.toolDiv != null)) {
if (hd != null) {
WordListPanel.panel.setHeader(hd);
}
WordListPanel.panel.setBody(bd);
WordListPanel.panel.show();
WordListPanel.tabView = new YAHOO.widget.TabView(WordListPanel.tabbedDivName);
WordListPanel.tabCount = 0;
while (WordListPanel.tabView.getTab(WordListPanel.tabCount) != null) {
WordListPanel.tabCount++;
}
WordListPanel.tabCurrent = 0;
setTimeout(function () {
WordListPanel.postProcessAudioTags();
}.bind(this), 1);
}
};
WordListPanel.InitializePane = (function () {
YAHOO.widget.Tab.prototype.ACTIVE_TITLE = '';
var toolDiv = document.getElementById("tools");
if (toolDiv != null) {
WordListPanel.toolDiv = document.createElement("div");
YUD.addClass(WordListPanel.toolDiv, "yui-dialog focused");
YUD.setAttribute(WordListPanel.toolDiv, 'id', WordListPanel.divId);
var clink = document.createElement("link");
YUD.setAttribute(clink, 'type', 'text/css');
YUD.setAttribute(clink, 'rel', 'stylesheet');
YUD.setAttribute(clink, 'media', 'screen');
YUD.setAttribute(clink, 'href', ContentManager.resolveBaseUrl('Scripts/Libraries/YUI/tabview/assets/skins/sam/tabview.css'));
WordListPanel.toolDiv.appendChild(clink);
toolDiv.appendChild(WordListPanel.toolDiv);
WordListPanel.panel = new YAHOO.widget.Panel("wordListPanel", { width: "320px", zindex: 1004, visible:false, constraintoviewport: true });
WordListPanel.panel.render(WordListPanel.toolDiv);
}
});
WordListPanel.RenderHtmlTabs = function (messages) {
var tabString = "<div id=\"" + WordListPanel.tabbedDivName + "\" class=\"yui-navset\"> \r\n";
tabString = tabString + "<ul class=\"yui-nav\">\r\n";
var contentString = " <div class=\"yui-content\">\r\n";
var i;
for (i = 0; i < messages.Entries.length; ++i) {
tabString = tabString + "<li";
if (i == 0) {
tabString = tabString + " class=\"selected\"";
}
tabString = tabString + "> <a href=\"#word-list-" + i.toString();
var wlTypeTranslation = Messages.get('TDS.WordList.' + messages.Entries[i].wlType);
tabString = tabString + "\">" + wlTypeTranslation + "</a></li>\r\n";
contentString = contentString + "<div id=\"word-list-" + i.toString() + "\"><p>" + messages.Entries[i].wlContent + "</p></div>";
}
tabString = tabString + "</ul>";
tabString = tabString + contentString + "</div>";
return tabString;
};
WordListPanel.postProcessAudioTags = function () {
if (!window.TDS || !window.TDS.Audio || !window.TDS.Audio.Widget) { return; }
var bd = WordListPanel.panel.body;
try {
if (!bd) { return; }
var audioEls = YAHOO.util.Selector.query('a', bd) || [];
for (var i = 0; i < audioEls.length; ++i) {
var span = audioEls[i];
if ((span) && (span.href)) {
var href = span.href;
if (href.indexOf('.ogg') != -1 || (href.indexOf('.m4a') != -1)) {
YUD.addClass(span, 'sound_repeat');
href = href.replace(/&amp;/gmi, '&');
span.href = href;
TDS.Audio.Widget.createPlayer(span);
}
}
}
} catch (e) {
console.error("Error creating players in the word list panel (error, dom).", e, bd);
}
};

// FILE: wl_retag.js (e570cfb3) 3/7/2014 11:24:14 AM

function Retagger(astartElement) {
var endSibling = null;
var _startElement = astartElement;
this.Retag = function () {
debugLog(0, _startElement, "Retagging entry")
RetagSiblings(astartElement, false, 0);
};
var consumeInners = function (startElement, innerElements, level) {
if ((startElement == null) ||
(innerElements.length == 0)) {
return;
}
debugLog(level, startElement, "consumeInners: make sibs children of ");
for (var i = 0; i < innerElements.length; ++i) {
var newNode = innerElements[i].cloneNode(true);
debugLog(level, newNode, "consumeInners: adding child ");
startElement.appendChild(newNode);
innerElements[i].parentNode.removeChild(innerElements[i]);
}
};
var doesChildContainEnd = function (startElement,peerElement) {
var child = YUD.getFirstChild(peerElement);
if (child == null)
return false;
while (child) {
if (isEndElement(startElement, child)) {
return true;
}
if (doesChildContainEnd(startElement, child)) {
return true;
}
child = child.nextSibling;
}
return false;
};
var debugLog = function (level, obj, str) {
if (Retagger.verboseDebug) {
var props = ["outerHTML", "nodeType", "nodeName", "nodeValue"];
var op = "";
if ((typeof(obj) == "object") && (obj != null)) {
for (var i = 0; i < props.length; ++i) {
var pp = props[i];
if ((obj[pp] != undefined) && (obj[pp] != null)) {
op = op + " " + pp + ":" + obj[pp];
}
}
}
if (str != null) {
op = str + ":" + op;
}
console.log("lvl: " + level + " " + op);
}
};
var isEndElement = function (startElement, endElementTest) {
if ((YUD.getAttribute(endElementTest,"data-tag-boundary") == "end") &&
(YUD.getAttribute(endElementTest,"data-tag-ref") == YUD.getAttribute(startElement,"id"))) {
return true;
}
return false;
};
var RetagSiblings = function (startElement, endFound, level) {
var isParentElement = false;
var innerElements = [];
if (startElement == null)
return;
var sib = startElement.nextSibling;
while (sib != null) {
debugLog(level, sib, "Iterating");
if (isEndElement(startElement,sib)) {
debugLog(level, sib, "Found end span in sib");
endSibling = sib;
break;
}
if ((level >= 0) && (doesChildContainEnd(startElement,sib))) {
debugLog(level, sib, "Found end span in child");
isParentElement = true;
endSibling = sib;
break;
}
debugLog(level, sib, "Sib neither child nor parent, pushing");
innerElements.push(sib);
sib = sib.nextSibling;
}
if (endSibling != null) {
if (isParentElement) {
var newStartElem = startElement.cloneNode(false);
var child = endSibling.firstChild;
endSibling.insertBefore(newStartElem, child);
debugLog(level, newStartElem, "recursively calling retag on child");
RetagSiblings(newStartElem, true, level + 1);
}
consumeInners(startElement, innerElements, level);
if (!isParentElement) {
debugLog(level, endSibling, "End tag found at this level, removing.");
endSibling.parentNode.removeChild(endSibling);
}
}
else if (endFound == false) {
consumeInners(startElement, innerElements, level);
sib = startElement.parentNode;
if ((sib == null) || (sib.parentNode == null) ||
((sib.nodeName != undefined && (sib.nodeName == 'FORM') ||
(sib.nodeName == 'BODY'))
)
){
debugLog(level, sib, " endtag not found");
return;
}
newStartElem = startElement.cloneNode(false);
sib.parentNode.insertBefore(newStartElem,sib.nextSibling);
debugLog(level, sib, "End tag not found, looking in sibling of parent");
RetagSiblings(newStartElem, false, level - 1);
}
};
}
Retagger.verboseDebug = false;

// FILE: module_wordlist.js (61e8a0c5) 5/2/2014 12:55:57 PM

(function(CM) {
function processEntity(page, entity) {
if (WordListPanel.IsWordListEnabled() == false) {
return;
}
var wordListResource = entity.getResource('wordList');
if (wordListResource == null) {
return;
}
var inst = new WordListItem();
inst.wl_res = wordListResource;
entity.wordList = inst;
var elements = entity.getElement();
inst.TagSpans(elements);
if (WordListPanel.toolDiv == null) {
WordListPanel.InitializePane();
}
}
CM.onPassageEvent('available', processEntity);
CM.onItemEvent('available', processEntity);
CM.onEntityEvent('keyevent', function (page, entity, evt) {
var inst = entity.wordList;
if (inst) {
if (inst.HandleKey(evt)) {
YUE.stopEvent(evt);
}
}
});
CM.onEntityEvent('hide', function (page, entity) {
if (WordListPanel && WordListPanel.panel) {
WordListPanel.panel.hide();
}
});
})(ContentManager);

// FILE: module_attachment.js (f5478686) 3/7/2014 11:24:06 AM

ContentManager.onPageEvent('available', function(page)
{
var pageDoc = page.getDoc();
var pageWin = page.getWin();
var pageLinks = pageDoc.getElementsByTagName('a');
for (var i = 0; i < pageLinks.length; i++)
{
var pageLink = pageLinks[i];
if (pageLink.href.toLowerCase().indexOf('.pdf') != -1  ||
pageLink.href.toLowerCase().indexOf('.rtf') != -1)
{
pageLink.target = '_blank';
}
}
});

// FILE: module_plaintext.js (20b7d64f) 3/7/2014 11:24:06 AM

ContentManager.onItemEvent('focus', function(page, item)
{
if (!item.isResponseType('plaintext')) return;
var doc = page.getDoc();
var textArea = doc.getElementById('Item_Response_' + item.position);
if (!Util.Browser.isTouchDevice()) {
ContentManager.focus(textArea);
}
});
ContentManager.onItemEvent('blur', function(page, item)
{
if (!item.isResponseType('plaintext')) return;
var doc = page.getDoc();
var textArea = doc.getElementById('Item_Response_' + item.position);
textArea.blur();
});
ContentManager.onItemEvent('available', function(page, item)
{
if (!item.isResponseType('plaintext')) return;
var doc = page.getDoc();
var textArea = doc.getElementById('Item_Response_' + item.position);
if ((textArea) && (ContentManager.isAccessibilityEnabled())) {
textArea.setAttribute('tabindex', '0');
}
var tabFunc = function(type, args)
{
var event = args[1];
var oS = textArea.scrollTop;
var sS = textArea.selectionStart;
var sE = textArea.selectionEnd;
textArea.value = textArea.value.substring(0, sS) + '\t' + textArea.value.substr(sE);
textArea.setSelectionRange(sS + 1, sS + 1);
ContentManager.focus(textArea);
textArea.scrollTop = oS;
YUE.stopEvent(event);
};
ContentManager.setReadOnlyKeyEvent(item, textArea);
});
(function()
{
var getter = function(item, response)
{
var pageDoc = item.getPage().getDoc();
var textArea = pageDoc.getElementById('Item_Response_' + item.position);
response.value = textArea.value;
response.isValid = (response.value.length > 0);
response.isSelected = response.isValid;
if (response.value)
{
response.value = response.value.replace(/]]>/g, ']]&gt;');
}
};
var setter = function(item, value)
{
var pageDoc = item.getPage().getDoc();
var textArea = pageDoc.getElementById('Item_Response_' + item.position);
textArea.value = value;
};
ContentManager.registerResponseHandler('plaintext', getter, setter);
})();

// FILE: module_wordbuilder.js (40f33bd8) 3/7/2014 11:24:06 AM

function KeyboardWidget(keyboardDiv, textfield) {
this._keyboard = keyboardDiv;
this._textfield = textfield;
this._keyLinkToValueMap = new Object();
this._allowedKeyCodesMap = new Object();
this._allowedCharCodesMap = new Object();
this._allowedKeyCodesMap['8']="OK";
this._allowedKeyCodesMap['9']="OK";
this._allowedKeyCodesMap['46']="OK";
this._allowedKeyCodesMap['37']="OK";
this._allowedKeyCodesMap['38']="OK";
this._allowedKeyCodesMap['39']="OK";
this._allowedKeyCodesMap['40']="OK";
this.activate = function()
{
if (!this._textfield) this._textfield = this._getAssociatedTextField();
var keyContainers = this._keyboard.getElementsByTagName('li');
for (var i = 0; i < keyContainers.length; i++) {
var keyValue = this._getText(YAHOO.util.Dom.getElementsByClassName('keyvalue', 'span', keyContainers[i])[0]);
var keyLink = keyContainers[i].getElementsByTagName('a')[0];
var keyDisplay = this._getText(keyLink);
var success = YAHOO.util.Event.addListener(keyLink, 'click', this._keyboardClick, null, this);
this._keyLinkToValueMap[keyLink.id] = keyValue;
if (keyDisplay.length == 1) {
this._allowedCharCodesMap[keyDisplay.toUpperCase().charCodeAt()+'']="OK";
this._allowedCharCodesMap[keyDisplay.toLowerCase().charCodeAt()+'']="OK";
}
if (keyDisplay.toLowerCase() == 'space') {
this._allowedCharCodesMap['32']="OK";
this._allowedKeyCodesMap['32']="OK";
}
}
YAHOO.util.Event.addListener(this._textfield, 'keypress', this._keyboardClick2, this, true);
};
this._getAssociatedTextField = function() {
var containerDiv = YAHOO.util.Dom.getAncestorByClassName(this._keyboard, 'multipleChoiceItem');
var textfields = YAHOO.util.Dom.getElementsByClassName('inputCloze', 'input', containerDiv);
return textfields[0];
};
this._simulate_key = function(type, ctrlKey, altKey, shiftKey, keyCode, charCode) {
var textFieldValueBeforeKeyPress = this._textfield.value;
try {
YAHOO.util.UserAction.simulateKeyEvent(this._textfield, type, true, true, null, ctrlKey, altKey, shiftKey, false, keyCode, charCode);
} catch (ex) {
return false;
}
return (this._textfield.value != textFieldValueBeforeKeyPress);
};
this._keyboardClick = function(event)
{
YAHOO.util.Event.stopEvent(event);
var linkClicked = YAHOO.util.Event.getTarget(event);
var value = this._keyLinkToValueMap[linkClicked.id];
if (ContentManager.isReadOnly()) return;
if (value.toLowerCase() == "delete")
{
if (!this._simulate_key('keypress', false, false, false, 8, 0))
{
this._deleteFromTextField();
}
}
else
{
if (parseInt(this._textfield.maxLength) == 1) {
this._textfield.value = "";
}
if (!this._simulate_key('keypress', false, false, false, null, value.charCodeAt()))
{
this._appendToTextField(value);
}
}
};
this._keyboardClick2 = function(key) {
var charCode = key.charCode;
if (!charCode || charCode == 0) {
charCode = String.fromCharCode(key.keyCode).charCodeAt();
}
if (key.ctrlKey
|| this._allowedCharCodesMap[charCode + '']
|| (key.charCode == 0 && this._allowedKeyCodesMap[key.keyCode + '']))
{
return true;
}
if ((!key.shiftKey && key.keyCode == 190)                                   || (key.keyCode == 110 && charCode == 46)                  ) {
if (this._allowedKeyCodesMap['46']) {
return true;
}
}
YAHOO.util.Event.stopEvent(key);
return false;
};
this._appendToTextField = function(valueToInsert) {
if (valueToInsert) {
var cursorPosition = this._getCursorPosition();
if ((parseInt(this._textfield.maxLength) != -1) && (this._textfield.value.length >= parseInt(this._textfield.maxLength))) {
this._textfield.value = this._textfield.value.substr(0, this._textfield.value.length - 1) + valueToInsert;
this._setCursorPosition(this._textfield.value.length);
} else {
this._textfield.value = this._textfield.value.substr(0, cursorPosition)
+ valueToInsert
+ this._textfield.value.substr(cursorPosition, this._textfield.value.length);
if(cursorPosition == this._textfield.value.length-1)
{
this._setCursorPosition(this._textfield.value.length);
} else
{
this._setCursorPosition(cursorPosition+1);
}
}
}
ContentManager.focus(this._textfield);
};
this._deleteFromTextField = function() {
if (this._textfield.value.length > 0) {
var cursorPosition = this._getCursorPosition();
this._textfield.value = this._textfield.value.substr(0, cursorPosition-1) + this._textfield.value.substr(cursorPosition, this._textfield.value.length);
if(cursorPosition-1 < this._textfield.value.length)
{
this._setCursorPosition(cursorPosition-1);
}
}
ContentManager.focus(this._textfield);
};
this._getText = function(element) {
if (element.text) {
return element.text;
} else if (element.innerText) {
return element.innerText;
}
return element.innerHTML;
};
this._getCursorPosition = function() {
var CaretPos = 0;
if (document.selection) {
this._textfield.focus ();
var Sel = document.selection.createRange ();
var SelLength = document.selection.createRange().text.length;
Sel.moveStart ('character', -this._textfield.value.length);
CaretPos = Sel.text.length - SelLength;
}
else if (this._textfield.selectionStart || this._textfield.selectionStart == '0')
{
CaretPos = this._textfield.selectionStart;
}
return (CaretPos);
};
this._setCursorPosition = function(pos)
{
ContentManager.focus(this._textfield);
if (this._textfield.setSelectionRange) {
this._textfield.setSelectionRange(pos, pos);
}
else if (this._textfield.createTextRange) {
var range = this._textfield.createTextRange();
range.collapse(true);
range.moveEnd('character', pos);
range.moveStart('character', pos);
range.select();
}
};
}
ContentManager.onItemEvent('available', function(page, item)
{
if (!item.isResponseType('keyboard custom') && !item.isResponseType('keyboard alphabetical')) return;
var pageDoc = page.getDoc();
var keyboardDiv = pageDoc.getElementById('keyboard_' + item.position);
var textKeyboard = pageDoc.forms['contentForm']['textbox1_item_' + item.itemKey];
if (keyboardDiv == null || textKeyboard == null) return;
var keyboardControl = new KeyboardWidget(keyboardDiv, textKeyboard);
keyboardControl.activate();
ContentManager.setReadOnlyKeyEvent(item, textKeyboard);
if (item.value != null) textKeyboard.value = item.value;
var ariaTag = textKeyboard.getAttribute('data-desc');
if (ariaTag) {
textKeyboard.removeAttribute('data-desc');
textKeyboard.setAttribute('aria-label', ariaTag);
}
});
ContentManager.onItemEvent('focus', function(page, item)
{
if (!item.isResponseType('keyboard custom') && !item.isResponseType('keyboard alphabetical')) return;
var pageDoc = page.getDoc();
var textKeyboard = pageDoc.forms['contentForm']['textbox1_item_' + item.itemKey];
ContentManager.focus(textKeyboard);
});
(function()
{
var getter = function(item, response)
{
var pageDoc = item.getPage().getDoc();
var textKeyboard = pageDoc.forms['contentForm']['textbox1_item_' + item.itemKey];
if (textKeyboard) {
response.value = textKeyboard.value;
response.isSelected = (response.value.length > 0) ? true : false;
response.isValid = response.isSelected;
} else {
response.value = null;
response.isSelected = false;
response.isValid = false;
}
};
var setter = function(item, value)
{
var pageDoc = item.getPage().getDoc();
var textKeyboard = pageDoc.forms['contentForm']['textbox1_item_' + item.itemKey];
if (textKeyboard) {
textKeyboard.value = value;
}
};
ContentManager.registerResponseHandler('keyboard alphabetical', getter, setter);
ContentManager.registerResponseHandler('keyboard custom', getter, setter);
})();

// FILE: module_menu.js (dbd1102b) 3/7/2014 11:24:06 AM

ContentManager.onEntityEvent('menushow', function(page, entity, menu, evt)
{
if (!evt.keyCode) return false;
var isPassage = (entity instanceof ContentPassage);
var isStem = (entity instanceof ContentItem) && (entity.getStemElement() == entity.getActiveComponent());
if (!isPassage && !isStem) return false;
var allowedAccommodation = false;
var accProps = page.getAccommodationProperties();
if (accProps.hasHighlighting()) allowedAccommodation = true;
else if (isPassage && accProps.hasTTSStimulus()) allowedAccommodation = true;
else if (isStem && accProps.hasTTSItem()) allowedAccommodation = true;
if (!allowedAccommodation) return false;
if (!Mozilla.execPrivileged()) return;
if (Mozilla.inCaretMode())
{
var menuFunc = function()
{
ContentManager.enableCaretMode(false);
};
var menuItem =
{
text: Messages.get('TDSContentEventsJS.Link.DisableTextSelection'),
classname: 'caretMode',
onclick: { fn: menuFunc }
};
menu.addMenuItem('entity', menuItem);
}
else
{
var menuFunc = function()
{
var focusedComponent = entity.getActiveComponent();
if (focusedComponent && focusedComponent.focus)
{
entity.clearComponent();
entity.setActiveComponent(focusedComponent);
ContentManager.enableCaretMode(true);
}
};
var menuItem =
{
text: Messages.get('TDSContentEventsJS.Link.EnableTextSelection'),
classname: 'caretMode',
onclick: { fn: menuFunc }
};
menu.addMenuItem('entity', menuItem);
}
});
ContentManager.onPassageEvent('menushow', function(page, passage, menu, evt)
{
var addMenu = function(messageKey, menuClass, menuFunc)
{
var menuItem = {
text: Messages.get(messageKey),
classname: menuClass,
onclick: { fn: menuFunc }
};
menu.addMenuItem('entity', menuItem);
};
if (typeof (tdsPassagePrint) != 'function') return;
if (YUD.hasClass(document.body, 'unproctored')) return;
if (!ContentManager.isVisible('btnPrint')) return;
addMenu('TDSContentEventsJS.Label.PrintPassage', 'printPassage', function()
{
tdsPassagePrint();
});
});
ContentManager.onItemEvent('menushow', function(page, item, menu, evt)
{
var activeComp = item.getActiveComponent();
var isEbsrPrompt = function () {
if (!item.EBSR) {
return false;
}
var prompts = item.EBSR.getPrompts();
if (prompts.indexOf(activeComp) < 0) {
return false;
} else {
return true;
}
};
var isActiveStem = activeComp == item.getStemElement();
if (item == null || (!isActiveStem && !isEbsrPrompt())) {
return;
}
var addMenu = function(messageKey, menuClass, menuFunc)
{
var menuItem = {
text: Messages.get(messageKey),
classname: menuClass,
onclick: { fn: menuFunc }
};
menu.addMenuItem('entity', menuItem);
};
if (item.hasMarkLink())
{
var messageKey = item.isMarked() ? 'TDSContentEventsJS.Label.UnmarkForReview' : 'TDSContentEventsJS.Label.MarkForReview';
addMenu(messageKey, 'markReview', function()
{
item.toggleMark();
});
}
if (item.hasCommentLink())
{
var messageLabel = ContentManager.getCommentLabel();
addMenu(messageLabel, 'comment', function()
{
item.toggleComment();
});
}
if (item.hasPrintLink())
{
addMenu('TDSContentEventsJS.Label.PrintItem', 'printItem', function()
{
item.print();
});
}
if (item.hasGTRLink())
{
var menuName = Messages.getAlt('TDSContentEventsJS.Label.GTRItem', 'Guide to Revision');
addMenu(menuName, 'gtrItem', function()
{
item.openGTR();
});
}
if (item.hasHelpLink())
{
addMenu('TDSContentEventsJS.Label.HelpItem', 'helpItem', function()
{
item.openHelp();
});
}
if(TDS.LineReaderControl){
TDS.LineReaderControl.off();
}
});

// FILE: module_highlighter.js (f498460e) 7/23/2014 4:30:36 PM

(function(rangy) {
if (!rangy) return;
if(rangy.config){
rangy.config.alertOnFail = false;
rangy.config.alertOnWarn = false;
}
var globalClassApplier;
function getSelfOrAncestorWithClass(node, cssClass) {
while (node) {
if (YUD.hasClass(node, cssClass)) {
return node;
}
node = node.parentNode;
}
return null;
};
function checkMathML(node) {
var mathTypes = /mfrac|msup|mfenced|msqrt|msubsup|msub|mover|munder|msubsup|mlongdiv|munderover|mroot/;
if (mathTypes.test(node)) {
return true;
}
return false;
};
function createCSSClassApplier() {
var cssClassApplier = rangy.createCssClassApplier('highlight', {
ignoreWhiteSpace: true,
useExistingElements: false,
removeEmptyElements: false,
tagNames: ['span']
});
cssClassApplier.isModifiable = function(textNode) {
if (getSelfOrAncestorWithClass(textNode.parentNode, 'no-highlight') != null || checkMathML(textNode.parentNode.nodeName)){
return false;
}
return true;
};
return cssClassApplier;
}
function getCSSClassApplier() {
if (!globalClassApplier) {
globalClassApplier = createCSSClassApplier();
}
return globalClassApplier;
}
function setHighlight(selection) {
if (selection.rangeCount > 0) {
var cssClassApplier = getCSSClassApplier();
cssClassApplier.applyToRanges(selection.getAllRanges());
selection.collapseToStart();
}
}
function clearHighlighting(el) {
var range = rangy.createRange();
range.selectNode(el);
var cssClassApplier = getCSSClassApplier();
cssClassApplier.undoToRange(range);
}
function hasSelection(selection) {
var text = selection.toString();
text = YAHOO.lang.trim(text);
return (text.length > 0);
}
function onMenuShow(page, entity, menu, evt, selection) {
var accProps = page.getAccommodationProperties();
if (!accProps.hasHighlighting()) return;
var hasSelectedText = hasSelection(selection);
if (hasSelectedText) {
var lblHighlightText = ContentManager.getLabel('HIGHLIGHT_TEXT');
menu.addMenuItem('entity', lblHighlightText, function() {
setHighlight(selection);
ContentManager.enableCaretMode(false);
});
}
var activeDoc = page.getActiveDoc();
var highlightedElement = entity.getElement();
if (highlightedElement && highlightedElement.ownerDocument != activeDoc) {
highlightedElement = activeDoc.body;
}
var highlightedNodes = YAHOO.util.Dom.getElementsByClassName(ContentManager.CSS.HIGHLIGHT, null, highlightedElement);
var hasHighlightedText = (highlightedNodes.length > 0);
if (hasHighlightedText) {
var lblHighlightClr = ContentManager.getLabel('HIGHLIGHT_CLEAR');
menu.addMenuItem('entity', lblHighlightClr, function() {
clearHighlighting(highlightedElement);
}, !hasHighlightedText);
}
}
ContentManager.onEntityEvent('menushow', onMenuShow);
})(window.rangy);

// FILE: module_tts.js (825d23d7) 5/2/2014 12:55:57 PM

(function(){
TTS.MenuSystem = {
Last: null,
addMenuSetup: function(menu, playCfg){
try{
if(!menu || !playCfg || !playCfg.ORDER){
return;
}
TTS.MenuSystem.Last = playCfg;
var order = playCfg.ORDER;
for(var i=0; i<order.length; ++i){
var entryName = order[i];
var entry = playCfg[entryName];
if(entry && (typeof entry.cb == 'function' || entry.allowDisabled)){
menu.addMenuItem(entry.level || 'entity', {
text: Messages.get(entry.Label || 'TTS'),
onclick: {fn: entry.cb},
disabled:  typeof entry.cb == 'function' ? false : entry.allowDisabled,
classname: entry.css || 'speaksection'
});
}
}
}catch(e){
console.error("Failed to create menu item.", e);
}
}
};
TTS.Config.isTrackingEnabled = function () {
return window.ContentManager != null && window.ContentManager.getAccommodationProperties().isTTSTrackingEnabled();
};
YAHOO.util.Event.onDOMReady(function () {
setTimeout(function () {
TTS.getInstance();
}, 500);
});
ContentManager.onPassageEvent('menushow', function(page, passage, menu, evt, selection){
if (!TTS.Manager.isAvailable()) return;
var accProps = page.getAccommodationProperties();
if (!accProps.hasTTSStimulus()) return;
if (TDS.Audio.isActive()) return;
var languages  = ContentManager.getLanguage() != 'ENU' ? ['ESN', 'ENU'] : ['ENU'];
var ttsMenu    = new TTS.Menu(languages);
var menuCfg = ttsMenu.getMenuCfg(
passage.getElement(),
selection,
page.getActiveWin(),
passage.stemTTS,
page,
passage
);
TTS.Config.Debug && console.log("Passage menu show.", menuCfg);
TTS.MenuSystem.addMenuSetup(menu, menuCfg);
});
ContentManager.onItemEvent('menushow', function(page, item, menu, evt, selection){
var ctrl = TTS.getInstance();
if (!ctrl.isAvailable()) return;
var accProps = page.getAccommodationProperties();
if (!accProps.hasTTSItem()) return;
if (TDS.Audio.isActive()) return;
if (item.EBSR) return;
if (item.getActiveComponent() != item.getStemElement() &&
item.getActiveComponent() != item.getIllustrationElement() && !item.MC){
return;
}
var pageWin    = page.getActiveWin();
var languages  = ContentManager.getLanguage() != 'ENU' ? ['ESN', 'ENU'] : ['ENU'];
var domToParse = [];
var stem = item.getStemElement();
if(stem){
domToParse.push(stem);
}
var illustration = item.getIllustrationElement();
if(illustration){
domToParse.push(illustration);
}
var ttsMenu    = new TTS.Menu(languages);
var menuCfg   = ttsMenu.getMenuCfg(domToParse, selection, pageWin, item.stemTTS, page, item);
if (item.MC){
var optionGroup = item.MC;
if (TTS.version < 2.0) {
for (var i = 0; i < optionGroup.getOptions().length; ++i){
domToParse.push((optionGroup.getOptions())[i].getElement());
}
ttsMenu.addOptions(menuCfg, domToParse);
}
var focusedOption = optionGroup.getFocusedOption();
if (focusedOption && focusedOption.key){
menuCfg.SEL_PRI = false;
menuCfg.SEL_SEC = false;
menuCfg.PRI.level    = 'component';
menuCfg.SEC.level    = 'component';
menuCfg.STOP.level   = 'component';
menuCfg.PAUSE.level  = 'component';
menuCfg.RESUME.level = 'component';
ttsMenu.addFocusedOption(menuCfg, item.getActiveComponent());
}
}
TTS.MenuSystem.addMenuSetup(menu, menuCfg);
TTS.Config.Debug && console.log("TTS On Item Menushow config", menuCfg);
});
function ttsNotSpeaking () {
var ttsInstance = TTS.getInstance();
if (ttsInstance && ttsInstance.isPlaying()) {
return false;
} else {
return true;
}
}
TDS.Audio.Player.onBeforePlay.subscribe(function() {
return ttsNotSpeaking();
});
TDS.Audio.Player.onBeforeResume.subscribe(function () {
return ttsNotSpeaking();
});
ContentManager.onPageEvent('hide', function(page){
TTS.getInstance().stop();
});
})();

// FILE: module_audioplayer.js (efcc050c) 5/2/2014 12:55:57 PM

(function (Audio) {
var Player = Audio.Player;
var Recorder = Audio.Recorder;
var Widget = Audio.Widget;
function onItemAudioAvailable(page, item) {
var itemEl = item.getElement();
if (itemEl == null) {
return;
}
YUD.batch(itemEl.getElementsByTagName('a'), function (linkEl) {
if (!YUD.hasClass(linkEl, 'sound_explicit') &&
!YUD.hasClass(linkEl, 'sound_repeat') &&
!YUD.hasClass(linkEl, 'sound_cue')) {
return;
}
if (YUD.hasClass(linkEl, 'sound_explicit')) {
YUD.addClass(linkEl, 'sound_repeat');
}
ContentManager.preventFocus(linkEl);
var audioID;
var accProps = page.getAccommodationProperties();
if (accProps && accProps.isAudioRewindEnabled()) {
audioID = Widget.createPlayerRewind(linkEl);
} else {
audioID = Widget.createPlayer(linkEl);
}
if (audioID) {
item.audioLinks.push(audioID);
if (!ContentManager.isAccessibilityEnabled()) {
var autoplay = YUD.getAttribute(linkEl, 'autoplay');
autoplay = (autoplay) ? (autoplay.toLowerCase() == 'true') : false;
if (autoplay) {
page.autoPlayQueue.append(audioID);
}
}
} else {
YUD.addClass(linkEl, 'disabled');
}
});
}
function onItemAudioContextMenuPlayer(page, item, menu) {
if (Recorder.isCapturing() || Recorder.isPlaying()) {
return;
}
var addPlayerLink = function (level, title, linkEl) {
if (linkEl == null) {
return;
}
var isLinkPlaying = YUD.hasClass(linkEl, 'playing_start');
if (Player.isPlaying() && !isLinkPlaying) {
return;
}
var menuLabel = (isLinkPlaying ? Messages.get('TDSAudioJS.Label.Stop') : Messages.get('TDSAudioJS.Label.Play')) + ' ' + title;
var menuFunc = function () {
if (isLinkPlaying) {
Player.stop(linkEl.id);
} else {
Player.play(linkEl.id);
}
};
var menuClass = isLinkPlaying ? 'stopquestion' : 'playquestion';
var menuItem = {
text: menuLabel,
onclick: { fn: menuFunc },
classname: menuClass
};
menu.addMenuItem(level, menuItem);
};
var addPlayerElement = function (title, el) {
if (el == null) {
return;
}
var linkEls = el.getElementsByTagName('a');
var audioCount = 0;
YUD.batch(linkEls, function (linkEl) {
if (!YUD.hasClass(linkEl, 'sound_explicit') && !YUD.hasClass(linkEl, 'sound_repeat')) {
return;
}
audioCount++;
addPlayerLink('entity', title, linkEl);
});
};
if (item.getActiveComponent() == item.getStemElement() ||
item.getActiveComponent() == item.getIllustrationElement()) {
addPlayerElement(Messages.get('TDSAudioJS.Label.AddMenuQuestion'), item.getStemElement());
addPlayerElement(Messages.get('TDSAudioJS.Label.AddMenuQuestion'), item.getIllustrationElement());
}
if (item.MC) {
var optionGroup = item.MC;
var focusedOption = optionGroup.getFocusedOption();
if (focusedOption) {
addPlayerLink('component', Messages.get('TDSAudioJS.Label.AddMenuOption') + ' ' + focusedOption.key, focusedOption.getSoundLink());
}
}
}
ContentManager.onPassageEvent('available', onItemAudioAvailable);
ContentManager.onItemEvent('available', onItemAudioAvailable);
ContentManager.onItemEvent('menushow', onItemAudioContextMenuPlayer);
ContentManager.onPageEvent('hide', function (page) {
if (Player.isPlaying()) {
Player.stopAll();
}
});
})(TDS.Audio);

// FILE: module_audiorecorder.js (22c83743) 3/7/2014 11:24:06 AM

(function(Audio) {
var Player = Audio.Player;
var Recorder = Audio.Recorder;
var Widget = Audio.Widget;
function _onItemRecorderAvailable(page, item) {
if (!item.isResponseType('microphone')) {
return;
}
if (!Recorder.isInitialized()) {
Recorder.initialize();
}
var recorderID = 'elicited_' + item.position;
var duration = (item.format.toUpperCase() == 'SER') ? 120 : 30;
Widget.createRecorder(recorderID, duration);
item.recorder = recorderID;
if (item.value && item.value.length > 0) {
Recorder.onDeviceReady.subscribeOnce(function() {
Recorder.loadBase64Audio(recorderID, item.value);
});
}
}
function _onItemAudioContextMenuRecorder(page, item, menu) {
if (!item.isResponseType('microphone')) {
return;
}
if (Player.isPlaying()) {
return;
}
var micDiv = YUD.get('elicited_' + item.position);
var id = micDiv.id;
var recorderMenuItems = [];
if (Recorder.isCapturing()) {
var menuLabel = Messages.get('TDSAudioJS.Label.StopRecording');
recorderMenuItems.push({ text: menuLabel, classname: 'stoprecording', onclick: {
fn: function() {
Recorder.stopCapture(id);
}
}});
} else {
if (Recorder.isPlaying()) {
if (YUD.hasClass(micDiv, 'playing_start')) {
var menuLabel = Messages.get('TDSAudioJS.Label.StopPlayRecording');
recorderMenuItems.push({ text: menuLabel, classname: 'stopquestion', onclick: {
fn: function() {
Recorder.stopAudio(id);
}
}});
}
} else {
var menuLabel = Messages.get('TDSAudioJS.Label.StartRecording');
recorderMenuItems.push({ text: menuLabel, classname: 'startrecording', onclick: {
fn: function() {
Recorder.startCapture(id);
}
}});
if (YUD.hasClass(micDiv, 'decode_complete') ||
YUD.hasClass(micDiv, 'recording_done') ||
YUD.hasClass(micDiv, 'playing_done') ||
YUD.hasClass(micDiv, 'playing_stopped')) {
var menuLabel = Messages.get('TDSAudioJS.Label.PlayRecording');
recorderMenuItems.push({ text: menuLabel, classname: 'playrecording', onclick: {
fn: function() {
Recorder.playAudio(id);
}
}});
}
}
}
for (var i = 0; i < recorderMenuItems.length; i++) {
menu._entity.push(recorderMenuItems[i]);
}
}
ContentManager.onItemEvent('available', _onItemRecorderAvailable);
ContentManager.onItemEvent('menushow', _onItemAudioContextMenuRecorder);
ContentManager.onPageEvent('hide', function(page) {
if (Recorder.isPlaying()) {
Recorder.stopAudio();
}
if (Recorder.isCapturing()) {
Recorder.stopCapture();
}
});
})(TDS.Audio);
(function(Recorder) {
var getter = function(item, response) {
var id = 'elicited_' + item.position;
response.isAvailable = true;
response.value = Recorder.retrieveBase64Audio(id);
if (response.value != null) {
response.isSelected = (response.value.length > 0);
response.isValid = response.isSelected;
}
return response;
};
var setter = function(item, value) {
var id = 'elicited_' + item.position;
Recorder.loadBase64Audio(id, value);
};
ContentManager.registerResponseHandler('microphone', getter, setter);
})(TDS.Audio.Recorder);

// FILE: module_video.js (e2795b33) 7/23/2014 4:30:36 PM

(function() {
ContentManager.onPageEvent('available', function(page) {
var pageWin = page.getWin();
if (typeof pageWin.jwplayer == 'function') {
VideoManager.patchJWPlayer(pageWin.jwplayer);
}
});
ContentManager.onPageEvent('available', function(page) {
var pageEl = page.getElement();
var pageWin = page.getWin();
var pageLinks = pageEl.getElementsByTagName('a');
YUD.batch(pageLinks, function(pageLink) {
var animData = VideoManager.SWF.parseData(pageLink);
if (animData.flash) {
var videoLoader = new ResourceLoader.Binary(pageLink.href, 180000, 2);
videoLoader.subscribe(ResourceLoader.Status.COMPLETE, function() {
VideoManager.SWF.embed(pageWin, pageLink);
});
page.addResourceLoader(videoLoader);
}
else if (VideoManager.canPlay(pageLink.href)) {
var videoData = VideoManager.parseData(pageLink);
if (videoData.dialog) {
YUE.on(pageLink, 'click', VideoManager.openDialog, pageLink);
} else {
VideoManager.embed(pageWin, pageLink,page.getZoomFactor());
}
}
});
});
ContentManager.onPageEvent('show', function(page) {
VideoManager.SWF.forEach(page, function(swfAPI) {
if (swfAPI.autoplay()) {
swfAPI.play();
}
});
});
ContentManager.onPageEvent('hide', function(page) {
VideoManager.stop(page);
});
ContentManager.onPageEvent('zoom', function(page) {
if (page.getWin().jwplayer) {
var players = page.getWin().jwplayer.getPlayers();
for (var i = 0; i < players.length; i++) {
var player = players[i];
if (!player.config.width) {
player.config.width = player.getWidth();
}
if (!player.config.height) {
player.config.height = player.getHeight();
}
var zoomFactor = page.getZoomFactor();
if ((player.config.width > 0) && (player.config.height > 0)) {
var zoomWidth = (player.config.width * zoomFactor);
var zoomHeight = (player.config.height * zoomFactor);
player.resize(zoomWidth, zoomHeight);
}
}
}
});
VideoManager.SWF.Events.subscribe('loaded', function(swfAPI) {
var currentPage = ContentManager.getCurrentPage();
if (currentPage == null) {
return;
}
VideoManager.SWF.forEach(currentPage, function(pageSwfAPI) {
if (swfAPI == pageSwfAPI && swfAPI.autoplay()) {
swfAPI.play();
}
});
});
ContentManager.Dialog.onLoad.subscribe(function(frame) {
var frameWin = frame.getWindow();
var frameDoc = frame.getDocument();
if (Util.String.contains(frame.id, 'help')) {
var flashLinks = YUD.getElementsByClassName('flashvideo', 'a', frameDoc);
for (var i = 0; i < flashLinks.length; i++) {
if (flashLinks[i].parentNode) {
VideoManager.SWF.embed(frameWin, flashLinks[i], true, true);
}
}
}
});
ContentManager.Dialog.onShow.subscribe(function(dialogFrame) {
var dialogDoc = Util.Dom.getFrameContentDocument(dialogFrame);
YUD.batch(dialogDoc.getElementsByTagName('embed'), function(embed) {
if (typeof embed.Play == 'function') {
embed.Play();
}
});
});
ContentManager.Dialog.onHide.subscribe(function(dialogFrame) {
var dialogDoc = Util.Dom.getFrameContentDocument(dialogFrame);
YUD.batch(dialogDoc.getElementsByTagName('embed'), function(embed) {
if (typeof embed.Rewind == 'function') {
embed.Rewind();
}
});
});
VideoManager.SWF.Events.subscribe('playing', function() {
TTS.getInstance().stop();
});
})();

// FILE: module_asl.js (7a2701b3) 7/23/2014 4:30:36 PM

ContentManager.onItemEvent('menushow', function (page, item, menu, evt) {
if (!item)
return;
var accProps = TDS.getAccommodationProperties();
if (!accProps.hasASL())
return;
var menuType = 'entity';
var optionGroup = item.MC;
var subType = 'STEM';
if (optionGroup) {
var focusedOption = optionGroup.getFocusedOption();
if (focusedOption) {
menuType = 'component';
subType = 'Option ' + focusedOption.key;
}
}
AslModule.addEntityToMenu(item, subType, menu, menuType);
});
ContentManager.onPassageEvent('menushow', function (page, item, menu, evt) {
var accProps = TDS.getAccommodationProperties();
if (!accProps.hasASL())
return;
var menuType = 'entity';
var subType = null;
AslModule.addEntityToMenu(item, subType, menu, menuType);
});
AslModule = {};
AslModule.addEntityToMenu = function (entity, subtype, menu, menuType) {
var addMenu = function(messageKey, menuClass, menuFunc) {
var menuItem = {
text: Messages.get(messageKey),
classname: menuClass,
onclick: { fn: menuFunc }
};
menu.addMenuItem(menuType, menuItem);
};
if (entity.hasAslAttachments(subtype)) {
addMenu('TDSContentEventJS.Label.ASLItem', 'ASL', function() {
var att = entity.getAslAttachments()[0];
var link = att['url'];
AslModule.showImageDialog(link,entity.getPage().getZoomFactor());
});
}
};
AslModule.showImageDialog = function(url,zoomFactor) {
var anchor = document.createElement('a');
anchor.href = url;
VideoManager.openDialog(null, anchor, zoomFactor);
};
ContentEntity.prototype.getAslAttachments = function (st) {
var rv = [];
Util.Array.each(this.attachments, function (att) {
if ((att['type']) && (att['type'] == 'ASL')) {
if ((st == null) || (st.length == 0) ||
(att['subType'] == null) || (st == att['subType']))
rv.push(att);
}
});
return rv;
};
ContentEntity.prototype.hasAslAttachments = function (st) {
return this.getAslAttachments(st).length != 0;
};

// FILE: module_pagination.js (7a3dc3ef) 5/2/2014 12:55:57 PM

(function (CM) {
var CSS_WIDGET = 'multi-page';
var CSS_ITEMACTIVE = 'page-active';
var CSS_ITEMANSWERED = 'page-answered';
var CSS_ITEMSHOW = 'page-item-show';
var CSS_ITEMHIDE = 'page-item-hidden';
var paginatedPages = [];
function getTabEl(item) {
return document.getElementById('itemTab-' + item.position);
}
function createTabEl(item) {
var itemTabEl = document.createElement('li');
itemTabEl.setAttribute('id', 'itemTab-' + item.position);
var itemLinkEl = document.createElement('a');
itemLinkEl.setAttribute('href', '#');
itemLinkEl.setAttribute('tabindex', '0');
var tabData = { item: item };
$(itemLinkEl).on('click', tabData, onTabClick);
$(itemLinkEl).text(item.position);
itemTabEl.appendChild(itemLinkEl);
return itemTabEl;
}
function createWidgetEl(items) {
var containerEl = document.createElement('ul');
containerEl.className = CSS_WIDGET;
items.forEach(function(item) {
var itemTabEl = createTabEl(item);
containerEl.appendChild(itemTabEl);
});
return containerEl;
}
function onTabClick(evt) {
var item = evt.data.item;
item.setActive();
}
function updateItemAnswered(item) {
var itemEl = item.getElement();
var tabEl = getTabEl(item);
var response = item.getResponse();
if (response && response.isValid) {
YUD.addClass(tabEl, CSS_ITEMANSWERED);
} else {
YUD.removeClass(tabEl, CSS_ITEMANSWERED);
}
}
function allowPagination(page) {
if (ContentManager.isAccessibilityEnabled()) {
return false;
}
var compoundEl = page.getCompoundElement();
if (compoundEl) {
return false;
}
var passage = page.getPassage();
var items = page.getItems();
if (passage == null || items.length < 2) {
return false;
}
var accProps = page.getAccommodationProperties();
if (accProps == null || !accProps.isPaginatedItemGroupsEnabled()) {
return false;
}
return true;
}
function isPaginated(page) {
return (paginatedPages.length > 0 &&
paginatedPages.indexOf(page) != -1);
}
function getItems(page) {
var items = page.getItems();
if (page.layout == '28' ||
page.layout == '29') {
items = items.filter(function(item) {
return item.format.toUpperCase() != 'SIM';
});
}
return items;
}
function processPage(page) {
if (!isPaginated(page)) {
paginatedPages.push(page);
}
var items = getItems(page);
if (items.length == 0) return;
var firstItem = items[0];
var widgetEl = createWidgetEl(items);
$(firstItem.getElement()).before(widgetEl);
processItemFocus(page, firstItem);
}
function processItemFocus(page, currentItem) {
if (!isPaginated(page)) return;
var items = getItems(page);
if (items.indexOf(currentItem) == -1) return;
items.forEach(function (item) {
if (item == currentItem) {
onItemShow(page, item);
} else {
onItemHide(page, item);
}
});
}
function onItemShow(page, item) {
var itemEl = item.getElement();
var tabEl = getTabEl(item);
YUD.removeClass(itemEl, CSS_ITEMHIDE);
YUD.addClass(itemEl, CSS_ITEMSHOW);
YUD.addClass(tabEl, CSS_ITEMACTIVE);
var scrollEl = page.getScrollableElement();
if (scrollEl) {
scrollEl.scrollTop = 0;
scrollEl.scrollLeft = 0;
}
}
function onItemHide(page, item) {
var itemEl = item.getElement();
var tabEl = getTabEl(item);
YUD.addClass(itemEl, CSS_ITEMHIDE);
YUD.removeClass(itemEl, CSS_ITEMSHOW);
YUD.removeClass(tabEl, CSS_ITEMACTIVE);
updateItemAnswered(item);
}
CM.onPageEvent('available', function (page) {
if (allowPagination(page)) {
processPage(page);
}
});
CM.onItemEvent('focus', processItemFocus);
})(ContentManager);

// FILE: testshell.js (0cc38dc8) 7/22/2014 5:26:22 PM

"use strict";
var TestShell =
{
name: null,
initializing: true,
testLengthMet: false,
testFinished: false,
idleTimer: null,
autoSaveTimer: null,
autoSaveInterval: 120,
enableKeyEvents: true,
xhrManager: null,
muted: false,
allowUnloading: false
};
TestShell.Config =
{
urlBase: './',
reviewPage: 0,
hasAudio: false,
testName: 'Unknown',
testLength: 0,
startPosition: 1,
contentLoadTimeout: 120,
interfaceTimeout: 20,
interfaceTimeoutDialog: 30,
requestInterfaceTimeout: 40,
oppRestartMins: 20,
autoSaveInterval: 120,
forbiddenAppsInterval: 60,
environmentCheckInterval: 30,
disableSaveWhenInactive: false,
disableSaveWhenForbiddenApps: false,
disableSaveWhenEnvironmentCompromised: false,
allowSkipAudio: false,
showSegmentLabels: false,
audioTimeout: 180,
enableLogging: false
};
TestShell.Events = new Util.EventManager(TestShell);
TestShell.SaveRequest =
{
Manual: 0,
Implicit: 1,
Auto: 2
};
TestShell.load = function()
{
try {
TestShell.init();
} catch(ex) {
TDS.Diagnostics.report(ex);
}
};
TestShell.unload = function(event)
{
if (!TestShell.allowUnloading) {
return Messages.getAlt('TestShell.Label.leavingPageAlert', 'You are attempting to leave the test. If you select OK, the test will be paused. Select cancel to continue your test.');
}
TTS.Manager.stop();
if (TDS.isProxyLogin)
{
TDS.CLS.LogoutComponent.PageUnloadEvent.fire(arguments);
}
if (TestShell.muted &&  Util.SecureBrowser.isMuted()) {
Util.SecureBrowser.unmute();
}
};
TestShell.init = function () {
TestShell.UI.showLoading(Messages.getAlt('TestShell.Label.Initializing', 'Initializing'));
this.xhrManager = new TestShell.XhrManager();
TDS.init();
TestShell.UI.init();
ContentManager.Dialog.urlFrame = TestShell.Config.urlBase + 'Pages/DialogFrame.xhtml';
this.subscribeDomEvents();
KeyManager.init();
if (TestShell.checkForbiddenApps()) return;
if (TestShell.checkForEnvironmentSecurity()) return;
ContentManager.init(TDS.baseUrl);
ContentManager.setReadOnly(TDS.isReadOnly);
ContentManager.Renderer.setClient(TDS.clientStylePath);
var flashPath = TDS.resolveBaseUrl('Scripts/Libraries/soundmanager2/swf/');
TDS.Audio.Player.setup(flashPath);
YAHOO.lang.JSON.dateToString = function (d) {
return '\/Date(' + d.getTime() + ')\/';
};
var idleTimeout = function () {
TestShell._pauseInternal(true, 'timeout', TestShell.Config.disableSaveWhenInactive);
};
this.idleTimer = new TimeoutIdle(TestShell.Config.interfaceTimeout, TestShell.Config.interfaceTimeoutDialog, idleTimeout);
this.idleTimer.start();
TestShell.SegmentManager.init();
TestShell.Tools.init();
TestShell.ResponseManager.ping();
if (TDS.isProxyLogin) TDS.CLS.LogoutComponent.init();
TestShell.Events.fire('init');
};
TestShell.subscribeDomEvents = function()
{
TestShell.UI.Events.btnZoomIn.subscribe(function() { TestShell.UI.zoomIn(); });
TestShell.UI.Events.btnZoomOut.subscribe(function() { TestShell.UI.zoomOut(); });
TestShell.UI.Events.btnLineReader.subscribe(function() { TestShell.UI.toggleLineReader(); });
TestShell.UI.Events.btnFormula.subscribe(function() { TestShell.Tools.toggleFormula(); });
TestShell.UI.Events.btnPeriodic.subscribe(function() { TestShell.Tools.togglePeriodicTable(); });
TestShell.UI.Events.btnCalculator.subscribe(function() { TestShell.Calculator.toggle(); });
TestShell.UI.Events.btnPrint.subscribe(function() { TestShell.Print.passage(); });
TestShell.UI.Events.btnSave.subscribe(function() { TestShell.save(TestShell.SaveRequest.Manual); });
TestShell.UI.Events.btnPause.subscribe(function() { TestShell.pause(); });
TestShell.UI.Events.btnBack.subscribe(function() { TestShell.Navigation.back(); });
TestShell.UI.Events.btnNext.subscribe(function() { TestShell.Navigation.next(); });
TestShell.UI.Events.btnEnd.subscribe(function() { TestShell.complete(); });
TestShell.UI.Events.btnResults.subscribe(function() { TestShell.testResults(); });
TestShell.UI.Events.btnHelp.subscribe(function() { TestShell.Tools.toggleHelp(); });
YUE.on(TestShell.UI.Nodes.ddlNavigation, 'change', function() { TestShell.Navigation.change(); });
};
TestShell.getHandlersUrl = function(handler)
{
var urlBuilder = [];
urlBuilder.push(TDS.baseUrl);
urlBuilder.push('Pages/API/');
if (handler) urlBuilder.push(handler);
return urlBuilder.join('');
};
TestShell.isTestCompleted = function()
{
if (TestShell.testLengthMet && TestShell.PageManager.hasPages())
{
return TestShell.PageManager.isCompleted();
}
return false;
};
TestShell.pause = function()
{
var taskWorkflow = new Util.TaskWorkflow();
taskWorkflow.add(TestShell.Validation.checkDirtyResponses);
taskWorkflow.add(TestShell.Validation.checkIfPromptSelected);
taskWorkflow.add(TestShell.Validation.checkSimulatorPlaying, 'SimulatorPlayingWhileNavigating');
taskWorkflow.add(TestShell.save, this, true);
taskWorkflow.add(TestShell.Validation.checkBlockPausing);
taskWorkflow.start(this._pauseInternal, this);
};
TestShell._pauseInternal = function(silent, reason, disableSave)
{
if (TDS.isProxyLogin) TDS.CLS.LogoutComponent.PageUnloadEvent.unsubscribeAll();
if (!disableSave) this.save();
var sendPause = function()
{
if (!YAHOO.lang.isString(reason)) reason = 'manual';
TestShell.xhrManager.queueAction('pause', { reason: reason }, function()
{
if (TDS.isProxyLogin) {
TestShell.redirectProxyLogout();
} else {
TestShell.redirectLogin();
}
});
};
if (silent === true)
{
sendPause();
}
else
{
var pauseMessage = (TestShell.Frame.getWriting()) ? ErrorCodes.get('WritingPause') : ErrorCodes.get('Pause', [TestShell.Config.oppRestartMins]);
TestShell.UI.showWarningPrompt(pauseMessage,
{
yes: sendPause
});
}
};
TestShell.complete = function () {
var taskWorkflow = new Util.TaskWorkflow();
taskWorkflow.add(TestShell.Validation.checkAudioPlaying);
taskWorkflow.add(TestShell.Validation.checkDirtyResponses);
taskWorkflow.add(TestShell.Validation.checkAudioRecording);
taskWorkflow.add(TestShell.Validation.checkRecorderQuality);
taskWorkflow.add(TestShell.Validation.checkIfPromptSelected);
taskWorkflow.add(TestShell.Validation.checkSimulatorPlaying, 'SimulatorPlayingWhileNavigating');
if (TDS.isProxyLogin) {
TDS.CLS.LogoutComponent.PageUnloadEvent.unsubscribeAll();
if (TDS.isSIRVE)
{
TestShell.redirectLogin();
return;
}
}
taskWorkflow.start(this._completeInternal, this);
};
TestShell.testResults = function()
{
TDS.redirect('Pages/ReviewShell.xhtml');
};
TestShell._completeInternal = function()
{
var btn = YUD.getStyle('btnEnd', 'display');
if (btn == 'none') return;
this.save();
var hasUnanswered = false;
Util.Array.each(TestShell.PageManager.getGroups(), function(group)
{
if (!group.isCompleted())
{
TestShell.UI.showWarning(ErrorCodes.get('EndUnanswered'));
hasUnanswered = true;
}
});
if (hasUnanswered) return;
TestShell.UI.showWarningPrompt('Complete',
{
yes: function()
{
TestShell.xhrManager.queueAction('complete', null, function()
{
TestShell.redirectReview();
});
}
});
};
TestShell.save = function (saveRequest) {
if (TDS.isSIRVE) return;
if (saveRequest == null) saveRequest = TestShell.SaveRequest.Implicit;
if (saveRequest == TestShell.SaveRequest.Manual)
{
var taskWorkflow = new Util.TaskWorkflow();
taskWorkflow.add(TestShell.Validation.checkAudioRecording);
taskWorkflow.add(TestShell.Validation.checkRecorderQuality);
taskWorkflow.add(TestShell.Validation.checkSimulatorPlaying, 'SimulatorPlayingWhileSaving');
taskWorkflow.add(TestShell.Validation.checkIfPromptSelected);
taskWorkflow.start(function () { this._saveInternal(saveRequest); }, this);
}
else
{
this._saveInternal(saveRequest);
}
};
TestShell._saveInternal = function(saveRequest)
{
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup == null) return;
if (saveRequest == TestShell.SaveRequest.Auto && TestShell.xhrManager.hasAction()) return;
var saveResponses = [];
Util.Array.each(currentGroup.responses, function(response)
{
var item = response.getItem();
if (item == null) return;
if (saveRequest == TestShell.SaveRequest.Manual && !item.saveOptions.explicit) return;
if (saveRequest == TestShell.SaveRequest.Auto && !item.saveOptions.auto) return;
if (saveRequest == TestShell.SaveRequest.Implicit && !item.saveOptions.implicit) return;
if (item.spellCheck && item.spellCheck.isEnabled())
{
if (saveRequest == TestShell.SaveRequest.Auto) return;
item.spellCheck.disable();
}
if (!response.isDirty()) return;
if (item.grid)
{
item.grid.canvas.stopAction();
item.grid.canvas.clearFocused();
}
var itemResponse = item.getResponse();
if (!itemResponse)
{
Util.log('There is no item response.');
return;
}
if (item.recorder) {
var recorderObj = TDS.Audio.Widget.getRecorder(item.recorder);
if (recorderObj) {
recorderObj.dirty = false;
}
}
response.value = itemResponse.value;
response.isSelected = itemResponse.isSelected;
response.isValid = itemResponse.isValid;
saveResponses.push(response);
});
if (saveResponses.length > 0)
{
TestShell.ResponseManager.sendResponses(saveResponses);
}
TestShell.autoSaveStart();
};
TestShell.autoSaveStart = function()
{
if (this.autoSaveTimer != null) this.autoSaveTimer.cancel();
if (TestShell.Config.autoSaveInterval == 0) return;
var autoSaveMillis = (TestShell.Config.autoSaveInterval * 1000);
this.autoSaveTimer = YAHOO.lang.later(autoSaveMillis, this, function()
{
this.save(TestShell.SaveRequest.Auto);
});
};
TestShell.redirectProxyLogout = function () {
TestShell.allowUnloading = true;
TDS.logoutProctor(false);
};
TestShell.redirectLogin = function()
{
TestShell.allowUnloading = true;
TestShell.UI.showLoading('');
var url = TDS.baseUrl + 'Pages/LoginShell.xhtml?logout=true';
top.location.href = url;
};
TestShell.redirectReview = function()
{
TestShell.allowUnloading = true;
TestShell.UI.showLoading('');
var url = TDS.baseUrl + 'Pages/ReviewShell.xhtml';
top.location.href = url;
};
TestShell.redirectError = function(text)
{
TestShell.allowUnloading = true;
var url = TDS.baseUrl + 'Pages/Notification.xhtml';
if (YAHOO.util.Lang.isString(text))
{
url += '?message=' + encodeURIComponent(text);
}
top.location.href = url;
};
TestShell.checkForbiddenApps = function()
{
if (TDS.Debug.ignoreForbiddenApps) return false;
if (!(TestShell.Config.forbiddenAppsInterval > 0)) return false;
if (Util.Browser.readCookie('TDS-Student-ExcludeSchool') == 'True') return false;
var forbiddenApps = Util.SecureBrowser.getForbiddenApps();
if (forbiddenApps.length > 0)
{
var message = Messages.get('ForbiddenApps') + forbiddenApps[0].desc;
TestShell.UI.showAlert('Error', message, function()
{
TestShell._pauseInternal(true, 'forbiddenApps', TestShell.Config.disableSaveWhenForbiddenApps);
});
return true;
}
var forbiddenAppsMillis = (TestShell.Config.forbiddenAppsInterval * 1000);
YAHOO.lang.later(forbiddenAppsMillis, this, TestShell.checkForbiddenApps);
return false;
};
TestShell.checkForEnvironmentSecurity = function () {
if (!Util.SecureBrowser.isEnvironmentSecure()) {
var error = Messages.getAlt('TestShell.Alert.EnvironmentInsecure', 'Environment is not secure. Your test will be paused.');
TestShell.UI.showAlert('Error', error, function () {
TestShell._pauseInternal(true, 'Environment Security', TestShell.Config.disableSaveWhenEnvironmentCompromised);
});
return true;
}
var timerMillis = (TestShell.Config.environmentCheckInterval * 1000);
YAHOO.lang.later(timerMillis, this, TestShell.checkForEnvironmentSecurity);
return false;
};
function onFrameLogout()
{
if (top._frameLoggedOut) return;
top._frameLoggedOut = true;
var logoutError = Messages.get('TDSShellJS.Label.FrameLogout');
TestShell.redirectError(logoutError);
}

// FILE: testshell_UI.js (93dcd8b3) 7/22/2014 5:26:22 PM

var NotificationType =
{
none: 0,
success: 1,
notice: 2,
error: 3
};
TestShell.UI =
{
zoom: null,
defaultBodyCSS: null,
CSS: {
dialogShowing: 'showingDialog',
popupShowing: 'showingPopup',
loading: 'showingLoading'
},
Nodes: {},
Events: {}
};
TestShell.UI.Notification =
{
None: 0,
Success: 1,
Notice: 2,
Error: 3
};
TestShell.UI.addClick = function(id, callback)
{
var target = YUD.get(id);
if (target == null) return false;
if (ContentManager.enableARIA === false)
{
target.setAttribute('tabindex', '-1');
if (target.tagName != 'SELECT')
{
YUE.on(target, 'mousedown', function(evt) { YUE.stopEvent(evt); });
YUE.on(target, 'mouseup', function(evt) { YUE.stopEvent(evt); });
}
}
YUE.on(target, 'click', function(evt)
{
if (target.nodeName == 'A' || target.nodeName == 'SELECT')
{
YUE.stopEvent(evt);
}
if (YUD.getAttribute(target, 'disabled') != 'disabled')
{
callback.call(this, evt);
}
}, this, true);
return true;
};
TestShell.UI.createEvent = function(name)
{
this.Events[name] = new YAHOO.util.CustomEvent(name, this, false, YAHOO.util.CustomEvent.FLAT);
};
TestShell.UI.init = function()
{
this.defaultBodyCSS = document.body.className;
this.zoom = new ContentZoom(document);
this.zoom.contentImages = false;
this.loadDomNodes();
this.createDomEvents();
this.enableContextMenuButton();
this.enableRedrawFix();
TDS.Button.init();
TDS.ARIA.createLog();
};
TestShell.UI.loadDomNodes = function()
{
this.Nodes.ddlNavigation = YUD.get('ddlNavigation');
this.Nodes.btnDebug = YUD.get('btnDebug');
this.Nodes.btnHelp = YUD.get('btnHelp');
this.Nodes.btnZoomIn = YUD.get('btnZoomIn');
this.Nodes.btnZoomOut = YUD.get('btnZoomOut');
this.Nodes.btnLineReader = YUD.get('btnLineReader');
this.Nodes.btnCalculator = YUD.get('btnCalculator');
this.Nodes.btnFormula = YUD.get('btnFormula');
this.Nodes.btnPeriodic = YUD.get('btnPeriodic');
this.Nodes.btnPrint = YUD.get('btnPrint');
this.Nodes.btnPrintPractice = YUD.get('btnPrintPractice');
this.Nodes.btnGlobalNotes = YUD.get('btnGlobalNotes');
this.Nodes.lblStatus = YUD.get('lblStatus');
this.Nodes.btnSave = YUD.get('btnSave');
this.Nodes.btnPause = YUD.get('btnPause');
this.Nodes.btnBack = YUD.get('btnBack');
this.Nodes.btnNext = YUD.get('btnNext');
this.Nodes.btnEnd = YUD.get('btnEnd');
this.Nodes.btnResults = YUD.get('btnResults');
this.Nodes.testName = YUD.get('lblTestName');
this.Nodes.tools = YUD.get('studentTools');
this.Nodes.controls = YUD.get('studentControls');
};
TestShell.UI.createDomEvents = function()
{
Util.Array.each(Util.Object.keys(this.Nodes), function(key)
{
var element = TestShell.UI.Nodes[key];
TestShell.UI.createEvent(key);
TestShell.UI.addClick(element, function()
{
TestShell.UI.Events[key].fire(element);
});
});
};
TestShell.UI.isLoading = function()
{
return YUD.hasClass(document.body, TestShell.UI.CSS.loading);
};
TestShell.UI.showLoading = function(message)
{
if (YAHOO.lang.isString(message))
{
if (YUD.get('loadingMessage'))
{
YUD.get('loadingMessage').innerHTML = message;
}
}
else
{
}
if (this.isLoading()) return false;
return YUD.addClass(document.body, TestShell.UI.CSS.loading);
};
TestShell.UI.hideLoading = function()
{
if (!this.isLoading()) return false;
return YUD.removeClass(document.body, TestShell.UI.CSS.loading);
};
TestShell.UI.enableControl = function(id, enabled)
{
var control = YUD.get(id);
if (control == null || control.parentNode == null) return;
if (enabled)
{
YUD.addClass(control.parentNode, 'active');
YUD.removeClass(control.parentNode, 'inactive');
control.removeAttribute('disabled');
}
else
{
YUD.removeClass(control.parentNode, 'active');
YUD.addClass(control.parentNode, 'inactive');
control.setAttribute('disabled', 'disabled');
}
};
TestShell.UI.updateControls = function()
{
TestShell.UI.enableControl('btnPause', true);
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup != null)
{
TestShell.UI.enableControl('btnBack', !TestShell.PageManager.isFirst(currentGroup));
TestShell.UI.enableControl('btnNext', true);
}
else
{
TestShell.UI.enableControl('btnBack', false);
TestShell.UI.enableControl('btnNext', false);
}
TestShell.UI.enableControl('btnEnd', TestShell.isTestCompleted());
if (TestShell.testFinished)
{
TestShell.UI.showNotification(TestShell.UI.Notification.Success, Messages.get('TestCompleted'));
}
if (TDS.showItemScores)
{
TestShell.UI.enableControl('btnPause', false);
TestShell.UI.enableControl('btnEnd', false);
TestShell.UI.enableControl('btnResults', true);
TestShell.UI.showNotification(TestShell.UI.Notification.Success, Messages.get('TestItemScores'));
}
TestShell.Navigation.update();
var responsesSoFar = 0;
var firstGroup = TestShell.PageManager.getFirstGroup();
if (firstGroup && firstGroup.responses) responsesSoFar = firstGroup.responses[0].position - 1;
var allGroups = TestShell.PageManager.getGroups();
Util.Array.each(allGroups, function(group)
{
responsesSoFar += group.getNumAnswered();
});
var testLabel = TestShell.Config.testName + ' (' + responsesSoFar + ' ' + Messages.get('TDSShellUIJS.Label.OutOf') + ' ' + TestShell.Config.testLength + ')';
TestShell.UI.Nodes.testName.innerHTML = testLabel;
};
TestShell.UI.showSave = function(group)
{
var enable = false;
if (group && group.responses)
{
enable = Util.Array.find(group.responses, function(response)
{
return (response.getItem().saveOptions.explicit);
});
}
if (enable) YUD.addClass('btnSave', 'enable');
else YUD.removeClass('btnSave', 'enable');
TestShell.UI.enableControl('btnSave', enable);
return enable;
};
TestShell.UI.showNotification = function(type, message)
{
var notificationsContainer = YUD.getElementsByClassName('notificationsContainer', 'div');
if (notificationsContainer == null || notificationsContainer.length == 0) return false;
if (type == null || type == 0)
{
YUD.get('pnlNotifySuccess').style.display = 'none';
YUD.get('pnlNotifyNotice').style.display = 'none';
YUD.get('pnlNotifyError').style.display = 'none';
}
else if (type == 1)
{
YUD.get('pnlNotifySuccess').style.display = '';
YUD.get('pnlNotifySuccess').innerHTML = message;
}
else if (type == 2)
{
YUD.get('pnlNotifyNotice').style.display = '';
YUD.get('pnlNotifyNotice').innerHTML = message;
}
else if (type == 3)
{
YUD.get('pnlNotifyError').style.display = '';
YUD.get('pnlNotifyError').innerHTML = message;
}
return true;
};
TestShell.UI.reload = function()
{
TestShell.UI.showLoading();
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup) currentGroup.requestContent(true);
};
TestShell.UI.showContentError = function()
{
TestShell.UI.hideLoading();
TestShell.UI.showErrorPrompt('ContentTimeout',
{
yes: function()
{
TestShell.UI.reload();
var group = TestShell.PageManager.getCurrent();
if (group)
{
TDS.Diagnostics.logServerError('CONTENT ' + group.id + ': Reload');
}
},
no: function()
{
TestShell._pauseInternal(true);
}
});
};
TestShell.UI.zoomIn = function()
{
var currentPage = ContentManager.getCurrentPage();
if (currentPage) currentPage.zoomIn();
};
TestShell.UI.zoomOut = function()
{
var currentPage = ContentManager.getCurrentPage();
if (currentPage) currentPage.zoomOut();
};
TestShell.UI.toggleLineReader = function()
{
TDS.LineReaderControl.toggle();
};
TestShell.UI.clearScreen = function()
{
while (true)
{
try { document.body.removeChild(document.body.firstChild); }
catch(ex) { break; }
}
};
TestShell.UI.enableContextMenuButton = function() {
var btnContext = YUD.get('btnContext');
if (btnContext == null) return;
YUE.on(btnContext, Util.Event.Mouse.start, function(ev) {
YUE.stopEvent(ev);
var btnRegion = YUD.getRegion(btnContext);
ContentManager.Menu.show(ev, null, [btnRegion.left, btnRegion.bottom]);
});
};
TestShell.UI.showGlobalContextMenu = function(ev)
{
if (TestShell.Comments.isShowing()) return;
var contentMenu = new ContentMenu();
var getText = function(id)
{
var el = YUD.get(id);
return el.innerText ? el.innerText : el.textContent;
};
var addLinkToMenu = function(link, menuClass, alternateText)
{
link = YUD.get(link);
if (link == null) return;
if (YUD.getStyle(link, 'display') == 'none') return;
if (YUD.hasClass(link, 'excludeMenu')) return;
var menuFunc = function()
{
setTimeout(function() { Util.Event.selectLink(link); }, 0);
};
var menuItem =
{
text: YAHOO.lang.isString(alternateText) ? alternateText : getText(link.id),
classname: menuClass,
onclick: { fn: menuFunc }
};
contentMenu.addMenuItem('global', menuItem);
};
var addLinksToMenu = function(parentID)
{
var parent = YUD.get(parentID);
var links = parent.getElementsByTagName('a');
YUD.batch(links, function(link)
{
addLinkToMenu(link, link.className);
});
};
var currentPage = ContentManager.getCurrentPage();
if (currentPage && currentPage.soundCue)
{
var linkEl = YUD.get(currentPage.soundCue.id);
if (linkEl != null && !TDS.Audio.isActive()) {
addLinkToMenu(linkEl, 'sound_instructions', Messages.getAlt('TDSAudioJS.Label.AddMenuPlayInstruction', 'Play Instructions'));
}
}
addLinksToMenu(this.Nodes.controls);
addLinksToMenu(this.Nodes.tools);
addLinkToMenu(this.Nodes.btnHelp, 'help');
ContentManager.Menu.show(ev, contentMenu.getMenuItems());
};
TestShell.UI.enableRedrawFix = function() {
var navigationEl = YUD.get('navigation');
if (navigationEl == null) return;
YUE.on(navigationEl, Util.Event.Mouse.start, function(ev) {
var targetEl = YUE.getTarget(ev);
if (navigationEl == targetEl) {
ContentManager.applyRedrawFix();
}
});
};
(function(UI) {
function createButton(parentId, id, label, className, fn) {
var topBarEl = YUD.get(parentId);
if (topBarEl == null) return null;
var ulEl = YUD.getFirstChild(topBarEl);
if (ulEl == null) return null;
var liEl = document.createElement('li');
var linkEl = document.createElement('a');
if (id) {
linkEl.id = id;
}
YUD.setAttribute(linkEl, 'href', '#');
YUD.setAttribute(linkEl, 'tabindex', '-1');
if (className) {
YUD.addClass(linkEl, className);
}
liEl.appendChild(linkEl);
var spanEl = document.createElement('span');
spanEl.className = 'icon';
if (label) {
spanEl.innerHTML = label;
}
linkEl.appendChild(spanEl);
if (YAHOO.lang.isFunction(fn)) {
UI.addClick(linkEl, fn);
}
ulEl.appendChild(liEl);
return liEl;
};
UI.addButtonTool = function(id, label, className, fn) {
return createButton('studentTools', id, label, className, fn);
};
UI.addButtonControl = function (id, label, className, fn) {
return createButton('studentControls', id, label, className, fn);
};
})(TestShell.UI);
(function(UI) {
function showAlert(textHeader, textMessage, funcOk) {
ContentManager.Menu.hide();
UI.hideLoading();
var handleOk = function() {
this.hide();
top.focus();
if (funcOk) {
funcOk();
}
};
var buttons = [
{ text: Messages.get('Global.Label.OK'), handler: handleOk }
];
TDS.Dialog.show(textHeader, textMessage, buttons);
}
UI.showAlert = showAlert;
UI.showWarning = function(textMessage, funcOk) {
var textHeader = Messages.get('TDSShellUIJS.Label.Warning');
showAlert(textHeader, textMessage, funcOk);
};
UI.showError = function(textMessage, funcOk) {
var textHeader = Messages.get('TDSShellUIJS.Label.Error');
showAlert(textHeader, textMessage, funcOk);
};
function showPrompt(textHeader, textMessage, obj)
{
ContentManager.Menu.hide();
obj.noLabel = Messages.get(obj.noLabel ? obj.noLabel : 'Global.Label.No');
obj.yesLabel = Messages.get(obj.yesLabel ? obj.yesLabel : 'Global.Label.Yes');
var yesHandler = function()
{
this.hide();
top.focus();
if (obj.yes)
{
if (obj.scope) obj.yes.call(obj.scope);
else obj.yes();
}
};
var noHandler = function()
{
this.hide();
top.focus();
if (obj.no)
{
if (obj.scope) obj.no.call(obj.scope);
else obj.no();
}
};
var buttons = [
{ text: obj.noLabel, handler: noHandler, isDefault: true },
{ text: obj.yesLabel, handler: yesHandler }
];
if (obj.logout)
{
var logoutHandler = function()
{
this.hide();
UI.clearScreen();
TestShell.redirectLogin();
};
var logoutLabel = Messages.getAlt('Global.Label.Logout', 'Logout');
buttons.push({ text: logoutLabel, handler: logoutHandler });
}
TDS.Dialog.show(textHeader, textMessage, buttons);
}
UI.showWarningPrompt = function(textMessage, obj) {
var textHeader = Messages.get('TDSShellUIJS.Label.Warning');
textMessage = ErrorCodes.get(textMessage);
showPrompt(textHeader, textMessage, obj);
};
UI.showErrorPrompt = function(textMessage, obj) {
var textHeader = Messages.get('TDSShellObjectsJS.Label.Error');
textMessage = ErrorCodes.get(textMessage);
showPrompt(textHeader, textMessage, obj);
};
})(TestShell.UI);

// FILE: testshell_Keyboard.js (25374db8) 7/22/2014 5:26:22 PM

function onkeyevent(e, type, key, keyCode, charCode, target)
{
if (!TestShell.enableKeyEvents) return KeyEventResult.Allow;
if (type == 'keydown' && keyCode == 27)
{
TDS.ToolManager.hideAll();
ContentManager.Dialog.hide();
}
if (ContentManager.Dialog.isShowing())
{
if (keyCode == 77 && e.ctrlKey) ContentManager.Dialog.hide();
if (keyCode == 13          ) return KeyEventResult.Allow;
if (ContentManager.Dialog.containsElement(target))
{
if (keyCode >= 37 && keyCode <= 40) return KeyEventResult.Allow;
}
return KeyEventResult.Stop;
}
if (keyCode >= 37 && keyCode <= 40 && e.shiftKey && !Util.Event.inTextInput(e) && !Mozilla.inCaretMode())
{
return KeyEventResult.Stop;
}
try
{
if (e.ctrlKey && e.altKey && e.shiftKey && type == 'keyup' && keyCode == 68)
{
return KeyEventResult.Matched;
}
}
catch (ex) { }
if (e.ctrlKey && !e.shiftKey && type == 'keypress')
{
if (keyCode == 0 && navigator.userAgent.indexOf('PPC Mac OS X') != -1)
{
if (charCode == 61) { TestShell.UI.zoomIn(); return KeyEventResult.Matched; }
if (charCode == 31) { TestShell.UI.zoomOut(); return KeyEventResult.Matched; }
}
}
else if (e.ctrlKey && !e.shiftKey && type == 'keyup')
{
if (keyCode == 107 || keyCode == 61        ) { TestShell.UI.zoomIn(); return KeyEventResult.Matched; }
if (keyCode == 109) { TestShell.UI.zoomOut(); return KeyEventResult.Matched; }
switch (key)
{
case 'Left': TestShell.Navigation.back(); return KeyEventResult.Matched;
case 'Right': TestShell.Navigation.next(); return KeyEventResult.Matched;
case 'G': TestShell.UI.showGlobalContextMenu(e); return KeyEventResult.Matched;
}
}
return KeyEventResult.Ignored;
}

// FILE: testshell_CoverPages.js (8db2bee2) 7/22/2014 5:26:22 PM

TestShell.CoverPages =
{
_collection: new Util.Structs.Map()
};
TestShell.CoverPages.add = function(coverPage)
{
this._collection.set(coverPage.id, coverPage);
};
TestShell.CoverPages.list = function()
{
return this._collection.getValues();
};
TestShell.CoverPages.contains = function(id)
{
return this._collection.containsKey(id);
};
TestShell.CoverPages.get = function(id)
{
return this._collection.get(id);
};
ContentManager.onPageEvent('rendering', function(contentPage)
{
var page = TestShell.PageManager.get(contentPage.id);
if (!(page instanceof TestShell.PageGroup)) return;
var cpInfo = page.getCoverPageInfo();
if (cpInfo == null) return;
var coverPage = TestShell.CoverPages.get(cpInfo.id);
if (coverPage == null)
{
coverPage = new TestShell.PageResource(cpInfo.bankKey, cpInfo.itemKey, contentPage.segmentID);
TestShell.CoverPages.add(coverPage);
}
});
ContentManager.onPageEvent('beforeShow', function(contentPage)
{
var currentPage = TestShell.PageManager.get(contentPage.id);
if (!(currentPage instanceof TestShell.PageGroup)) return true;
var currentCoverPage = currentPage.getCoverPage();
if (currentCoverPage == null) return true;
if (TestShell.PageManager.contains(currentCoverPage)) return true;
var navState = TestShell.Navigation.getState();
if (currentPage == TestShell.PageManager.getFirst())
{
TestShell.PageManager.insertPage(currentCoverPage, currentPage);
}
if (navState == TestShell.Navigation.State.Initializing)
{
var isReviewing = (TestShell.Config.reviewPage > 0);
if (!isReviewing && currentPage.getPrevious() != null && !currentPage.isVisited())
{
TestShell.Navigation._backInternal();
TestShell.PageManager.History.pop();
return false;
}
}
if (navState == TestShell.Navigation.State.Next)
{
var previousPage = currentPage.getPrevious();
var previousCoverPage = previousPage.getCoverPage();
if (previousCoverPage == null ||
previousCoverPage != currentCoverPage)
{
TestShell.PageManager.insertPage(currentCoverPage, currentPage);
TestShell.PageManager.swapCurrent(currentCoverPage);
return false;
}
}
if (navState == TestShell.Navigation.State.Back)
{
var nextPage = currentPage.getNext();
var nextCoverPage = nextPage.getCoverPage();
if (nextCoverPage != null &&
nextCoverPage != currentCoverPage)
{
TestShell.PageManager.insertPage(nextCoverPage, nextPage);
TestShell.PageManager.swapCurrent(nextCoverPage);
return false;
}
}
return true;
}, true);

// FILE: testshell_ContentManager.js (03f2b788) 7/22/2014 5:26:22 PM

ContentManager.onPageEvent('Rendered', function(contentPage)
{
var contentDoc = contentPage.getDoc();
if (contentDoc == null) return;
var contentBody = contentDoc.body;
if (document.body != contentBody)
{
contentBody.className = TestShell.UI.defaultBodyCSS;
YUD.removeClass(contentBody, 'showingLoading');
var contentWin = contentPage.getWin();
TDS.Diagnostics.addErrorHandler(contentWin);
}
});
ContentManager.onItemEvent('available', function(contentPage, item)
{
var pageHeader = contentPage.getHeader();
if (pageHeader) pageHeader.setAttribute('tabindex', '-1');
});
ContentManager.onItemEvent('available', function(contentPage, item)
{
var group = TestShell.PageManager.get(contentPage.id);
if (group instanceof TestShell.PageGroup)
{
var response = group.getResponse(item.position);
if (response && item.printed)
{
TestShell.Print.itemComplete(group, response);
}
}
});
ContentManager.onPassageEvent('available', function(contentPage, passage)
{
var group = TestShell.PageManager.get(contentPage.id);
if (group instanceof TestShell.PageGroup && passage.printed)
{
TestShell.Print.passageComplete(group);
}
});
ContentManager.onPageEvent('loaded', function(contentPage)
{
var group = TestShell.PageManager.get(contentPage.id);
var pageWin = contentPage.getWin();
var pageDoc = contentPage.getDoc();
group.createSoundCue();
if (window != pageWin) {
KeyManager.attachListener((YAHOO.env.ua.gecko) ? pageWin : pageDoc);
TestShell.idleTimer.addListeners(pageWin);
}
TestShell.Navigation.requestPage();
});
ContentManager.onPageEvent('loaded', function(contentPage)
{
var missingImages = [];
missingImages.push(contentPage.getImagesFailed());
missingImages.push(contentPage.getImagesAborted());
missingImages = Util.Array.flatten(missingImages);
var missingFiles = [];
for (var i = 0; i < missingImages.length; i++)
{
var image = missingImages[i];
var imageFile = image.src.split('/').pop().split('file=').pop();
imageFile = '\'' + imageFile + '\'';
missingFiles.push(imageFile);
}
if (missingFiles.length > 0)
{
TDS.Diagnostics.logServerError('CONTENT ' + contentPage.id + ': Missing Images - ' + missingFiles.join(', '));
}
});
ContentManager.onItemEvent('loaded', function(contentPage, item)
{
if (item.grid == null) return;
var getGridImages = function()
{
var images = [];
images = images.concat(item.grid.question.getBackgroundImages());
images = images.concat(item.grid.question.getPaletteImages());
if (YAHOO.lang.isFunction(item.grid.question.getRegionsImages))
{
images = images.concat(item.grid.question.getRegionsImages());
}
return images;
};
var getMissingImages = function()
{
var images = getGridImages();
var missingImages = [];
for (var i = 0; i < images.length; i++)
{
var gridImage = images[i];
if (gridImage == null) continue;
var isValidImage = (gridImage.width > 0 && gridImage.height > 0);
if (!isValidImage) missingImages.push(gridImage);
}
return missingImages;
};
var logMissingImages = function(message, missingImages)
{
var missingFiles = [];
if (YAHOO.lang.isArray(missingImages))
{
for (var i = 0; i < missingImages.length; i++)
{
var image = missingImages[i];
if (image == null) continue;
var imageUrl = null;
if (image.url) imageUrl = image.url;
else if (image.src) imageUrl = image.src;
else if (image.href) imageUrl = image.getAttribute('xlink:href');
if (imageUrl == null) continue;
if (imageUrl.indexOf('file=') != -1)
{
imageUrl = imageUrl.split('file=')[1];
}
imageUrl = '"' + imageUrl + '"';
if (missingFiles.indexOf(imageUrl) == -1)
{
missingFiles.push(imageUrl);
}
}
}
if (missingFiles.length > 0)
{
var serverError = 'GRID I-' + item.bankKey + '-' + item.itemKey + ': ' + message + ' - ' + missingFiles.join(', ');
TDS.Diagnostics.logServerError(serverError);
}
};
item.grid.subscribe('onStateChange', function(gridEvt)
{
if (gridEvt.state == GridState.Loaded)
{
var imageErrors = getMissingImages();
if (imageErrors.length > 0)
{
var errorData = { message: 'Error with dimensions of images', values: imageErrors };
item.grid._setState(GridState.Error, errorData);
}
else if (YAHOO.lang.isFunction(item.grid.validate))
{
item.grid.validate();
}
}
else if (gridEvt.state == GridState.Error)
{
if (gridEvt.data)
{
logMissingImages(gridEvt.data.message, gridEvt.data.values);
}
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup != null)
{
var currentContentPage = currentGroup.getContentPage();
if (currentContentPage != null && currentContentPage == item.getPage())
{
TestShell.UI.showContentError();
}
}
}
});
});
ContentManager.onPageEvent('beforeShow', function(contentPage)
{
if (contentPage.getImagesFailed().length > 0 ||
contentPage.getImagesAborted().length > 0)
{
TestShell.UI.showContentError();
return false;
}
var resourceLoaders = contentPage.getResourceLoaders();
if (resourceLoaders.hasLoaders() &&
resourceLoaders.getStatus() != ResourceLoader.Status.COMPLETE)
{
TestShell.UI.showContentError();
return false;
}
var items = contentPage.getItems();
for (var i = 0; i < items.length; i++)
{
var item = items[i];
if (item.grid)
{
if (item.grid.getState() == GridState.Error)
{
TestShell.UI.showContentError();
return false;
}
}
}
return true;
}, true);
ContentManager.onPageEvent('show', function(contentPage)
{
var page = TestShell.PageManager.get(contentPage.id);
TestShell.PageManager.Events.fire('onShow', page);
});
ContentManager.onPageEvent('beforeHide', function(contentPage)
{
TDS.ToolManager.hideAll();
ContentManager.Menu.hide();
TestShell.Comments.hide();
});
ContentManager.onPageEvent('hide', function(contentPage)
{
var page = TestShell.PageManager.get(contentPage.id);
TestShell.PageManager.Events.fire('onHide', page);
});
ContentManager.onPageEvent('hide', function(contentPage)
{
var tools = TDS.ToolManager.getAll();
for (var i = 0; i < tools.length; i++) {
try {
if (tools[i].id.toLowerCase().indexOf('calculator') > 0) {
var frameCalc = document.getElementById('frame-'+tools[i].id);
if (!frameCalc || !frameCalc.contentWindow) continue;
var winCalc = frameCalc.contentWindow;
if (typeof winCalc.resetTDSCalc != 'function') continue;
winCalc.resetTDSCalc();
}
}
catch (ex) { Util.log(ex); }
}
});
ContentManager.onEntityEvent('menushow', function(contentPage, entity, menu, evt)
{
if (ContentManager.Dialog.isShowing())
{
menu.cancel = true;
}
});
ContentManager.onPageEvent('completed', function(contentPage) {
TestShell.Navigation.next();
});
(function () {
ContentManager.onPageEvent('available', function (contentPage) {
var accProps = contentPage.getAccommodationProperties();
var zoomLevel = accProps.getPrintSize();
var pageZoom = contentPage.getZoom();
pageZoom.currentLevel = pageZoom.getLevel(zoomLevel);
if (pageZoom._documents.length > 0 &&
pageZoom._documents[0] == document) {
pageZoom._documents = [];
}
});
ContentManager.onPageEvent('beforeShow', function (contentPage) {
var shellZoom = TestShell.UI.zoom;
var pageZoom = contentPage.getZoom();
if (pageZoom.currentLevel != shellZoom.currentLevel) {
pageZoom.refresh(true);
}
});
ContentManager.onPageEvent('zoom', function (contentPage) {
var shellZoom = TestShell.UI.zoom;
var pageZoom = contentPage.getZoom();
if (shellZoom.currentLevel != pageZoom.currentLevel) {
shellZoom.setLevel(pageZoom.currentLevel);
}
$(TDS.ToolManager.getAll()).each(function (idx, panel) {
if (panel.refresh) {
panel.refresh();
}
});
});
})();
(function(window) {
if (!window.SpellCheck) return;
var SpellXhr = window.SpellCheck.XHR;
SpellXhr.onRequest.subscribe(function() {
TestShell.UI.showLoading('');
});
SpellXhr.onComplete.subscribe(function() {
TestShell.UI.hideLoading();
});
})(window);
ContentManager.Dialog.onShow.subscribe(function()
{
YUD.addClass(TestShell.Frame.getBody(), TestShell.UI.CSS.dialogShowing);
});
ContentManager.Dialog.onHide.subscribe(function()
{
YUD.removeClass(TestShell.Frame.getBody(), TestShell.UI.CSS.dialogShowing);
});
function tdsUpdateItemResponse(position, value)
{
var response = TestShell.PageManager.getResponse(position);
response.setValue(value);
Util.log('tdsUpdateItemResponse: ' + position + ' - \'' + response.value + '\' (' + response.sequence + ')');
TestShell.ResponseManager.sendResponse(response);
}
function tdsUpdateItemMark(position, marked)
{
var response = TestShell.PageManager.getResponse(position);
response.mark = marked;
TestShell.UI.updateControls();
TestShell.UI.showLoading('');
var markData = { position: position, mark: marked };
TestShell.xhrManager.markForReview(markData);
}
function tdsPassagePrint()
{
TestShell.Print.passage();
}
function tdsItemPrint(position)
{
var response = TestShell.PageManager.getResponse(position);
if (response.isDirty())
{
TestShell.UI.showAlert(Messages.get('TDSShellObjectsJS.Label.Warning'), Messages.get('TDSShellObjectsJS.Label.SaveBeforePrint'));
}
else
{
TestShell.Print.item(position);
}
}
function tdsRemoveResponse(position)
{
var itemResponse = TestShell.PageManager.getResponse(position);
if (itemResponse == null) return;
if (TestShell.ResponseManager.getPendingResponses().indexOf(itemResponse) != -1 ||
TestShell.ResponseManager.getOutgoingResponses().indexOf(itemResponse) != -1)
{
var resetWaitMsg = Messages.get('TestShell.Label.RemoveResponseWait');
TDS.Dialog.showAlert(resetWaitMsg);
return;
}
var itemData = {
position: itemResponse.position,
itemID: itemResponse.id,
dateCreated: itemResponse.dateCreated
};
var resetResponse = function()
{
TestShell.xhrManager.removeResponse(itemData, function(data, reply) {
if (reply != null && reply.replyCode === 0)
{
itemResponse.reset();
itemResponse.group.requestContent(true);
}
});
};
var resetMsg = Messages.get('TestShell.Label.RemoveResponseWarning');
TDS.Dialog.showPrompt(resetMsg, resetResponse);
}
TestShell.Events.subscribe('init', function()
{
ContentManager.Dialog.onShow.subscribe(function()
{
VideoManager.SWF.stopPlaying();
});
});
TTS.Manager.Events.onStatusChange.subscribe(function(currentStatus)
{
if (currentStatus == TTS.Status.Playing)
{
VideoManager.SWF.stopPlaying();
}
});

// FILE: testshell_Xml.js (98df8a22) 7/22/2014 5:26:22 PM

TestShell.Xml = {};
(function(TestShell) {
function createRequest(id, timestamp, responses) {
var xml = '<request action="update" eventID="' + id + '" timestamp="' + timestamp + '">';
if (YAHOO.util.Lang.isArray(responses)) {
xml += serializeResponses(responses);
}
xml += '</request>';
return xml;
};
function serializeResponses(responses) {
var xml = '<responseUpdates>';
Util.Array.each(responses, function(response) {
xml += serializeResponse(response);
});
xml += "</responseUpdates>";
return xml;
};
function serializeResponse(response) {
var xml = '<responseUpdate ';
xml += 'id="' + response.id + '" ';
xml += 'itsBank="' + response.itsBank + '" ';
xml += 'itsItem="' + response.itsItem + '" ';
xml += 'segmentID="' + response.group.segmentID + '" ';
xml += 'page="' + response.pageNum + '" ';
xml += 'position="' + response.position + '" ';
xml += 'sequence="' + response.sequence + '" ';
xml += 'dateCreated="' + response.dateCreated + '" ';
xml += 'isSelected="' + response.isSelected + '" ';
xml += 'isValid="' + response.isValid + '" ';
xml += '>';
var item = response.getItem();
xml += '<filePath>' + (item.filePath || '') + '</filePath>';
xml += '<value>';
if (response.value != null) {
if (typeof response.value == 'string') {
var responseValue = response.value.replace(/]]>/g, ']]&gt;');
xml += '<![CDATA[' + responseValue + ']]>';
} else {
var serialized = response.value;
try {
serialized = JSON.stringify(serialized);
} catch(ex) {
}
throw new Error('Cannot generate response xml because of invalid value property type: ' + serialized);
}
}
xml += '</value>';
xml += '</responseUpdate>';
return xml;
};
TestShell.Xml.createRequest = createRequest;
})(TestShell);
(function(TestShell) {
var getNode = Util.Dom.queryTag;
var getNodes = Util.Dom.queryTags;
var batchNodes = Util.Dom.queryTagsBatch;
var selectNode = Util.Dom.querySelector;
var selectNodes = Util.Dom.querySelectorAll;
var getAttribInt = Util.Xml.getAttributeInt;
var getAttribBool = Util.Xml.getAttributeBool;
var getAttrib = Util.Xml.getAttribute;
var getText = Util.Xml.getNodeText;
var getCData = Util.Xml.getCData;
function validResults(xmlDoc) {
if (xmlDoc == null) return false;
var nodeResults = getNode('results', xmlDoc);
if (nodeResults == null) return false;
return true;
};
function parseResults(xmlDoc) {
if (xmlDoc == null) return null;
var resultsNode = getNode('results', xmlDoc);
if (resultsNode == null) return null;
var results = {
eventID: getAttribInt(resultsNode, 'eventID'),
machineID: getAttrib(resultsNode, 'machineID'),
timestamps: readTimestamps(resultsNode),
notification: readNotification(resultsNode),
summary: parseSummary(resultsNode),
updates: readResponseUpdates(resultsNode),
groups: readGroups(resultsNode)
};
return results;
};
function readTimestamps(resultsNode) {
var node = getNode('timestamps', resultsNode);
if (node == null) return null;
var timestamps = {
clientSent: getAttribInt(node, 'sent'),
serverReceived: getAttribInt(node, 'received'),
serverCompleted: getAttribInt(node, 'completed'),
clientReceived: new Date().getTime()
};
return timestamps;
};
function readNotification(resultsNode)
{
var node = getNode('notification', resultsNode);
if (node == null) return null;
var notification = {
type: node.getAttribute('type'),
message: node.getAttribute('message')
};
return notification;
};
function parseSummary(resultsNode)
{
var node = getNode('summary', resultsNode);
if (node == null) return null;
var summary = {
testLength: getAttribInt(node, 'testLength'),
testLengthMet: getAttribBool(node, 'testLengthMet'),
testFinished: getAttribBool(node, 'testFinished'),
prefetched: getAttribBool(node, 'prefetched')
};
return summary;
};
function readResponseUpdates(resultsNode) {
var responses = [];
var updatesNode = getNode('updates', resultsNode);
batchNodes('response', updatesNode, function(updateNode) {
var responseStatus = parseResponseStatus(updateNode);
responses.push(responseStatus);
});
return responses;
};
function parseResponseStatus(updateNode) {
var responseStatus = new TestShell.Response.Status();
responseStatus.position = getAttribInt(updateNode, 'position');
responseStatus.status = getAttrib(updateNode, 'status');
responseStatus.reason = getAttrib(updateNode, 'reason');
return responseStatus;
};
function parseResponse(responseNode, group) {
var response = new TestShell.Response(group);
response.id = getAttrib(responseNode, 'id');
response.dateCreated = getAttrib(responseNode, 'created');
response.format = getAttrib(responseNode, 'format');
response.itsBank = getAttribInt(responseNode, 'bank');
response.itsItem = getAttribInt(responseNode, 'item');
response.pageNum = getAttribInt(responseNode, 'page');
response.position = getAttribInt(responseNode, 'position');
response.sequence = getAttribInt(responseNode, 'sequence');
response.mark = getAttribBool(responseNode, 'mark');
response.isSelected = getAttribBool(responseNode, 'isSelected');
response.isRequired = getAttribBool(responseNode, 'isRequired');
response.isValid = getAttribBool(responseNode, 'isValid');
response.prefetched = getAttribBool(responseNode, 'prefetched');
return response;
};
function parseGroup(resultsNode, groupNode) {
var group = new TestShell.PageGroup();
group.id = getAttrib(groupNode, 'id');
group.pageNum = getAttribInt(groupNode, 'page');
group.numRequired = getAttribInt(groupNode, 'numRequired');
group.segment = getAttribInt(groupNode, 'segment');
group.segmentID = getAttrib(groupNode, 'segmentID');
batchNodes('response', groupNode, function(node) {
var response = parseResponse(node, group);
group.responses.push(response);
});
return group;
};
function readGroups(resultsNode) {
var groupsNode = getNode('groups', resultsNode);
var groups = [];
batchNodes('group', groupsNode, function(node) {
var group = parseGroup(resultsNode, node);
groups.push(group);
});
return groups;
};
TestShell.Xml.validResults = validResults;
TestShell.Xml.parseResults = parseResults;
})(TestShell);

// FILE: testshell_Xhr.js (6be595ed) 7/22/2014 5:26:22 PM

TestShell.XhrManager = function()
{
TestShell.XhrManager.superclass.constructor.call(this, (90 * 1000), 1, TestShell);
this._action = null;
this.Events.subscribe('onShowProgress', function()
{
TestShell.UI.showLoading('');
});
this.Events.subscribe('onHideProgress', function()
{
TestShell.UI.hideLoading();
});
this.Events.subscribe('onError', TestShell.XhrManager.onError);
};
YAHOO.extend(TestShell.XhrManager, TDS.XhrManager);
TestShell.XhrManager.prototype.getUrl = function(action)
{
var urlBuilder = [];
urlBuilder.push(TDS.baseUrl);
urlBuilder.push('Pages/API/TestShell.axd/');
urlBuilder.push(action);
var currentPage = (TestShell.PageManager.getCurrent()) ? TestShell.PageManager.getCurrent().pageNum : 0;
urlBuilder.push('?currentPage=');
urlBuilder.push(currentPage);
return urlBuilder.join('');
};
TestShell.XhrManager.onError = function(request, errorMessage, retriable, logout)
{
var self = this;
if (retriable)
{
errorMessage += ' ' + Messages.getAlt('Messages.Label.XHRError', 'Select Yes to try again or No to logout.');
TDS.Dialog.showPrompt(errorMessage,
function()
{
TestShell.xhrManager.sendRequest(request);
},
function()
{
if (logout)
{
TestShell.redirectLogin();
}
});
}
else
{
TDS.Dialog.showWarning(errorMessage, function()
{
if (logout)
{
TestShell.redirectLogin();
}
});
}
};
TestShell.XhrManager.prototype.queueAction = function(action, parameters, callback)
{
TestShell.UI.showLoading('');
this._action = Util.Function.bind(this[action], this, parameters, callback);
TestShell.ResponseManager.processQueue();
};
TestShell.XhrManager.prototype.hasAction = function() { return (this._action != null); };
TestShell.XhrManager.prototype.processAction = function()
{
if (!this.hasAction()) return false;
this._action();
return true;
};
TestShell.XhrManager.prototype.pause = function(parameters, callback)
{
var data = TestShell.Audit.getJson();
return this.sendAction('pause', data, callback, null, parameters);
};
TestShell.XhrManager.prototype.complete = function(parameters, callback)
{
var data = TestShell.Audit.getJson();
return this.sendAction('complete', data, callback, null, parameters);
};
TestShell.XhrManager.prototype.waitForSegmentApproval = function(data, callback)
{
return this.sendAction('waitForSegmentApproval', data, callback, { showProgress: false });
};
TestShell.XhrManager.prototype.checkForSegmentApproval = function(callback)
{
return this.sendAction('checkForSegmentApproval', null, callback, { showProgress: false });
};
TestShell.XhrManager.prototype.exitSegment = function(data, callback)
{
var config = { showProgress: false, showDialog: false, showError: true, allowRetry: false, forceLogout: true };
return this.sendAction('exitSegment', data, callback, config);
};
TestShell.XhrManager.prototype.recordItemComment = function(data, callback)
{
return this.sendAction('recordItemComment', data, callback, {
allowRetry: true, forceLogout: false, showProgress: false
});
};
TestShell.XhrManager.prototype.recordOppComment = function(data, callback)
{
return this.sendAction('recordOppComment', data, callback, {
allowRetry: true, forceLogout: false, showProgress: false
});
};
TestShell.XhrManager.prototype.getOppComment = function(callback)
{
return this.sendAction('getOppComment', null, callback, {
allowRetry: true, forceLogout: false, showProgress: false
});
};
TestShell.XhrManager.prototype.markForReview = function(data, callback)
{
return this.sendAction('markForReview', data, callback, { allowRetry: true, forceLogout: false, showProgress: true });
};
TestShell.XhrManager.prototype.removeResponse = function(data, callback)
{
return this.sendAction('removeResponse', data, callback, { allowRetry: true, forceLogout: false, showProgress: true });
};
TestShell.XhrManager.prototype.getPauseStatus = function(callback)
{
return this.sendAction('getStatus', null, callback, { allowRetry: true, forceLogout: true, showProgress: true });
};

// FILE: testshell_ResponseManager.js (892f1ae4) 7/22/2014 5:26:22 PM

TestShell.ResponseManager = {};
TestShell.ResponseManager.Error =
{
None: 0,
Timeout: 1,
Network: 2,
Xml: 3,
HTTP: 4,
Server: 5,
ReturnStatus: 6
};
TestShell.ResponseManager._transaction = null;
TestShell.ResponseManager._sending = false;
TestShell.ResponseManager._timeout = (90 * 1000);
TestShell.ResponseManager._attemptTotal = 0;
TestShell.ResponseManager._attemptCount = 0;
TestShell.ResponseManager._maxRetries = 2;
TestShell.ResponseManager._lastError = TestShell.ResponseManager.Error.None;
TestShell.ResponseManager._lastStatusCode = 0;
TestShell.ResponseManager._lastStatusText = null;
TestShell.ResponseManager._pingResponses = false;
TestShell.ResponseManager._pendingResponses = [];
TestShell.ResponseManager._outgoingResponses = [];
TestShell.ResponseManager._timerDelay = null;
TestShell.ResponseManager.createEvent = function(name)
{
return new YAHOO.util.CustomEvent(name, this, true, YAHOO.util.CustomEvent.FLAT);
};
TestShell.ResponseManager.Events =
{
onQueue: TestShell.ResponseManager.createEvent('onQueue'),
onSend: TestShell.ResponseManager.createEvent('onSend'),
onFailure: TestShell.ResponseManager.createEvent('onFailure'),
onSuccess: TestShell.ResponseManager.createEvent('onSuccess'),
onGroups: TestShell.ResponseManager.createEvent('onGroups')
};
TestShell.ResponseManager.fireEvent = function(name, obj) { this.Events[name].fire(obj); };
TestShell.ResponseManager.getLastError = function() { return this._lastError; };
TestShell.ResponseManager.getLastStatusCode = function() { return this._lastStatusCode; };
TestShell.ResponseManager.getLastStatusText = function() { return this._lastStatusText; };
TestShell.ResponseManager._setLastError = function(error, message) { this._lastError = error; };
TestShell.ResponseManager._setLastStatus = function(statusCode, statusText)
{
this._lastStatusCode = statusCode;
this._lastStatusText = statusText;
};
TestShell.ResponseManager.getPendingResponses = function() { return this._pendingResponses; };
TestShell.ResponseManager.getOutgoingResponses = function() { return this._outgoingResponses; };
TestShell.ResponseManager.resetQueue = function()
{
this._setLastError(TestShell.ResponseManager.Error.None);
this._attemptCount = 0;
};
TestShell.ResponseManager.clearQueue = function()
{
this._pingResponses = false;
this._pendingResponses = [];
this._outgoingResponses = [];
this.resetQueue();
};
TestShell.ResponseManager.ping = function()
{
this._pingResponses = true;
this.processQueue();
};
TestShell.ResponseManager.isSending = function() { return this._sending; };
TestShell.ResponseManager.sendResponse = function(response) { this.sendResponses([response]); };
TestShell.ResponseManager.sendResponses = function(responses)
{
for (var i = 0; i < responses.length; i++)
{
var response = responses[i];
if (this._pendingResponses.indexOf(response) == -1)
{
this.fireEvent('onQueue', response);
this._pendingResponses.push(response);
}
}
this.processQueue();
};
TestShell.ResponseManager.hasReachedMaxRetries = function()
{
return this._attemptCount > this._maxRetries;
};
TestShell.ResponseManager.hasFatalLastError = function()
{
return (this.getLastError() >= TestShell.ResponseManager.Error.HTTP);
};
TestShell.ResponseManager.processQueue = function()
{
if (this._timerDelay) this._timerDelay.cancel();
if (this._sending) return false;
if (this.hasReachedMaxRetries() || this.hasFatalLastError())
{
this.fireEvent('onFailure', this.getLastError());
return false;
}
var shiftQueues = function(fromArr, toArr)
{
var fromObj = null;
while ((fromObj = fromArr.pop()) != null)
{
if (toArr.indexOf(fromObj) == -1) toArr.push(fromObj);
}
};
shiftQueues(this._pendingResponses, this._outgoingResponses);
if (this._pingResponses || this._outgoingResponses.length > 0)
{
this._timerDelay = YAHOO.lang.later(1, this, this._sendOutgoing);
return true;
}
else if (TestShell.xhrManager.hasAction())
{
TestShell.xhrManager.processAction();
}
return false;
};
TestShell.ResponseManager._createUrl = function()
{
var urlBuilder = [];
urlBuilder.push(TDS.baseUrl);
urlBuilder.push('Pages/API/Response.axd/update');
var lastGroup = TestShell.PageManager.getLastGroup();
urlBuilder.push('?lastPage=' + (lastGroup ? lastGroup.pageNum : 0));
return urlBuilder.join('');
};
TestShell.ResponseManager._createRequest = function()
{
var timestamp = new Date().getTime();
var requestXml = TestShell.Xml.createRequest(this._attemptTotal, timestamp, this._outgoingResponses);
return requestXml;
};
TestShell.ResponseManager._sendOutgoing = function()
{
this._sending = true;
this._attemptCount++;
this._attemptTotal++;
var callback = {};
callback.success = this._sendSuccess;
callback.failure = this._sendFailure;
callback.timeout = this._timeout;
callback.scope = this;
Util.Array.each(this._outgoingResponses, function(outgoingResponse)
{
outgoingResponse.sequence++;
});
var url = this._createUrl();
var content = this._createRequest();
this._transaction = YUC.asyncRequest('POST', url, callback, content);
this.fireEvent('onSend', this._outgoingResponses);
};
TestShell.ResponseManager._sendFailure = function(xhrObj)
{
this._sending = false;
Util.log('TestShell.ResponseManager xhr failure: ' + xhrObj.statusText);
this._setLastStatus(xhrObj.status, xhrObj.statusText);
if (xhrObj.status == -1)
{
this._setLastError(TestShell.ResponseManager.Error.Timeout);
}
else if (xhrObj.status == 0)
{
this._setLastError(TestShell.ResponseManager.Error.Network);
}
else if (xhrObj.status == 403)
{
this._setLastError(TestShell.ResponseManager.Error.ReturnStatus);
}
else if (xhrObj.status == 500)
{
this._setLastError(TestShell.ResponseManager.Error.Server);
}
else
{
this._setLastError(TestShell.ResponseManager.Error.HTTP);
}
this.processQueue();
};
TestShell.ResponseManager._sendSuccess = function(xhrObj)
{
this._sending = false;
this._setLastStatus(xhrObj.status, xhrObj.statusText);
if (xhrObj.getAllResponseHeaders == '' && xhrObj.responseText == '')
{
this._setLastError(TestShell.ResponseManager.Error.Network);
this.processQueue();
return;
}
var xmlDoc = xhrObj.responseXML;
if (!TestShell.Xml.validResults(xmlDoc))
{
this._setLastError(TestShell.ResponseManager.Error.Xml);
this.processQueue();
return;
}
var results = TestShell.Xml.parseResults(xmlDoc);
if (results.updates)
{
Util.Array.each(results.updates, function(responseUpdate)
{
var responseSent = Util.Array.find(TestShell.ResponseManager.getOutgoingResponses(), function(responseOutgoing)
{
return (responseUpdate.position == responseOutgoing.position);
});
if (responseSent)
{
Util.Array.remove(TestShell.ResponseManager.getOutgoingResponses(), responseSent);
}
});
}
if (TestShell.ResponseManager.getOutgoingResponses().length > 0)
{
Util.log('ResponseManager possible problem: Outgoing responses were not all sent');
}
TestShell.testLengthMet = results.summary.testLengthMet;
TestShell.testFinished = results.summary.testFinished;
TestShell.Config.testLength = results.summary.testLength;
if (TestShell.PageManager.getGroups().length == 0 && results.groups.length == 0 && TestShell.testLengthMet)
{
TestShell.redirectReview();
return;
}
if (results.groups && results.groups.length > 0)
{
this.fireEvent('onGroups', results.groups);
}
this.fireEvent('onSuccess', results);
this._pingResponses = false;
this.resetQueue();
this.processQueue();
};
TestShell.ResponseManager.Events.onQueue.subscribe(function(response)
{
TestShell.UI.updateControls();
});
TestShell.ResponseManager.Events.onSuccess.subscribe(function(response)
{
TestShell.UI.updateControls();
});
TestShell.ResponseManager.Events.onFailure.subscribe(function(error)
{
TestShell.UI.hideLoading();
var logout = function()
{
TestShell.ResponseManager.clearQueue();
TestShell.redirectLogin();
};
if (TestShell.ResponseManager.hasFatalLastError())
{
var message = Messages.getAlt('TestShell.Label.ErrorLoggedOut', 'Error you will be logged out');
if (this.getLastError() == TestShell.ResponseManager.Error.ReturnStatus)
{
message = this.getLastStatusText();
}
TestShell.UI.showWarning(message, logout);
}
else
{
TestShell.UI.showErrorPrompt('ResponseError',
{
yes: function()
{
TestShell.ResponseManager.resetQueue();
TestShell.ResponseManager.processQueue();
},
no: logout
});
}
});

// FILE: testshell_Response.js (2b594653) 7/22/2014 5:26:22 PM

TestShell.Response = function(group)
{
this.group = group;
this.id = null;
this.itsBank = 0;
this.itsItem = 0;
this.position = 0;
this.sequence = 0;
this.dateCreated = null;
this.mark = false;
this.isSelected = false;
this.isRequired = false;
this.isValid = false;
this.prefetched = false;
this.value = null;
this.comment = '';
this.getItem = function()
{
var page = group.getContentPage();
if (page != null) return page.getItem(this.position);
return null;
};
};
TestShell.Response.prototype.reset = function()
{
this.sequence = 0;
this.value = null;
this.isSelected = false;
this.isValid = false;
this.mark = false;
this.comment = '';
};
TestShell.Response.prototype.setValue = function(data)
{
this.value = data;
this.isValid = true;
this.isSelected = true;
};
TestShell.Response.prototype.getLastValue = function()
{
if (this.value != null) return this.value;
var item = this.getItem();
if (item) return item.value;
return null;
};
TestShell.Response.prototype.isAnswered = function()
{
return (this.isSelected && this.isValid);
};
TestShell.Response.prototype.isDirty = function()
{
var item = this.getItem();
if (!item) return false;
if (item.format.toLowerCase() == 'mc') return false;
if (item.recorder) {
var recorderObj = TDS.Audio.Widget.getRecorder(item.recorder);
if (recorderObj) {
return recorderObj.dirty;
}
}
var itemResponse = item.getResponse();
if (!itemResponse) return false;
if (itemResponse.isReady === false) {
return false;
}
var currentResponse = itemResponse.value;
var previousResponse = this.getLastValue();
if (item.responseType.toLowerCase() == 'grid')
{
if (!item.grid || !item.grid.isLoaded()) return false;
if (previousResponse == null && !item.grid.isValid()) return false;
return item.grid.hasChanged(previousResponse);
}
if (itemResponse.isSelected != this.isSelected) return true;
if (previousResponse == null && (currentResponse == null || currentResponse.length == 0)) return false;
return (currentResponse != previousResponse);
};
TestShell.Response.prototype.undo = function()
{
var item = this.getItem();
if (!item || !item.recorder) return false;
var previousResponse = this.getLastValue();
if (previousResponse != null)
{
Util.log('recorder: undo - loadBase64Audio');
TDS.Audio.Recorder.loadBase64Audio(item.recorder.id, previousResponse);
}
return true;
};
TestShell.Response.prototype.toString = function()
{
return (this.position != null) ? this.position.toString() : '';
};
TestShell.Response.Status = function() {
this.id = null;
this.status = '';
this.reason = '';
};
function getResponseIDs(responses)
{
return Util.Array.reduce(responses, '', function(text, response)
{
return text + ((text.length == 0) ? '' : ', ') + response.position;
});
}

// FILE: testshell_Page.js (c25f36fc) 7/22/2014 5:26:22 PM

TestShell.Page = function(id)
{
this.id = id;
this.zoom = null;
this.navOption = null;
this._visited = false;
};
TestShell.Page.prototype.isShowing = function()
{
return (YUD.getStyle(this.container, 'display') == 'block');
};
TestShell.Page.prototype.show = function() { return true; };
TestShell.Page.prototype.hide = function() { return true; };
TestShell.Page.prototype.isCurrent = function()
{
return (this === TestShell.PageManager.getCurrent());
};
TestShell.Page.prototype.isVisible = function()
{
if (this.isCurrent()) return true;
var pages = TestShell.PageManager.getPages();
for (var i = 0; i < pages.length; i++) {
var page = pages[i];
if (page == null) return false;
if (this == page) return true;
if (!page.isCompleted()) return false;
}
return false;
};
TestShell.Page.prototype.isEnabled = function() {
if (this.isVisible() === false) {
return false;
} else {
return true;
}
};
TestShell.Page.prototype.requiresVisit = function() {
var segment = this.getSegment();
if (segment) {
var accProps = segment.getAccommodationProperties();
return (accProps && accProps.requirePageVisit());
}
return false;
};
TestShell.Page.prototype.setVisited = function() {
this._visited = true;
};
TestShell.Page.prototype.isVisited = function() {
if (this._visited) return true;
if (this.requiresVisit()) {
var nextPages = this.getNextPages();
for (var i = 0; i < nextPages.length; i++) {
var page = nextPages[i];
if (page._visited) {
return true;
}
}
}
return false;
};
TestShell.Page.prototype.isCompleted = function() {
return true;
};
TestShell.Page.prototype.getLabelGroup = function() {
return null;
};
TestShell.Page.prototype.getLabel = function() {
return 'Page ' + this.id;
};
TestShell.Page.prototype.hasLabel = function()
{
var label = this.getLabel();
return (label != null);
};
TestShell.Page.prototype.updateNavigationLabel = function(refPage)
{
if (!this.hasLabel()) return;
var labelGroup = this.getLabelGroup();
var labelText = this.getLabel(true);
if (this.navOption == null)
{
var navDropdown = YUD.get('ddlNavigation');
var navGroup = null;
if (YAHOO.lang.isObject(labelGroup))
{
var navGroups = navDropdown.getElementsByTagName('optgroup');
if (labelGroup.id)
{
navGroup = document.getElementById(labelGroup.id);
}
else
{
navGroup = YAHOO.Array.filter(navGroups, function(existingNavGroup)
{
return (labelGroup == existingNavGroup.label);
});
}
if (navGroup == null)
{
navGroup = HTML.OPTGROUP({ id: labelGroup.id, label: labelGroup.label });
if (refPage) YUD.insertBefore(navGroup, refPage.navOption);
else navDropdown.appendChild(navGroup);
}
}
else
{
navGroup = navDropdown;
}
this.navOption = HTML.OPTION({ value: this.id });
if (refPage) {
YUD.insertBefore(this.navOption, refPage.navOption);
} else if (navGroup) {
navGroup.appendChild(this.navOption);
}
}
this.navOption.text = labelText;
if (this.isEnabled())
{
this.navOption.disabled = false;
YUD.removeClass(this.navOption, 'disabled');
}
else
{
this.navOption.disabled = true;
YUD.addClass(this.navOption, 'disabled');
}
if (this.isVisible())
{
YUD.setStyle(this.navOption, 'display', '');
YUD.setStyle(this.navOption, 'visibility', '');
YUD.removeClass(this.navOption, 'hidden');
}
else
{
YUD.setStyle(this.navOption, 'display', 'none');
YUD.setStyle(this.navOption, 'visibility', 'hidden');
YUD.addClass(this.navOption, 'hidden');
}
};
TestShell.Page.prototype.hasContent = function()
{
return true;
};
TestShell.Page.prototype.requestContent = function(reload) {};
TestShell.Page.prototype.getScreenReaderText = function()
{
return 'Page is ready';
};
TestShell.Page.prototype.getSegment = function() { return null; };
TestShell.Page.prototype.getCoverPage = function() { return null; };
TestShell.Page.prototype.getNext = function()
{
var pages = TestShell.PageManager.getPages(true);
var idx = pages.indexOf(this);
return (idx != -1) ? pages[idx + 1] : null;
};
TestShell.Page.prototype.getPrevious = function()
{
var pages = TestShell.PageManager.getPages(true);
var idx = pages.indexOf(this);
return (idx != -1) ? pages[idx - 1] : null;
};
TestShell.Page.prototype.getNextPages = function(enabled) {
var pagesAfter = [];
var pages = TestShell.PageManager.getPages(enabled);
var idx = pages.indexOf(this);
if (idx != -1) {
for (var i = idx + 1; i < pages.length; i++) {
pagesAfter.push(pages[i]);
}
}
return pagesAfter;
};
TestShell.Page.prototype.getPreviousPages = function(enabled) {
var pagesBefore = [];
var pages = TestShell.PageManager.getPages(enabled);
var idx = pages.indexOf(this);
if (idx != -1) {
for (var i = 0; i < idx; i++) {
pagesBefore.push(pages[i]);
}
}
return pagesBefore;
};
TestShell.Page.prototype.toString = function() { return this.id; };
function getGroupIDs(groups)
{
return Y.Array.reduce(groups, '', function(text, group)
{
return text + ((text.length == 0) ? '' : ', ') + group.id;
});
}

// FILE: testshell_PageContent.js (76fa9bea) 7/22/2014 5:26:22 PM

TestShell.PageContent = function(id)
{
TestShell.PageContent.superclass.constructor.call(this, id);
this._requestCount = 0;
};
YAHOO.lang.extend(TestShell.PageContent, TestShell.Page);
TestShell.PageContent.prototype.getRequestCount = function() { return this._requestCount; };
TestShell.PageContent.prototype.getContentPage = function()
{
return ContentManager.getPage(this.id);
};
TestShell.PageContent.prototype.hasContent = function()
{
var contentPage = this.getContentPage();
return (contentPage != null &&
contentPage.getState() == ContentPage.State.Loaded);
};
TestShell.PageContent.prototype.requestContent = function(reload)
{
var contentPage = this.getContentPage();
var contentExists = (contentPage != null);
if (contentExists)
{
if (reload) ContentManager.removePage(contentPage);
else return false;
}
this._requestCount++;
return TestShell.ContentLoader.request(this);
};
TestShell.PageContent.prototype.show = function()
{
var contentPage = this.getContentPage();
if (contentPage) return contentPage.show();
else return false;
};
TestShell.PageContent.prototype.hide = function()
{
var contentPage = this.getContentPage();
if (contentPage) return contentPage.hide();
else return false;
};
TestShell.PageContent.prototype.getScreenReaderText = function()
{
var text = 'Page is ready. ';
var contentPage = this.getContentPage();
var itemCount = contentPage.getItems().length;
if (contentPage.getPassage() != null)
{
text += '1 Passage and ';
}
text += itemCount + ' Question';
if (itemCount > 1) text += 's';
return text;
};
TestShell.PageContent.prototype.createSoundCue = function() {
var Player = TDS.Audio.Player;
var Widget = TDS.Audio.Widget;
var contentPage = this.getContentPage();
if (contentPage == null || contentPage.soundCue == null) return false;
var id = 'soundcue-' + contentPage.soundCue.bankKey + '-' + contentPage.soundCue.itemKey;
var url = TestShell.getHandlersUrl('SoundCue.axd?bankKey=' + contentPage.soundCue.bankKey + '&itemKey=' + contentPage.soundCue.itemKey);
contentPage.soundCue.id = id;
var linkEl = YUD.get(id);
if (linkEl == null)
{
linkEl = HTML.A({
id: id,
href: url,
type: 'audio/ogg',
className: 'sound_cue',
style: 'display:none;'
});
YUD.get('soundCues').appendChild(linkEl);
Widget.createPlayer(linkEl);
}
contentPage.autoPlayQueue.insert(id);
return true;
};
TestShell.PageContent.prototype.showSoundCue = function()
{
var contentPage = this.getContentPage();
if (contentPage == null || contentPage.soundCue == null) return false;
var element = YUD.get(contentPage.soundCue.id);
if (element) {
YUD.setStyle(element, 'display', 'block');
}
return true;
};
TestShell.PageContent.prototype.hideSoundCue = function()
{
var contentPage = this.getContentPage();
if (contentPage == null || contentPage.soundCue == null) return false;
var element = YUD.get(contentPage.soundCue.id);
if (element) {
YUD.setStyle(element, 'display', 'none');
}
return true;
};
TestShell.PageContent.prototype.getMissingImages = function()
{
var missingImages = [];
var contentPage = this.getContentPage();
if (contentPage)
{
var images = contentPage.getImages();
for (var i = 0; i < images.length; i++)
{
var image = images[i];
if (image.state && image.state > 1) missingImages.push(image);
}
}
return missingImages;
};

// FILE: testshell_PageGroup.js (e8e50766) 7/22/2014 5:26:22 PM

TestShell.PageGroup = function(id)
{
TestShell.PageGroup.superclass.constructor.call(this, id);
this.pageNum = 0;
this.responses = [];
this.numRequired = -1;
this.segment = 0;
this.segmentID = null;
};
YAHOO.lang.extend(TestShell.PageGroup, TestShell.PageContent);
TestShell.PageGroup.prototype.getContentUrl = function()
{
var urlBuilder = [];
urlBuilder.push(TDS.baseUrl);
urlBuilder.push('Pages/API/Content.axd/loadGroup');
urlBuilder.push('?groupID=' + this.id);
urlBuilder.push('&page=' + this.pageNum);
urlBuilder.push('&datecreated=' + this.responses[0].dateCreated);
urlBuilder.push('&new=' + this.isNew());
urlBuilder.push('&attempt=' + this.getRequestCount());
return urlBuilder.join('');
};
TestShell.PageGroup.prototype.isNew = function()
{
return Util.Array.some(this.responses, function(r) {
return r.prefetched;
}, this);
};
TestShell.PageGroup.prototype.isEnabled = function()
{
var segment = this.getSegment();
if (segment && segment.isLocked()) {
return false;
}
return TestShell.PageGroup.superclass.isEnabled.call(this);
};
TestShell.PageGroup.prototype.isCompleted = function()
{
var numValid = 0;
for (var i = 0; i < this.responses.length; i++) {
var response = this.responses[i];
if (response.isSelected && response.isValid) {
numValid++;
}
else if (response.isRequired) {
return false;
}
}
var completed = (numValid >= this.numRequired);
if (completed && numValid === 0 && this.requiresVisit()) {
return this.isVisited();
}
return completed;
};
TestShell.PageGroup.prototype.isVisited = function() {
for (var i = 0; i < this.responses.length; i++) {
if (this.responses[i].isAnswered()) return true;
}
if (this.requiresVisit()) {
var nextPages = this.getNextPages();
for (var i = 0; i < nextPages.length; i++) {
var page = nextPages[i];
if (page instanceof TestShell.PageGroup) {
if (page.getNumAnswered() > 0) {
return true;
}
}
}
}
return TestShell.PageGroup.superclass.isVisited.call(this);
};
TestShell.PageGroup.prototype.getLabelGroup = function()
{
if (!TestShell.Config.showSegmentLabels) return null;
var segment = this.getSegment();
if (segment == null) return null;
var id = 'segment_' + segment.getSafeId();
return { id: id, label: segment.getLabel() };
};
TestShell.PageGroup.prototype.getLabel = function(showMarked)
{
var defaultAccProps = Accommodations.Manager.getDefaultProperties();
if (defaultAccProps && defaultAccProps.getNavigationDropdown() == 'TDS_NavTk')
{
return this.getLabelTask(showMarked);
}
var firstRes = this.responses[0];
var lastRes = this.responses[this.responses.length - 1];
var text = firstRes.position;
if (firstRes != lastRes)
{
text += ' - ' + lastRes.position;
}
if (showMarked && this.hasMark())
{
text += ' (' + Messages.get('TDSShellObjectsJS.Label.Marked') + ')';
}
return text;
};
TestShell.PageGroup.prototype.getLabelTask = function(showMarked)
{
var text = Messages.getAlt('TDSShellObjectsJS.Label.TaskLabel', 'Task ') + this.pageNum;
if (showMarked && this.hasMark())
{
text += ' (' + Messages.get('TDSShellObjectsJS.Label.Marked') + ')';
}
return text;
};
TestShell.PageGroup.prototype.toString = function()
{
return (this.pageNum > 0) ? this.pageNum.toString() : '';
};
TestShell.PageGroup.prototype.getNumAnswered = function()
{
var numAnswered = 0;
for (var i = 0; i < this.responses.length; i++)
{
var response = this.responses[i];
if (response.isSelected && response.isValid)
{
numAnswered++;
}
}
return numAnswered;
};
TestShell.PageGroup.prototype.getResponse = function(position)
{
return Util.Array.find(this.responses, function(response)
{
return response.position == position;
});
};
TestShell.PageGroup.prototype.hasMark = function()
{
var markedResponse = Util.Array.find(this.responses, function(response)
{
return response.mark;
});
return (markedResponse != null);
};
TestShell.PageGroup.prototype.getSegment = function()
{
return TestShell.SegmentManager.get(this.segmentID);
};
TestShell.PageGroup.prototype.getCoverPageInfo = function()
{
var contentPage = this.getContentPage();
if (contentPage == null) return null;
var items = contentPage.getItems();
if (items == null || items.length == 0) return null;
var contentItem = items[0];
if (contentItem.coverPage == null) return null;
var bankKey = contentItem.coverPage.bankKey;
var itemKey = contentItem.coverPage.itemKey;
var id = 'I-' + bankKey + '-' + itemKey;
return {
bankKey: bankKey,
itemKey: itemKey,
id: id
};
};
TestShell.PageGroup.prototype.hasCoverPage = function()
{
var cpInfo = this.getCoverPageInfo();
return (cpInfo != null);
};
TestShell.PageGroup.prototype.getCoverPage = function()
{
var cpInfo = this.getCoverPageInfo();
if (cpInfo == null) return null;
return TestShell.CoverPages.get(cpInfo.id);
};
TestShell.PageGroup.prototype.getInfo = function()
{
var responsesRequired = 0;
var responsesValid = 0;
for (var i = 0; i < this.responses.length; i++)
{
var response = this.responses[i];
if (response.isRequired) responsesRequired++;
if (response.isValid) responsesValid++;
}
return {
itemCount: this.responses.length,
groupRequired: this.numRequired,
itemsRequired: responsesRequired,
itemsAnswered: responsesValid
};
};

// FILE: testshell_PageResource.js (fa7e01db) 7/22/2014 5:26:22 PM

TestShell.PageResource = function(bankKey, itemKey, segmentID, label)
{
this._bankKey = bankKey;
this._itemKey = itemKey;
this._segmentID = segmentID;
this._label = label;
var id = 'I-' + bankKey + '-' + itemKey;
TestShell.PageResource.superclass.constructor.call(this, id);
};
YAHOO.lang.extend(TestShell.PageResource, TestShell.PageContent);
TestShell.PageResource.prototype.getContentUrl = function()
{
var urlBuilder = [];
urlBuilder.push(TDS.baseUrl);
urlBuilder.push('Pages/API/Content.axd/loadResource');
urlBuilder.push('?bankKey=' + this._bankKey);
urlBuilder.push('&itemKey=' + this._itemKey);
urlBuilder.push('&segmentID=' + this._segmentID);
return urlBuilder.join('');
};
TestShell.PageResource.prototype.getLabel = function() { return this._label; };

// FILE: testshell_PageReview.js (007e69a5) 7/22/2014 5:26:22 PM

TestShell.PageReview = function(segment)
{
TestShell.PageReview.superclass.constructor.call(this, segment.getSafeId());
this._segment = segment;
this._divReview = null;
this._confirmed = false;
this.init();
};
YAHOO.lang.extend(TestShell.PageReview, TestShell.Page);
TestShell.PageReview.prototype.init = function()
{
var divReviews = YUD.get('reviews');
this._divReview = HTML.DIV({ className: 'review' });
this._divReview.innerHTML = YUD.get('template_review').innerHTML;
TDS.Messages.Template.processLanguage(this._divReview);
divReviews.appendChild(this._divReview);
this.hide();
};
TestShell.PageReview.prototype.getSegment = function() { return this._segment; };
TestShell.PageReview.prototype.getLabel = function() { return 'Review'; };
TestShell.PageReview.prototype.isVisible = function()
{
var groups = this._segment.getGroups();
var anyGroupEnabled = Util.Array.some(groups, function(group) { return group.isEnabled(); });
if (!anyGroupEnabled) return false;
return TestShell.PageReview.superclass.isVisible.call(this);
};
TestShell.PageReview.prototype.hide = function()
{
ContentManager.Renderer.hide(this._divReview);
TestShell.PageManager.Events.fire('onHide', this);
};
TestShell.PageReview.prototype.show = function()
{
var divList = this._divReview.getElementsByTagName('ul')[0];
divList.innerHTML = '';
var groups = this._segment.getGroups();
groups = Util.Array.filter(groups, function(group) { return group.isEnabled(); });
Util.Array.each(groups, function(group)
{
var btnReview = HTML.A({ href: '#' }, '' + group.getLabel());
if (group instanceof TestShell.PageGroup && group.hasMark())
{
YUD.addClass(btnReview, 'marked');
}
YUE.on(btnReview, 'click', function()
{
TestShell.UI.Nodes.ddlNavigation.value = group.id;
TestShell.Navigation.change();
});
divList.appendChild(HTML.LI(null, btnReview));
});
ContentManager.Renderer.show(this._divReview);
TestShell.PageManager.Events.fire('onShow', this);
};
TestShell.PageReview.prototype.setConfirmed = function() { this._confirmed = true; };
TestShell.PageReview.prototype.isConfirmed = function() { return this._confirmed; };
TestShell.PageReview.prototype.isCompleted = function()
{
if (TDS.getPref('testshell.segments.disableReviewConfirm')) return true;
if (this.isConfirmed()) return true;
var segments = TestShell.SegmentManager.getSegments();
var segmentCurrIdx = segments.indexOf(this._segment);
var segmentsNext = Util.Array.slice(segments, segmentCurrIdx + 1);
for (var i = 0; i < segmentsNext.length; i++)
{
var segmentNext = segmentsNext[i];
var groups = segmentNext.getGroups();
for (var j = 0; j < groups.length; j++)
{
var group = groups[j];
if (group.isVisited()) return true;
}
}
return false;
};

// FILE: testshell_PageManager.js (9534c9c5) 7/22/2014 5:26:22 PM

TestShell.PageManager = {};
TestShell.PageManager.Events = new Util.EventManager(TestShell.PageManager);
TestShell.PageManager._initializing = true;
TestShell.PageManager._pageList = [];
TestShell.PageManager._pageLookup = {};
TestShell.PageManager._current = null;
TestShell.PageManager.getPages = function(isEnabled) {
if (isEnabled) {
return Util.Array.filter(this._pageList, function(page) {
return page.isEnabled();
});
}
return this._pageList.slice(0);
};
TestShell.PageManager.hasPages = function() {
return (this._pageList.length > 0);
};
TestShell.PageManager.getGroups = function(isEnabled) {
var pages = this.getPages(isEnabled);
var groups = [];
for (var i = 0; i < pages.length; i++) {
var page = pages[i];
if (page instanceof TestShell.PageGroup) {
groups.push(page);
}
}
return groups;
};
TestShell.PageManager.setCurrent = function(page) {
if (this._current != null) {
TestShell.PageManager.History.push(this._current);
}
Util.log('TestShell.PageManager.setCurrent: ' + (page == null ? 'NULL' : page.id));
this._current = page;
};
TestShell.PageManager.getCurrent = function() {
return this._current;
};
TestShell.PageManager.get = function(id) {
return this._pageLookup[id];
};
TestShell.PageManager.getResponse = function(position) {
var groups = this.getGroups();
for (var i = 0; i < groups.length; i++) {
var group = groups[i];
var response = group.getResponse(position);
if (response != null) {
return response;
}
}
return null;
};
TestShell.PageManager.getFirst = function(isEnabled) {
var pages = this.getPages(isEnabled);
return (pages.length > 0) ? pages[0] : null;
};
TestShell.PageManager.getFirstGroup = function(isEnabled) {
var groups = this.getGroups(isEnabled);
return (groups.length > 0) ? groups[0] : null;
};
TestShell.PageManager.getLast = function(isEnabled) {
var pages = this.getPages(isEnabled);
return (pages.length > 0) ? pages[pages.length - 1] : null;
};
TestShell.PageManager.getLastGroup = function(isEnabled) {
var groups = this.getGroups(isEnabled);
return (groups.length > 0) ? groups[groups.length - 1] : null;
};
TestShell.PageManager.isFirst = function() {
var page = this.getCurrent();
var firstPage = this.getFirst(true);
return (page != null && firstPage != null && page == firstPage);
};
TestShell.PageManager.isLast = function() {
var page = this.getCurrent();
var lastPage = this.getLast(true);
return (page != null && lastPage != null && page == lastPage);
};
TestShell.PageManager.getPrevious = function() {
var page = this.getCurrent();
if (page) {
var pages = this.getPages(true);
var idx = pages.indexOf(page);
if (idx != -1) {
return pages[idx - 1];
}
}
return null;
};
TestShell.PageManager.getNext = function() {
var page = this.getCurrent();
if (page) {
var pages = this.getPages(true);
var idx = pages.indexOf(page);
if (idx != -1) {
return pages[idx + 1];
}
}
return null;
};
TestShell.PageManager.moveBack = function() {
var backPage = this.getPrevious();
if (backPage) {
this.setCurrent(backPage);
return true;
}
return false;
};
TestShell.PageManager.moveNext = function() {
var nextPage = this.getNext();
if (nextPage) {
TestShell.PageManager.setCurrent(nextPage);
return true;
}
return false;
};
TestShell.PageManager.contains = function(page) {
return (this._pageList.indexOf(page) != -1);
};
TestShell.PageManager.addPage = function(newPage) {
this._pageLookup[newPage.id] = newPage;
this._pageList.push(newPage);
newPage.updateNavigationLabel();
};
TestShell.PageManager.insertPage = function(newPage, refPage) {
this._pageLookup[newPage.id] = newPage;
var refIdx = this._pageList.indexOf(refPage);
Util.Array.insertAt(this._pageList, newPage, refIdx);
newPage.updateNavigationLabel(refPage);
};
TestShell.PageManager._addGroup = function(group) {
var lastGroup = this.getLastGroup();
var segmentReview = null;
if (lastGroup && lastGroup.getSegment() != null && lastGroup.getSegment() != group.getSegment()) {
var segment = lastGroup.getSegment();
if (segment.showItemReview()) {
segmentReview = this.addReview(lastGroup.getSegment());
}
}
var foundExistingGroup = Util.Array.find(this.getGroups(), function(existingGroup) {
return group.id == existingGroup.id;
});
if (foundExistingGroup != null) {
return;
}
this.addPage(group);
if (this._initializing) {
if (TestShell.Config.reviewPage > 0) {
if (TestShell.Config.reviewPage == group.pageNum) {
this.setCurrent(group);
}
} else if (TestShell.Config.startPosition > 0) {
if (group.getResponse(TestShell.Config.startPosition) != null) {
this.setCurrent(group);
}
}
}
if (this.getCurrent() == null) {
var useGroup = false;
var groupInfo = group.getInfo();
if (!this._initializing) {
useGroup = true;
}
else if (!group.isCompleted()) {
useGroup = true;
}
else if (groupInfo.groupRequired == 0 && groupInfo.itemCount != groupInfo.itemsAnswered) {
useGroup = true;
}
if (segmentReview != null) {
this.setCurrent(segmentReview);
} else if (useGroup) {
this.setCurrent(group);
}
}
if (!this._initializing || !group.isCompleted()) {
group.requestContent();
}
};
TestShell.PageManager.addGroups = function(groups) {
Util.Array.each(groups, this._addGroup, this);
if (this._initializing) {
if (this.getCurrent() == null) {
this.setCurrent(groups[groups.length - 1]);
}
this._initializing = false;
} else {
if (this.getCurrent() == null) {
this.setCurrent(groups[0]);
}
}
if (TestShell.testLengthMet) {
var lastGroup = this.getLastGroup();
var lastSegment = lastGroup.getSegment();
if (lastSegment && lastSegment.showItemReview()) {
this.addReview(lastGroup.getSegment());
}
}
TestShell.Navigation.requestPage();
};
TestShell.PageManager.addReview = function(segment) {
var pageReview = new TestShell.PageReview(segment);
this.addPage(pageReview);
return pageReview;
};
TestShell.PageManager.clearCurrent = function() {
TestShell.PageManager.setCurrent(null);
};
TestShell.PageManager.swapCurrent = function(coverPage) {
TestShell.PageManager.clearCurrent();
TestShell.PageManager.History.pop();
TestShell.PageManager.setCurrent(coverPage);
TestShell.Navigation.requestPage();
};
TestShell.PageManager.isCompleted = function(onlyEnabled, onlyVisited) {
var groups = this.getGroups(onlyEnabled);
var notCompletedGroup = Util.Array.find(groups, function(group) {
if (onlyVisited && !group.isVisited()) {
return false;
}
return (!group.isCompleted());
});
return (notCompletedGroup == null);
};
TestShell.PageManager.History = new Util.Structs.Stack();
TestShell.ResponseManager.Events.onGroups.subscribe(function(groups) {
TestShell.PageManager.addGroups(groups);
});
TestShell.PageManager.getAccommodations = function(page) {
if (page == null) {
return null;
}
if (page instanceof TestShell.PageContent) {
var contentPage = page.getContentPage();
if (contentPage) {
return contentPage.getAccommodations();
}
} else {
var pageSegment = (typeof(page.getSegment) == 'function') ? page.getSegment() : null;
if (pageSegment) {
return Accommodations.Manager.get(pageSegment.getId());
}
}
return Accommodations.Manager.getCurrent();
};
TestShell.PageManager.updateAccommodations = function(currentPage) {
var previousPage = TestShell.PageManager.History.peek();
var currentAccs = TestShell.PageManager.getAccommodations(currentPage);
var previousAccs = TestShell.PageManager.getAccommodations(previousPage);
if (currentAccs == previousAccs) {
return;
}
Accommodations.Manager.updateCSS(document.body, currentAccs.getId());
};
TestShell.PageManager.Events.subscribe('onShow', function(page) {
TestShell.idleTimer.waitMins = TestShell.Config.interfaceTimeout;
TestShell.idleTimer.reset();
TestShell.autoSaveStart();
TestShell.PageManager.updateAccommodations(page);
var navEl = YUD.get('foot') || YUD.get('navigation');
var isPageContent = (page instanceof TestShell.PageContent);
if (navEl) {
navEl.className = '';
YUD.addClass(navEl, isPageContent ? 'Content_Yes' : 'Content_No');
}
if (isPageContent) {
var contentPage = page.getContentPage();
if (contentPage) {
page.showSoundCue();
contentPage.autoPlayQueue.start();
if (navEl) {
YUD.addClass(navEl, 'Layout_' + contentPage.layout);
var contentPassage = contentPage.getPassage();
if (contentPassage && !contentPassage.isEmpty()) {
YUD.addClass(navEl, 'Passage_Yes');
} else {
YUD.addClass(navEl, 'Passage_No');
}
}
}
}
TestShell.UI.showSave(page);
TestShell.Tools.updateShowing();
var navContainer = YUD.get('navigationContainer');
if (navContainer != null) {
if (page.hasLabel()) {
YUD.setStyle(navContainer, 'display', 'block');
} else {
YUD.setStyle(navContainer, 'display', 'none');
}
}
setTimeout(function() {
if (isPageContent && ContentManager.enableARIA) {
var contentFocuser = YUD.get('contentsFocuser');
if (contentFocuser) {
contentFocuser.innerHTML = page.getScreenReaderText();
contentFocuser.focus();
}
} else {
var contentPage = ContentManager.getCurrentPage();
if (contentPage) {
Util.Dom.focus(contentPage.getWin());
}
if (Util.Browser.isMac()) {
Util.Dom.focus(top);
}
}
}, 1);
});
TestShell.PageManager.Events.subscribe('onHide', function(page) {
if (page instanceof TestShell.PageContent) {
page.hideSoundCue();
}
});

// FILE: testshell_ContentLoader.js (ebe21d89) 7/22/2014 5:26:22 PM

TestShell.ContentLoader =
{
_requests: []
};
TestShell.ContentLoader.lookupGroup = function(request)
{
var groupID = request.getId();
var group = TestShell.PageManager.get(groupID);
return group;
};
TestShell.ContentLoader._xhrManager = new TDS.XhrManager(120000, 2);
TestShell.ContentLoader.Events = new Util.EventManager();
TestShell.ContentLoader._createRequest = function(group)
{
var url = group.getContentUrl();
var request = this._xhrManager.createRequest(group.id, url, 'POST', null, this._processResponse, this);
request.setArgs(
{
showProgress: false,
showDialog: true,
allowRetry: true,
forceLogout: true
});
return request;
};
TestShell.ContentLoader.isRequesting = function(group)
{
return Util.Array.contains(this._requests, group);
};
TestShell.ContentLoader.request = function(group)
{
if (this.isRequesting(group)) return false;
this._requests.push(group);
var request = TestShell.ContentLoader._createRequest(group);
var delay = (this._requests.length > 1) ? (this._requests.length * 1000) : 0;
YAHOO.lang.later(delay, this, function()
{
this._xhrManager.sendRequest(request);
this.Events.fire('onRequest', group);
});
return true;
};
TestShell.ContentLoader._processResponse = function(request)
{
var group = TestShell.ContentLoader.lookupGroup(request);
if (group == null) return;
Util.Array.remove(this._requests, group);
var xmlDoc = request.getResponseXml();
if (xmlDoc != null)
{
this.Events.fire('onSuccess', group, request);
this._processXml(group, xmlDoc);
}
else
{
this.Events.fire('onFailure', group, request);
}
};
TestShell.ContentLoader._processXml = function(group, xmlDoc)
{
var contentPage = group.getContentPage();
if (contentPage)
{
try
{
ContentManager.removePage(contentPage);
}
catch (e) { }
}
var xmlContents = ContentManager.Xml.create(xmlDoc);
contentPage = ContentManager.createPage(xmlContents[0]);
contentPage.render();
};
TestShell.ContentLoader._xhrManager.Events.subscribe('onError', function(request, errorMessage, retriable, logout)
{
var group = TestShell.ContentLoader.lookupGroup(request);
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup != null && currentGroup != group) return;
TestShell.UI.hideLoading();
if (retriable)
{
errorMessage += ' ' + Messages.getAlt('Messages.Label.XHRError', 'Select Yes to try again or No to logout.');
TDS.Dialog.showPrompt(errorMessage,
function()
{
TestShell.Navigation.requestPage();
},
function()
{
if (logout) TestShell.redirectLogin();
});
}
else
{
TDS.Dialog.showWarning(errorMessage, function()
{
if (logout) TestShell.redirectLogin();
});
}
});

// FILE: testshell_SegmentManager.js (a8d8ad8b) 7/22/2014 5:26:22 PM

TestShell.Segment = function(id, position, label, isPermeable, entryApproval, exitApproval, itemReview, updatePermeable)
{
this._id = id;
this._position = position;
this._label = label;
this._isPermeable = isPermeable;
this._entryApproval = entryApproval;
this._exitApproval = exitApproval;
this._showItemReview = itemReview;
this._updatePermeable = YAHOO.lang.isNumber(updatePermeable) ? updatePermeable : isPermeable;
this._requireEntryApproval = (entryApproval > TestShell.Segment.Approval.Never);
this._requireExitApproval = (exitApproval > TestShell.Segment.Approval.Never);
this._inside = false;
};
TestShell.Segment.Approval =
{
Never: 0,
Always: 1,
FirstTime: 2
};
TestShell.Segment.prototype.enter = function()
{
this._inside = true;
this._requireEntryApproval = false;
if (this._exitApproval == TestShell.Segment.Approval.Always)
{
this._requireExitApproval = true;
}
this._isPermeable = this._updatePermeable;
TestShell.SegmentManager.Events.fire('onTransitionEnter', this);
};
TestShell.Segment.prototype.exit = function()
{
this._inside = false;
this._requireExitApproval = false;
if (this._entryApproval == TestShell.Segment.Approval.Always)
{
this._requireEntryApproval = true;
}
TestShell.SegmentManager.Events.fire('onTransitionExit', this);
};
TestShell.Segment.prototype.isInside = function() { return this._inside; };
TestShell.Segment.prototype.getId = function() { return this._id; };
TestShell.Segment.prototype.getPosition = function() { return this._position; };
TestShell.Segment.prototype.getLabel = function() { return this._label; };
TestShell.Segment.prototype.isPermeable = function() { return this._isPermeable > 0; };
TestShell.Segment.prototype.showItemReview = function() { return this._showItemReview; };
TestShell.Segment.prototype.getSafeId = function()
{
var id = this.getId();
id = id.replace( /\s+/g , '');
id = id.replace( /[^A-Za-z0-9]+/gi , '');
return id;
};
TestShell.Segment.prototype.requireEntryApproval = function() { return this._requireEntryApproval; };
TestShell.Segment.prototype.requireExitApproval = function() { return this._requireExitApproval; };
TestShell.Segment.prototype.toString = function() { return this._id; };
TestShell.Segment.prototype.getGroups = function()
{
var testGroups = TestShell.PageManager.getGroups();
return Util.Array.filter(testGroups, function(group)
{
return (this._id == group.segmentID);
}, this);
};
TestShell.Segment.prototype.hasGroups = function()
{
return (this.getGroups().length > 0);
};
TestShell.Segment.prototype.getFirstGroup = function()
{
var groups = this.getGroups();
return (groups.length > 0) ? groups[0] : null;
};
TestShell.Segment.prototype.getLastGroup = function()
{
var groups = this.getGroups();
return (groups.length > 0) ? groups[groups.length - 1] : null;
};
TestShell.Segment.prototype.isCompleted = function()
{
var groups = this.getGroups();
return Util.Array.every(groups, function(group)
{
return group.isCompleted();
});
};
TestShell.Segment.prototype.isLengthMet = function()
{
if (TestShell.testLengthMet) return true;
var nextSegment = TestShell.SegmentManager.getByPosition(this._position);
if (nextSegment)
{
return (nextSegment.hasGroups());
}
return false;
};
TestShell.Segment.prototype.isFinished = function()
{
return (this.isLengthMet() && this.isCompleted());
};
TestShell.Segment.prototype.isLocked = function()
{
return (!this.isInside() && !this.isPermeable() && this.isFinished());
};
TestShell.Segment.prototype.getAccommodations = function() {
return Accommodations.Manager.get(this._id);
};
TestShell.Segment.prototype.getAccommodationProperties = function()
{
return Accommodations.Manager.getProperties(this._id);
};
TestShell.SegmentManager =
{
_segments: new Util.Structs.Map(),
_segmentPositions: new Util.Structs.Map(),
_currentSegment: null,
_enteringSegment: null,
_exitingSegment: null,
_transitionState: null,
_approvalState: null,
_pollTimer: null,
_checkApprovalTimestamp: null,
Events: new Util.EventManager()
};
TestShell.SegmentManager.TransitionState =
{
Begin: 1,
Exiting: 2,
Entering: 3,
End: 4
};
TestShell.SegmentManager.XhrState =
{
None: 1,
Request: 2,
Waiting: 3,
Checking: 4,
Error: 5
};
TestShell.SegmentManager.ApprovalStatus =
{
Waiting: 0,
Approved: 1,
Denied: 2,
Logout: 3
};
TestShell.SegmentManager.init = function()
{
Util.Array.each(window.tdsSegments, function(tdsSegment)
{
var segment = new TestShell.Segment(
tdsSegment.id, tdsSegment.position, tdsSegment.label, tdsSegment.isPermeable,
tdsSegment.entryApproval, tdsSegment.exitApproval, tdsSegment.itemReview, tdsSegment.updatePermeable);
this._segments.set(tdsSegment.id, segment);
this._segmentPositions.set(tdsSegment.position, segment);
}, this);
this._transitionState = TestShell.SegmentManager.TransitionState.End;
this._approvalState = TestShell.SegmentManager.XhrState.None;
this._poll();
};
TestShell.SegmentManager.getSegments = function()
{
return this._segments.getValues();
};
TestShell.SegmentManager.get = function(id)
{
if (YAHOO.lang.isObject(id)) return id;
return this._segments.get(id);
};
TestShell.SegmentManager.getByPosition = function(position)
{
return this._segmentPositions.get(position);
};
TestShell.SegmentManager.getCurrent = function() { return this._currentSegment; };
TestShell.SegmentManager.getTransitionState = function() { return this._transitionState; };
TestShell.SegmentManager._setTransitionState = function(newState)
{
if (this._transitionState != newState)
{
this._transitionState = newState;
this.Events.fire('onTransitionChange', newState);
}
};
TestShell.SegmentManager.getXhrState = function() { return this._approvalState; };
TestShell.SegmentManager._setXhrState = function(newState)
{
if (this._approvalState != newState)
{
this._approvalState = newState;
this.Events.fire('onApprovalChange', newState);
}
};
TestShell.SegmentManager._getCheckApprovalTimestamp = function() { return this._checkApprovalTimestamp; };
TestShell.SegmentManager._setCheckApprovalTimestamp = function() { this._checkApprovalTimestamp = Util.Date.now(); };
TestShell.SegmentManager.transition = function(enterSegment)
{
if (this.getTransitionState() != TestShell.SegmentManager.TransitionState.End) return false;
enterSegment = this.get(enterSegment);
if (enterSegment == null) return true;
var currentSegment = this.getCurrent();
if (currentSegment == enterSegment) return true;
this._setTransitionState(TestShell.SegmentManager.TransitionState.Begin);
this._currentSegment = null;
this._exitingSegment = currentSegment;
this._enteringSegment = enterSegment;
this._process();
return (this.getTransitionState() == TestShell.SegmentManager.TransitionState.End);
};
TestShell.SegmentManager._poll = function()
{
if (this._pollTimer) this._pollTimer.cancel();
this._process();
this._pollTimer = YAHOO.lang.later(500, this, this._poll);
};
TestShell.SegmentManager._process = function()
{
if (this.getTransitionState() == TestShell.SegmentManager.TransitionState.End) return;
if (this.getXhrState() == TestShell.SegmentManager.XhrState.Request ||
this.getXhrState() == TestShell.SegmentManager.XhrState.Checking) return;
if (TestShell.ResponseManager.getPendingResponses().length > 0 ||
TestShell.ResponseManager.getOutgoingResponses().length > 0) return;
if (TestShell.ContentLoader._xhrManager.getOutstandingCount() > 0) return;
if (this.getXhrState() == TestShell.SegmentManager.XhrState.Waiting)
{
var checkTimestamp = this._getCheckApprovalTimestamp();
var currentTimestamp = Util.Date.now();
var poll = (currentTimestamp - checkTimestamp);
if (poll > 5000)
{
this._checkApproval();
}
return;
}
if (this.getXhrState() == TestShell.SegmentManager.XhrState.None &&
this.getTransitionState() == TestShell.SegmentManager.TransitionState.Begin)
{
if (this._exitingSegment)
{
this._requestExit(this._exitingSegment);
}
}
if (this.getXhrState() == TestShell.SegmentManager.XhrState.None &&
(this.getTransitionState() == TestShell.SegmentManager.TransitionState.Begin ||
this.getTransitionState() == TestShell.SegmentManager.TransitionState.Exiting))
{
if (this._exitingSegment)
{
this._exitingSegment.exit();
this._exitingSegment = null;
}
this._requestEntry(this._enteringSegment);
}
if (this.getXhrState() == TestShell.SegmentManager.XhrState.None &&
this.getTransitionState() == TestShell.SegmentManager.TransitionState.Entering)
{
if (this._enteringSegment)
{
this._enteringSegment.enter();
this._currentSegment = this._enteringSegment;
this._enteringSegment = null;
}
this._setTransitionState(TestShell.SegmentManager.TransitionState.End);
TestShell.Navigation.requestPage();
}
};
TestShell.SegmentManager._requestExit = function(segment)
{
this._setTransitionState(TestShell.SegmentManager.TransitionState.Exiting);
if (segment.requireExitApproval())
{
this._setXhrState(TestShell.SegmentManager.XhrState.Request);
var request = { position: segment.getPosition(), approval: 'exit' };
TestShell.xhrManager.waitForSegmentApproval(request, function(obj)
{
TestShell.SegmentManager._setCheckApprovalTimestamp();
TestShell.SegmentManager._setXhrState(TestShell.SegmentManager.XhrState.Waiting);
});
return;
}
};
TestShell.SegmentManager._requestEntry = function(segment)
{
this._setTransitionState(TestShell.SegmentManager.TransitionState.Entering);
if (segment.requireEntryApproval())
{
this._setXhrState(TestShell.SegmentManager.XhrState.Request);
var request = { position: segment.getPosition(), approval: 'entry' };
TestShell.xhrManager.waitForSegmentApproval(request, function(obj)
{
TestShell.SegmentManager._setCheckApprovalTimestamp();
TestShell.SegmentManager._setXhrState(TestShell.SegmentManager.XhrState.Waiting);
});
return;
}
};
TestShell.SegmentManager._checkApproval = function()
{
this._setXhrState(TestShell.SegmentManager.XhrState.Request);
TestShell.xhrManager.checkForSegmentApproval(function(approval)
{
TestShell.SegmentManager._setCheckApprovalTimestamp();
if (approval == null)
{
TestShell.SegmentManager._setXhrState(TestShell.SegmentManager.XhrState.Error);
}
else if (approval.status == TestShell.SegmentManager.ApprovalStatus.Denied)
{
TestShell.SegmentManager.deniedApproval(approval);
}
else if (approval.status == TestShell.SegmentManager.ApprovalStatus.Approved)
{
TestShell.SegmentManager._setXhrState(TestShell.SegmentManager.XhrState.None);
}
else
{
TestShell.SegmentManager._setXhrState(TestShell.SegmentManager.XhrState.Waiting);
}
});
};
TestShell.SegmentManager.deniedApproval = function(approval)
{
TestShell.SegmentManager._setXhrState(TestShell.SegmentManager.XhrState.Error);
var deniedMessage;
if (approval.comment != null && approval.comment.length > 0) {
deniedMessage = approval.comment;
} else {
deniedMessage = Messages.get('TestShell.Segment.Denied');
}
TDS.Dialog.showAlert(deniedMessage, function() {
TDS.logout();
});
};
TestShell.SegmentManager.checkPermeability = function(segment)
{
if (segment.isLocked());
{
var groups = segment.getGroups();
Util.Array.each(groups, function(group)
{
group.updateNavigationLabel();
});
}
};
TestShell.SegmentManager.Events.subscribe('onTransitionExit', function(segment)
{
TestShell.SegmentManager.checkPermeability(segment);
if (TestShell.xhrManager.inProgress('exitSegment'))
{
TestShell.xhrManager.abort('exitSegment');
}
var request = { position: segment.getPosition() };
TestShell.xhrManager.exitSegment(request, function(obj) {});
});
TestShell.SegmentManager.getTransitionName = function(state)
{
switch (state)
{
case TestShell.SegmentManager.TransitionState.Begin: return 'begin';
case TestShell.SegmentManager.TransitionState.Exiting: return 'exiting';
case TestShell.SegmentManager.TransitionState.Entering: return 'entering';
case TestShell.SegmentManager.TransitionState.End: return 'end';
}
return null;
};
TestShell.SegmentManager.getApprovalName = function(state)
{
switch (state)
{
case TestShell.SegmentManager.XhrState.None: return 'none';
case TestShell.SegmentManager.XhrState.Request: return 'request';
case TestShell.SegmentManager.XhrState.Waiting: return 'waiting';
case TestShell.SegmentManager.XhrState.Checking: return 'checking';
}
return null;
};
TestShell.SegmentManager.Events.subscribe('onTransitionChange', function(state)
{
var stateName = TestShell.SegmentManager.getTransitionName(state);
Util.log('SEGMENT TRANSITION: ' + stateName);
});
TestShell.SegmentManager.Events.subscribe('onApprovalChange', function(state)
{
var stateName = TestShell.SegmentManager.getApprovalName(state);
Util.log('SEGMENT APPROVAL: ' + stateName);
});
TestShell.SegmentManager.getDebug = function()
{
var segments = TestShell.SegmentManager.getSegments();
var debugSegments = [];
var getApprovalFormatted = function(approval)
{
switch (approval)
{
case TestShell.Segment.Approval.Never: return 'never';
case TestShell.Segment.Approval.Always: return 'always';
case TestShell.Segment.Approval.FirstTime: return 'first';
}
return null;
};
Util.Array.each(segments, function(segment)
{
var debugSegment =
{
'id': segment.getId(),
'position': segment.getPosition(),
'current': (TestShell.SegmentManager._currentSegment == segment),
'entering': (TestShell.SegmentManager._enteringSegment == segment),
'exiting': (TestShell.SegmentManager._exitingSegment == segment),
'item review': segment.showItemReview(),
'permeable': segment.isPermeable(),
'entry approval': getApprovalFormatted(segment._entryApproval),
'entry required': segment.requireEntryApproval(),
'exit approval': getApprovalFormatted(segment._exitApproval),
'exit required': segment.requireExitApproval(),
'groups': segment.hasGroups(),
'completed': segment.isCompleted(),
'length met': segment.isLengthMet(),
'finished': segment.isFinished(),
'locked': segment.isLocked(),
'inside': segment.isInside()
};
debugSegments.push(debugSegment);
});
return debugSegments;
};
TestShell.SegmentManager.writeDebug = function()
{
var debugSegments = TestShell.SegmentManager.getDebug();
console.table(debugSegments);
};

// FILE: testshell_Frame.js (c3b2739b) 7/22/2014 5:26:22 PM

TestShell.Frame =
{
getWriting: function()
{
var contentPage = ContentManager.getCurrentPage();
return (contentPage && contentPage.writing) ? contentPage.writing : null;
},
getBody: function()
{
var contentPage = ContentManager.getCurrentPage();
return (contentPage) ? contentPage.getBody() : null;
}
};

// FILE: testshell_Navigation.js (88acc14a) 7/22/2014 5:26:22 PM

TestShell.Navigation = {};
TestShell.Navigation.State =
{
Initializing: 'init',
Change: 'change',
Back: 'back',
Next: 'next',
Viewing: 'view'
};
TestShell.Navigation._currentState = TestShell.Navigation.State.Initializing;
TestShell.Navigation.getState = function() { return this._currentState; };
TestShell.Navigation.setState = function(state) { this._currentState = state; };
TestShell.Navigation.createWorkflow = function(fromGroup, toGroup)
{
var taskWorkflow = new Util.TaskWorkflow();
taskWorkflow.add(TestShell.Validation.checkAudioPlaying);
taskWorkflow.add(TestShell.Validation.checkGrid);
taskWorkflow.add(TestShell.Validation.checkDirtyResponses);
taskWorkflow.add(TestShell.Validation.checkAudioRecording);
taskWorkflow.add(TestShell.Validation.checkRecorderQuality);
taskWorkflow.add(TestShell.Validation.checkIfPromptSelected);
taskWorkflow.add(TestShell.Validation.checkSimulatorPlaying, 'SimulatorPlayingWhileNavigating');
var transition = { from: fromGroup, to: toGroup };
taskWorkflow.add(TestShell.Validation.checkSegment, transition);
if (TDS.isProxyLogin)
{
taskWorkflow.add(TestShell.save, TestShell, true);
taskWorkflow.add(TestShell.Validation.checkOptionalUnanswered);
}
return taskWorkflow;
};
TestShell.Navigation.change = function()
{
var currentGroup = TestShell.PageManager.getCurrent();
var selectedGroup = TestShell.PageManager.get(TestShell.UI.Nodes.ddlNavigation.value);
var taskWorkflow = TestShell.Navigation.createWorkflow(currentGroup, selectedGroup);
taskWorkflow.start(this._changeInternal, this);
};
TestShell.Navigation._changeInternal = function()
{
TestShell.save();
var currentGroup = TestShell.PageManager.getCurrent();
var groupID = TestShell.UI.Nodes.ddlNavigation.value;
var selectedGroup = TestShell.PageManager.get(groupID);
if (!selectedGroup.isVisible())
{
this.update();
this.reset();
TestShell.UI.showWarning(ErrorCodes.get('NextUnanswered'));
Util.log('TestShell.changePage (FAIL: not visible): ' + selectedGroup.id);
return;
}
else
{
Util.log('TestShell.changePage: ' + selectedGroup.id);
}
TestShell.Navigation.setState(TestShell.Navigation.State.Change);
if (currentGroup) currentGroup.hide();
TestShell.PageManager.setCurrent(selectedGroup);
this.requestPage();
};
TestShell.Navigation.back = function()
{
var currentGroup = TestShell.PageManager.getCurrent();
var previousGroup = TestShell.PageManager.getPrevious();
var taskWorkflow = TestShell.Navigation.createWorkflow(currentGroup, previousGroup);
taskWorkflow.start(this._backInternal, this);
};
TestShell.Navigation._backInternal = function()
{
if (TestShell.PageManager.isFirst())
{
Util.log('TestShell.backPage: You are currently on the first page cannot move back.');
return;
}
TestShell.save();
var currentGroup = TestShell.PageManager.getCurrent();
var previousGroup = TestShell.PageManager.getPrevious();
Util.log('TestShell.backPage: ' + (previousGroup ? previousGroup.id : 'none') + ' (current: ' + (currentGroup ? currentGroup.id : 'none') + ')');
TestShell.Navigation.setState(TestShell.Navigation.State.Back);
if (currentGroup) currentGroup.hide();
TestShell.PageManager.setCurrent(previousGroup);
this.requestPage();
};
TestShell.Navigation.next = function()
{
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup instanceof TestShell.PageReview) currentGroup.setConfirmed();
var nextGroup = TestShell.PageManager.getNext();
var taskWorkflow = TestShell.Navigation.createWorkflow(currentGroup, nextGroup);
taskWorkflow.start(this._nextInternal, this);
};
TestShell.Navigation._nextInternal = function()
{
TestShell.save();
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup && !currentGroup.isCompleted())
{
TestShell.UI.showWarning(ErrorCodes.get('NextUnanswered'));
return;
}
if (TestShell.PageManager.isLast() && TestShell.testLengthMet)
{
if (!TDS.showItemScores) TestShell.UI.showWarning(ErrorCodes.get('NextTestFinished'));
return;
}
var nextGroup = TestShell.PageManager.getNext();
Util.log('TestShell.nextPage: ' + (nextGroup ? nextGroup.id : 'waiting') + ' (current: ' + (currentGroup ? currentGroup.id : 'none') + ')');
TestShell.Navigation.setState(TestShell.Navigation.State.Next);
if (currentGroup) currentGroup.hide();
TestShell.PageManager.setCurrent(nextGroup);
this.requestPage();
};
TestShell.Navigation._lastRequestedGroup = null;
TestShell.Navigation.requestPage = function()
{
var group = TestShell.PageManager.getCurrent();
if (group == null)
{
Util.log('TestShell.UI.requestPage (no group)');
TestShell.UI.showLoading(Messages.getAlt('TestShell.UI.WaitNextPage', 'Waiting for the next page.'));
return;
}
if (TestShell.Navigation._lastRequestedGroup != group)
{
TestShell.Navigation._lastRequestedGroup = group;
TestShell.Audit.add(group.id, 'page-requested');
}
if (!group.hasContent())
{
Util.log('TestShell.UI.requestPage: ' + group.id + ' (no iframe)');
TestShell.UI.showLoading(Messages.getAlt('TestShell.UI.LoadingContent', 'Loading the page content.'));
group.requestContent();
return;
}
if (group.isShowing())
{
Util.log('TestShell.UI.requestPage: ' + group.id + ' (already viewing)');
return;
}
var currentSegment = group.getSegment();
if (!TestShell.SegmentManager.transition(currentSegment))
{
TestShell.UI.showLoading(Messages.getAlt('TestShell.UI.WaitSegmentApproval', 'Waiting for segment approval.'));
return;
}
if (group.show() === false)
{
Util.log('TestShell.UI.requestPage: ' + group.id + ' (cancelled)');
return;
}
Util.log('TestShell.UI.requestPage: ' + group.id + ' (viewing)');
TestShell.Navigation.setState(TestShell.Navigation.State.Viewing);
group.setVisited();
TestShell.UI.updateControls();
if (group.navOption != null) group.navOption.selected = true;
TestShell.UI.hideLoading();
};
TestShell.Navigation.reset = function()
{
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup != null && currentGroup.navOption != null) currentGroup.navOption.selected = true;
};
TestShell.Navigation.update = function()
{
Util.Array.each(TestShell.PageManager.getPages(), function(page)
{
page.updateNavigationLabel();
});
};

// FILE: testshell_Tools.js (4b95969d) 7/22/2014 5:26:22 PM

TestShell.Tools = {};
TestShell.Tools.init = function()
{
TDS.ToolManager.init();
};
TestShell.Tools.toggleHelp = function()
{
var key = 'Global.Path.Help';
var id = 'tool-' + key;
var panel = TDS.ToolManager.get(id);
if (panel == null)
{
var headerText = window.Messages.getAlt('TestShell.Label.HelpGuide', 'Help');
panel = TDS.ToolManager.createPanel(id, 'helpguide', headerText, null, key);
}
TDS.ToolManager.toggle(panel);
};
TestShell.Tools.toggleFormula = function()
{
var contentPage = ContentManager.getCurrentPage();
var accProps = contentPage.getAccommodationProperties();
if (!accProps.hasFormula()) return;
var key = accProps.getFormula();
var id = 'tool-' + key;
var panel = TDS.ToolManager.get(id);
if (panel == null)
{
var headerText = window.Messages.getAlt('TestShell.Label.Formulas', 'Formula');
panel = TDS.ToolManager.createPanel(id, 'formula', headerText, null, key);
}
TDS.ToolManager.toggle(panel);
};
TestShell.Tools.togglePeriodicTable = function()
{
var contentPage = ContentManager.getCurrentPage();
var accProps = contentPage.getAccommodationProperties();
if (!accProps.hasPeriodicTable()) return;
var key = accProps.getPeriodicTable();
var id = 'tool-' + key;
var panel = TDS.ToolManager.get(id);
if (panel == null)
{
var headerText = window.Messages.getAlt('TestShell.Label.PeriodicTable', 'Periodic Table');
panel = TDS.ToolManager.createPanel(id, 'periodictable', headerText, null, key);
}
TDS.ToolManager.toggle(panel);
};
TestShell.Tools.updateShowing = function()
{
if (this._count) YUD.addClass(TestShell.Frame.getBody(), TestShell.UI.CSS.popupShowing);
else YUD.removeClass(TestShell.Frame.getBody(), TestShell.UI.CSS.popupShowing);
};
TDS.ToolManager.Events.subscribe('onLoaded', function(panel)
{
var frame = panel.getFrame();
var frameDoc = Util.Dom.getFrameContentDocument(frame);
TestShell.UI.zoom.addDocument(frameDoc, true);
TestShell.UI.zoom.refresh();
});
TDS.ToolManager.Events.subscribe('onShow', function(panel) {
YUD.addClass(document.body, 'showingTools');
});
TDS.ToolManager.Events.subscribe('onHide', function(panel) {
YUD.removeClass(document.body, 'showingTools');
});

// FILE: testshell_Calculator.js (2e63e245) 7/22/2014 5:26:22 PM

TestShell.Calculator = {};
TestShell.Calculator._calcMapping = {};
TestShell.Calculator._calcMapping['Basic'] = 'TDS_CalcBasic';
TestShell.Calculator._calcMapping['StandardMem'] = 'TDS_CalcStdMem';
TestShell.Calculator._calcMapping['Standard'] = 'TDS_CalcStd';
TestShell.Calculator._calcMapping['Scientific'] = 'TDS_CalcSci';
TestShell.Calculator._calcMapping['ScientificInv'] = 'TDS_CalcSciInv';
TestShell.Calculator._calcMapping['Graphing'] = 'TDS_CalcGraphing';
TestShell.Calculator._calcMapping['GraphingInv'] = 'TDS_CalcGraphingInv';
TestShell.Calculator._calcMapping['Matrices'] = 'TDS_CalcMatrices';
TestShell.Calculator._calcMapping['Regression'] = 'TDS_CalcRegress';
TestShell.Calculator.getCode = function(calcType)
{
return TestShell.Calculator._calcMapping[calcType];
};
TestShell.Calculator.toggle = function()
{
var contentPage = ContentManager.getCurrentPage();
if (contentPage == null) return;
var accProps = contentPage.getAccommodationProperties();
if (accProps == null || !accProps.hasCalculator()) return;
var calcModes = accProps.getCalculator();
for (var calcName in TestShell.Calculator._calcMapping)
{
var calcCode = TestShell.Calculator._calcMapping[calcName];
calcModes = calcModes.replace(calcCode, calcName);
}
var id = 'tool-calculator-' + calcModes.replace(/&/g, "-");
var calcUrl = "../Scripts/Calculator/TDSCalculator.xhtml?mode=" + calcModes.replace(/&/g, ",");
var panel = TDS.ToolManager.get(id);
if (panel == null)
{
panel = TestShell.Calculator.create(id, calcUrl);
}
TDS.ToolManager.toggle(panel);
};
TestShell.Calculator.getInstance = function(id)
{
var frameCalc = document.getElementById('frame-' + id);
if (!frameCalc || !frameCalc.contentWindow) return null;
var winCalc = frameCalc.contentWindow;
if (!YAHOO.lang.isFunction(winCalc.getWorkingCalcInstance)) return null;
var calcInstance = winCalc.getWorkingCalcInstance();
if (calcInstance != null && YAHOO.lang.isFunction(calcInstance.setInitKeyboardElement)) return calcInstance;
return null;
};
TestShell.Calculator.setStyle = function(panel, calcInstance)
{
for (var calcName in TestShell.Calculator._calcMapping)
{
var calcCode = TestShell.Calculator._calcMapping[calcName];
YUD.removeClass(panel.element, calcCode);
}
var currentCalcCode = TestShell.Calculator.getCode(calcInstance.config.name);
if (currentCalcCode)
{
YUD.addClass(panel.element, currentCalcCode);
}
panel.refresh();
};
TestShell.Calculator.create = function(id, calcUrl)
{
var headerText = window.Messages.getAlt('TestShell.Label.Calculator', 'Calculator');
var panel = TDS.ToolManager.createPanel(id, 'calculator', headerText, null);
TDS.ToolManager.loadUrl(panel, calcUrl, function ()
{
YUD.addClass(panel.getFrame().contentDocument.body, 'client_' + TDS.clientStylePath);
var calcInstance = TestShell.Calculator.getInstance(id);
if (calcInstance && calcInstance.parent)
{
setTimeout(function()
{
TestShell.Calculator.setStyle(panel, calcInstance);
}, 0);
calcInstance.parent.CalcModeChange.subscribe(function(ev, arr)
{
var oldCalc = arr[0], newCalc = arr[1];
TestShell.Calculator.setStyle(panel, newCalc);
var panelX = panel.cfg.getProperty('x');
var panelY = panel.cfg.getProperty('y');
panel.moveTo(panelX, panelY);
});
}
});
panel.showEvent.subscribe(function()
{
var calcInstance = TestShell.Calculator.getInstance(id);
if (calcInstance)
{
calcInstance.clearFocus(calcInstance.config.keyboardRegionDivs);
setTimeout(function() { calcInstance.setInitKeyboardElement(); }, 1);
}
});
return panel;
};

// FILE: testshell_Validation.js (99894417) 7/22/2014 5:26:22 PM

TestShell.Validation = {};
TestShell.Validation.checkGrid = function(taskWorkflow)
{
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup && currentGroup.responses)
{
for (var i = 0; i < currentGroup.responses.length; i++)
{
var response = currentGroup.responses[i];
var item = response.getItem();
if (item && item.grid &&
item.responseType.toLowerCase() == 'grid')
{
if (item.grid.getState() != GridState.Loaded &&
item.grid.getState() != GridState.Error)
{
TestShell.Navigation.reset();
TestShell.UI.showWarning(Messages.get('TDSShellUIJS.Label.WaitForGridToLoad'));
taskWorkflow.cancel();
}
}
}
if (currentGroup.iframe)
{
var visitTime = (new Date() - currentGroup.iframe.timestamps.showDate);
if (visitTime < 500)
{
TestShell.Navigation.reset();
taskWorkflow.cancel();
}
}
}
};
TestShell.Validation.checkAudioPlaying = function(taskWorkflow) {
if (TDS.Audio.isActive()) {
if (TestShell.Config.allowSkipAudio) {
TDS.Audio.stopAll();
} else {
TestShell.Navigation.reset();
TestShell.UI.showWarning(ErrorCodes.get('NavigateAudioPlaying'));
taskWorkflow.cancel();
}
}
};
TestShell.Validation.checkAudioRecording = function(taskWorkflow) {
if (TDS.Audio.Recorder.isCapturing()) {
TestShell.UI.showWarning(ErrorCodes.get('SaveRecordingInProgress'));
taskWorkflow.cancel();
}
};
TestShell.Validation.checkDirtyResponses = function(taskWorkflow)
{
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup == null || currentGroup.responses == null) return;
for (var i = 0; i < currentGroup.responses.length; i++)
{
var response = currentGroup.responses[i];
var item = response.getItem();
if (item && !item.saveOptions.implicit && response.isDirty())
{
TestShell.UI.showWarningPrompt('NavigateUnsaved',
{
yes: function() { response.undo(); taskWorkflow.resume(); },
no: function() { TestShell.Navigation.reset(); taskWorkflow.cancel(); }
});
taskWorkflow.wait();
}
}
};
TestShell.Validation.checkRecorderQuality = function(taskWorkflow) {
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup == null || currentGroup.responses == null) return;
var response = currentGroup.responses[0];
var item = response.getItem();
if (item == null || item.recorder == null || response.isDirty() == false) return;
var quality = TDS.Audio.Recorder.retrieveQuality(item.recorder       );
if (YAHOO.lang.isString(quality) && quality.toUpperCase() != 'GOOD') {
TestShell.UI.showWarningPrompt('SaveRecordingQuality', {
yes: function() {
taskWorkflow.resume();
},
yesLabel: 'Global.Prompt.Button.KeepIt',
no: function() {
TestShell.Navigation.reset();
taskWorkflow.cancel();
},
noLabel: 'Global.Prompt.Button.TryAgain'
});
taskWorkflow.wait();
}
};
TestShell.Validation.checkSegment = function(taskWorkflow, result, transition)
{
var fromGroup = transition.from;
var toGroup = transition.to;
if (fromGroup == null || toGroup == null) return;
var fromSegment = fromGroup.getSegment();
var toSegment = toGroup.getSegment();
if (fromSegment == toSegment) return;
if (fromSegment && !fromSegment.isPermeable() && !fromSegment.isFinished())
{
TestShell.Navigation.reset();
taskWorkflow.cancel();
var msgImpermeableIncomplete = 'Segment is not permeable so all the questions must be completed before going to another segment.';
msgImpermeableIncomplete = Messages.getAlt('TestShell.Segment.ImpermeableIncomplete', msgImpermeableIncomplete);
TestShell.UI.showWarning(msgImpermeableIncomplete);
}
else if ((fromSegment && !fromSegment.isPermeable()) ||
(fromSegment && fromSegment.requireExitApproval()) ||
(toSegment && toSegment.requireEntryApproval()))
{
var msgLeaveWarning = 'You are leaving the current segment, are you sure you want to do this?';
msgLeaveWarning = Messages.getAlt('TestShell.Segment.LeaveWarning', msgLeaveWarning);
TestShell.UI.showWarningPrompt(msgLeaveWarning,
{
yes: function() { taskWorkflow.resume(); },
yesLabel: 'Yes',
no: function() { TestShell.Navigation.reset(); taskWorkflow.cancel(); },
noLabel: 'No'
});
taskWorkflow.wait();
}
};
TestShell.Validation.checkOptionalUnanswered = function(taskWorkflow)
{
if (TDS.isSIRVE) return;
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup == null || currentGroup.responses == null) return;
if (currentGroup.numRequired > 0) return;
var optionalUnansweredResponses = [];
for (var i = 0; i < currentGroup.responses.length; i++)
{
var response = currentGroup.responses[i];
if (response.isAnswered()) continue;
if (!response.isRequired) optionalUnansweredResponses.push(response);
}
if (optionalUnansweredResponses.length > 0)
{
var messageKey = 'OptionalUnansweredResponses';
var messageParam = optionalUnansweredResponses[0].position;
var messageText = ErrorCodes.get(messageKey, messageParam);
TestShell.UI.showErrorPrompt(messageText,
{
yes: function() { taskWorkflow.resume(); },
yesLabel: Messages.get('Global.Label.Yes'),
no: function() { TestShell.Navigation.reset(); taskWorkflow.cancel(); },
noLabel: Messages.get('Global.Label.No')
});
taskWorkflow.wait();
}
};
TestShell.Validation.checkSimulatorPlaying = function(taskWorkflow, result, errorMessage)
{
var currentGroup = TestShell.PageManager.getCurrent();
if (currentGroup == null || currentGroup.responses == null) return;
var response = currentGroup.responses[0];
var item = response.getItem();
if (item == null || item.simulator == null) return;
if (item.simulator.isPlaying())
{
errorMessage = errorMessage || 'SimulatorPlaying';
TestShell.UI.showWarning(ErrorCodes.get(errorMessage));
taskWorkflow.cancel();
}
};
TestShell.Validation.checkBlockPausing = function(taskWorkflow)
{
var page = TestShell.PageManager.getCurrent();
if (page == null) return;
var accs = TestShell.PageManager.getAccommodations(page);
if (accs == null || !accs.createProps().blockPausing()) return;
if (TestShell.PageManager.isCompleted(true, true)) return;
var validateStatus = function(status)
{
if (status == 5           )
{
taskWorkflow.resume();
}
else
{
TestShell.UI.showWarning(ErrorCodes.get('TestShell.Label.BlockPausing'));
taskWorkflow.cancel();
}
};
TestShell.xhrManager.getPauseStatus(validateStatus);
taskWorkflow.wait();
};
TestShell.Validation.checkIfPromptSelected = function(taskWorkflow) {
var page = TestShell.PageManager.getCurrent();
if (page == null) return;
if (page.isCompleted()) {
return;
}
var responses = page.responses;
if (responses == null || responses.length < 1) {
return;
}
var item = responses[0].getItem();
if ((item == null) ||  (item.responseType != "Prompt selection")) {
return;
}
for (var i = 0; i < responses.length; ++i) {
item = responses[i].getItem();
if (item.unit != null && item.unit.isSelected() == true) {
return;
}
}
TestShell.UI.showWarning(Messages.get('WritingNoPromptSelected'));
taskWorkflow.cancel();
};

// FILE: testshell_Print.js (52e1c936) 7/22/2014 5:26:22 PM

TestShell.Print = {};
TestShell.Print._getCallback = function()
{
var callback =
{
success: function(xhrObj)
{
TestShell.idleTimer.waitMins = TestShell.Config.requestInterfaceTimeout;
TestShell.idleTimer.reset();
},
failure: function(xhrObj)
{
TestShell.UI.showError(Messages.get('TDSShellUIJS.Label.PrintRequestFailed'));
},
timeout: 30000
};
return callback;
};
TestShell.Print._getAccommodations = function()
{
var page = ContentManager.getCurrentPage();
var accProps = page.getAccommodationProperties();
var printSize = page.getZoom().getCSS();
var fontType = accProps.getFontType();
var fontSize = accProps.getFontSize();
var parameters = [];
parameters.push('Print Size:' + printSize);
parameters.push('Font Type:' + fontType);
parameters.push('Font Size:' + fontSize);
return parameters.join(';');
};
TestShell.Print.getXhrUrl = function()
{
var urlBuilder = [];
urlBuilder.push(TDS.baseUrl);
urlBuilder.push('Pages/API/TestShell.axd/');
return urlBuilder.join('');
};
TestShell.Print.passage = function()
{
var url = this.getXhrUrl() + 'print?';
var group = TestShell.PageManager.getCurrent();
var urlParameters = [];
urlParameters.push('type=passage');
urlParameters.push('page=' + group.pageNum);
urlParameters.push('accommodations=' + this._getAccommodations());
url += urlParameters.join('&');
YUC.asyncRequest('POST', url, this._getCallback());
TestShell.UI.showAlert(Messages.get('TDSShellUIJS.Label.Notice'), Messages.get('Print'));
this.passageComplete(group);
};
TestShell.Print.item = function(position)
{
var url = this.getXhrUrl() + 'print?';
var group = TestShell.PageManager.getCurrent();
var response = group.getResponse(position);
var urlParameters = [];
urlParameters.push('type=item');
urlParameters.push('page=' + group.pageNum);
urlParameters.push('position=' + position);
urlParameters.push('accommodations=' + this._getAccommodations());
url += urlParameters.join('&');
YUC.asyncRequest('POST', url, this._getCallback());
TestShell.UI.showAlert(Messages.get('TDSShellUIJS.Label.Notice'), Messages.get('Print'));
if (response)
{
this.itemComplete(group, response);
}
};
TestShell.Print.passageComplete = function(group)
{
var contentPage = group.getContentPage();
if (contentPage.layout != 'WAI') return;
var pagePassage = contentPage.getPassage();
var passageElement = pagePassage.getElement();
var status = Util.Dom.getElementByClassName('status', 'div', passageElement);
if (status == null)
{
status = HTML.DIV({ className: 'status' });
status.setAttribute('role', 'status');
status.setAttribute('aria-atomic', 'false');
status.setAttribute('aria-relevant', 'additions text');
status.setAttribute('aria-live', 'assertive');
YUD.insertBefore(status, YUD.getFirstChild(passageElement));
}
status.innerHTML = 'Print request submitted';
};
TestShell.Print.itemComplete = function(group, response)
{
var contentPage = group.getContentPage();
if (contentPage.layout != 'WAI') return;
var item = response.getItem();
if (item == null) return;
var printLink = item.getPrintLink();
YUD.addClass(printLink, 'printSubmitted');
if (printLink)
{
setTimeout(function()
{
printLink.setAttribute('aria-label', 'This question has been submitted for printing.');
}, 0);
}
};

// FILE: testshell_Audit.js (1e5260f7) 7/22/2014 5:26:22 PM

TestShell.Audit =
{
_records: [],
_recordGroups: new Util.Structs.Map(),
_toolsUsed: []
};
TestShell.Audit.Record = function(id, event)
{
this.id = id;
this.event = event;
this.date = new Date();
};
TestShell.Audit.get = function(id)
{
var records = this._recordGroups.get(id);
return (records) ? records.slice(0) : null;
};
TestShell.Audit.getList = function()
{
return this._records;
};
TestShell.Audit.add = function(id, event)
{
var record = new TestShell.Audit.Record(id, event);
this._records.push(record);
var records = this._recordGroups.get(id);
if (records == null)
{
records = [];
this._recordGroups.set(id, records);
}
records.push(record);
};
TestShell.Audit.addToolUsage = function(page, accType, accCode)
{
var toolUsageToAdd = Util.Array.find(this._toolsUsed, function(toolUsage)
{
return (toolUsage.page == page &&
toolUsage.type == accType &&
toolUsage.code == accCode);
});
if (toolUsageToAdd)
{
toolUsageToAdd.count++;
}
else
{
toolUsageToAdd =
{
page: page,
type: accType,
code: accCode,
count: 1
};
this._toolsUsed.push(toolUsageToAdd);
}
};
TestShell.Audit.getToolsUsed = function() { return this._toolsUsed; };
TestShell.Audit.Latency = function()
{
this.itemPage = 0;
this.numItems = 0;
this.requestTime = 0;
this.loadAttempts = 0;
this.loadDate = null;
this.loadTime = 0;
this.createDate = null;
this.visitTime = 0;
this.visitCount = 0;
this.visitDate = null;
};
TestShell.Audit.Latency.prototype.toJson = function()
{
var json = [];
var properties = 0;
var addProperty = function(name, value, converter)
{
if (properties > 0) json.push(',');
json.push('"');
json.push(name);
json.push('":');
if (YAHOO.lang.isObject(value) && YAHOO.lang.isFunction(converter))
{
value = converter(value);
}
if (YAHOO.lang.isNull(value))
{
json.push('null');
}
else if (YAHOO.lang.isNumber(value))
{
json.push(value);
}
else
{
json.push('"');
json.push(value);
json.push('"');
}
properties++;
};
var dateToString = function(d)
{
return '\/Date(' + d.getTime() + ')\/';
};
json.push('{');
addProperty('itemPage', this.itemPage);
addProperty('numItems', this.numItems);
addProperty('requestTime', this.requestTime);
addProperty('loadAttempts', this.loadAttempts);
addProperty('loadDate', this.loadDate, dateToString);
addProperty('loadTime', this.loadTime);
addProperty('createDate', this.createDate, dateToString);
addProperty('visitCount', this.visitCount);
addProperty('visitDate', this.visitDate, dateToString);
addProperty('visitTime', this.visitTime);
json.push('}');
return json.join('');
};
TestShell.Audit.findEvent = function(id, event, minDate)
{
var records = TestShell.Audit.get(id);
if (records == null) return null;
records = records.reverse();
return Util.Array.find(records, function(record)
{
return (record.event == event && (minDate == null || record.date >= minDate));
});
};
TestShell.Audit.filterEvents = function(id, event)
{
var records = TestShell.Audit.get(id);
if (records == null) return [];
return Util.Array.filter(records, function(record) { return record.event == event; });
};
TestShell.Audit.aggregateEvents = function(id, event1, event2, fixEnd)
{
var records = TestShell.Audit.get(id);
if (records == null) return -1;
var total = 0;
var startRecord = null;
var endRecord = null;
Util.Array.each(records, function(record)
{
if (event1 == record.event)
{
startRecord = record;
endRecord = null;
}
if (event2 == record.event)
{
endRecord = record;
}
if (startRecord != null && endRecord != null)
{
total += (endRecord.date - startRecord.date);
startRecord = null;
endRecord = null;
}
});
if (fixEnd && startRecord != null && endRecord == null)
{
var now = new Date();
total += (now - startRecord.date);
}
return total;
};
TestShell.Audit.Latency.create = function(group)
{
var latency = new TestShell.Audit.Latency();
latency.itemPage = group.pageNum;
latency.numItems = group.responses.length;
var createRecord = TestShell.Audit.findEvent(group.id, 'content-requested');
if (createRecord == null) return null;
latency.createDate = createRecord.date;
var loadRecord = TestShell.Audit.findEvent(group.id, 'content-loaded', createRecord.date);
if (loadRecord != null) latency.loadDate = loadRecord.date;
var visitRecord = TestShell.Audit.findEvent(group.id, 'page-show');
if (visitRecord != null) latency.visitDate = visitRecord.date;
latency.requestTime = TestShell.Audit.aggregateEvents(group.id, 'page-requested', 'page-show');
latency.loadTime = TestShell.Audit.aggregateEvents(group.id, 'content-requested', 'content-loaded');
latency.visitTime = TestShell.Audit.aggregateEvents(group.id, 'page-show', 'page-hide', true);
latency.loadAttempts = TestShell.Audit.filterEvents(group.id, 'content-requested').length;
latency.visitCount = TestShell.Audit.filterEvents(group.id, 'page-show').length;
return latency;
};
TestShell.Audit.Latency.createCollection = function()
{
var latencies = [];
Util.Array.each(TestShell.PageManager.getGroups(), function(group)
{
var latency = null;
try { latency = TestShell.Audit.Latency.create(group); }
catch(ex)
{
Util.log('Latency error: ' + ex);
}
if (latency != null) latencies.push(latency);
});
return latencies;
};
TestShell.Audit.Latency.getJson = function()
{
var latencyCount = 0;
var latencies = TestShell.Audit.Latency.createCollection();
var json = [];
json.push('[');
Y.Array.each(latencies, function(latency)
{
if (latencyCount > 0) json.push(',');
json.push(latency.toJson());
latencyCount++;
});
json.push(']');
return json.join('');
};
TestShell.Audit.getJson = function()
{
var json = [];
json.push('{');
json.push('"latencies":');
json.push(TestShell.Audit.Latency.getJson());
json.push(',');
json.push('"toolsUsed":');
json.push(YAHOO.Lang.JSON.stringify(this._toolsUsed));
json.push('}');
return json.join('');
};
TestShell.ContentLoader._xhrManager.Events.subscribe('onSent', function(request)
{
TestShell.Audit.add(request.getId(), 'content-requested');
});
TestShell.ContentLoader._xhrManager.Events.subscribe('onSuccess', function(request)
{
TestShell.Audit.add(request.getId(), 'content-received');
});
TestShell.ContentLoader._xhrManager.Events.subscribe('onFailure', function(request)
{
TestShell.Audit.add(request.getId(), 'content-failed');
});
ContentManager.onPageEvent('init', function(contentPage)
{
TestShell.Audit.add(contentPage.id, 'content-init');
});
ContentManager.onPageEvent('rendering', function(contentPage)
{
TestShell.Audit.add(contentPage.id, 'content-rendering');
});
ContentManager.onPageEvent('rendered', function(contentPage)
{
TestShell.Audit.add(contentPage.id, 'content-rendered');
});
ContentManager.onPageEvent('available', function(contentPage)
{
TestShell.Audit.add(contentPage.id, 'content-available');
});
ContentManager.onPageEvent('loaded', function(contentPage)
{
TestShell.Audit.add(contentPage.id, 'content-loaded');
});
TestShell.PageManager.Events.subscribe('onShow', function(page)
{
TestShell.Audit.add(page.id, 'page-show');
});
TestShell.PageManager.Events.subscribe('onHide', function(page)
{
TestShell.Audit.add(page.id, 'page-hide');
});
TTS.Manager.Events.onStatusChange.subscribe(function(currentStatus)
{
if (currentStatus != TTS.Status.Playing) return;
var currentPage = ContentManager.getCurrentPage();
if (currentPage == null) return;
var page = TestShell.PageManager.get(currentPage.id);
if (page == null) return;
var currentEntity = currentPage.getActiveEntity();
if (currentEntity instanceof ContentPassage)
{
TestShell.Audit.addToolUsage(page.pageNum, 'TTS', 'TDS_TTS_Stim');
}
else if (currentEntity instanceof ContentItem)
{
TestShell.Audit.addToolUsage(page.pageNum, 'TTS', 'TDS_TTS_Item');
}
});

// FILE: testshell_Logging.js (a228996a) 7/22/2014 5:26:22 PM

(function(TestShell) {
function formatTime(d) {
var hour = d.getHours() % 12;
hour = Util.Date.xPad(hour === 0 ? 12 : hour, 0);
var time = hour + ':' +
Util.Date.xPad(d.getUTCMinutes(), 0) + ':' +
Util.Date.xPad(d.getUTCSeconds(), 0) + '.' +
Util.Date.xPad(d.getUTCMilliseconds(), 00);
return time;
}
function formatDate(dt) {
var formattedTime = formatTime(dt);
return dt.getUTCMonth() + '/' + dt.getUTCDate() + '/' + dt.getUTCFullYear()+ ' ' + formattedTime;
}
function getString(obj) {
if (obj == null) return '';
if (obj instanceof Date) return formatDate(obj);
return obj.toString();
}
function createTable(objArr) {
if (!YAHOO.lang.isArray(objArr)) return null;
if (objArr.length == 0) return null;
var columns = [];
var columnWidths = [];
for (var name in objArr[0]) {
columns.push(name);
columnWidths.push(name.length);
}
for (var i = 0; i < objArr.length; i++) {
var obj = objArr[i];
for (var j = 0; j < columns.length; j++) {
var columnName = columns[j];
var objValue = obj[columnName];
var objString = getString(objValue);
if (objString.length > columnWidths[j]) {
columnWidths[j] = objString.length;
}
}
}
var padding = 3;
var sb = [];
for (var i = 0; i < columns.length; i++) {
var columnName = columns[i];
var columnSize = columnName.length;
sb.push(columnName);
var columnWidthRemaining = (columnWidths[i] - columnSize) + padding;
for (var j = 0; j < columnWidthRemaining; j++) {
sb.push(' ');
}
}
sb.push('\n');
for (var i = 0; i < columns.length; i++) {
var columnName = columns[i];
var columnSize = columnName.length;
for (var j = 0; j < columnWidths[i]; j++) {
sb.push('-');
}
for (var j = 0; j < padding; j++) {
sb.push(' ');
}
}
sb.push('\n');
for (var i = 0; i < objArr.length; i++) {
var obj = objArr[i];
for (var j = 0; j < columns.length; j++) {
var columnName = columns[j];
var objValue = obj[columnName];
var objString = getString(objValue);
var columnSize = objString.length;
sb.push(objString);
var columnWidthRemaining = (columnWidths[j] - columnSize) + padding;
for (var k = 0; k < columnWidthRemaining; k++) {
sb.push(' ');
}
}
sb.push('\n');
}
return sb.join('');
}
function createReport(name, objArr) {
var sb = [];
sb.push('@' + name.toUpperCase() + ':\n\n');
var tableReport = createTable(objArr);
sb.push(tableReport);
sb.push('\n');
return sb.join('');
}
var consoleLog = console.log;
var consoleHistory = [];
var consoleMax = 20;
function enableConsoleHistory() {
console.log = function() {
consoleHistory.push(arguments);
if (consoleHistory.length > consoleMax) {
consoleHistory.slice();
}
consoleLog(Array.prototype.slice.call(arguments));
};
}
var responsesSent = [];
function trackResponsesSent(responses) {
if (!YAHOO.lang.isArray(responses)) return;
var now = formatDate(new Date());
for (var i = 0; i < responses.length; i++) {
var response = responses[i];
responsesSent.push({
date: now,
position: response.position,
sequence: response.sequence,
selected: response.isSelected,
valid: response.isValid,
length: (response.value != null) ? response.value.length : -1,
hash: (response.value != null) ? Util.String.hashCode(response.value) : -1
});
}
}
function enableResponseTracking() {
TestShell.ResponseManager.Events.onSend.subscribe(function(outgoingResponses) {
setTimeout(function() {
try {
trackResponsesSent(outgoingResponses);
} catch(ex) {
console.error(ex);
}
}, 0);
});
}
var contentReceived = [];
function trackItemReceived(itsItem)
{
var now = formatDate(new Date());
var debugItem = {
date: now,
id: itsItem.bankKey + '-' + itsItem.itemKey,
length: (itsItem.value != null) ? itsItem.value.length : -1,
hash: (itsItem.value != null) ? Util.String.hashCode(itsItem.value) : -1
};
contentReceived.push(debugItem);
}
function enableContentTracking() {
ContentManager.onItemEvent('init', function(page, item, itsItem) {
trackItemReceived(itsItem);
});
}
function getPages() {
var debugPages = [];
var pages = TestShell.PageManager.getPages();
for (var i = 0; i < pages.length; i++) {
var page = pages[i];
var debugPage = {
current: (page === TestShell.PageManager.getCurrent()),
page: page.pageNum,
id: page.id,
segment: null,
enabled: page.isEnabled(),
visible: page.isVisible(),
visited: page.isVisited(),
completed: page.isCompleted(),
items: null,
itemsAnswered: null,
itemsRequired: null,
groupRequired: null,
loaded: page.hasContent(),
layout: null,
passage: false,
coverPage: null
};
if (typeof page.getSegment == 'function') {
var segment = page.getSegment();
if (segment) {
debugPage.segment = segment.getId();
}
}
if (page instanceof TestShell.PageGroup) {
var groupInfo = page.getInfo();
debugPage.items = groupInfo.itemCount;
debugPage.itemsAnswered = groupInfo.itemsAnswered;
debugPage.itemsRequired = groupInfo.itemsRequired;
debugPage.groupRequired = groupInfo.groupRequired;
var coverPageInfo = page.getCoverPageInfo();
if (coverPageInfo) {
debugPage.coverPage = coverPageInfo.id;
}
}
if (page instanceof TestShell.PageContent) {
var contentPage = page.getContentPage();
if (contentPage) {
debugPage.layout = contentPage.layout;
debugPage.items = contentPage.getItems().length;
debugPage.passage = contentPage.getPassage() != null;
}
}
debugPages.push(debugPage);
}
return debugPages;
};
function getItems() {
var itemsDebug = [];
var pageGroups = TestShell.PageManager.getGroups();
for (var i = 0; i < pageGroups.length; i++) {
var page = pageGroups[i];
var responses = page.responses;
for (var j = 0; j < responses.length; j++) {
var response = responses[j];
var debugItem = {
page: page.pageNum,
position: response.position,
id: response.id,
prefetched: response.prefetched,
required: response.isRequired,
selected: response.isSelected,
valid: response.isValid,
sequence: response.sequence,
length: (response.value != null) ? response.value.length : -1,
hash: (response.value != null) ? Util.String.hashCode(response.value) : -1,
format: null,
responseType: null
};
var contentItem = response.getItem();
if (contentItem) {
debugItem.format = contentItem.format;
debugItem.responseType = contentItem.responseType;
}
itemsDebug.push(debugItem);
}
}
return itemsDebug;
}
function getPlugins() {
var pluginsInfo = [];
for (var i = 0; i < navigator.plugins.length; i++) {
var plugin = navigator.plugins[i];
pluginsInfo.push({
name: plugin.name,
version: plugin.version,
filename: plugin.filename
});
}
return pluginsInfo;
}
function createDebugReport() {
var sb = [];
var debugSegments = TestShell.SegmentManager.getDebug();
if (debugSegments.length > 0) {
sb.push(createReport('Segments', debugSegments));
}
var debugPages = getPages();
if (debugPages.length > 0) {
sb.push(createReport('Pages', debugPages));
}
var debugItems = getItems();
if (debugItems.length > 0) {
sb.push(createReport('Items', debugItems));
}
if (responsesSent.length > 0) {
sb.push(createReport('Responses Sent', responsesSent));
}
if (contentReceived.length > 0) {
sb.push(createReport('Content Received', contentReceived));
}
var auditRecords = TestShell.Audit.getList();
if (auditRecords.length > 0) {
sb.push(createReport('Pages Audit', auditRecords));
}
if (consoleHistory.length > 0) {
sb.push('@CONSOLE: \n\n');
for (var i = 0; i < consoleHistory.length; i++) {
sb.push(consoleHistory[i].toString() + '\n');
}
}
return sb.join('');
}
var Logging = {};
Logging.writeDebugReport = function() {
consoleLog(createDebugReport());
};
if (TestShell.Config.enableLogging) {
}
TestShell.Logging = Logging;
function enableLogShortcut() {
KeyManager.onKeyEvent.subscribe(function(keyObj) {
if (keyObj &&
keyObj.ctrlKey &&
keyObj.altKey &&
keyObj.shiftKey &&
keyObj.type == 'keyup' &&
keyObj.keyCode == 68) {
var details = createDebugReport();
TDS.Diagnostics.logServerError('TEST SHELL LOGS', details, true);
}
});
}
TestShell.Events.subscribe('init', function() {
if (TestShell.Config.enableLogging) {
console.info('TestShell logging is enabled');
enableLogShortcut();
enableContentTracking();
enableResponseTracking();
}
});
})(TestShell);

// FILE: testShell_SIRVE.js (d7b8f508) 7/22/2014 5:26:22 PM

TestShell.ResponseManager.Events.onSuccess.subscribe(function (results) {
function contains(arr, segmentPosition) {
for (var index = 0; index < arr.length; ++index) {
if (arr[index].position == segmentPosition)
return true;
}
return false;
};
function createTestSegment(segmentPosition, segmentId) {
var segment = {
id: segmentId,
position: segmentPosition,
label: segmentId,
itemReview: false,
isPermeable: true,
updatePermeable: false,
entryApproval: 0,
exitApproval: 0
};
return segment;
};
if (TDS.isSIRVE) {
var totalNumberOfItems = 0;
window.tdsSegments = [];
for (var groupIndex = 0; groupIndex < results.groups.length; ++groupIndex) {
var group = results.groups[groupIndex];
var segmentPosition = group.segment;
var segmentId = group.segmentID;
if (!contains(window.tdsSegments, segmentPosition))
window.tdsSegments.push(createTestSegment(segmentPosition, segmentId));
totalNumberOfItems += group.responses.length;
}
TestShell.Config.testLength = totalNumberOfItems;
TestShell.SegmentManager.init();
TestShell.PageManager.setCurrent(results.groups[0]);
}
});

// FILE: automute.js (dfb760cf) 7/22/2014 5:26:22 PM

(function (TS){
var Player = TDS.Audio.Player;
var Slideshow = window.slide;
function attemptPlay(){
subscribeEndAudio();
Util.log('unmuting...');
if(Util.SecureBrowser.unmute()){
TestShell.muted = false;
}
}
function engageAutomute(){
subscribePlayAudio();
doMute();
Util.log('Automute engaged');
}
function doMute()
{
unsubscribeEndAudio();
Util.log('muting...');
if(Util.SecureBrowser.mute()){
TestShell.muted = true;
}
}
function subscribePlayAudio(){
Player.onPlay.subscribe(attemptPlay);
Slideshow.onPlay.subscribe(attemptPlay);
}
function subscribeEndAudio(){
Player.onIdle.subscribe(doMute);
Player.onFail.subscribe(doMute);
Slideshow.onIdle.subscribe(doMute);
}
function unsubscribeEndAudio(){
Player.onIdle.unsubscribe(doMute);
Player.onFail.unsubscribe(doMute);
Slideshow.onIdle.unsubscribe(doMute);
}
function automute_init(){
var accProps = TDS.getAccommodationProperties();
if(accProps && accProps.isAutoMute()) {
engageAutomute();
}
}
TS.Events.subscribe('init', automute_init);
})(TestShell);

// FILE: fullscreen.js (0c825621) 7/22/2014 5:26:22 PM

(function (TS) {
var CSS_ENABLED = 'fs-enabled';
function getPassword() {
var info = $('.studentInfo').text();
if (info) {
return info.split(',')[1].split('(')[0].trim();
}
return '';
}
function showPasswordDialog() {
var msgRequest = Messages.get('TestShell.Fullscreen.PasswordRequest');
TDS.Dialog.showInput(msgRequest, function (text) {
if (text.toLowerCase() == getPassword().toLowerCase()) {
YUD.removeClass(document.body, CSS_ENABLED);
} else {
var msgDenied = Messages.get('TestShell.Fullscreen.PasswordDenied');
TDS.Dialog.showAlert(msgDenied);
}
});
}
function isEnabled() {
return YUD.hasClass(document.body, CSS_ENABLED);
}
function enable() {
YUD.addClass(document.body, CSS_ENABLED);
}
function disable() {
var accProps = TDS.getAccommodationProperties();
if (accProps && accProps.hasFullScreenPassword()) {
showPasswordDialog();
} else {
YUD.removeClass(document.body, CSS_ENABLED);
}
}
function toggle() {
if (isEnabled()) {
disable();
} else {
enable();
}
}
function init() {
var accProps = TDS.getAccommodationProperties();
if (accProps && accProps.hasFullScreenEnabled()) {
TestShell.UI.addButtonControl('btnFullScreen', 'Full Screen', 'fullscreen', toggle);
if (accProps.hasFullScreenPassword()) {
enable();
}
}
}
TS.Events.subscribe('init', init);
})(TestShell);

// FILE: masking.js (dff6702e) 7/22/2014 5:26:22 PM

(function (TS) {
if (window.TDS && !window.TDS.Mask) {
return;
}
var CSS_ENABLED = 'msk-enabled';
function isEnabled() {
return YUD.hasClass(document.body, CSS_ENABLED);
}
function enable() {
YUD.addClass(document.body, CSS_ENABLED);
}
function disable() {
YUD.removeClass(document.body, CSS_ENABLED);
}
function toggle() {
if (isEnabled()) {
disable();
} else {
enable();
}
TDS.Mask.toggle();
}
function init() {
var accProps = TDS.getAccommodationProperties();
if (accProps && accProps.hasMaskingEnabled()) {
TestShell.UI.addButtonTool('btnMask', 'Masking', 'maskingtool', toggle);
} else {
console.warn("Masking not enabled.");
return;
}
ContentManager.onPageEvent('hide', function() {
if (isEnabled()) {
disable();
}
});
}
TS.Events.subscribe('init', init);
})(TestShell);

// FILE: comments.js (e3245ac4) 3/7/2014 11:24:06 AM

TestShell.Comments =
{
_overlayManager: new YAHOO.widget.OverlayManager(),
_itemComments: null,
_globalComments: null
};
TestShell.Comments.init = function() {
this._itemComments = new TestShell.Comments.Item();
this._itemComments.render();
this._globalComments = new TestShell.Comments.Global();
this._globalComments.render();
};
TestShell.Comments.showItem = function(obj) {
this._itemComments.show(obj);
};
TestShell.Comments.showGlobal = function() {
this._globalComments.show();
};
TestShell.Comments.hide = function() {
this._itemComments.hide();
this._globalComments.hide();
};
TestShell.Comments.isShowing = function() {
return this._itemComments.isShowing() ||
this._globalComments.isShowing();
};

// FILE: base.js (f4d913a6) 3/7/2014 11:24:06 AM

TestShell.Comments.Base = function () {
this._dialog = null;
};
TestShell.Comments.Base.Type = {
None: 0,
DropDown: 1,
TextArea: 2
};
TestShell.Comments.Base.prototype.getId = function() {
return 'comment';
};
TestShell.Comments.Base.prototype.getElement = function() {
var commentId = this.getId();
return YUD.get(commentId);
};
TestShell.Comments.Base.prototype.getHeaderEl = function() {
var commentContainer = this.getElement();
return Util.Dom.getElementByClassName('comment-header', 'div', commentContainer);
};
TestShell.Comments.Base.prototype.getHeaderText = function() {
return '';
};
TestShell.Comments.Base.prototype.getBodyEl = function() {
var commentContainer = this.getElement();
return Util.Dom.getElementByClassName('comment-body', 'div', commentContainer);
};
TestShell.Comments.Base.prototype.getFormEl = function() {
var commentContainer = this.getElement();
return Util.Dom.getElementByClassName('comment-form', 'form', commentContainer);
};
TestShell.Comments.Base.prototype.getInputEl = function() {
var commentContainer = this.getElement();
return Util.Dom.getElementByClassName('comment-input', null, commentContainer);
};
TestShell.Comments.Base.prototype.getInputValue = function() {
var inputEl = this.getInputEl();
return (inputEl != null) ? inputEl.value : null;
};
TestShell.Comments.Base.prototype.render = function() {
var commentContainer = this.getElement();
if (commentContainer != null) return;
var dialog = new YAHOO.widget.SimpleDialog(this.getId(), {
visible: false,
draggable: false,
modal: true,
close: false,
fixedcenter: true,
width: '450px',
height: '150px',
zindex: 999,
postmethod: 'none',
autofillheight: false
});
this._dialog = dialog;
TestShell.Comments._overlayManager.register(dialog);
dialog.setHeader(this.getHeaderText());
var buttons = [
{ text: Messages.get('Cancel'), handler: { fn: this.hide, scope: this} },
{ text: Messages.get('Submit and Close'), handler: { fn: this.submit, scope: this }, isDefault: true }
];
dialog.cfg.queueProperty("buttons", buttons);
dialog.beforeShowEvent.subscribe(this._onBeforeShow, this, true);
dialog.showEvent.subscribe(this._onShow, this, true);
dialog.hideEvent.subscribe(this._onHide, this, true);
var commentsEl = YUD.get('comments');
dialog.render(commentsEl);
YUD.addClass(dialog.innerElement, 'comment');
YUD.addClass(dialog.header, 'comment-header');
YUD.addClass(dialog.body, 'comment-body');
YUD.addClass(dialog.form, 'comment-form');
var input = this._createInput();
if (input != null) {
dialog.form.appendChild(input);
}
};
TestShell.Comments.Base.prototype.getType = function() {
return TestShell.Comments.Base.Type.None;
};
TestShell.Comments.Base.prototype._createInput = function() {
var input = null;
var commentType = this.getType();
if (commentType == TestShell.Comments.Base.Type.DropDown) {
input = this._createDropDown();
}
else if (commentType == TestShell.Comments.Base.Type.TextArea) {
input = this._createTextArea();
} else {
console.warn('There is no student comment accommodation code found.');
}
return input;
};
TestShell.Comments.Base.prototype._createTextArea = function()
{
var textarea = HTML.TEXTAREA({
className: 'comment-input comment-textbox',
rows: '4',
cols: '',
style: 'resize: none;'
});
return textarea;
};
TestShell.Comments.Base.prototype._createDropDown = function()
{
var selectbox = HTML.SELECT({
className: 'comment-input comment-selectbox'
});
if (TDS.Comments) {
Util.Array.each(TDS.Comments, function(commentLine) {
var option = HTML.OPTION();
option.text = commentLine;
option.value = commentLine;
selectbox.appendChild(option);
});
}
return selectbox;
};
TestShell.Comments.Base.prototype.getModelValue = function() {
return null;
};
TestShell.Comments.Base.prototype._onBeforeShow = function()
{
var inputEl = this.getInputEl();
if (inputEl == null) return;
var value = this.getModelValue();
if (value == null || value == '') {
if (inputEl.nodeName == 'SELECT') inputEl.selectedIndex = 0;
else inputEl.value = '';
} else {
inputEl.value = value;
}
ContentManager.resetActiveComponent();
this._dialog.fillHeight(this._dialog.body);
};
TestShell.Comments.Base.prototype._onShow = function()
{
YUD.addClass(document.body, TestShell.UI.CSS.dialogShowing);
if (!Util.Browser.isTouchDevice()) {
var inputEl = this.getInputEl();
if (inputEl != null) {
setTimeout(function() { inputEl.focus(); }, 0);
}
}
};
TestShell.Comments.Base.prototype._onHide = function()
{
YUD.removeClass(document.body, TestShell.UI.CSS.dialogShowing);
Util.Dom.focusWindow(2);
};
TestShell.Comments.Base.prototype.show = function() {
this._dialog.show();
};
TestShell.Comments.Base.prototype.hide = function() {
if (this._dialog) this._dialog.hide();
};
TestShell.Comments.Base.prototype.isShowing = function() {
return (this._dialog) ? this._dialog.cfg.getProperty('visible') : false;
};
TestShell.Comments.Base.prototype.submit = function()
{
var text = this.getInputValue();
if (text != null) {
this.save(text);
}
this.hide();
};
TestShell.Comments.Base.prototype.save = function(text) {
};

// FILE: item.js (a8471eb3) 5/2/2014 12:55:57 PM

TestShell.Comments.Item = function() {
TestShell.Comments.Item.superclass.constructor.call(this);
this._response = null;
};
YAHOO.lang.extend(TestShell.Comments.Item, TestShell.Comments.Base);
TestShell.Comments.Item.prototype.getHeaderText = function() {
return ContentManager.getCommentLabel();
};
TestShell.Comments.Item.prototype.getType = function() {
var commentCode = ContentManager.getCommentCode();
if (commentCode != null)
{
if (commentCode == 'TDS_SCDropDown') {
return TestShell.Comments.Base.Type.DropDown;
}
else if (commentCode == 'TDS_SCTextArea' || commentCode == 'TDS_SCNotepad') {
return TestShell.Comments.Base.Type.TextArea;
}
}
return TestShell.Comments.Base.Type.None;
};
TestShell.Comments.Item.prototype.show = function(contentItem) {
this._response = TestShell.PageManager.getResponse(contentItem.position);
TestShell.Comments.Item.superclass.show.call(this);
};
TestShell.Comments.Item.prototype.hide = function() {
this._response = null;
TestShell.Comments.Item.superclass.hide.call(this);
};
TestShell.Comments.Item.prototype.getModelValue = function() {
return this._response.comment;
};
TestShell.Comments.Item.prototype.save = function(text)
{
var response = this._response;
if (response.comment == text) return;
TestShell.UI.showLoading('');
var commentData = {
position: response.position,
comment: text
};
if (typeof TDS.Student == 'object') {
var testee = TDS.Student.Storage.getTestee();
if (testee) {
commentData.testeeKey = testee.key;
commentData.testeeToken = testee.token;
}
}
TestShell.xhrManager.recordItemComment(commentData, function() {
TestShell.UI.hideLoading();
response.comment = text;
});
};

// FILE: global.js (4508ecbb) 5/2/2014 12:55:57 PM

TestShell.Comments.Global = function() {
TestShell.Comments.Global.superclass.constructor.call(this);
this._loaded = false;
this._text = null;
};
YAHOO.lang.extend(TestShell.Comments.Global, TestShell.Comments.Base);
TestShell.Comments.Global.prototype.getId = function() {
return 'global';
};
TestShell.Comments.Global.prototype.getHeaderText = function() {
return Messages.getAlt('TestShell.Comments.Global', 'Global Notes');
};
TestShell.Comments.Global.prototype.getType = function() {
return TestShell.Comments.Base.Type.TextArea;
};
TestShell.Comments.Global.prototype.getModelValue = function() {
return this._text;
};
TestShell.Comments.Global.prototype.show = function() {
var commentObj = this;
if (this._loaded) {
TestShell.Comments.Global.superclass.show.call(commentObj);
} else {
TestShell.UI.showLoading();
TestShell.xhrManager.getOppComment(function(text) {
TestShell.UI.hideLoading();
commentObj._loaded = true;
commentObj._text = text;
TestShell.Comments.Global.superclass.show.call(commentObj);
});
}
};
TestShell.Comments.Global.prototype.save = function(text)
{
if (this._text == text) return;
TestShell.UI.showLoading('');
var commentData = {
comment: text
};
if (typeof TDS.Student == 'object') {
var testee = TDS.Student.Storage.getTestee();
if (testee) {
commentData.testeeKey = testee.key;
commentData.testeeToken = testee.token;
}
}
var commentObj = this;
TestShell.xhrManager.recordOppComment(commentData, function() {
TestShell.UI.hideLoading();
commentObj._text = text;
});
};

// FILE: module.js (c3431cea) 5/2/2014 12:55:57 PM

(function (CM, TS) {
CM.onItemEvent('comment', function (page, item) {
TS.Comments.showItem(item);
});
CM.onPageEvent('beforeHide', function () {
TestShell.Comments.hide();
});
function load() {
TS.Comments.init();
TS.UI.addClick('btnGlobalNotes', function() {
TS.Comments.showGlobal();
});
}
TS.Events.subscribe('init', load);
})(ContentManager, TestShell);

